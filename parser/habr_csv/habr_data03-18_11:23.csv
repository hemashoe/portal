post_id'post_id'title'description'source_link'body'image'images
0'649015'Математическая продлёнка. Мир треугольников'Нам то и дело приходится выступать в роли наставников. Иногда это профессия, иногда помощь своим детям, учащимся в школе или университете, а бывает так, что желание поделиться чем-то красивым с...'https://habr.com/ru/post/649015/'"Нам то и дело приходится выступать в роли наставников. Иногда это профессия, иногда помощь своим детям, учащимся в школе или университете, а бывает так, что желание поделиться чем-то красивым с неофитами может перерасти в призвание. В любом из этих случаев нам нужны хорошие примеры. Как ведущий кружка математики для школьников средних и старших классов, я жаден до глубоких и, вместе с тем, простых для понимания примеров, дающих ключики к важным математическим концепциям. Яков Перельман уже весь в оперативке, Мартин Гарднер — тоже. Слава богу, в наше время появились великолепные Youtube-каналы (Mathologer, Numberfile, 3Blue1Brown, Aleph0, а также авторские каналы сильнейших математиков нашего времени), но отыскивать новые интересные задачи-исследования, доставляет такую радость, что грех этим не поделиться.

В этой серии заметок я привожу примеры таких маленьких учебных исследований. Их цель не «открыть новый взгляд» или не «потрясти основы», а показать привычные «школьные» математические концепции с несколько непривычных позиций, так, чтобы они, с одной стороны, стали интереснее и глубже, а с другой, чтобы с их помощью познакомить школьников, уже увлечённых математикой, с некоторым повседневным инструментарием профессионалов.

Сегодня речь пойдёт о треугольниках, о пространствах, о треугольных координатах, о симметрии и совсем немножко о мере на множестве. Основной же темой рассказа будет факторизация множеств и пространств. Мы построим и исследуем пространство треугольников. Оно очень простое, но последовательно изучить его, полезно, поскольку если кто‑либо из ребят выберет себе путь в жизни, связанный с математикой или физикой, то ему придётся иметь дело с пространствами куда более сложными и трудно представимыми. Так что хорошо бы приобрести кое‑какую интуицию, оперируя чем‑нибудь простым.

Как-то на занятии в маткружке ученица Ася сказала, что ей кажется, что равнобедренных треугольников, в каком-то смысле, меньше, чем других, но она не может точно сказать, что бы это значило. Я задумался о том, как можно было бы порассуждать на эту тему осмысленно и с пользой, и после перемены мы все вместе принялись рисовать карту мира треугольников. Потом, оказавшись дома, я стал искать материал по этой теме и наткнулся на статью Иэна Стюарта Why Do All Triangles Form a Triangle?, опубликованную в 2017 году в ежемесячнике The American Mathematical Monthly.

Стьюарт хорошо известен любителям и профессионалам математикам своими математическими очерками в Scientific American, популярными книгами «Значимые фигуры. Жизнь и открытия великих математиков», «Случайный бог или божественная случайность», «Укрощение бесконечности», а также соавторством в серии книг о Флатландии. В статье, посвящённой треугольникам, Стюарт приводит результат, подобный тому, что получили мы с ребятами на уроке. Так что на следующем занятии мы не просто вернулись к исходному вопросу, но и посмотрели на то, как на него отвечают математики-профессионалы, познакомились с привычными для них, но новыми для школьников понятиями, которые используются в статье.

Треугольники образуют множество, которое можно разделить на отдельные подмножества, используя такие характеристики, как «прямоугольные», «остроугольные», «равнобедренные» и так далее. На странице англоязычной Википедии приводится исчерпывающая диаграмма, показывающая на языке множеств, какими бывают треугольники и как соотносятся между собой их подмножества:

Различные разбиения множества треугольников на подмножества.

Эта диаграмма по‑своему остроумна, как минимум тем, что подмножества треугольников представлены их характерными элементами. Но она, к сожалению, не только не позволяет ответить на поставленный вопрос, но и сбивает с толку, давая качественно неверное представление о том, как именно классифицируется множество треугольников. Впрочем, эта диаграмма выжимает максимум из понятия «множество», которое уже знакомо школьникам. На большее этот «мешок с объектами» не способен, и для полноценной работы с мысленными моделями мира, которыми оперирует математика, этого уже недостаточно.

От множества переходим к фактормножеству

Понятие «множество» даётся как одно из фундаментальных понятий, но оно, само по себе, такое общее, что школьники с трудом могут объяснить зачем оно им нужно, и что с помощью множеств можно сделать такого, чего было бы невозможно без них. Разделив множество треугольников на подмножества, мы, конечно, кое‑что поняли, и лучше разобрались в том, как они соотносятся друг с другом с точки зрения отношения «включения», но нам хотелось более точного понимания структуры множества треугольников. Для этого нам нужны отношения между элементами множества. И самым главным в сегодняшнем рассказе будет отношение эквивалентности.

Обратим внимание вот на какое обстоятельство: Треугольники могут не только отличаться друг от друга, но и быть одинаковыми.

Вспомните признаки равенства треугольников, согласно им, два треугольника, не зависимо от того как они расположены в пространстве, при определённых условиях, могут считаться одинаковыми. У них будут равные площади, периметры, особые линии (медианы, высоты и т.п.), а при наложении одного треугольника на другой, совпадут все их точки, так что эти две фигуры станут неразличимы. Такое отношение называется конгруэнтностью.

Это наблюдение позволяет нам говорить не о всех треугольниках на свете, а о более абстрактном множестве уникальных треугольников, в котором нет двух конгруэнтных фигур. Каждому элементу из него соответствуют все равные ему треугольники, как бы они ни были расположены или повёрнуты в том геометрическом мире, в котором они могут появиться. В евклидовом пространстве все точки конкретного треугольника принадлежат одной плоскости, а это значит, что среди любых треугольников, нарисованных ли в тетрадке, висящих ли в пространстве, неважно, трёхмерном или десятимерном, есть конгруэнтные и неконгруэнтные. Поскольку можно движением совместить как плоскости, в которых лежат треугольники, так и сами фигуры.

Итак, коль скоро «место обитания треугольников» нас не интересует, мы можем «вынести его за скобки». Такой мысленный приём называется факторизацией. Для факторизации нужно определить какое-то отношение эквивалентности, то есть способ показать, что некие два элемента в каком-то смысле, равны, неразличимы. После этого, мы можем слить все одинаковые элементы в один новый объект, который называется классом. Отношение эквивалентности позволяет разделить все множество на классы так, чтобы у них не было перекрытий и не оставалось лишних элементов. То есть, чтобы каждый элемент множества оказался ровно в одном классе. Факторизацию можно представить так: «раскладываем» все одинаковые треугольников «по стопкам», после чего, из каждой стопки берём только по одному образцу. Множество таких образцов будет называться фактормножеством.

Для того, чтобы любой элемент из класса имел полномочия образца, необходимо, чтобы отношение эквивалентности было организовано правильно. В частности, важно, чтобы эквивалентность «передавалась» по цепочке. То есть, из того, что эквивалентно и эквивалентно должно следовать, что эквивалентно Это не просто формальное занудство. Вот пара примеров отношений, похожих на равенство, но не являющихся эквивалентностью: для числовых величин — «примерно равно» или «равно с точностью до 1%», для геометрических фигур — «касаться» или «пересекаться».

Легко убедиться в том, что конгруэнтность это хорошее отношение, которое вполне годится для разбиения множества фигур на классы эквивалентности.

Факторизация множества треугольников отношением конгруэнтности.

Итак, всё мыслимое разнообразие треугольников, которое можно нарисовать на доске, в тетрадке или даже расположить в каком-либо объёме, мы факторизовали с помощью отношения равенства и сосредоточились на фактормножестве уникальных, неравных между собой треугольников. Если мы обозначим множество треугольников буквой , то множество, факторизованное отношением конгруэнтности будет обозначаться так

От фактормножества переходим к пространству

Треугольники могут быть не только равны или не равны, но и похожи друг на друга. Причём, похожи они бывают настолько, что становятся практически неотличимыми. Можно говорить о почти равностороннем треугольнике или почти прямоугольном, имея в виду, что отличие от истинно равностороннего и прямоугольного, в каком-то смысле, незначительно. Для любого треугольника можно рассмотреть целое множество треугольников «похожих на него», мысленно окружив его своеобразным «облаком» почти‑двойников.

Отношение эквивалентности позволяет нам разбивать множество на классы и выявлять некую внутреннюю структуру множества. Как мы уже упоминали, отношение «примерно равно» не является эквивалентностью. Однако с его помощью мы можем построить систему открытых подмножеств (тех самых «облаков» похожих друг на друга элементов), такую, что их пересечения и объединения тоже будут формировать открытые подмножества, способные покрыть всё множество треугольников.

Это обстоятельство позволяет нам говорить о множестве треугольников, как о топологическом пространстве, каждый элемент (точка) которого соответствует какому-то уникальному треугольнику. От простого множества пространство отличается тем, что для него определена топология — формальная система открытых подмножеств, замкнутая относительно объединения и пересечения.

Нам сейчас нет необходимости влезать в формальную сторону топологии, оставим это до университетского курса. Важно почувствовать, какой смысл мы вкладываем в это слово «пространство». Это множество объектов, позволяющее нам рассуждать о таких его характеристиках, как размерность, связность, непрерывность, рассматривать подпространства (аналоги подмножеств), области и их границы, строить пути между точками и даже говорить о дырках. Евклидово геометрическое пространство, в котором мы обычно строим треугольники на уроках в школе, это тоже пример топологического пространства, но оснащённого дополнительными свойствами, позволяющими рассуждать о расстояниях между точками и углах между прямыми.

Говоря о пространстве вне математики, мы обычно имеем в виду некое вместилище объектов, или пустую сцену, на которой они размещаются. И в рамках школьного курса, когда мы рассуждаем о геометрии, простейшие элементы пространства, которые мы называем точками, как‑то размещаются в нём и образуют множества с точно определёнными свойствами, которые мы называем геометрическими фигурами. Исследуем мы при этом фигуры, а само по себе пространство пусто, и единственное, что мы от него требуем, это возможности рассуждать о таких отношениях между точками и фигурами как «внутри‑снаружи», «близко‑далеко», «выше‑ниже» и т. п.

Треугольники, о которых идёт речь в этой заметке, это фигуры, определённые в каком‑то геометрическом пространстве. Но последнее мы «вынесли за скобку» при факторизации. Что же мы имеем в виду, говоря о «пространстве треугольников» ? Оно не имеет никакого отношения к тому, где располагаются сами треугольники. Это пространство не часть плоскости, или какой-то поверхности, а самостоятельный математический объект. Каждая точка в этом пространстве соответствует какому-то треугольнику.

Меняем лексику, переходя от множества к пространству.

Определяем размерность пространства треугольников

Одна из самых главных характеристик топологического пространства — его размерность. Точное определение топологической размерности мы, опять же, оставим до университетского курса, и постараемся определить какова размерность пространства треугольников, исходя из самых общих соображений.

Можно ли нарисовать и увидеть математически идеальную линию, не имеющую ширины? А точку, которая, согласно определению Евклида, не имеет ни ширины, ни длины, и никаких составных частей? Вполне!

Наш глаз видит области и их границы. Линия — это граница области, а точка — это граница линии. Мы прекрасно видим как одна область граничит с другой, мы видим эту границу, но она не имеет ширины. В принципе не имеет! Как ни увеличивай участок границы, хоть до пикселей, хоть до фотонов, мы сможем сказать: «Вот одна область, а вот другая, а то что между ними — граница». И точки, абстрактные, математически точные, мы тоже в состоянии и изобразить и увидеть. Это ""места"", в которых встречаются границы трёх областей или в которых нарушается гладкость линии.

Идеальные лини и точки, как границы подпространств.

Визуализировать пространство мы пока не в состоянии, однако мы можем определить его размерность умозрительно, так сказать, «наощупь». От понятия размерности нам потребуется только свойство, которое очень легко проиллюстрировать в окружающем нас мире:

Размерность области на единицу больше размерности её границы.

Давайте ещё раз перечислим классы треугольников и топологические отношения между ними, то есть, отношения подпространство/граница:

Здесь картинками условно показаны классы треугольников.

Выпишем теперь все соотношения между размерностями подпространств, соответствующих классам треугольников, выразив их через неизвестную размерность всего пространства треугольников :

Редко когда топологии строятся или изобретаются с нуля. Один из самых распространенных на практике способов состоит в том, чтобы взять какую-то готовую, хорошо известную топологию, и построить непрерывное отображение из неё в новую. Такое отображение можно представить себе, как словарь или как рецепт, следуя которому можно по точкам одного пространства построить точки другого, причём, так, чтобы окрестности исходной точки превращались в окрестность результата отображения.

Самый привычный для нас и полезный пример хорошо изученной топологии — та, что из множества чисел строит вещественную числовую прямую. На ней хорошо определены и, главное, интуитивно понятны такие вещи, как интервал (открытый и закрытый); окрестность точки; существование непрерывного пути, соединяющего одну точку с другой, и проходящего через бесконечное множество промежуточных точек.

Аналогом этой конструкции в физической реальности можно считать ручку плавной настройки громкости или яркости. Между тремя абсолютно разными объектами и понятиями: 1) положениями ручки, 2) физическим уровнем громкости и 3) неким числом, есть прямая и понятная связь, которая и отражает то, что мы назвали непрерывным отображением. Они все имеют сходную топологию и образуют одинаковое топологическое пространство размерности 1, которое математически описывается закрытым интервалом или отрезком.

Давайте применим это соображение к объекту нашего исследования. Одна из очевидных «ручек» для настройки треугольников это их масштаб, который естественно выражается вещественным числом.

В этой картинке целых пять пространств с эквивалентными топологиями: 1) вещественные числа, 2) точки на вещественной прямой, 3) повороты ""ручки"", 4) масштаб треугольников и 5) время.

Это значит, что все равносторонние треугольники, не равные друг другу, отличаются только масштабом, и образуют одномерное подпространство. Отсюда мы можем вывести размерности всех прочих подпространств, и прийти к выводу, что размерность пространства треугольников, факторизованного отношением конгруэнтности равна трём.

Какой смысл говорить о трёхмерности абстрактного и невидимого пока пространства ? Вспомним классические признаки равенства треугольников. Во всех этих признаках фигурируют какие-нибудь три числовых характеристики фигуры:

● сторона, сторона, угол;

● сторона, угол, угол;

● сторона, сторона, сторона;

● сторона, угол, площадь;

● площадь, угол, периметр.

Каждую из этих характеристик можно топологически представить интервалом («ручкой»). При этом хотя бы одна из этих характеристик должна задавать масштаб или размер треугольника. Как правило, в роли этой характеристики выступает сторона, но её роль может сыграть периметр, площадь или скажем, среднее геометрическое сторон треугольника.

Говоря об этих параметрах, можно вспомнить ещё один термин, помогающий характеризовать размерность пространства: количество степеней свободы, или количество числовых параметров, однозначно определяющих точку пространства. У произвольного треугольника три степени свободы — мы их перечислили. У равнобедренного — две, ими могут быть, например, длина основания и угол при вершине. У прямоугольного треугольника тоже две степени свободы: пара катетов, гипотенуза и один из углов... Наконец, равносторонний и равнобедренный прямоугольные треугольники имеют лишь одну степень свободы — масштаб.

Если параметризовать треугольники тремя сторонами, то можно получить три независимые оси, задающие ""координаты"", позволяющие вложить пространство треугольников в привычное нам трёхмерное евклидово пространство. Дальше можно попытаться как-то визуализировать подпространства остроугольных и тупоугольных треугольников и их границы, но это существенно отвлечёт нас от основной темы (топологические пространства и факторизация) и потребует экскурса в элементы линейной алгебры, конических сечений, или элементов проективной геометрии.

К тому же, живя в трёхмерном мире, по-настоящему видеть его мы не можем. Наши глаза способны выделять двумерные границы трёхмерных подпространств, а также их границы: линии и точки. Так что показывать и анализировать существенно трёхмерные объекты без привлечения анимации непросто. Мы избавимся от трёхмерности пространства избрав вместо конгруэнтности другое отношение эквивалентности — подобие.

Классификация треугольников (правильный, равнобедренный, прямоугольный и т.д.) не зависит от их масштаба. Таким образом, если одной из «ручек», использованных нами для построения трёхмерного пространства треугольников, будет их линейный масштаб, то при вращении этой ручки, структура пространства, то есть число областей, их границ, и то как они граничат друг с другом, изменяться не будет. Получается, что одно измерение у нас «лишнее» и не несёт информации о структуре пространства. Если мы сочтём неразличимыми все подобные треугольники, то про их размеры можно будет забыть, и сосредоточиться только на форме. При этом точкой в факторпространстве, построенном с помощью отношению подобия, будут совокупности всех подобных друг другу треугольников.

Это пространство двумерно. Поскольку все равносторонние треугольники подобны, они факторизуются в единственную точку нулевой размерности. Пересчёт размерностей покажет, что равнобедренные и прямоугольные треугольники образуют одномерные подпространства, ограничивающие двумерные области остроугольных и тупоугольных треугольников.

Треугольные координаты

Двумя параметрами, характеризующими треугольник и весь класс подобных ему, могут быть либо пара отношений сторон, либо пара углов, либо пара из отношения сторон и угла. Углы мне нравятся больше всего, во-первых, тем, что диапазон их изменений конечен, а во-вторых, чудесным свойством давать для любого треугольника в сумме 180°. Можно было бы использовать эти два угла, как обычные прямоугольные координаты для нашей карты, или даже как угловые координаты на сфере, построив шикарный глобус треугольного мира, но коль скоро речь зашла о треугольниках, я решил показать ребятам необычные, но очень подходящие треугольные координаты.

Есть у равностороннего треугольника одна интересная особенность. Выберем произвольную точку внутри него и проведём три луча, параллельных сторонам треугольника, как показано на рисунке. Границы треугольника отсекают на этих лучах три отрезка. Так вот, сумма длин этих отрезков всегда равна длине стороны треугольника. Доказывается это утверждение без слов, в духе древних: «Смотри!», достаточно отметить на чертеже отрезки равные между собой из соображений параллельности, чтобы убедиться в его справедливости.

Эта теорема превращает треугольник в любопытный и полезный инструмент. Если мы разметим стороны треугольника одинаковыми линейными шкалами (они условно показаны стрелочками), то у любой точки в треугольнике появятся координаты. Причём, сумма этих координат всегда постоянна и равна максимальной отметке шкалы. Построенная таким образом диаграмма может быть полезна для изображения и анализа трёхкомпонентных смесей. Доли компонент в общем объёме в сумме всегда дают единицу, и треугольные координаты точек тоже обладают таким свойством. На треугольной диаграмме невозможно отобразить некорректную смесь, зато любая корректная смесь имеет свою точку в треугольнике и наоборот. На математическом языке мы скажем, что треугольные координаты определяют изоморфизм между точками внутри треугольника и составами трёхкомпонентных смесей.

Диаграмма кофейных смесей

Петрологи рассматривают на треугольных диаграммах семейства полевых шпатов и шпинелей; металлурги рисуют на них сплавы и так далее. Все видели цветовой треугольник, который используется для выбора цвета в графических редакторах. Мы с ребятами разместили на треугольной диаграмме любимые виды кофе, собирая их из эспрессо, молока и воды.

Главное свойство треугольных диаграмм состоит в том, что, хотя они двумерны, у всех точек на ней по три координаты, связанные простым условием: сумма координат для всех точек диаграммы должна быть одинакова. Мы исследуем треугольники и тремя компонентами в этом случае могут служить три угла треугольника, которые в сумме всегда дают развёрнутый угол. Выходит, треугольные координаты идеально подходят для изображения карты треугольников, какое чудесное совпадение! По осям мы отложим все возможные значения углов, так что на такой диаграмме можно будет найти треугольник любой формы.

Равносторонний, равнобедренные и прямоугольные треугольники в треугольных координатах.

В центре мира расположился единственный (с точностью до размеров) равносторонний треугольник с координатами . Всякий равнобедренный треугольник имеет координаты , которые ложатся на медианы треугольника. Прямоугольные треугольники привязаны к координате 90° и совпадают с координатной сеткой. И вот перед нами ландшафт страны, которую населяют треугольники.

Ровно в середине — единственный и неповторимый равносторонний треугольник, от него в шесть сторон расходятся тонкие хребты равнобедренных, а треугольная граница, вдоль которой расположились прямоугольные треугольники, ограничивает страну остроугольных от диких тупоугольных степей убегающих до горизонта вырожденных треугольников. Мир треугольников незамкнут, его внешняя граница отсутствует, поскольку те треугольники, что пытаются достичь края своего мира, истоньшаются и вырождаются, превращаясь в отрезки, которые мы треугольниками уже не считаем. Очень здорово гулять по этой карте, переходя из страны в страну, приближаясь к границам и представляя, как меняются её жители.

На карте хорошо видны все отношения между классами треугольников. Они не образуют иерархию вложенных подмножеств, как иногда показывается на страницах учебников, а формируют области, граничащие друг с другом. Равнобедренными могут быть как остроугольные, так и тупоугольные треугольники. Прямоугольные треугольники могут быть равнобедренными, они живут там, где пересекаются линии равнобедренных и прямоугольных треугольников. Ну, а равносторонний треугольник является одновременно равнобедренным и остроугольным.

Факторизуем дальше!

Карта наша вышла очень симпатичной, но отказавшись от конгруэнтности и перейдя к отношению подобия, мы сделали её избыточной. У типичного жителя этого мира все три угла различны, обозначим их тройкой Всячески поворачивая и отражая треугольник, мы сможем получить пять его эквивалентов: и Все эти шесть вариантов (перестановок из трёх элементов) тоже можно найти на карте, они отражены в шести разных точках, но ведь все соответствующие им треугольники конгруэнтны.

Шесть точек, соответствующих одному и тому же треугольнику (с точки зрения конгруэнтности).

Получается, что двумерное факторпространство треугольников похоже на зеркальный калейдоскоп, в котором каждая точка повторяется шесть раз. От одного варианта к другому можно перейти, комбинацией поворотов или отражений всей карты. Впрочем, не каждая точка имеет пять отражений. Равнобедренные треугольники не меняются при зеркальном отражении относительно высоты, опущенной из вершины, и поэтому имеют меньше эквивалентов. Например, равнобедренный треугольник имеет только два эквивалента: и получаемых поворотами на 120°. Линии равнобедренных треугольников на карте тоже не меняются при отражениях, но переходят друг в друга при поворотах. Наконец, самый симметричный равносторонний треугольник переходит сам в себя и при повороте на 120° и при отражении, также как соответствующая ему точка на карте.

Это очень красиво: симметрия карты и её элементов в точности отражает симметрию треугольников, соответствующих этим элементам! Связана эта красота с тем, что элементы пространства, то есть, точки, сами обладают определённой структурой — а именно, симметрией. Преобразования из группы симметрии, действуя на элементы пространства, порождают орбиты этих элементов: такие множества точек, которые не меняются под действием этих преобразований.

Некоторые орбиты на карте мира треугольников.

Мы могли бы избавиться от этой избыточности, если бы нам удалось факторизовать эту карту, «вынеся за скобки» её симметрию. Это можно сделать геометрически, если сложить карту, нарисованную на бумажном листе так, чтобы все эквивалентные точки наложились друг на друга и совпали. В результате получится маленький фрагмент в форме прямоугольного треугольника. Он лишён многократного дублирования точек и представляет уже факторизацию пространства треугольников отношением эквивалентности, заданным группой симметрии (эквивалентными при этом считаются все точки одной орбиты).

Построение фундаментальной области фактор-пространства треугольников.

Такая сжатая фактор-карта не избыточна, оставаясь полной. На ней каждая точка — уникальный треугольник и каждому треугольнику полагается уникальная точка. Она даёт исчерпывающее представление о структуре классификации треугольников. В топологии такая факторизация называется выделением фундаментальной области. Группа симметрии треугольника, действуя на эту область, формирует всё рассматриваемое нами пространство.

Когда мы абстрагируемся от симметрии треугольников, форма фундаментальной области не играет никакой роли и то, что она у нас оказалась треугольной, связано только с произвольным выбором треугольной системы координат. Так что правильнее будет изобразить фундаментальное множество фактор-пространства треугольников в такой обобщённой форме:

Топология фундаментального множества пространства треугольников, факторизованного отношением подобия.

Топология этого фундаментального множества соответствует диску, границей которого являются равнобедренные треугольники. На эту границу можно гладко отобразить одномерный интервал, соответствующий углу при вершине этих треугольников. Прямоугольные треугольники разделяют этот диск на области остроугольных и тупоугольных треугольников. Все вырожденные треугольники, составлявшие открытую границу карты мы отобразили в точку, выколотую из границы диска.

Отмечу здесь в скобках, что топология фундаментального множества (диск с выколотой точкой на границе) оказалась существенно более вразумительной, чем у треугольной карты, на которой все точки границы отождествляются друг с другом нетривиальным образом. Искушённые в топологии читатели распознают в ней вещественную проективную плоскость, безусловно, интересную, но крайне неинтутивную поверхность, которая не имеет не самопересекающихся вложений в трёхмерное пространство. При попытке натянуть пространство треугольников на глобус, используя сферические угловые координаты, и отождествление вырожденных треугольников тоже приводит к вещественной проективной плоскости.

На протяжении этой статьи мы неявно использовали предельную степень факторизации множества треугольников, разделив их на шесть классов, которые изображали с помощью маленьких разноцветных треугольничков-представителей. Если мы введём несимметричное отношение ""быть границей"", то с его помощью сможем изобразить структуру мира треугольников в виде ориентированного графа:

Стрелки здесь указывают на границы объектов.

При этом теряется визуальный образ фундаментальной области, но остаются хорошо видны взаимоотношения между классами треугольников.

Измеряем то, что можем

Имея перед собой структуру треугольного мира, очищенную от повторений и многократных отражений, мы, наконец, готовы подумать над вопросом ученицы Аси: каких треугольников больше — равнобедренных или обыкновенных. Считать сами точки на карте дело неблагодарное. Вместо этого следует сделать наше пространство измеримым, введя на нём корректную меру. Я не буду сейчас приводить полное строгое определение меры и положусь на наше с вами интуитивное понимание, основанное на опыте работы с такими мерами, как длина, площадь, объём, вес, количество чего-то счётного и так далее. Пока мы не приводим контринтуитивных примеров (а их в теории мер предостаточно), этого понимания будет довольно.

Если для размерностей справедливо утверждение: размерность области на единицу больше размерности её границы, то для мер оно принимает несколько гипертрофированную форму:

Мера области бесконечно больше меры её границы.

Равнобедренные и прямоугольные треугольники образуют одномерное подпространство, имеющее длину, но не имеющее ширины, так что в двумерном пространстве его мера равна нулю, тогда как все прочие треугольники образуют полноценные двумерные подпространства, имеющие какую-то площадь. А равносторонний или равнобедренный прямоугольный треугольник имеют нулевую меру даже в одномерном пространстве.

Благодаря великому русскому математику Андрею Колмогорову, мы можем перевести язык площадей на язык вероятностей и сказать, что вероятность встретить равнобедренный треугольник, выбирая их наугад из общего множества треугольников, равна нулю.

Треугольные координаты, факторизация, симметрии и меры... не самая короткая тропинка. На исходный вопрос можно было ответить сразу, но почему бы нам было не прогуляться! Как это часто бывает в путешествии, не так важен конечный пункт, как путь, который к нему привёл. В математике решение не менее ценно, чем ответ.

А моим ребятам, в качестве домашнего задания, было предложено поразмыслить над картой и фактор‑картой пространства окружностей, эллипсов и параллелограммов, которое тоже можно изобразить на плоскости. Вы можете к ним присоединиться в комментариях!

Предыдущие статьи серии Математическая продлёнка:

Различные заметки и материалы на Дзен-канале Онлайн-кружок математики ."'https://habrastorage.org/getpro/habr/upload_files/009/a52/31e/009a5231e1a06f5595036985ea0b4ee1.jpg'"['https://habrastorage.org/getpro/habr/upload_files/f2c/6a3/3b2/f2c6a33b2fd0cc113fc81fc75fde5046.svg', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/cd4/4ee/e71/cd44eee717b15aae98339cc3ce9f55ca.jpg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/323/404/05d/32340405d81f416a858254d9cfa7099a.png', 'https://habrastorage.org/getpro/habr/upload_files/6da/33d/6fe/6da33d6fe4dc43bdfbdcbdfc19a45562.svg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/f9a/49f/be2/f9a49fbe2254042099404d33a39ff073.png', 'https://habrastorage.org/getpro/habr/upload_files/009/a52/31e/009a5231e1a06f5595036985ea0b4ee1.jpg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/325/127/e43/325127e437da3d01bad27cdf43172bf8.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/468/af1/b46/468af1b46bcbb6d029f93d7c009b5e74.png', 'https://habrastorage.org/getpro/habr/upload_files/32e/c88/b62/32ec88b626b92220113561084eb375ab.svg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/f59/2c1/8a0/f592c18a02f11885862472b9f36d1203.png', 'https://habrastorage.org/getpro/habr/upload_files/84f/4e3/5c4/84f4e35c43ff9014e546a3a8df130f5b.svg', 'https://habrastorage.org/getpro/habr/upload_files/f69/7d2/aa5/f697d2aa52cd0f2bd82f9ca060a52113.svg', 'https://habrastorage.org/getpro/habr/upload_files/b2c/204/fa7/b2c204fa75633d538d73020a20215cd8.svg', 'https://habrastorage.org/getpro/habr/upload_files/23e/974/366/23e97436687b385f1ffddd5718c047ca.svg', 'https://habrastorage.org/getpro/habr/upload_files/27c/f6f/e81/27cf6fe8171e3e8a26972733461955db.svg', 'https://habrastorage.org/getpro/habr/upload_files/531/031/274/531031274f0776b219d306e26cb8d494.svg', 'https://habrastorage.org/getpro/habr/upload_files/578/207/db0/578207db0306bade836018855e9756df.svg', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/949/906/666/949906666c139c9516c753a505eee02a.jpg', 'https://habrastorage.org/getpro/habr/avatars/234/002/2cc/2340022cc75806fdd43791b9e18adaff.gif', 'https://habrastorage.org/getpro/habr/upload_files/ebc/dea/c01/ebcdeac01394d45293ed4d9950acd9ff.svg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/811/58c/e2a/81158ce2a4e37b7bc7944caaebb97975.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/8fa/a9f/f62/8faa9ff624f2ece0db60042c5d26010c.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/ece/276/01b/ece27601bc11ec3870c85a188df04471.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/137/c03/c3e/137c03c3e0fd27646720113589fc11b5.png', 'https://habrastorage.org/getpro/habr/upload_files/239/a0b/aa0/239a0baa0ffc212aa1c6b7e9afa03210.svg', 'https://habrastorage.org/getpro/habr/upload_files/36b/bdd/7a0/36bbdd7a0b15bc8aad6f279d5235cdac.svg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/e8b/ad8/e53/e8bad8e5309cc12cb9f3c3a0fccb192f.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/d47/d7b/78c/d47d7b78c573e1055489d67f211ce834.png', 'https://habrastorage.org/getpro/habr/upload_files/592/dfc/438/592dfc43838904d042285f36b13de969.svg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/f9d/09d/366/f9d09d36620f929af4ae5dbd5abfdce9.png', 'https://habrastorage.org/getpro/habr/upload_files/3bc/37f/aa0/3bc37faa0f4343bd72b4553376850c04.gif', 'https://habrastorage.org/getpro/habr/upload_files/9c9/c2b/ad8/9c9c2bad8fe19a34b51658965b910370.svg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/854/1c2/d6a/8541c2d6a7150911068d7cf8d6178f38.png', 'https://habrastorage.org/getpro/habr/upload_files/f79/343/399/f79343399758fc9ab6695846a82082b3.svg', 'https://habrastorage.org/getpro/habr/upload_files/2a9/f3f/c2b/2a9f3fc2bccea641cf8879aedf6e9ad9.svg', 'https://mc.yandex.ru/watch/24049213', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/e27/bc2/e89/e27bc2e898560d2ef659e3e295d5fe9e.png', 'https://habrastorage.org/getpro/habr/upload_files/c80/770/822/c807708225854211a6d34840e9fdf5f2.svg', 'https://habrastorage.org/getpro/habr/upload_files/3fb/e03/b16/3fbe03b16dccbdac993b866c768acd25.svg', 'https://habrastorage.org/getpro/habr/upload_files/2aa/cba/c94/2aacbac9415076501da78297320f897b.svg', 'https://habrastorage.org/getpro/habr/upload_files/0af/a1a/791/0afa1a7915bc396247b5e852e875f46e.svg', 'https://habrastorage.org/getpro/habr/upload_files/892/859/126/8928591266d5e9964ce0fddcb67c6733.svg', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/0d3/97b/cbe/0d397bcbeea6fa22298ddde7f172e858.jpg', 'https://habrastorage.org/getpro/habr/upload_files/576/d02/7b0/576d027b0b3e1438ed561bc78ed625b5.svg', 'https://habrastorage.org/getpro/habr/upload_files/459/37f/5d2/45937f5d2f5ec5a1b5742c5d210e913c.svg', 'https://habrastorage.org/getpro/habr/upload_files/c69/d62/500/c69d62500d93fec7aa6ad1bb64a41c55.svg']"
1'723248'Трассировка сервисов через очередь сообщений. OpenTelemetry, NATS'Это небольшой гайд о том, как обеспечить наблюдаемость в вашей событийно-ориентированной облачной системе. Немного теории Cloud application Облачные технологии позволяют организациям создавать...'https://habr.com/ru/post/723248/'"Это небольшой гайд о том, как обеспечить наблюдаемость в вашей событийно-ориентированной облачной системе.

Немного теории

Cloud application

Облачные технологии позволяют организациям создавать и запускать масштабируемые приложения в современных динамических окружениях, таких как общедоступные, частные и гибридные облака… Они делают слабосвязанные системы устойчивыми, управляемыми и наблюдаемыми. В сочетании с надежной автоматизацией они позволяют инженерам часто и предсказуемо вносить важные изменения с минимальными усилиями – Cloud Native Computing Foundation (CNCF)

Согласно этому определению, облачные приложения – больше, чем просто приложения, которые действуют в облаке. Они также масштабируемы, слабо связаны, устойчивы, управляемы и доступны для наблюдения. Можно сказать, что наличие этих «облачных атрибутов» позволяет называть системы облачными.

Event-driven architecture (EDA)

Архитектура, управляемая событиями, способствует слабой взаимозависимости между компонентами системы, что приводит к большей гибкости. Микросервисы могут масштабироваться независимо, выходить из строя без влияния на другие сервисы и снижать сложность рабочих процессов.

Observability

Наблюдаемость системы – это мера простоты определения ее внутреннего состояния по наблюдаемым результатам. Система считается наблюдаемой, если можно быстро и последовательно получать ответы на все новые вопросы о ней с минимальными предварительными знаниями, без необходимости внедряться в существующий код или писать новый.

OpenTelemetry

OpenTelemetry, также известный как OTel, представляет собой открытый стандарт CNCF, который обеспечивает распределенную трассировку и сбор метрик из ваших приложений.

Trace Context

Это метаданные о span-ах в трассировке. Например, предположим, что служба A вызывает службу B, и вы хотите отследить вызов. В этом случае OpenTelemetry будет использовать Trace Context для захвата идентификатора трассировки и текущего span-а из службы A, чтобы span-ы, созданные в службе B, могли подключаться и добавляться к трассировке.

Это известно как распространение контекста.

Context Propagation

Распространение контекста - это основная концепция, которая обеспечивает распределенную трассировку. При распространении контекста span-ы могут быть соотнесены друг с другом и собраны в трассировку, независимо от того, где они генерируются. OpenTelemetry определяет распространение контекста с помощью двух субконцептов: Context и Propagation.

Context - это объект, который содержит информацию для отправляющей и принимающей служб, позволяющую соотнести один span с другим и связать его с трассировкой в целом.

Propagation - это механизм, который перемещает контекст между службами и процессами. Поступая таким образом, он собирает распределенную трассировку. Он сериализует или десериализует Span Context и предоставляет соответствующую информацию трассировки для распространения от одной службы к другой.

На практике

Хорошо, давайте создадим экземпляр propagation и инициализируем его:

import ( ""go.opentelemetry.io/otel"" ""go.opentelemetry.io/otel/propagation"" ) tc := propagation.TraceContext{} // Register the TraceContext propagator globally. otel.SetTextMapPropagator(tc)

В сервисе A, контекст которого мы хотим передать:

// GetTextMapPropagator returns the global TextMapPropagator. prop := otel.GetTextMapPropagator() // HeaderCarrier adapts http.Header to satisfy the TextMapCarrier interface. headers := make(propagation.HeaderCarrier) prop.Inject(ctx, headers)

после этого мы должны каким-то образом передать эти заголовки, в теле запроса, в заголовках запроса, все зависит от вашей реализации.

В сервисе B, в котором мы хотим получить контекст:

var headers propagation.HeaderCarrier // we get the headers and convert them to HeaderCarrier... prop := otel.GetTextMapPropagator() // Extract reads cross-cutting concerns from the carrier into a Context. ctx = prop.Extract(ctx, headers)

NATS

// Simple Async Subscriber nc.Subscribe(""foo"", func(m *nats.Msg) { fmt.Printf(""Received a message: %s

"", string(m.Data)) }) // Header represents the optional Header for a NATS message, // based on the implementation of http.Header. type Header map[string][]string // Msg represents a message delivered by NATS. This structure is used // by Subscribers and PublishMsg(). type Msg struct { Header Header }

нетрудно заметить что propagation.HeaderCarrier и nats.Header основан на реализации http.Header . Поэтому, чтобы скопировать данные из одной структуры в другую, я воспользовался реализацией http.Header.Clone()

В заключении

Всё достаточно просто, если немного почитать документацию. Было очень сложно подобрать русские термины, под устоявшиеся английские определения, поэтому большую часть я просто не стал переводить, что бы не ввести вас в заблуждение.

Полный код проекта доступен в моем репозитории - nats-tracing.

Так же при написании гайда я использовал открытые источники:"'https://habrastorage.org/getpro/habr/upload_files/81d/a7a/59b/81da7a59bba625f7c46e8ec4a36a35e7.png'"['https://habrastorage.org/getpro/habr/upload_files/81d/a7a/59b/81da7a59bba625f7c46e8ec4a36a35e7.png', 'https://habrastorage.org/r/w48/getpro/habr/avatars/87c/68a/99d/87c68a99d01801f42336e30f3d62ff65.jpg', 'https://habrastorage.org/getpro/habr/avatars/87c/68a/99d/87c68a99d01801f42336e30f3d62ff65.jpg', 'https://mc.yandex.ru/watch/24049213']"
2'723054'Почему важно собирать С-код из MakeFile(ов)'В период с 199x по 201x развелось очень много программистов-микроконтроллеров, которые никогда не вылазили из всяческих IDE (IAR, KEIL, Code Composer Studio, AtilocTrueStudio). Как по мне, дак это...'https://habr.com/ru/post/723054/'"В период с 199x по 201x развелось очень много программистов-микроконтроллеров, которые никогда не вылазили из всяческих IDE (IAR, KEIL, Code Composer Studio, AtilocTrueStudio). Как по мне, дак это очень печально. Во многом потому, что специалист в Keil не сможет быстро понять как работать в IAR и наоборот. Миграция на другую IDE тоже вызывает большую трудность, так как это сводится к мышковозне в GUI. Каждая версия IAR не совместима с более новой версией IDE.

Дело в том, что GUI IDE появились в 199x...201x, когда не было расцвета DevOps(а), программист работал один и все действия выполнялись вручную мышкой. В то время работа в GUI казалась программистам-микроконтроллеров веселее, ведь в IDE много стразиков.

Но с усложнением кодовой базы, с увеличением сборок, с увеличением команд разработчиков появилась нужда в автосборках, автотестах. Появилась методология

код отдельно, конфиги отдельно

и работа с IDE стала только тормозить процессы. Ведь конфиги хранятся в IDE-шной XML(ке). Приходилось дублировать конфиги платы для каждой сборки, что использовала эту плату. Пришлось дублировать код конфигов и этот процесс сопровождался ошибками. При масштабировании работы с IDE кодовая база превращалась в зоопарк в болоте.

Какие недостатки сборки исходников из-под IDE?

1--IDE отжирают много ресурсов компьютера, как RAM как и CPU, IDE же надо много оперативки, чтобы отрисовывать окошки со стразиками.

2--IDE монолитные и неделимые. Если вы захотите поменять препроцессор, компилятор или компоновщик, а остальные фазы ToolChain(а) оставить как есть, то ничего из этого не выйдет, так как капот IDE закрыт на замок.

3--IDE стоят дорого, порядка 3500 EUR на один компьютер

4--IDEшные xml очень слабо документированы или не документированы вовсе. У всех вендоров xml имеет свой особенный язык разметки. При внесении незначительных изменений появляется огромный git diff.

5--Затруднена сборка из консоли. В основном инициировать сборку в IDE можно мышкой или горячими клавишами.

6--Обратная несовместимость с новыми версиями IDE

7--В условиях технологического эмбарго законно купить IDE европейского вендора невозможно.

В общем распространение IDE это яркий пример известного ныне ""технологического диктата"" запада для стран второго и третьего мира.

Мы вам даём песочницу (IDE), а вы сидите там за бортиками и лепите свои куличики (прошивки).

Понятное дело, что в таких рамках на ""сделать что-то серьезное"" рассчитывать не приходится.



Пришлось думать. Хорошим решением оказалось сделать шаг назад в 197x 198x когда на компьютерах всё делали из консоли. Собирать сорцы из скриптов. Можно вообще bat файл написать и он в общем-то инициирует запуск нужных утилит, однако исторически С-код собирали утилитой make.

В чем достоинства сборки С-кода из make файлов?

1-- Makefile это самый гибкий способ управлять модульностью. Можно буквально одной строчкой добавлять или исключать один конкретный программный компонент (десятки файлов) из десятков сборок. В случае же сборки из-под IDE вам бы пришлось вручную редактировать .xml для каждой сборки.

2--Сборку из Makefile очень легко автоматизировать. Достаточно в консоли выполнить make all и у вас инициируется процесс сборки.

3--После сборки из скриптов вы получите полный лог сборки, в то время как IDE обычно показывают последние 3-4 экрана сообщение компилятора.

4--В MakeFile очень просто менять компиляторы. Это буквально заменить одну строчку. С GCC на Clang или на GHS. Вот типичный основной makefile для любой сборки на ARM Cortex-Mxx

mkfile_path := $(abspath $(lastword $(MAKEFILE_LIST))) $(info Build $(mkfile_path) ) BUILD_DIR = build #@echo $(error SOURCES_C= $(SOURCES_C)) INCDIR := $(subst /cygdrive/c/,C:/, $(INCDIR)) #@echo $(error INCDIR=$(INCDIR)) SOURCES_C := $(subst /cygdrive/c/,C:/, $(SOURCES_C)) #@echo $(error SOURCES_C=$(SOURCES_C)) SOURCES_ASM := $(subst /cygdrive/c/,C:/, $(SOURCES_ASM)) LIBS := $(subst /cygdrive/c/,C:/, $(LIBS)) LDSCRIPT := $(subst /cygdrive/c/,C:/, $(LDSCRIPT)) #@echo $(error SOURCES_ASM=$(SOURCES_ASM)) # binaries PREFIX = arm-none-eabi- GCC_PATH=""C:/Program Files (x86)/GNU Arm Embedded Toolchain/10 2021.10/bin"" $(info GCC_PATH=$(GCC_PATH)) # The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx) # either it can be added to the PATH environment variable. ifdef GCC_PATH CC = $(GCC_PATH)/$(PREFIX)gcc AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp CP = $(GCC_PATH)/$(PREFIX)objcopy SZ = $(GCC_PATH)/$(PREFIX)size else CC = $(PREFIX)gcc AS = $(PREFIX)gcc -x assembler-with-cpp CP = $(PREFIX)objcopy SZ = $(PREFIX)size endif HEX = $(CP) -O ihex BIN = $(CP) -O binary -S # float-abi ifeq ($(NRF5340), Y) ifeq ($(CORE_NET), Y) FLOAT-ABI = -mfloat-abi=soft OPT += -fsingle-precision-constant endif ifeq ($(CORE_APP), Y) FLOAT-ABI = -mfloat-abi=hard endif else FLOAT-ABI = -mfloat-abi=hard endif # mcu MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI) # macros for gcc #CSTANDARD = -std=c11 CSTANDARD = -std=gnu99 # AS defines AS_DEFS = # AS includes AS_INCLUDES = ifeq ($(DEBUG), Y) #@echo $(error DEBUG=$(DEBUG)) CFLAGS += -g3 -gdwarf-2 -ggdb OPT += -O0 else OPT += -Os endif OPT += -fmessage-length=0 OPT += -fsigned-char OPT += -fno-common OPT += -fstack-usage OPT += -finline-small-functions #Perform dead code elimination OPT += -fdce #Perform dead store elimination OPT += -fdse # compile gcc flags ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections CFLAGS += $(CSTANDARD) CFLAGS += -Wall #CFLAGS += -Wformat-overflow=1 CFLAGS += $(MCU) $(OPT) -fdata-sections -ffunction-sections $(INCDIR) # Generate dependency information CFLAGS += -MMD -MP -MF""$(@:%.o=%.d)"" # LDFLAGS # libraries LINKER_FLAGS += -Xlinker --gc-sections ifeq ($(MBR), Y) #@echo $(error MBR=$(MBR)) LIBS += -lnosys LDFLAGS += -specs=nano.specs else LINKER_FLAGS += -u _scanf_float LINKER_FLAGS += -u _printf_float endif #LINKER_FLAGS += -lrdimon --specs=rdimon.specs ifeq ($(LIBC), Y) #@echo $(error LIBC=$(LIBC)) LIBS += -lc endif ifeq ($(MATH), Y) #@echo $(error MATH=$(MATH)) LIBS += -lm endif #@echo $(error LDSCRIPT=$(LDSCRIPT)) LIBDIR = LDFLAGS += $(MCU) -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections $(LINKER_FLAGS) # default action: build all all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin # build the application # list of objects OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(SOURCES_C:.c=.o))) vpath %.c $(sort $(dir $(SOURCES_C))) # list of ASM program objects OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(SOURCES_ASM:.S=.o))) vpath %.S $(sort $(dir $(SOURCES_ASM))) $(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) $(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@ $(BUILD_DIR)/%.o: %.S Makefile | $(BUILD_DIR) $(AS) -c $(CFLAGS) $< -o $@ $(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile $(CC) $(OBJECTS) $(LDFLAGS) -o $@ $(SZ) $@ $(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR) $(HEX) $< $@ $(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR) $(BIN) $< $@ $(BUILD_DIR): mkdir $@ # clean up clean: -rm -fR $(BUILD_DIR) # dependencies -include $(wildcard $(BUILD_DIR)/*.d) # *** EOF ***

5--Когда вы собираете из Make вы можете не только собирать исходники, но и собирать документацию, строить графы зависимостей на dot, построить схему ToolChain(а). Вызвать Latex, Doxyden.

Утилите make всё равно какие консольные утилиты вызывать. Это универсальный способ определения программных конвейеров.

6--Для каждой сборки надо самим писать крохотный Makefile

MK_PATH:=$(dir $(realpath $(lastword $(MAKEFILE_LIST)))) #@echo $(error MK_PATH=$(MK_PATH)) WORKSPACE_LOC:=$(MK_PATH)../../ INCDIR += -I$(MK_PATH) INCDIR += -I$(WORKSPACE_LOC) #@echo $(error SOURCES_C=$(SOURCES_C)) include $(MK_PATH)config.mk include $(MK_PATH)cli_config.mk include $(MK_PATH)diag_config.mk include $(MK_PATH)test_config.mk include $(WORKSPACE_LOC)code_base.mk include $(WORKSPACE_LOC)rules.mk

и конфиг для сборки.

mkfile_path := $(abspath $(lastword $(MAKEFILE_LIST))) $(info Build $(mkfile_path) ) TARGET=pastilda_r1_1_generic #@echo $(error TARGET=$(TARGET)) AES256=Y ALLOCATOR=Y ...... USB_HOST_HS=Y USB_HOST_PROC=Y UTILS=Y XML=Y

Для каждого компонента *.mk файл. Язык make простой и это, в сущности, bash. Вот типичный *.mk файл для драйвера DW1000

ifneq ($(DWM1000_MK_INC),Y) DWM1000_MK_INC=Y DWM1000_DIR = $(DRIVERS_DIR)/dwm1000 mkfile_path := $(abspath $(lastword $(MAKEFILE_LIST))) $(info Build $(mkfile_path) ) $(info + DWM1000) INCDIR += -I$(DWM1000_DIR) OPT += -DHAS_DWM1000 OPT += -DHAS_DWM1000_PROC OPT += -DHAS_UWB DWM1000_RANGE_DIAG=Y DWM1000_RANGE_COMMANDS=Y DWM1000_OTP_COMMANDS=Y DWM1000_OTP_DIAG=Y SOURCES_C += $(DWM1000_DIR)/dwm1000_drv.c include $(DWM1000_DIR)/otp/dwm1000_otp.mk include $(DWM1000_DIR)/registers/dwm1000_registers.mk ifeq ($(DWM1000_RANGE),Y) include $(DWM1000_DIR)/range/dwm1000_range.mk endif ifeq ($(DIAG),Y) ifeq ($(DWM1000_DIAG),Y) $(info +DWM1000_DIAG) OPT += -DHAS_DWM1000_DIAG SOURCES_C += $(DWM1000_DIR)/dwm1000_diag.c endif endif ifeq ($(CLI),Y) ifeq ($(DWM1000_COMMANDS),Y) $(info +DWM1000_COMMANDS) OPT += -DHAS_DWM1000_COMMANDS SOURCES_C += $(DWM1000_DIR)/dwm1000_commands.c endif endif endif

7--Сборка из Make стимулирует придерживаться модульности, изоляции программных компонентов и прослеживанию зависимостей между компонентами. Если вы собираете из make, то очень вероятно, что у вас получится чистый, аккуратный репозиторий сам собой.

8--Makefile(лы) хороши тем, что можно добавить много проверок зависимостей и assert(ов) на фазе отработки Make-скриптов прямо в *.mk файлах еще до компиляции самого кода, даже до запуска препроцессора, так как язык программирования make поддерживает условные операторы и функции. Можно очень много ошибок отловить на этапе отработки утилиты make.

9--Язык make очень прост. Вся спека GNU Make это 226 страниц. Cтю Фельдман (автор make) просто гений.

10--Makefile(лы) прозрачные текстовые. Всегда видно, где опции препроцессора, где ключи для компилятора, а где для компоновщика. Всё, что нужно можно найти утилитой grep в той же консоли.

11--Конфига для сборки можно формировать как раз на стадии make файлов и передавать их как ключи для препроцессора. Таким образом конфиги будут видны в каждом *.с файле проекта и не надо вставлять #include(ы) c конфигами. Всё можно передать как опции утилите cpp (препроцессора).

Вывод

Make это как пуговицы. Старая, простая и очень полезная вещь. Собираете свои прошивки из make в этом нет ничего сложного.

Links

https://www.youtube.com/watch?v=vmuO4bHjTSo&t=7s

https://habr.com/ru/post/47513/

https://habr.com/ru/post/111691/"'https://habrastorage.org/getpro/habr/upload_files/5e6/be9/a19/5e6be9a1961f44c5a5dac41eb6479d78.JPG'"['https://habrastorage.org/getpro/habr/upload_files/5e6/be9/a19/5e6be9a1961f44c5a5dac41eb6479d78.JPG', 'https://mc.yandex.ru/watch/24049213']"
3'723244'[Перевод] Go. О покрытии кода интеграционными тестами и флаге -cover'Инструменты покрытия кода помогают понять, какая часть кодовой базы выполняется (или, как еще говорят, покрывается) при выполнении данного набора тестов. Какое-то время Go поддерживал измерение...'https://habr.com/ru/post/723244/'"Инструменты покрытия кода помогают понять, какая часть кодовой базы выполняется (или, как еще говорят, покрывается) при выполнении данного набора тестов. Какое-то время Go поддерживал измерение покрытия кода на уровне пакета, введенное в Go 1.2, она включалась флагом команды go test -cover .

Это хорошо работает в большинстве случаев, но при разработке больших приложений обнаруживаются недостатки. Для больших приложений разработчики часто пишут интеграционные тесты, которые проверяют поведение всей программы (в дополнение к модульным тестам на уровне пакета).

В отличие от тестирования пакетов по отдельности, этот тип тестирования обычно включает создание полноценного двоичного файла приложения, его запуск на наборе репрезентативных входных данных (или под рабочей нагрузкой, если это сервер), чтобы убедиться, что все пакеты компонентов корректно работают вместе.

Двоичные файлы интеграционных тестов создаются командой go build , а не go test , поэтому инструментарий Go до сих пор не предоставлял простого способа сбора профиля покрытия этих тестов.

С версии Go 1.20 программы с инструментированием покрытия можно создавать командой go build -cover , а затем, чтобы расширить область покрытия, передавать эти инструментированные двоичные файлы в интеграционный тест.

Ниже приводим пример того, как работают эти новые функции, расскажем о вариантах применения и рабочем процессе сбора профилей покрытия из интеграционных тестов.

Пример

Возьмем очень маленький пример программы, напишем для нее простой интеграционный тест, а затем соберем профиль покрытия из интеграционного теста.

Воспользуемся для этого инструментом обработки Markdown mdtool отсюда. Это демо-программа, показывающая, как клиенты могут использовать библиотеку преобразования markdown в HTML gitlab.com/golang-commonmark/markdown .

Установка mdtool

Загрузим конкретную версию mdtool , чтобы эти шаги можно было повторить:

$ git clone https://gitlab.com/golang-commonmark/mdtool.git ... $ cd mdtool $ git tag example e210a4502a825ef7205691395804eefce536a02f $ git checkout example ... $

Простой интеграционный тест

Напишем простой интеграционный тест mdtool ; он создаст двоичный файл mdtool и запустит его на наборе входных файлов markdown. Этот очень простой скрипт запускает двоичный файл mdtool для каждого файла из каталога тестовых данных, чтобы убедиться, что инструмент выдает некий результат и не падает.

$ cat integration_test.sh #!/bin/sh BUILDARGS=""$*"" # # Terminate the test if any command below does not complete successfully. # set -e # # Download some test inputs (the 'website' repo contains various *.md files). # if [ ! -d testdata ]; then git clone https://go.googlesource.com/website testdata git -C testdata tag example 8bb4a56901ae3b427039d490207a99b48245de2c git -C testdata checkout example fi # # Build mdtool binary for testing purposes. # rm -f mdtool.exe go build $BUILDARGS -o mdtool.exe . # # Run the tool on a set of input files from 'testdata'. # FILES=$(find testdata -name ""*.md"" -print) N=$(echo $FILES | wc -w) for F in $FILES do ./mdtool.exe +x +a $F > /dev/null done echo ""finished processing $N files, no crashes"" $

Вот пример запуска нашего теста:

$ /bin/sh integration_test.sh ... finished processing 380 files, no crashes $

Двоичный файл mdtool успешно обработал набор входных файлов… но какую часть исходного кода инструмента мы задействовали? Далее соберем профиль покрытия, чтобы узнать это.

Как использовать интеграционный тест для сбора данных о покрытии

Напишем сценарий-оболочку, вызывающий предыдущий сценарий и создающий инструмент для покрытия, а затем выполняет пост-процессинг результирующих профилей:

$ cat wrap_test_for_coverage.sh #!/bin/sh set -e PKGARGS=""$*"" # # Setup # rm -rf covdatafiles mkdir covdatafiles # # Pass in ""-cover"" to the script to build for coverage, then # run with GOCOVERDIR set. # GOCOVERDIR=covdatafiles \ /bin/sh integration_test.sh -cover $PKGARGS # # Post-process the resulting profiles. # go tool covdata percent -i=covdatafiles $

Вот некоторые ключевые моменты, на которые следует обратить внимание в приведенной выше оболочке:

она запускается с флагом -cover , когда выполняется integration_test.sh , что дает нам бинарник покрытия mdtool.exe ;

, когда выполняется , что дает нам бинарник покрытия ; она устанавливает переменную среды GOCOVERDIR в значение пути в каталог записи файлов данных покрытия;

по завершении теста для создания отчета о проценте охваченных операторов запускается go tool covdata percent .

Вот результат запуска этой новой оболочки:

$ /bin/sh wrap_test_for_coverage.sh ... gitlab.com/golang-commonmark/mdtool coverage: 48.1% of statements $ # Note: covdatafiles now contains 381 files.

Теперь у нас есть некоторое представление о том, насколько хорошо интеграционные тесты работают с исходниками.

Если мы внесем изменения для улучшения комплекта тестов, а затем выполним второй запуск сбора покрытия, то в отчете о покрытии увидим изменения. Предположим, например, что мы улучшаем тест новыми строками в файле integration_test.sh :

./mdtool.exe +ty testdata/README.md > /dev/null ./mdtool.exe +ta < testdata/README.md > /dev/null

Запуск оболочки:

$ /bin/sh wrap_test_for_coverage.sh finished processing 380 files, no crashes gitlab.com/golang-commonmark/mdtool coverage: 54.6% of statements $

Покрытие операторов увеличилось с 48% до 54%.

Выбор пакетов, которые будут покрываться

По умолчанию go build -cover использует только пакеты, которые являются частью создаваемого модуля Go, здесь это gitlab.com/golang-commonmark/mdtool . Однако иногда полезно расширить инструментарий покрытия на другие пакеты; это можно сделать, например, путем передачи флага -coverpkg в go build -cover .

В значительной степени mdtool — просто оболочка вокруг пакета gitlab.com/golang-commonmark/markdown , поэтому markdown интересно включить в набор инструментированных пакетов.

Вот файл go.mod для mdtool :

$ head go.mod module gitlab.com/golang-commonmark/mdtool go 1.17 require ( github.com/pkg/browser v0.0.0-20210911075715-681adbf594b8 gitlab.com/golang-commonmark/markdown v0.0.0-20211110145824-bf3e522c626a )

Чтобы управлять тем, какие пакеты включаются в анализ покрытия, можно воспользоваться флагом -coverpkg :

$ /bin/sh wrap_test_for_coverage.sh -coverpkg=gitlab.com/golang-commonmark/markdown,gitlab.com/golang-commonmark/mdtool ... gitlab.com/golang-commonmark/markdown coverage: 70.6% of statements gitlab.com/golang-commonmark/mdtool coverage: 54.6% of statements $

Работа с файлами данных покрытия

Когда интеграционный тест покрытия завершен и записан набор файлов необработанных данных (содержимое covdatafiles ), эти файлы можно обработать разными способами.

Преобразование профилей в текстовый формат ‘-coverprofile’

При работе с модульными тестами можно выполнить go test -coverprofile=abc.txt — запись профиля для данного тестового покрытия в виде текста.

С помощью бинарников, собранных go build -cover , можно сгенерировать профиль в текстовом формате постфактум, запустив go tool covdata textfmt на файлах, отправленных в каталог GOCOVERDIR.

После завершения этого шага вы можете использовать go tool cover -func=<file> или go tool cover -html=<file> , чтобы интерпретировать / визуализировать данные так же, как с go test -coverprofile .

Пример:

$ /bin/sh wrap_test_for_coverage.sh ... $ go tool covdata textfmt -i=covdatafiles -o=cov.txt $ go tool cover -func=cov.txt gitlab.com/golang-commonmark/mdtool/main.go:40: readFromStdin 100.0% gitlab.com/golang-commonmark/mdtool/main.go:44: readFromFile 80.0% gitlab.com/golang-commonmark/mdtool/main.go:54: readFromWeb 0.0% gitlab.com/golang-commonmark/mdtool/main.go:64: readInput 80.0% gitlab.com/golang-commonmark/mdtool/main.go:74: extractText 100.0% gitlab.com/golang-commonmark/mdtool/main.go:88: writePreamble 100.0% gitlab.com/golang-commonmark/mdtool/main.go:111: writePostamble 100.0% gitlab.com/golang-commonmark/mdtool/main.go:118: handler 0.0% gitlab.com/golang-commonmark/mdtool/main.go:139: main 51.6% total: (statements) 54.6% $

Слияние необработанных профилей командой go tool covdata merge

Каждое выполнение встроенного приложения с -cover будет записывать один или несколько файлов данных в каталог, указанный в переменной среды GOCOVERDIR. Если в ходе интеграционного теста выполняется N запусков программы, в конечном счете в выходном каталоге будет O(N) файлов. Обычно в файлах данных много дублированного содержимого, поэтому для сжатия данных и/или объединения наборов данных разных запусков интеграционных тестов вы можете использовать команду слияния профилей go tool covdata merge :

$ /bin/sh wrap_test_for_coverage.sh finished processing 380 files, no crashes gitlab.com/golang-commonmark/mdtool coverage: 54.6% of statements $ ls covdatafiles covcounters.13326b42c2a107249da22f6e0d35b638.772307.1677775306041466651 covcounters.13326b42c2a107249da22f6e0d35b638.772314.1677775306053066987 ... covcounters.13326b42c2a107249da22f6e0d35b638.774973.1677775310032569308 covmeta.13326b42c2a107249da22f6e0d35b638 $ ls covdatafiles | wc 381 381 27401 $ rm -rf merged ; mkdir merged ; go tool covdata merge -i=covdatafiles -o=merged $ ls merged covcounters.13326b42c2a107249da22f6e0d35b638.0.1677775331350024014 covmeta.13326b42c2a107249da22f6e0d35b638 $

Команда go tool covdata merge также принимает -pkg , который можно использовать для выбора конкретного пакета или набора пакетов.

Это полезно для объединения результатов различных типов тестовых запусков, включая запуски, созданные другими комплектами тестов.

Итоги

С выпуском версии 1.20 инструментарий покрытия кода Go перестал ограничиваться тестами пакетов, но поддерживает сбор профилей из более крупных интеграционных тестов. Мы надеемся, что вы воспользуетесь новыми функциями, чтобы понять, насколько хорошо работают крупные и сложные тесты, а также какие части вашего исходного кода они используют.

Попробуйте эти новые функции и, как всегда, если у вас возникнут проблемы, сообщите о них на GitHub. Спасибо."'https://habr.com/share/publication/723244/d70120b7fa40c952bf7c938b701906b6/'"['https://habrastorage.org/getpro/habr/company/9bb/5f7/d50/9bb5f7d50871bf0981f64b1970f22fe1.png', 'https://habrastorage.org/r/w48/getpro/habr/avatars/96e/81d/bc0/96e81dbc01247c6c855b1806b355efa3.jpg', 'https://habrastorage.org/getpro/habr/avatars/96e/81d/bc0/96e81dbc01247c6c855b1806b355efa3.jpg', 'https://habrastorage.org/r/w1560/webt/rz/4h/ne/rz4hnexx9lidivxbzuaheff5usq.png', 'https://mc.yandex.ru/watch/24049213', 'https://habr.com/share/publication/723244/d70120b7fa40c952bf7c938b701906b6/']"
4'721886'Campus. Система, позволяющая управлять образовательным процессом. Мобильное приложение'Вступление В данной статье расскажу про мобильное приложение системы Campus. Для ознакомления с комплексом Campus вы можете просмотреть эту статью , где описан основной функционал системы. Сразу...'https://habr.com/ru/post/721886/'"Вступление

В данной статье расскажу про мобильное приложение системы Campus.

Для ознакомления с комплексом Campus вы можете просмотреть эту статью, где описан основной функционал системы.

Сразу определимся с терминологией:

ОП - образовательный процесс;

СА - система администрирования;

УЗ - учебное заведение;

Мобильное приложение представляет собой интерфейс для студентов, преподавателей, но это не весь список ролей, всегда можно настроить новую роль с кастомным набором прав. Хотелось бы предоставить УЗ максимально удобный и понятный интерфейс, который облегчит жизнь студентам, преподавателям, учебному отделу.

На данный момент доступна только Android версия, в скором времени планируем выпустить версию под IOS.

Также хочется отметить, что проект очень молодой и в нем может быть множество недочетов в бизнес логике.

Начальная страница, Вход в приложение

Расписание

Просмотр групповых и индивидуальных расписаний. Просмотр подробной информации по любому занятию, сюда входят: время, день недели, аудитория, преподаватель, ссылка на место проведения занятия, название предмета, группа в которой будет проходить занятие, на каких неделях занятие повторяется, информацию об отмене занятия в определенные даты и подгруппы, включая преподавателя и аудиторию.

Расписание, Информация о занятии, Выбор типа расписания

Фильтр занятий и посещения

Интерфейс с занятиями, в отличие от общего расписания, показывает занятия с учетом четности недели или же конкретный номер недели; учитывает дни недели и учитывает дни, когда занятий не будет. Таким образом, студент видит актуальное расписание в любой день недели и в любую учебную неделю.

Просмотр своих посещений по каждому предмету.

Фильтр занятий, Посещения, Выбор типа занятий

По аналогии со студентом преподаватель может видеть занятия с учетом недели, дня недели, даты.

Преподаватель может отмечать студентов на занятии. Есть несколько опций: отметить каждого студента индивидуально, отсканировать QR-code, отметить всех студентов сразу. Также преподаватель может просматривать посещения каждого студента и экспортировать данные о посещениях.

Просмотр справок студента. Например, студент заболел и прикрепил справку в мобильном приложении, преподаватель получит уведомление и сможет просмотреть справку, когда будет отмечать студента на занятии.

Можно добавлять индивидуальные баллы за посещение или пропуск занятий. Когда преподаватель будет отмечать студента на занятии, то студенту будут начисляться баллы. Например, на основе этих баллов можно выставлять оценку по зачету. Данная функция опциональна.

Посещения, Интерфейс выставления посещений, Меню управления занятием

Профиль

Просмотр профиля преподавателя или студента. В профиль входит общая информация, например, фото, имя, фамилия, номер телефона, социальная сеть, электронный адрес, должность, факультет, кабинет. Также в профиле можно посмотреть расписание занятий, расписание экзаменов и зачетов, рабочие часы. В профиле преподавателя будут отображаться проводимые им занятия. В профиле студента можно будет посмотреть его групповое и персональное расписание.

Преподаватель, Студент, Обычный пользователь

Заметки

Заметки к занятиям, в том числе и голосовые. По стандарту заметки могут создавать студенты, преподаватели, но эта опция настраивается через СА.

Список заметок, Создание заметки

Зачетная книжка

Просмотр зачетной книжки за любой семестр. При этом у студента может быть несколько зачетных книжек, если он обучается в нескольких группах.

Зачетная книжка, Информация об экзамене

Читательский билет

Просмотр читательского билета.

Список учебников, Информация об учебнике

Бронирования аудиторий

Просмотр и создание бронирований аудиторий. При создании бронирования студент сможет выбрать аудиторию и посмотреть бронирования выбранной аудитории, а также занятия, которые проходят в ней.

Список бронирований, Выбор аудитории, Выбор времени бронирования

Экзамены

Для студента доступен просмотр всех экзаменов, которые относятся к его группе или были назначены персонально для студента. При нажатии на карточку экзамена студенту покажется подробная информация и оценка, если она была выставлена.



Преподаватель может видеть экзамены, которые он ведет. При нажатии на карточку экзамена преподавателю покажется интерфейс для выставления оценки.

Список экзаменов, Информация об экзамене

Задания

Студент может просматривать учебные материалы и выполнять задания. Например, проходить тесты или курсы, скачивать учебный материал. Составление, публикация, оценка заданий происходит через СА.

Предпросмотр задания, Структура задания, Модуль задания

Персональный QR-code

У каждого студента есть персональный QR-code, по которому преподаватель может отметить студента на занятии. При этом в приложении есть свой встроенный QR-code сканер.

Персональный QR-code

Документы

Добавление справок. Например, если студент заболел и по этой причине не пришел на занятия, то тогда студенту не нужно нести справку преподавателю или в учебный отдел, достаточно будет прикрепить ее в мобильном приложении. После преподаватель получит уведомление и увидит справку студента в мобильном приложении, также справка появится в СА.

Список справок, Добавление справки

Кураторы

Студент имеет возможность видеть кураторов своей группы, при этом сам может выступать куратором в других группах.

Преподаватели также могут выступать кураторами. Этот функционал настраивается через СА.

Список курируемых групп, Список студентов, Список кураторов

Статьи и новости

Просмотр статей и новостей, которые публикуются через СА.

Пользователи могут оставлять реакции и писать комментарии.

Функционал доступен для студентов и преподавателей, но это может быть настроено через СА.

Лента со статьями, Просмотр статьи

Справки

Просмотр информации об учебном заведении. Например, контакты, реквизиты, как добраться, абитуриентам, обращение в деканат, но настраивать разделы можно как угодно.

Страница со ссылками на ресурсы учебного заведения

Напоминания

Можно добавлять напоминания к занятиям, экзаменам, бронированию аудиторий. Можно настроить так, чтобы уведомления приходили периодически, например, за 10 минут до занятия или лимитировано пять раз.

Часто используемые напоминания, Добавление напоминания, Настройки уведомлений

Рейтинг

Просмотр общего рейтинга и персонального. Рейтинг рассчитывается исходя из посещений, веса предметов, оценок по экзаменам, заданиям. Вес предмета можно настроить через СА.

Доступны настройки, с помощью которых можно регулировать расчет рейтинга за посещения занятий.

Общий рейтинг, Персональный рейтинг

Группа

У студента есть возможность посмотреть информацию о своей группе, однокурсниках, факультете, дате формирования группы, курсе.

Однокурсники, Информация о группе

Настройка профиля

Настройка профиля с указанием подробной информации, включая загрузку фото.

Редактирование профиля

Тема

Настройка темы: темная или светлая. Также при желании можно настроить индивидуальную цветовую гамму под стиль УЗ.

Светлая тема, Темная тема

Расписание звонков

Для студента и преподавателя доступно расписание звонков. Его можно посмотреть на странице с расписанием. Расписание звонков составляется в СА.

Расписание звонков

Журнал оценок

Для преподавателя доступен журнал оценок, в котором он может посмотреть оценки любого студента по любому предмету и за любой семестр.

Список студентов, Оценки студентов, Оценки выбранного студента

Редактор занятий

Интерфейс для редактирования информации о занятии. Например, преподаватель сам может добавить даты, когда занятие будет отменено.

Общие настройки занятия, Настройки расписания занятия, Создание подгруппы

Общий функционал

Экспорт данных. Например, студент может экспортировать свою зачетную книжку или расписание, сохранить свой QR-code. Преподаватель может экспортировать все посещения студентов, данные о выполнении заданий, расписание;

Для каждого пользователя есть своеобразная ""машина времени"". Пользователь может переключаться по семестрам, например, чтобы посмотреть оценки, расписание, задания за 2-й семестр;

Можно скопировать ссылку на любую страницу, например, на занятие, экзамен, задание. При открытии ссылки будет предложено открыть ее в мобильном приложении;

Push, email уведомления. Уведомления приходят на разные события, например, преподаватель отметил на паре, изменилось расписание, занятие было отменено, выставлена оценка по экзамену или занятию и т.д. Если пользователь не хочет получать какие-либо уведомления, то он может отключить их в настройках. При нажатии на любое push-уведомление приложение перенесет пользователя к соответствующему событию.

Заключение

Использовать систему администрирования можно по ссылке https://campus-ui.ru/auth/login

Скачать мобильное приложение для Android можно тут https://play.google.com/store/apps/details?id=com.campus_mobile"'https://habrastorage.org/getpro/habr/upload_files/3d4/757/8cc/3d47578cc5aab3a782650f4286133351.png'"['https://habrastorage.org/r/w1560/getpro/habr/upload_files/663/da8/55c/663da855c5d3c79dbebdf0852c917ed0.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/a2d/8e1/e58/a2d8e1e587eb7a490e8e19407ef77c6c.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/9e3/747/6d2/9e37476d2ac0deb367fa5b1ca087553d.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/87b/1dd/d95/87b1ddd957c4ebfab510331f46437d76.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/75b/67d/5a4/75b67d5a458e1ce1280202d774c11b40.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/1e7/361/0a7/1e73610a775e0f26d807acf3168c40a8.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/73b/a36/b80/73ba36b80ce94767ae3937ffd291a036.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/9c4/6fb/4d4/9c46fb4d4fc2eed3b62aeaaa00fb5065.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/c73/f93/f0f/c73f93f0f650edd12978b8ce621a38fe.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/1cb/f2b/579/1cbf2b57969fd6227460fa954806e926.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/7b1/db1/a70/7b1db1a70e583f349fcb4535162f2255.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/ec4/964/87b/ec496487be86212d222cd72072a2ddcd.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/1bf/7ce/fae/1bf7cefae832cf10e64871d3c27ae572.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/4e7/d3d/c40/4e7d3dc4024a0d6be27a89b1adc3a1f7.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/fa4/24a/23f/fa424a23fa2e0c759ceb0566dc76ef80.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/fe5/cb8/47c/fe5cb847c95ba24714409c2bbe058501.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/c53/9f0/055/c539f0055f5fc1f0be9635bf973a6651.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/e55/600/604/e556006041c71923902ceb4fad9075b2.png', 'https://habrastorage.org/getpro/habr/upload_files/3d4/757/8cc/3d47578cc5aab3a782650f4286133351.png', 'https://mc.yandex.ru/watch/24049213', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/4f2/9d4/30e/4f29d430ebf5cb26ba3fe64a10623092.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/92d/f30/efd/92df30efd6513964d3247ddf1279847e.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/f7a/e35/4ee/f7ae354eeaa50e345b0298d0cfabd5de.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/306/c52/4c7/306c524c727b38bd4412096281d7c12f.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/a79/5d0/9ef/a795d09effb8c3957ffa95dee206a640.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/d38/9ac/96f/d389ac96f309bd375c2c7190a9d75432.png']"
5'723234'Дайджест научпоп-новостей за неделю, о которых мы ничего не писали'Здравствуйте, с вами Вячеслав Голованов, и я курирую поток «Научпоп» на Хабре. Среди моих задач — увеличение количества публикаций в этом потоке, в том числе через привлечение новых хороших авторов на...'https://habr.com/ru/post/723234/'Здравствуйте, с вами Вячеслав Голованов, и я курирую поток «Научпоп» на Хабре. Среди моих задач — увеличение количества публикаций в этом потоке, в том числе через привлечение новых хороших авторов на Хабр. Если вы всегда хотели написать статью на научно-популярную тему, но боялись начать – это ваш знак. Можете обсудить это со мной через личные сообщения , и/или написать статью в «Песочницу» и кинуть мне ссылку.А сегодня я снова пройдусь по новостям уходящей недели, которые нашей редакции стоило бы осветить подробнее, но не получилось, потому что не судьба.Учёные из Манчестера создали новый материал, получивший название StarCrete. Он изготавливается из космической пыли, картофельного крахмала и соли, и может быть использован для строительства домов на Марсе.Строительство инфраструктуры в космосе в настоящее время является дорогой и трудновыполнимой задачей. Будущее космическое строительство должно опираться на простые материалы, легкодоступные для астронавтов. StarCrete предлагает одно из возможных решений. Учёные, стоящие за этим изобретением, использовали имитацию марсианской почвы, смешанную с картофельным крахмалом и солью, чтобы создать материал, который в два раза прочнее обычного бетона и прекрасно подходит для строительных работ во внеземных условиях. статье , опубликованной в журнале Open Engineering, исследовательская группа продемонстрировала, что обычный картофельный крахмал может выступать в качестве связующего вещества при смешивании с имитацией марсианской пыли для получения материала, похожего на бетон. При испытаниях прочность StarCrete на сжатие составила 72 мегапаскаля (МПа), что более чем в два раза превышает прочность обычного бетона (32 МПа). StarCrete, изготовленный из лунной пыли, оказался ещё прочнее — более 91 МПа.Нынешняя эра освоения космоса характеризуется проверкой и внедрением новых интересных идей – например, многоразовые ракеты. Но ещё одной интересной технологией, без сомнения, являются двигательные системы, не использующие традиционное топливо. Эта технология предлагает множество преимуществ, включая меньшую массу и повышенную энергоэффективность, что в конечном итоге приведёт к снижению их стоимости.10 июня 2023 года полностью электрическая двигательная система для спутников (IVO Quantum Drive) впервые полетит в космос. Эта новая технология является творением компании IVO, Ltd., расположенной в Северной Дакоте, ведущего разработчика технологий беспроводной передачи энергии и ёмкостных технологий. Двигатель будет запущен на ракете SpaceX Falcon 9 в составе специального рейса (Transporter 8), организованного коммерческим партнёром Rogue Space Systems. В случае успешной демонстрации технологии Quantum Drive станет регулярной частью коммерциализации низкой околоземной орбиты.В новом исследовании , проведённом с помощью уже не действующей Стратосферной обсерватории инфракрасной астрономии (SOFIA), была составлена первая подробная карта распределения воды на Луне. SOFIA была совместным проектом НАСА и Германского космического агентства DLR.Благодаря хорошо идентифицируемым лунным особенностям, связанным с наличием воды, исследование позволяет судить о том, как вода может перемещаться по поверхности Луны, особенно вблизи её Южного полюса — важной области для космических исследований.Новая карта охватывает примерно четверть обращённой к Земле стороны лунной поверхности ниже 60 градусов широты и простирается до Южного полюса Луны. Учитывая большой охваченный регион, исследователи смогли легко определить, как вода связана с особенностями поверхности Луны. Также на карте видно, что вода избегает освещённые солнечным светом области и предпочитает холодные участки поверхности.Приведённое выше изображение Луны показаться не слишком впечатляющим, но с технической точки зрения оно просто поразительно. Уникальность снимка заключается в том, что он был сделан с помощью телескопа с использованием абсолютно плоской линзы. Такой тип линз под названием «металинзы» существует уже давно, но недавно группа исследователей из университета штата Пенсильвания изготовила самую большую подобную линзу в истории. При диаметре 8 см она оказалась достаточно большой, чтобы использовать её в настоящем телескопе — и получить приведённое выше изображение Луны, пусть и размытое.Металлинзы производились и раньше, но обычно только в миллиметровом масштабе. В них используются наноструктуры, вытравленные на поверхности самой линзы, заставляющие свет, проходящий через них, направляться в центральную фокусную точку, подобно тому, как это делает изогнутая поверхность обычной линзы, используемой в оптике. Отчасти причиной того, что другие металлические линзы до сих пор были относительно небольшого размера, является сложность создания таких наноструктур на линзах большой площади.Для этого университетская команда обратилась к альтернативному процессу производства — глубокой ультрафиолетовой фотолитографии, которая обычно используется для создания высокоскоростных компьютерных чипов. По сравнению с типичным процессом создания металлических линз с помощью электронно-лучевой литографии, эта технология имеет ряд преимуществ.Виртуальная и дополненная реальность (VR и AR), часто объединяемые под термином «расширенная реальность (XR)», все больше теряют свой нишевый статус и выходят на массовый рынок. Но у большинства приложений дополненной реальности есть одна общая черта: они, как правило, сосредоточены в основном на визуальном восприятии.«Чувство осязания обычно остаётся вне уравнения, хотя оно играет очень важную роль в том, как мы воспринимаем мир», — объясняет профессор Юрген Штаймле, возглавляющий исследовательскую группу Саарского университета по взаимодействию человека и компьютера в Саарском кампусе информатики. Команда учёных поставила перед собой задачу развить и улучшить используемые в XR подходы.Одним из результатов этой работы стал проект «Tacttoo», сочетание слов «тактильный» и «татуировка» и точно описывает то, что было разработано в рамках проекта: сверхтонкая электронная фольга толщиной всего 35 микрометров, которую можно нанести на кожу как временную татуировку и которая может стимулировать чувство осязания электрическим током без необходимости использования каких-либо движущихся частей.'https://habr.com/share/publication/723234/6d342a1c68bc208eb803e4f93d6e17b6/'"['https://habrastorage.org/r/w780q1/getpro/habr/post_images/9c5/ef3/88e/9c5ef388e48d4d2bb9bf0f07c43feb27.jpg', 'https://habrastorage.org/getpro/habr/avatars/329/fc8/9e5/329fc89e55a9132bf200ff315065f3f7.jpg', 'https://habrastorage.org/r/w780q1/getpro/habr/post_images/829/46f/9d4/82946f9d403bf7b8b24a61da622e7205.jpg', 'https://habrastorage.org/r/w780q1/getpro/habr/post_images/4c6/923/c48/4c6923c48a862fdabced6a1d945fcd02.jpg', 'https://habrastorage.org/r/w48/getpro/habr/avatars/329/fc8/9e5/329fc89e55a9132bf200ff315065f3f7.jpg', 'https://habr.com/share/publication/723234/6d342a1c68bc208eb803e4f93d6e17b6/', 'https://mc.yandex.ru/watch/24049213', 'https://habrastorage.org/r/w780q1/getpro/habr/post_images/615/684/920/6156849208df27490e478824e417d876.jpg']"
6'723230'Как мы продавали хостинг в Европе'Довелось мне работать маркетологом в хостинговой компании на западном рынке. Все нюансы не поведаю, да и не все знаю, наверняка были моменты, скрытые от сотрудников, а вот как был построен бизнес и...'https://habr.com/ru/post/723230/'"Довелось мне работать маркетологом в хостинговой компании на западном рынке. Все нюансы не поведаю, да и не все знаю, наверняка были моменты, скрытые от сотрудников, а вот как был построен бизнес и об особенностях менталитета некоторых европейских стран – расскажу.

В Европе принятие решения происходит несколько по-другому, нежели в России. Это во многом связано, во-первых, с особенностью мышления, с тем, что ценности у нас отличаются или имеют разную степень влияния на принятие решения, во-вторых, с уровнем развития экономики в целом.

Можно написать миллион статей о разнице мировосприятия европейца и русского, что они дескать открытые на людях, улыбаются, мы же внешне хмурные, зато душа у нас широкая, что они ценят не напыщенную красоту, которой можно только кичиться, а их интересует функциональность прежде всего, а уж если говорить о людях, то для них ценнее внутренняя красота. Поэтому если продавать хостинг, то уж точно не нашими методами.

Рынок хостинга в этом проклятом забугорье, как говорил мой преподаватель по программированию, давно распределен, а потом еще раз перераспределен. Как уже много раз писали, и здесь в том числе, соваться туда – дело пропащее, 90%, что прогорите, некоторые пробовали и подробно описали свой опыт. Но мы не искали простых путей и не боялись. Вооружившись знаниями и отвагой, присущими лишь глупцам, открыли в некоторых странах офисы, посадили туда местных продавцов, со знанием языка. Это было очень важно.

Мы работали в Португалии, запускали рекламу, а тот, кто обрабатывал заявки, сказал нам, ребята, а можно сделать так, чтобы не было заявок от португальцев-бразильцев (приезжих их Бразилии), они ничего не покупают, им надо все и бесплатно, а лиды, к слову сказать, в этом регионе стоили дорого. Плюс ко всему еще у них языки отличаются, причем, как мы потом выяснили – существенно. Даже хотели усилиться через контекстную рекламу, обратились в eLama, нам сказали, можем сделать рекламу, но только на бразильском португальском. Занавес. Сейчас, возможно, что-то изменилось и ребята нашли констектолога, который владеет именно португальским-португальским, как мы его называли, или как пишет википедия – европейским португальским, но на тот момент было так. Это еще раз подтвердило большую разницу в нюансах одного португальского языка. Ведь опять-таки, если верить той же википедии, то различия выглядят такими же, как в британском и американском английском, что может значить лишь одно, разница несущественная, а для рекламы вообще ее нет. В реальности оказалось все не так и мы в этом убедились. По сути, таргетироваться на одних лишь европейских португальцев возможности не было, и настройки Facebook(а), где были такие группы обозначены отдельно, не гарантировали верную выборку. Лид стоил от 6$, что не так дорого в сфере, но при условии того, что «пустых» лидов было слишком много, до 80%, мягко говоря, это было невыгодно. Еще одной португальской особенностью было – неспешность, вот уж кто никуда не торопится, на все согласны, все сделаем, да, конечно, и так проходит месяц, второй…

Собственно, суть бизнеса был в чем. Европейцам не сильно важно, если вы очень крутая, развивающаяся компания, и даже если вы действительно лучшие на всем рынке, если у вас лучшее оборудование, самая удобная админка, самая лучшая в мире техподдержка, для них - вообще не туда. Их это не интересует. Им нужна история вашего создания, развития и степень надежности. Они предпочтут компанию с многолетним опытом, в которой все параметры будут хуже, чем вас – выскочку. Зная это, а еще и то, что рынок не самый растущий, или точнее, не везде, мы понимали, что надо работать все же с новыми клиентами, ведь переманивать чьих-то, ой какое неблагодарное занятие, а рынок, не забываем, перегрет крутыми предложениями, дикими скидками. И мы стали создавать сайты – бесплатно. Но условие бесплатности – покупка нашего хостинга от года. До того, как определиться с этим направлением, мы перепробовали многие варианты, и seo, где обещали, если перенести на наш хостинг ваш сайт – он будет работать быстрее, что соответствовало действительности, но, столкнувшись с техническими сложностями по переносу, мы лавочку прикрыли, затраты временные не покрывали издержки. Мы предлагали маркетинг, в котором уже были сильно прокачены, но и это был путь в никуда, никаких гарантий, что чей-то бизнес станет более успешным, ключевое слово «чей-то», по сути любой маркетинг – это плотная работа с клиентом, где надо не только рекламу запускать, но еще и работать над подачей продукта, качеством и прочими характеристиками, где хостинг порой – одна десятая успеха, сайт будет летать, но услуги, предлагаемые на нем могут быть просто никому не нужны по разным причинам. Просто в таких ситуациях мы попадаем на общую территорию владельцев бизнеса, продажников и других участников процесса, где каждый уверен, что плохие продажи – это вина другого отдела. Совсем не похоже на путь развития успешной хостинговой компании. Мы отказались и от этого. А вот то, что действительно сработало – это бесплатные сайты. Для этого мы наняли отдел начинающих дизайнеров, которые еще только начинали свой путь и работали на портфолио, учились, так сказать, еще ремеслу, сделали мы это в Беларуси, где очень грамотные ребята в этой сфере и цены на их услуги вполне демократичные по сравнению с европейскими. Перейдем к менталитету.

Как покорить ирландцев. Шансов практически нет. Мы долгое время собирали заявки, но не могли понять, почему никто не поднимает трубку, когда перезванивал наш менеджер. Оказалось все просто, пользоваться телефонами во время работы или плохой тон или попросту запрещено, если, конечно, это не часть твоей работы, а если часть, то звонят только по делу. И вот примерно в 18.00 ирландцы высыпаются на улицу, после трудового дня, садятся в первом попавшемся месте, порой на тротуар или лужайку, чаще кафе, и чатятся. Чтобы это понять, мне пришлось найти человека, который прожил в Дублине 10 лет, расспросить его обо всем и случайно узнать такую особенность. Ок, мы стали запускать рекламу на мессенджеры, и, аллилуйя, стали приходить ответы! Но радоваться не пришлось долго, местные не будут что-то заказывать в странах третьего мира или даже в европейских не самых процветающих странах, а вот офис открывать в Ирландии – мы не планировали. Это очень специфичный народ, который крайне не доверяет кому-то откуда-то, вот у ирландца есть сосед, который делает кривые сайты левой рукой, к нему он и обратиться, ну и что, что плохо, для его целей – пойдет, зато свой, тут рядом.

С поляками тоже не все сразу стало хорошо. Может из-за перенасыщенности рекламы, или так называемой баннерной слепоты, они просто не реагировали, или делали это крайте редко. Я очень долго искала пусть успеха, изучала специфику рекламы, потребности, общалась с местными, ответа прямого найти не удалось, причины были очень расплывчатыми, ну может не тот таргет, не тот посыл, говорили мне, может не надо никому…И вот только после того, когда вдруг я поняла, что все поляки очень любят контрено свой город и хотят услышать предложение, адресованное не всем подряд, а конкретно ему, дело пошло. Просто, например, итальянцы тоже такие, и они об этом кричат везде, нет предела их гордости от того, что они – итальянцы! В Польше же эти чувства скрыты, почему? Может, потому что Польша не Италия, или вообще не принято показывать свою любовь, такой характер. И благодаря очень узконаправленной рекламе, буквально точечной, мы смогли получать огромное количество заказов.

А словаки вообще не сильно от нас отличаются, любят поговорить, удостовериться в том, что вы – не врете, отлично реагируют на чувство юмора и весьма добродушны. Платить только не особо могут, денег не много, а так – благодать. Да, и еще, не дай вам Бог сделать ошибку в рекламе на словацком, воспринимают это как личное оскорбление.

Литовцы. Очень продвинутая в сфере IT страна, огромный процент от всех жителей – аудитория, разбирающаяся в сложных интернет-продуктах и практически никому не приходится объяснять, что такое хостинг или сайт, пустых заявок - минимум. Быстро реагируют, способны оперативно принимать решения, но очень должно быть все четко, качественный договор, если сказали, что позвоните в 15.00, так и сделайте, им присущ налет немецкого педантизма, такие моменты увеличивают их доверие. И заговорить их сложно, как порой россиян, навещать лапшу, уболтать, уговорить, эти люди умеют говорить жестко «нет».

Латыши. Мы их воспринимали, как и литовцев, и в этом была наша ошибка. Казалось бы, похожие языки, менталитет, живут рядом, понимают друг друга, в чем проблема? Оказалось, что нет. Во-первых, сфера IT очень намного слабее развита, просто обратная какая-то пропорциональность, если в Литве аудитория увеличивалась, то в Латвии сокращалась, во-вторых, у них нет этого азарта, что-то узнать, постичь, быстрее сделать, организовать, во всяком случае по нашим наблюдениям, да, денег не сказать, что много, но сильно что-то менять они не будут, для них риски дороже стабильности, за журавлем в небе не будут гнаться. Поэтому наш офис в Риге не очень-то окупался.

Кроме Европы мы открывали направление и в России, офис в Екатеринбурге. Все закончилось не очень весело. Сотрудники украли базу, а позже и технику кто-то вынес. Разбираться на стали, но больше в Россию не лезли.

В Беларуси было все относительно стабильно, тихо, можно сказать – заявки, клиенты, всем все надо быстро, хотя столько недовольств, как у белорусов не было нигде. Чуть что, сразу к нам, это не работает, то не так, хотя зачастую надо было просто самим сесть и разобраться. Времени уходило много на такие нюансы, в остальном – мы были без претензий, клиенты слово держали, если обещали что-то, платили исправно, порой с задержкой, соображали быстро.

Это далеко не все нюансы и особенности продвижения, но с большего самое интересное изложено. Из выводов можно сказать однозначно, что надо изучать рынок со всех сторон перед тем, как пойти в атаку, и это касается не только хостинга, но и любых других услуг."'https://habrastorage.org/getpro/habr/upload_files/50a/3de/b5e/50a3deb5ec746093b3ff082f41de902a.jpeg'"['https://habrastorage.org/r/w780q1/getpro/habr/upload_files/416/a93/3f7/416a933f7d9610d6e149c10fc105e5de.jpeg', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/ef6/8ca/186/ef68ca186c9d04d68550a03481f58327.jpeg', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/02d/325/f77/02d325f7711ebca4854fac4cea4d5f48.jpeg', 'https://habrastorage.org/getpro/habr/company/60a/74a/7cb/60a74a7cbe8ac8b9a6e58465658a2362.png', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/2a7/ad9/271/2a7ad927184365762a5a77a9460bbbe0.jpeg', 'https://habrastorage.org/getpro/habr/upload_files/50a/3de/b5e/50a3deb5ec746093b3ff082f41de902a.jpeg', 'https://mc.yandex.ru/watch/24049213']"
7'723226'Гибридная методология ведения проектов WaterScrum как мы это настроили'Всем привет. Меня зовут Геннадий Гребеник и мы с командой трансформации Фора-Банка столкнулись с задачей сочетания в своей работе классических и гибких методологий управления проектами. В ходе...'https://habr.com/ru/post/723226/'"Всем привет.

Меня зовут Геннадий Гребеник и мы с командой трансформации Фора-Банка столкнулись с задачей сочетания в своей работе классических и гибких методологий управления проектами. В ходе решения данной задачи командой были разработаны подходы к гибридной модели ведения проектов, когда управление сверху остается в классическом, каскадном планировании, а команды снизу реализуют данные проекты с применением гибких подходов управления. В виду того, что многие организации в своей работе сталкиваются с необходимостью сочетать в своей работе классические и гибкие методологии управления проектами, хотим поделиться своим опытом.

Современные подходы ведения проектов и разработки новых решений дают гибкость, необходимую в конкурентной борьбе за клиента, за качество сервисов, за лучший клиентский опыт. Помогают делать успешные проекты в быстро изменяющейся среде. Но не для всех компаний данная методология доступна в чистом виде, и дело тут в ментальности и жизненном опыте организации. Прежде всего, для понимания необходимости и места гибридной методологии, давайте разберем основные причины невозможности внедрить книжные Agile в большинстве Российских организаций.

1. Неумение делегировать ответственность за бизнес результат. Неумение ставить векторные задачи и контролировать процесс, не с точки зрения реализации шагов, а с точки зрения получения конечного результата.

2. Из первого пункта вытекает то, что у Бизнеса, у ТОП менеджмента при использовании гибких методологий нет ощущения контроля процесса. Если конечная цель не определена, бюджеты плавающие, сроки реализации – чем быстрее, тем лучше, то нет возможности зацепиться за привычные формализованные критерии оценки эффективности и успешности выполнения задач и поручений.

3. Убеждение в том, что сотрудники могут давать результат только под давлением целей и сроков. Отсутствует понимания полноценной ответственности и заряженности сотрудников на общий результат.

4. Модели мотивации сотрудников, как правило, строятся от качественного выполнения своих должностных обязанностей и очень редко от финансового результата конкретного проекта или направления бизнеса. Еще одной сложностью в постановке и контроле правильных целей является непонимание или неумение рассчитывать бизнес результат для конкретных подразделений, продуктов, сервисов. Отсутствие возможности всестороннего анализа деятельности своей организации.

Если же возьмем классический каскадный подход планирования и реализации проектов WaterFall, то для данной категории организаций, он становиться инструментом, дающим ощущение контроля и управляемости проекта. Для большинства Российских организаций переход на гибкие методологии без глобальной смены бизнес модели, модели управления, ТОП менеджмента невозможен. Таким образом, реализуя новые продукты, системы, сервисы встает вопрос, каким образом, не меняя ощущения контроля, для Заказчика реализовать подходы управления, соответствующие современным практикам? Именно об одной из возможных комбинаций методологий хотел бы сегодня рассказать. Делимся своим опытом, в рамках которого разработали подход и методологию гибридного управления проектами, в котором гибкие методологии внедрены внутрь классического каскадного подхода. Сочетание гибкой модели управления на тактическом уровне с отражением стратегических изменений в каскадном планировании. WaterScrum – наше внутреннее названия комбинированной методологии.

Основные определения

Прежде чем перейти к описанию несколько важных постулатов:

· Конечны результат никогда не будет соответствовать запланированному

· Объем неопределенности пропорционален объему задачи

· Заказчик на входе не знает, что хочет на выходе Проекта

· С опытом повышается точность оценки Проектов

Теперь про процесс.

Процесс разделен на две части, Каскадная и Гибкая части методологии.

Каскадная часть:

Проект – временное предприятие, направленное на создание уникального продукта, услуги или результата (PMBOK), в своей практике мы используем данную форму для задач выше 100 ч.д. Временные предприятия менее 100 ч.д. для нас описываются как Задачи.

Бюджет и сроки проекта – бюджетная оценка проекта формируется на базе оценки первоначальных требований к категории проекта и поскольку мы внутри процесса используем гибкий подход, объему возможных дополнительных задач проекта. При формировании оценки Проекта получаем три показателя:

· Базовая оценка проекта 100% трудозатрат и сроков - объем проекта

· Риски проекта 20-30% от объема проекта

· Дополнительные работы 0 – 30% объема проекта (данная сумма может оставаться как резерв и выделяться траншами при формировании запросов на изменение проекта)

Бюджетная оценка проекта включает в себя все три составляющие. Бюджет на реализацию проекта выделяется в размере первой и второй частей, третья часть остается на новые работы, появившееся в рамках реализации проекта – запросы на изменение Проекта.

Категория риска проекта – уровень риска, который несет проект и который зависит от уровня зрелости методологии в организации (насколько хорошо существующие команды, зная предстоящие задачи, могут спрогнозировать появления новых рисков), объема проекта, глубины проработки входящей задачи. Данные показатели определяются для организации индивидуально и меняются в ходе вызревания методологии в организации.

Вызревание методологии – важнейший процесс, который увеличивает точность прогнозирования будущих Проектов за счет накопления и унификации опыта.

Категория проекта – в зависимости от предполагаемого объема проекта, определяет методы планирования и наличие и проработку первоначальных артефактов на входе. Для себя мы определили следующие градации Проектов/Задач

· Задачи до 10 ч.д. Задача описывается верхнеуровневой постановкой. Данная постановка может быть сформулирована в виде письма электронной почты или комментарием в ходе ежедневного планирования (Ежедневный SCRUM) или планирования спринта. Данная формулировка обязательно должна фиксироваться в трекинговой системе ведения задач. Оценка осуществляется экспертом разработчиком или аналитиком с допустимым уровнем погрешности 20% - 30% (уровень риска). Данная погрешность заносится в оценку сроков и объема задачи. Если эксперт дал оценку в 8 ч.д., то финальная оценка задачи будет 9,6 ч.д. при уровне риска 20%. Именно 9,6 ч.д. идут в планирование ресурсов, бюджетов и сроков.

· Задачи до 100 ч.д. Задача описывается верхнеуровневой постановкой с проведением анализа работ и формированием каскадного плана. Оценка осуществляется аналитиками с привлечением разработчиков и архитектора решения. Уровень погрешности 20%-30%, который так же заносится в оценку задачи.

· Проекты до 500 ч.д. Задача описывается формальной постановкой с проведением анализа работ и формированием каскадного плана. Оценка осуществляется аналитиками с привлечением разработчиков и архитектора решения на базе формальной постановки от Заказчика. На данные задачи возможно привлечение enterprise архитектора. Уровень погрешности 30%-50%, который так же заносится в оценку задачи.

· Проекты до 2000 ч.д. Задача описывается формальной детальной бизнес постановкой, которая в данной методологии является первоначальным договором о реализуемых требованиях. Формальная детальная бизнес постановка, как правило, готовиться Заказчиком совместно с Бизнес аналитиками исполнителя, в которую входит полноценная проработка задачи с постановкой архитектурного решения, брифа системного анализа. На базе планирования формируется каскадный план. Уровень погрешности 30%-50%, который так же заносится в оценку задачи. Для особо крупных проектов в ходе реализации задачи могут существенно меняться. Для этих целей целесообразно разделить первоначальную оценку проекта с риском уровня 20%-30% и дополнительный бюджет на реализацию новых требований 20%-30%, как это было описано ранее.

· Проекты свыше 2000 ч.д. необходимо дробить. Оценка подобных проектов в гибридной методологии не возможна в связи с значительным изменением состава в течении его реализации.

Стратегический план проекта – план проекта, построенный по принципам каскадного планирования, отражающий основные комплексные задачи, необходимые к реализации. Фактически, это дорожная карта проекта, сохраняющая взаимозависимости между задачами.

Временные слоты проекта – элемент, совмещающий гибкие методологии с каскадным планированием. Градация сроков задач в каскадной части проекта формируется в соответствии с двух-трех недельными спринтами, принятыми в области гибкой методологии. Таким образом задачи в проекте планируется дискретно по спринтам гибкой части методологии.

Бизнес постановка – документ, описывающий первоначальные требования на входе, является неким, первоначальным соглашением об ожидаемом функционале. В ходе формирования бизнес постановки целесообразно вносить кодировку требований для дальнейшей формализации изменений требований в ходе выполнения проекта.

Гибкая часть методологии.

Спринт – временной цикл проекта в гибкой части методологии. В отличии от Scrum подхода в спринт могут входить отдельные части целой, крупной задачи. В своей практике мы используем спринт/спринты на бизнес анализ, системный анализ, разработку, тестирование, сборку и регресс. Из Scrum остается требование получения ощутимого, проектно-значимого инкремента по задачи.

Backlog проекта – Стратегический план проекта. Задачи распределены по спринтам, в соответствии с текущими приоритетами.

Планирование спринта происходит в первый день спринта и включает в себя формирование задач на спринт из Backlog проекта. При этом происходит пересмотр приоритетов, объема задач, который в последствии, после планирования спринта, найдет свое отражение в Стратегическом плане проекта (Каскадной части методологии). Задачи распределенные на команду, отражаются в трекинговой системе. Мы используем в своей работе Jira.

Ежедневный Scrum – стандартный процесс гибкой части методологии. Короткие встречи команды или части команды для ежедневного планирования работ.

Предпланирование спринта – отдельная, дополнительная встреча между Бизнес-заказчиком и ключевыми сотрудниками команды – Scrum мастером/руководителем проекта, аналитиками. Задачи, поступающие на вход команде от Бизнес-заказчика должны быть проработаны и формализованы в соответствии с их категорией. Цель мероприятия, определить готовность задач со стороны Бизнес-заказчика для следующего спринта. Данная встреча позволяет управлять потоком задач со стороны Бизнеса.

Показ – мероприятие, планируемое на конец каждого спринта для демонстрации его результата. В показе принимает участие вся команда и представители Бизнес-заказчика. Показ осуществляется по всем задачам, запланированным в спринт.

Ретроспектива спринта – внутренняя встреча команды с целью:

· высказаться

· определить основны точки улучшения процесса

· найти точки возникновения рисков с категоризацией и учетом рисков в общей системе знаний

Определение точек возникновения рисков, категоризация и учет является ключевым механизмом вызревания методологии в организации. В ходе анализа выполненных работ проводится их категоризация по следующему принципу:

· Запланированные работы на задачу

· Работы на новые, незапланированные задачи – фиксируются как доп. требования.

· Работы на непредвиденные задачи или недооценка выполняемой задачи – Риски

Блок Риски так же подвергается категоризации и учету:

Категории риска – в ходе проекта возникают риски, которые распределяются на три категории для дальнейшего использования в ходе созревания гибридной методологии

· Ошибки в оценке, ошибки в процессах создания продукта – замеряем, корректируем процессы, обогащаем базу знаний

· Новые знания – риски связанные с отсутствием на входе знаний об окружающей среде, процессах – задача обогащает базу знаний

· Непредсказуемые риски – замеряем и учитываем в следующих оценках

Дополнительные требования – задачи, возникающие в ходе реализации проекта, оцененные командой и согласованные с Бизнес-заказчиком. В случае наличия Бизнес постановки на входе, содержащие маркировку изменяемых или добавляемых бизнес требований. Согласование большого количества мелки работ всегда проходит легче согласования одной комплексной задачи. Данный подход позволяет минимизировать сроки на формальное согласование доработок и позволяет избежать задержек в зоне гибких методологий.

И снова каскадная часть

Запрос на изменение проекта – формальный документ, который оформляется в ходе реализации проекта, меняющий объем задач и сроки реализации проекта. Данный запрос формируется на базе сформированных доп. требований, возникших в ходе проекта. Обеспечивает своевременную корректировку Стратегического плана проекта, утверждение изменений на высшем уровне управления организацией.

Проектный комитет – еженедельное собрание основных участников проектной деятельности организации для актуализации Стратегических планов проектов, а также решения вопросов взаимосвязанности проектов и ресурсов.

Описание процесса

Формирование годового бюджета – В ходе стратегического планирования формируется план Проектов с верхнеуровневым расчетом бюджета. Поскольку на входе нет точного понимая, что должно быть реализовано, составление точного бюджета невозможно. На данном уровне делается так называемая бюджетная оценка. Есть несколько методов расчета бюджетной оценки для целей годового планирования:

· Расчет бюджета по аналогичным проектам. Делается экспертная оценка уровня сложности и приводится к ранее реализованным проектам той же категории.

· Расчет бюджета по фиксированной или предполагаемой команде

· Декомпозиция задачи. По теории вероятности, чем детальнее разбивается проект с целью оценки входящих в него компонент, тем выше точность оценки Проекта. Но для этого необходим глубокий опыт в предметной области и практика реализации подобных проектов.

· Сколько можем себе позволить – часто встречающаяся модель, но это не тема текущей статьи.

Формирование Проекта – формальный процесс, состоящий из сбора требований, построения архитектурного решения, декомпозиции задач и планирования Проекта. Классический подход, на котором останавливаться не буду, единственное, хочу обратить внимание, что задачи свыше 500 ч.д. желательно проработать детально, с подготовкой Бизнес требований, архитектурного и интеграционного решений. Если вы имеете коммерческие взаимоотношения со своим Заказчиком, как в нашем случае, данные работы необходимо выполнять за отдельно выделенный бюджет и до формирования окончательной оценки проекта. На выходе в Проекте должны быть как минимум:

· Бюджетная оценка проекта с учетом рисков и дополнительных работ

· Стратегический план проекта

· Схема проектных команд и модель коммуникации

· Ограничения и риски проекта

Далее утверждение, выделение бюджета, контрактация и старт.

Стратегический план проекта является сформированным и распределенным по приоритетам и зависимостям Backlog-ом гибкой части методологии. Планирование релизов происходит в зоне каскадного планирования с переносом в зону гибких методологий. В рамках Планирования спринта осуществляется анализ задач текущего спринта, декомпозиция на атомарные задачи сотрудников. Более правильный подход, распределение задач – по желанию, когда член команды сам вызывается на решение задачи и определяет объем и сроки реализации. Если данные сроки и объем не соответствуют запланированным в каскадной части методологии, делается детальный разбор задачи с привлечение тимлидов. В ходе данного анализа либо меняется срок в гибкой части методологии, либо корректируется задача в каскадной части планирования. В данном процессе фиксируется плановые сроки и плановые трудозатраты по атомарным задачам.

Далее система управления максимально приближенная к Scrum методологии

Ежедневный Scrum, ежедневное планирование с командами, которое может быть на всю команду 15-30 минут, или разбито по крупным направлениям. У себя мы часто применяем разбиение, так как в нашей практике есть команды гораздо превышающие максимальное число команды по классической методологии Scrum. Мы используем команды от 6 до 25 человек за счет чего получаем экономию на управлении командой.

Разработка, аналитика, тестирование, регрессионное тестирования проводится в соответствии с запланированными задачами.

Для детального анализа плана/факта Проекта производится контроль списания трудозатрат по принципу 40 ч.ч. в неделю. Превышение фактически потраченного времени сотрудника фиксируется дополнительными часами только в том случае, если данные работы были согласованы с организацией. Данные работы оплачиваются по двойной ставке в соответствии с трудовым законодательством и увеличивают время, потраченное сотрудником на проекте. Данный учет позволяет контролировать реальные расходы проекта (деньги) и является входящим сигналом для корректировки модели управления рисками.

В ходе реализации задач идет анализ и корректировка плана в зоне гибкой методологии, которая при следующем планировании спринта или по результатам проектного комитета корректируется в зоне каскадного планирования. Незначительное изменение проекта в каскадном планировании остается на уровне Проектного комитета. При существенных отклонениях вопрос выносится на уровень управленческой команды организации.

Сборка решения осуществляется как при подготовке релиза, так и в процессе разработки для показа результатов спринта, формирования тестовых версий в тестовом контуре, предпрод и продакшен. Процесс сборки, поставки решения осуществляется через стандартные процедуры DevOps.

Цикл пользовательского тестирования осуществляется в зоне каскадного планирования, так как Заказчик, как правило, живет вне гибкой методологии. В нашей практике есть проекты, Заказчик которых уже перешел в зону гибких методологий. Таким образом, гибридный подход затягивает Заказчиков на уровне исполнителей и руководителей локальных продуктов в новый современный подход управления проектами и повышает эффективность взаимодействия в проектах.

Если в ходе реализации Проекта возникают новые задачи или задачи меняются в связи с изменение бизнес требований, данные задачи оцениваются и согласуются с Бизнес заказчиков в режиме ежедневной работы команды. Большинство данных задач не превышают 10 ч.д.. Если в ходе реализации возникает более обширная задача, процесс уходив в ветку планирования спринтов или в целом перепланирование проекта в каскадной зоне. Для гибкой и оперативной реакции на изменения у Бизнес заказчика должен быть предусмотрен дополнительный бюджет на изменения, о котором говорилось ранее.

Процесс планирования крупных задач всегда идет в зоне каскадного планирования.

Перенос на прод, и сдача функционала Заказчиком осуществляется в стандартной каскадной модели. В случае возникновения доработок, исправлений ошибок задачи дополняют Backlog и уходят зоны гибкой методологии, в которой учитываются в планировании работ следующего спринта.

Закрытие работ проходит в классическом режиме, когда готовится весь перечень сопроводительной и технической документации (готовиться в процессе разработки) и осуществляется прием функционала Заказчиком. Если Исполнитель юридически развязан с заказчиком, запускается процесс закрытия робот в юридически-правовой плоскости.

Заключение

Данная методология позволяет решить ряд вопросов, и обеспечить гибкое управление проектами в организациях, неготовых к применению гибких методологий.

· Сохраняется гибкость при ведении проектов, есть возможность оперативно пересматривать и изменять задачи проекта

· У Заказчика сохраняется ощущения контроля, есть ориентиры в виде бюджетов и сроков

· Идет естественное проникновение гибких методологий в подразделения Заказчика. Заказчик становиться ближе и более погруженным в проект, что повышает его лояльность

· ИТ команда понимает цели Проекта и активно участвует в формировании направления его развития

Минус

· Дополнительный административный и управленческий ресурс для сочетания двух противоположных методологий."'https://habr.com/share/publication/723226/447529abc8ab32568d1a4d4f4dde42d1/'"['https://habrastorage.org/r/w1560/getpro/habr/upload_files/a6c/3f3/a6f/a6c3f3a6f4b8aeaac15f982ed173438c.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/fa3/514/cf9/fa3514cf9d0e04608a574dbd96f4bb4a.png', 'https://habr.com/share/publication/723226/447529abc8ab32568d1a4d4f4dde42d1/', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/195/125/c86/195125c86a30807439efaa7863dfd966.png', 'https://mc.yandex.ru/watch/24049213', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/a1d/ecf/ec5/a1decfec56fa222ae0359633e9e6f4e8.png']"
8'723224'Модель обнаружения смс-спама: создаем и тестируем'Автор статьи: Рустем Галиев IBM Senior DevOps Engineer & Integration Architect Привет Хабр! В прошлой статье мы векторизировали данные, теперь нам осталось написать модель и протестировать её Мы...'https://habr.com/ru/post/723224/'"Автор статьи: Рустем Галиев IBM Senior DevOps Engineer & Integration Architect

Привет Хабр! В прошлой статье мы векторизировали данные, теперь нам осталось написать модель и протестировать её



Мы построим модель для обнаружения спам-сообщений с использованием алгоритма случайного леса. Случайный лес — это очень мощный алгоритм, который очень широко используется. Мы не будем углубляться в математику алгоритма случайного леса, а воспользуемся его реализацией в библиотеке Scikit-Learn.



Мы создаем модель с использованием алгоритма случайного леса.

Мы построим модель для обнаружения спам-сообщений с использованием алгоритма случайного леса. Затем проверим модель на наборе обучающих данных.

Алгоритм случайного леса разбивает набор данных на подмножества строк и столбцов. В каждом из подмножеств алгоритм случайного леса создает деревья решений на основе данных. Каждое дерево решений делает прогноз. Затем он собирает все прогнозы и принимает решение, наиболее популярное среди деревьев решений на подмножествах данных. Теперь, чтобы сделать отдельные деревья решений, алгоритм дерева решений будет уделять больше внимания функциям, которые могут быть более важными. Ради справки, вы можете понять, что дерево решений будет разбивать набор данных, чтобы принимать решения на основе того, насколько примеси уменьшаются в наборе данных.

Ранее мы начали с набора содержимого SMS и связанных с ним меток, чтобы определить, является ли SMS доброкачественным или спамом. Из содержимого SMS мы определили количество URL-адресов в содержимом и количество мобильных номеров в содержимом. Это дало нам 2 функции. Затем мы преобразовали очищенный текст из содержимого в матрицу TF-IDF. Итак, теперь у нас есть обучающий набор данных, который имеет 5104 точки данных, и каждая точка данных имеет 7936 признаков. Кроме того, у нас есть 4334 точки данных для безопасных SMS-сообщений и 680 точек данных для спам-сообщений.

Примечание. Когда мы создавали матрицу TF-IDF в предыдущей лабораторной работе, мы установили ngram_range в диапазоне от 1 до 4. Это создало более 80 000 функций. Здесь для ngram_range установлено значение от 1 до 1. Это сделано для того, чтобы модель помещалась в память, доступную на этой небольшой машине. Если вы работаете на более крупной машине, вы можете попробовать увеличить диапазон ngram_range .

Открываем файл, в который будем писать код:



spamSMSDetection.py



И наш код:

import createTFIDF import os _, _, X_train, X_test, y_train, y_test = createTFIDF.createTFIDF() os.system('clear') from sklearn.ensemble import RandomForestClassifier rf = RandomForestClassifier() rf.fit(X_train, y_train) import pandas as pd df = pd.DataFrame(columns = ['Feature', 'FeatureImportance']) df['Feature'] = X_train.columns df['FeatureImportance'] = rf.feature_importances_ print('Importance of the Features in the Model



', df.sort_values(by = 'FeatureImportance', ascending = False))

Прогоним его



python3 spamSMSDetection.py

В выводе вы видите, что наша программа создала модель с использованием алгоритма случайного леса. Дисплей показывает важность функций в модели. Чем важнее функция в модели, тем большее влияние она оказывает на предсказание модели.

Тестируем модель на тренировочном датасте

На предыдущем шаге мы создали нашу модель для обнаружения спам-сообщений с использованием алгоритма случайного леса. Теперь мы будем делать прогнозы по обучающему набору данных, используя созданную нами модель. Делая прогнозы в наборе обучающих данных, мы можем сравнить прогнозы с фактической меткой, доступной нам для каждого SMS в наборе обучающих данных, предоставленной экспертами. Это сравнение покажет нам, насколько хороша наша модель. Мы проверим, сколько прогнозов модель сделала правильно, и это даст нам точность модели. Мы также создадим матрицу путаницы(confusion matrix), которая покажет нам, в скольких случаях модель предсказала правильно, а в скольких — нет.

from sklearn.metrics import confusion_matrix from sklearn import metrics import pandas as pd os.system('clear') yTrainPred = rf.predict(X_train) confusionMatrix = confusion_matrix(y_train, yTrainPred, labels = rf.classes_) c = pd.DataFrame(confusionMatrix, columns = rf.classes_) c.index = rf.classes_ print('Confusion Matrix



', c) print(""



Training Accuracy = %5.5f%s"" % (metrics.accuracy_score(y_train, yTrainPred) * 100, ""%""))

python3 spamSMSDetection.py

Обратите внимание, что точность модели составляет 99.98006%.

В матрице путаницы обратите внимание на следующее:

В 4334 случаях ССМ были действительно доброкачественными, и модель также предсказывала, что они были доброкачественными. Это так называемые истинные плюсы.

В 679 случаях SMS на самом деле были спамом, и модель также предсказывала, что они были спамом. Это так называемые истинные негативы.

В 1 случаях SMS были на самом деле безопасными, и модель предсказывала, что они были спамом. Это так называемые ложные срабатывания.

В 1 случаях SMS на самом деле были SMS-спамом, и модель предсказывала, что они были безопасными. Они называются ложноотрицательными.

Теперь к тестированию!

Предварительно обработаем тестовый набор данных и протестируем модель

Мы разработали модель обнаружения спам-сообщений с использованием алгоритма случайного леса. Мы проверим эту модель на наших тестовых данных и некоторых данных, близких к реальному времени. Чтобы протестировать модель, мы предоставим необработанные данные и предварительно обработаем их до формы, ожидаемой моделью. Затем мы делаем прогнозы на основе этих предварительно обработанных данных.

Начнем с тестирования модели на тестовых данных. Однако, прежде чем мы сможем применить модель для прогнозирования тестовых данных, мы должны предварительно обработать тестовые данные так же, как мы предварительно обработали обучающие данные. Получив предварительно обработанные данные, мы можем применить модель.

import os import createModel rf, tfidf, le, X_train, X_test, y_train, y_test = createModel.createModel() os.system('clear') import pandas as pd tfidfText = tfidf.transform(X_test.cText) dfTFIDF = pd.DataFrame(tfidfText.todense(), columns = tfidf.get_feature_names_out()) X_test_temp = dfTFIDF X_test_temp['noURLs'] = X_test['noURLs'] X_test_temp['noMobiles'] = X_test['noMobiles'] X_test_temp['noURLs'] = X_test_temp['noURLs'].fillna(0) X_test_temp['noMobiles'] = X_test_temp['noMobiles'].fillna(0) X_test = X_test_temp yTestPred = rf.predict(X_test) from sklearn.metrics import confusion_matrix os.system('clear') confusionMatrix = confusion_matrix(y_test, yTestPred, labels = rf.classes_) c = pd.DataFrame(confusionMatrix, columns = rf.classes_) c.index = rf.classes_ print('Confusion Matrix



', c) from sklearn import metrics print(""



Test Accuracy = %5.5f%s"" % (metrics.accuracy_score(y_test, yTestPred) * 100, '%'))

Запустим

Обратите внимание, что точность модели на тестовых данных составляет 98,38710%.

В матрице путаницы обратите внимание на следующее:

В 491 случае SMS действительно были доброкачественными, и модель также предсказывала, что они были доброкачественными. Это так называемые истинные плюсы.

В 58 случаях SMS на самом деле были спамом, и модель также предсказывала, что они были спамом. Это так называемые истинные негативы.

В 1 случае SMS были на самом деле безопасными, и модель предсказывала, что они были спамом. Это так называемые ложные срабатывания.

В 9 случаях SMS на самом деле были спамом, и модель предсказывала, что они были безопасными. Они называются ложноотрицательными.

Тест 1 на данных, близких к реальному времени

Мы можем передавать новые SMS-сообщения в нашу модель и получать прогнозы от модели. Поскольку у меня нет SMS, я буду использовать простое предложение на английском языке, как показано ниже. Здесь я объясняю механику, и ту же механику можно применить к реальным данным.

import cleanData import extractFeatures import pandas as pd os.system('clear') testSMS = ""This is a test SMS to be checked for spam"" text = extractFeatures.extractFeatures(testSMS)[0] noURLs = extractFeatures.extractFeatures(testSMS)[1] noMobiles = extractFeatures.extractFeatures(testSMS)[2] cText = cleanData.cleanData(text) tfidfText = tfidf.transform([cText]) dfTFIDF = pd.DataFrame(tfidfText.todense(), columns = tfidf.get_feature_names_out()) X = dfTFIDF X['noURLs'] = noURLs X['noMobiles'] = noMobiles X['noURLs'] = X['noURLs'].fillna(0) X['noMobiles'] = X['noMobiles'].fillna(0) prediction = rf.predict(X) print('The input SMS =', testSMS) print('

The prediction by the model = ', le.inverse_transform(prediction))

Запускаем



Обратите внимание, что наша модель предсказывает, что входная SMS-сообщение является доброкачественной. Обратите внимание, что в нашем наборе данных SMS со спамом помечены как спам, а безопасные SMS помечены как “ham”.

Тест 2 на данных, близких к реальному времени

Теперь мы выполним последний тест данных, которые мы создадим. Мы увидим, идентифицирует ли модель это как спам или ham. Обратите внимание, что модель можно улучшить, если ее развернуть на машине с большим объемом памяти. Прямо сейчас мы сократили количество функций примерно до 5000, установив для ngram_range значение (1, 1) . Модель работала бы намного лучше, если бы мы могли установить ngram_range = (1, 4) . Кроме того, из-за нехватки памяти мы не могли сбалансировать набор данных и не могли применить анализ основных компонентов (PCA), чтобы ограничиться только наиболее важными функциями.

import cleanData import extractFeatures import pandas as pd os.system('clear') testSMS = ""You won the lottery. Click this link http://fake.com or call 9988776655 as soon as possible"" text = extractFeatures.extractFeatures(testSMS)[0] noURLs = extractFeatures.extractFeatures(testSMS)[1] noMobiles = extractFeatures.extractFeatures(testSMS)[2] cText = cleanData.cleanData(text) tfidfText = tfidf.transform([cText]) dfTFIDF = pd.DataFrame(tfidfText.todense(), columns = tfidf.get_feature_names_out()) X = dfTFIDF X['noURLs'] = noURLs X['noMobiles'] = noMobiles X['noURLs'] = X['noURLs'].fillna(0) X['noMobiles'] = X['noMobiles'].fillna(0) prediction = rf.predict(X) print('The input SMS =', testSMS) print('

The prediction by the model = ', le.inverse_transform(prediction))

Запустим его

Написали, протестировали и Вы восхитительны!

В завершение хочу порекомендовать вам бесплатный вебинар от коллег из OTUS, где поговорим про рекомендательные системы и задачу коллаборативной фильтрации. А затем изучим популярный алгоритм коллаборативной фильтрации и применим его на практике."'https://habrastorage.org/getpro/habr/upload_files/08c/ec2/917/08cec29176b45b8c9995fc30e5e617c1.png'"['https://habrastorage.org/r/w1560/getpro/habr/upload_files/a04/0e7/0db/a040e70db66a937a9916ad716add624f.png', 'https://habrastorage.org/getpro/habr/upload_files/08c/ec2/917/08cec29176b45b8c9995fc30e5e617c1.png', 'https://habrastorage.org/getpro/habr/avatars/b9f/baf/5f9/b9fbaf5f96ae52973706a0716bd9216e.jpg', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/935/cef/81f/935cef81f967f2a81f8d384c39776d6e.jpg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/08c/ec2/917/08cec29176b45b8c9995fc30e5e617c1.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/a0e/5f5/1ef/a0e5f51efc3bbd7451cc923c54396887.png', 'https://habrastorage.org/getpro/habr/company/2d5/0ed/b57/2d50edb57cf45fa07cc4f39f53b78395.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/224/191/7b6/2241917b615ed40920c9feed69c79843.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/67e/da1/92e/67eda192e5bd1adf36740e9d590f9cf0.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/642/8ec/ca4/6428ecca4805349606262e543efdee6b.png', 'https://habrastorage.org/r/w48/getpro/habr/avatars/b9f/baf/5f9/b9fbaf5f96ae52973706a0716bd9216e.jpg', 'https://mc.yandex.ru/watch/24049213']"
9'723220'Strawberry GraphQL и FastAPI. Так что получается, Pydantic всё-таки не нужен?'Сказ пойдет о том, как я протаптывал тропинки в этом неизведанном (или неосвещенном) мире GraphQL и Python . При выборе библиотеки для работы с GraphQL я столкнулся с тем, что всё не сладко. Выделить...'https://habr.com/ru/post/723220/'"Сказ пойдет о том, как я протаптывал тропинки в этом неизведанном (или неосвещенном) мире GraphQL и Python .

При выборе библиотеки для работы с GraphQL я столкнулся с тем, что всё не сладко. Выделить хотелось бы 3 библиотеки - это ariadne, strawberry и graphene. Но при детальном рассмотрении оказалось, что graphene не имеет простой возможности для интеграции с FastAPI , какой-то из методов, который раньше существовал, был deprecated и вынесен в отдельную библиотеку, что меня насторожило. Ariadne показался более правильным выбором, но в момент выбора при установке летели ошибки из-за версии каких-то библиотек, да и коммитов на тот момент давненько не было. Поэтому остался strawberry , которая к тому же упоминается в документации FastAPI и имеет какую-то интеграцию с Pydantic . Выбор я остановил именно на ней. Несмотря на то, что эта интеграция имеет флаг Experimental . Хотя с самим FastAPI все хорошо, все стабильно. Далее я полностью откажусь от экспериментальных фич этой библиотеки, сыграв на том, что она, как и Pydantic , имеет привязку к дэфолтным питоноским типам.

По началу всё шло очень сложно и не понятно, получалось так, что я по сути дважды переписывал некоторые схемы, т.к. многие вложенные структуры неправильно конвертировались, да и я получал множество исключений. Я сейчас говорю именно об экспериментальной функции, из-за неё я полностью описывал и Pydantic модели, и схемы Strawberry , при этом по прежнему пользуясь experimental функционалом. И только так у меня всё более менее заводилось, но не так, как хотелось бНезамедлительно было принято решение отказаться от экспериментальных фич и написать свою реализацию. И этими попытками реализации в этой статье я и поделюсь. Оговорюсь, что это сделано не с целью показать как правильно, а скорее получить фид бэк, как сделать это более правильно. В последующем статья будет редактироваться, если какое-нибудь хорошее решение найдется.

В ходе долгих экспериментов, проб и исключений мне пришлось и вовсе выкинуть из этой цепочки Pydantic , проблема оставалась лишь в том, как бы модели SqlAlchemy сконвертировать. Я наткнулся на один интересный файл на Github, который и сподвиг меня попробовать пойти дальше.

Суть этих методов в том, чтобы генерировать SQL запрос таким образом, чтобы мы из БД получали только то, что запросил клиент. Таким образом мы вроде как экономим на объеме получаемых данных и вроде получаем заветную оптимизацию в отличии от Rest API . Я дописал эти функции таким образом, чтобы получать объекты БД и их отношения в бесконечную глубину благодаря рекурсии. Сейчас вы можете увидеть те самые функции, только слегка увеличенные:

def flatten(items): if not items: return items if isinstance(items[0], list): return flatten(items[0]) + flatten(items[1:]) return items[:1] + flatten(items[1:]) def get_relation_options(relation: dict, prev_sql=None): key, val = next(iter(relation.items())) fields = val['fields'] relations = val['relations'] if prev_sql: sql = prev_sql.joinedload(key).load_only(*fields) else: sql = joinedload(key).load_only(*fields) if len(relations) == 0: return sql if len(relations) == 1: return get_relation_options(relations[0], sql) result = [] for i in relations: rels = get_relation_options(i, sql) if hasattr(rels, '__iter__'): for r in rels: result.append(r) else: result.append(rels) return result def get_only_selected_fields( db_baseclass_name, # это наша SqlAlchemy модель которая является основной, от которой будем отталкиваться. info: Info, ): def process_items(items: list[SelectedField], db_baseclass): # В этой функции мы разбиваем наши fields и relations для дальнейшей обработки fields, relations = [], [] for item in items: if item.name == '__typename': # item.name - имя нашего field из GraphQL Query continue try: relation_name = getattr(db_baseclass, convert_camel_case(item.name)) except AttributeError: continue if not len(item.selections): fields.append(relation_name) continue related_class = relation_name.property.mapper.class_ relations.append({relation_name: process_items(item.selections, related_class)}) return dict(fields=fields, relations=relations) selections = info.selected_fields[0].selections options = process_items(selections, db_baseclass_name) fields = [load_only(*options['fields'])] if len(options['fields']) else [] query_options = [ *fields, *flatten([get_relation_options(i) for i in options['relations']]) # Здесь мы имеем уже отсортированные отношения ] return select(db_baseclass_name).options(*query_options)

Код достаточно не читаемый, но в течении 5-ти минут в нем можно разобраться. Желательно вам самостоятельно поиграться с этим кодом и посмотреть на выходной SQL , чтобы быстрее понять что это такое. Здесь важно уточнить, что ваши SqlAlchemy relationship должны быть корректно описаны. Ниже я напишу простой пример, как это работает.

Имеем GraphQL запрос вида:

{ users: { id name username email groups { id name category { id name } } } }

Из него, благодаря методам, получаем SqlAclhemy запрос вида:

select(User).options( load_only(User.id, User.name, User.username, User.email), joinedload(User.groups).load_only( Group.id, Group.name ).joinedload(Group.category).load_only( Category.id, Category.name ) )

Далее мы уже можем на него накрутить различные фильтрации, и всё что нам необходимо.

Переходим к функциям, которые заставляют превращать модели SqlAlchemy в схемы Strawberry . Первая функция занимается тем, что превращает SqlAlchemy модели в полноценные dict объекты.

def get_dict_object(model): if isinstance(model, list): return [get_dict_object(i) for i in model] if isinstance(model, dict): for k, v in model.items(): if isinstance(v, list): return { **model, k: [get_dict_object(i) for i in v] } return model mapper = class_mapper(model.__class__) out = { col.key: getattr(model, col.key) for col in mapper.columns if col.key in model.__dict__ } for name, relation in mapper.relationships.items(): if name not in model.__dict__: continue try: related_obj = getattr(model, name) except AttributeError: continue if related_obj is not None: if relation.uselist: out[name] = [get_dict_object(child) for child in related_obj] else: out[name] = get_dict_object(related_obj) else: out[name] = None return out

Дальше идёт немного страшная часть статьи, потому что этот код выглядит уже слабо тянет на презентабельность. Цепочка условий тянется из-за устройства Strawberry, но всё-таки я не копал в глубь исходников и мне кажется что есть решение, более элегантное. Попрошу каждого читающего отнестись к этому скептично и никуда не тащить, по крайней мере пока. Хотя этот код работает.

def orm_to_strawberry_step(item: dict, current_strawberry_type): annots = current_strawberry_type.__annotations__ temp = {} for k, v in item.items(): if k not in annots.keys(): continue current_type = annots.get(k) if isinstance(v, str) or isinstance(v, int) or isinstance(v, float) or isinstance(v, datetime): temp[k] = v continue if isinstance(v, enum.Enum): temp[k] = strawberry.enum(v.__class__)[v.value] continue if isinstance(current_type, StrawberryOptional): current_type = current_type.of_type if isinstance(current_type, UnionType): current_type = current_type.__args__[0] if isinstance(current_type, StrawberryList): current_type = current_type.of_type if isinstance(current_type, GenericAlias): current_type = current_type.__args__[0] if isinstance(v, list): temp[k] = [orm_to_strawberry_step(i, current_type) for i in item[k]] elif isinstance(v, dict): temp[k] = orm_to_strawberry_step(item[k], current_type) return current_strawberry_type(**temp) def orm_to_strawberry(input_data, strawberry_type): if isinstance(input_data, list): return [orm_to_strawberry_step(get_dict_object(item), strawberry_type) for item in input_data] return orm_to_strawberry_step(get_dict_object(input_data), strawberry_type)

Что стоит сказать об этом коде, так это то, что мы даём этой большой функции наш dict , и схему Strawberry в которую будет происходить перевоплощение. Она получает все вложенные модели (отношения) и подставляет в каждую наши дикты. Опять-таки, чтобы понять код, вам придется немножко над ним посидеть. Таким образом мы имеем глубокие схемы с под-схемами, которые полностью провалидированы Strawberry и готовы к выдаче пользователю. Напоследок оставлю простенькую функция, которая частично повторяет функционал Pydantic , когда мы пользуемся методом .dict() . Она нужна для моделей Strawberry , которые, по каким-либо причинам вам нужно конвертировать в словарь. Я ее использовал для так называемых strawberry.input , чтобы воспользоваться спрэдом, а так же, чтобы нормализовать данные под SqlAlchemy :

def _to_dict(obj): if isinstance(obj, list) or isinstance(obj, tuple): return [_to_dict(i) for i in obj] if not hasattr(obj, '__dict__'): return obj temp = obj.__dict__ for key, value in temp.items(): if hasattr(value, '_enum_definition') or isinstance(value, bytes): continue elif hasattr(value, '__dict__'): temp[key] = _to_dict(value) elif isinstance(value, list): temp[key] = [_to_dict(i) for i in value] return temp def strawberry_to_dict( strawberry_model, exclude_none: bool = False, exclude: set | None = None, ): deep_copy = copy.deepcopy(strawberry_model) dict_obj = _to_dict(deep_copy) result_dict = {**dict_obj} for k, v in dict_obj.items(): if exclude: if k in exclude: result_dict.pop(k, None) if exclude_none and v is None: result_dict.pop(k, None) return result_dict

Надеюсь кто-то дочитает статью до конца, потому что я старался вложить в статью максимум пользы. Кода нету на GitHub и наверное не будет, тут буквально 7 простых функций. Если будет интересно, могу написать дополнительную статью о том, как я инкапсулировал эту логику в свои классы для сервисов, чтобы быстро и удобно дергать необходимые методы и получать все данные вообще без написания кода, а просто дёргая заранее прописанные методы, передавая в них нужные фильтры."'https://habrastorage.org/getpro/habr/upload_files/5fe/f70/420/5fef70420276cdc0e07f4f6e7325a6d9.jpg'"['https://habrastorage.org/r/w48/getpro/habr/avatars/13a/df5/4bd/13adf54bd9718b9f1ed2e9e7e7c685e0.jpg', 'https://mc.yandex.ru/watch/24049213', 'https://habrastorage.org/getpro/habr/upload_files/5fe/f70/420/5fef70420276cdc0e07f4f6e7325a6d9.jpg', 'https://habrastorage.org/getpro/habr/avatars/13a/df5/4bd/13adf54bd9718b9f1ed2e9e7e7c685e0.jpg']"
10'723218'Основы python в бизнесе'Господа, приветствую! Решил описать результаты изучения абсолютно бесплатных курсов и статей по языку программирования python, любые комментарии с одобрениями/осуждениями/пожеланиями приветствуются....'https://habr.com/ru/post/723218/'"Господа, приветствую! Решил описать результаты изучения абсолютно бесплатных курсов и статей по языку программирования python, любые комментарии с одобрениями/осуждениями/пожеланиями приветствуются.

Итак, дело было вечером - делать было нечего.... Бесплатный (пробный) курс на Я.Практикуме подтолкнул зафиксировать полученные знания хоть как-нибудь, так родилась идея создания Калькулятора Лазерной Резки (далее КЛР), аплодисменты в студию!! Видео на ютубе ""Учим python за 7 часов! Уроки Python Полный курс обучения программированию на python с нуля"" канала Python Hub Studio придало уверенность.

Вот что получилось по коду:

while True: length = int(input('Длинна мм = ')) # в миллиметрах длинна width = int(input('Ширина мм = ')) # в миллиметрах ширина t = int(input('Толщина мм = ')) # в миллиметрах толщина number_of_pieces = int(input('Кол-во деталей шт = ')) # кол-во деталей шт rezka = int(input('Длинна резки м/п = ')) # в метрах резка длинна vstavki = int(input('Кол-во вставок шт = ')) # кол-во вставок при резке gibov = int(input('Кол-во гибов шт = ')) # кол-во шт гибов metal_square= (length* width *0.000001)*number_of_pieces print(f'Площадь металла:{metal_square} м^2') metal_massa= length * width * t * number_of_pieces * 0.0000078 print(f'Масса маталла: {metal_massa} кг') metal_money = metal_massa * 350 print(f'Стоимость металла: {int(metal_money)} рублей') t_list=[ 1, 2, 3, 4, 5, 6, 8, 10, 12, 14, 16, 20] price_list_100=[27, 36, 57, 64, 76, 87, 111, 154, 191, 224, 360, 519] price_list_101=[20, 28, 43, 50, 58, 68, 84, 125, 144, 186, 298, 432] for i in range(len(t_list)): if t == t_list[i] and rezka <= 100: rezka_price= price_list_100[i] elif t == t_list[i] and rezka >100: rezka_price= price_list_101[i] rezka_money = rezka * rezka_price if rezka_money < 5000: rezka_money = 5000 print(f'Стоимость лазерной резки: {rezka_money} рублей') vstavki_money = vstavki * 10 print(f'Стоимость вставок: {vstavki_money} рублей') if gibov <20: gibov_price = 200 else: gibov_price = 100 gibov_money = gibov * gibov_price print(f'Стоимость гибки: {gibov_money} рублей') print(f'ЕСЛИ МЕТАЛЛ НАШ: {metal_money + rezka_money + vstavki_money + gibov_money}') print(f'ЕСЛИ МЕТАЛЛ СВОЙ: {rezka_money + vstavki_money + gibov_money}')

Вот что получилось по выводу:

Заказы на нашем производстве стали просчитываться в 3 раза быстрее!! но пересмотрев курс на ютубе и на Я.Практикуме, пришло понимание что надо осваивать функции и похоже что мой КЛР ждет v2.0

На этот раз вот что получилось по коду:

t_list=[ 1, 2, 3, 4, 5, 6, 8, 10, 12, 14, 16, 20] price_list_100=[27, 36, 57, 64, 76, 87, 111, 154, 191, 224, 360, 519] price_list_101=[20, 28, 43, 50, 58, 68, 84, 125, 144, 186, 298, 432] def metal_params(): global metal_cost length = int(input('Длинна мм = ')) width = int(input('Ширина мм = ')) global t t = int(input('Толщина мм = ')) number_of_pieces = int(input('Кол-во деталей шт = ')) global metal_cost metal_cost = length * width * t * number_of_pieces * 0.0000078 * 350 return f'Площадь металла: {(length* width *0.000001)*number_of_pieces} м^2

Масса маталла:{length * width * t * number_of_pieces * 0.0000078} кг

Стоимость металла:{metal_cost} рублей' def cutting_cost(): cutting_length = int(input('Длинна резки м/п = ')) for i in range(len(t_list)): if t == t_list[i] and cutting_length <= 100: cutting_price= price_list_100[i] elif t == t_list[i] and cutting_length >100: cutting_price= price_list_101[i] global cutting_money cutting_money = cutting_length * cutting_price if cutting_money < 5000: cutting_money = 5000 return f'Стоимость лазерной резки: {cutting_money} рублей' def insert_cost(): global insert_money insert_money = int(input('Кол-во вставок шт = ')) * 10 return f'Стоимость вставок: {insert_money} рублей' def bending_cost(): bending_count = int(input('Кол-во гибов шт = ')) if bending_count <20: bending_price = 200 else: bending_price = 100 global bending_money bending_money = bending_count * bending_price return f'Стоимость гибки: {bending_money} рублей' def cost_out(): metal = metal_params() cutting = cutting_cost() insert = insert_cost() bending = bending_cost() print (f'{metal}

{cutting}

{insert}

{bending}') print (f'Если металл наш:{metal_cost + cutting_money + insert_money + bending_money}

Если метал НЕ наш: {cutting_money + insert_money + bending_money}') while True: cost_out()

Вывод результатов остался таким же. Да, согласен - ничего не поменялось, но сие творение получило возможность неограниченного расширения функционала, например оценка стоимости сварного шва, резки не только лазером (болгарка, ленточный станок), покраски, доставки и т.д. Мыслей было много, программа работала и использовалась почти каждый день.

Постепенно образовалась проблема следующего характера - никто не мог пользоваться этой программой, кроме меня. И заморачиваться установкой Python-а на комп ради одного калькулятора - так себе затея. Было решено - калькулятор в массы!! В этом оч помог краткий курс от https://python-scripts.com/ и тот же курс с канала Python Hub Studio прекрасно дополнил это дело по библиотекам TKINTER + pyinstaller, которые могут сделать из простого кода полноценное, самостоятельное приложение с расширением .exe! То есть, да, оно работает на любом компьютере как обыная прога.

Вот так пришло время КЛР V 3.0, код стал таким:

import tkinter as tk # вводные данные из таблицы по стоимости лазерной резки t_list = [1, 2, 3, 4, 5, 6, 8, 10, 12, 14, 16, 20] price_list_100 = [27, 36, 57, 64, 76, 87, 111, 154, 191, 224, 360, 519] price_list_101 = [20, 28, 43, 50, 58, 68, 84, 125, 144, 186, 298, 432] # функция по просчету площади, массы, стоимости металла def metal_params(): metal_square = (int(ent_length.get()) * int(ent_width.get()) * 0.000001) * int(ent_number_of_pieces.get()) lbl_metal_square[""text""] = f""Площадь металла: {metal_square} m^2"" metal_massa = int(ent_length.get()) * int(ent_width.get()) * \ int(ent_t.get()) * int(ent_number_of_pieces.get()) * 0.0000078 lbl_metal_massa[""text""] = f""Масса маталла: {metal_massa} кг"" global metal_money metal_money = metal_massa * 100 lbl_metal_money[""text""] = f'Стоимость металла: {int(metal_money)} рублей' # функция по просчету стоимости резки def cutting_cost(): cutting_length = int(ent_rezka.get()) for i in range(len(t_list)): if int(ent_t.get()) == t_list[i] and cutting_length <= 100: cutting_price = price_list_100[i] elif int(ent_t.get()) == t_list[i] and cutting_length > 100: cutting_price = price_list_101[i] global cutting_money cutting_money = cutting_length * cutting_price if cutting_money < 5000: cutting_money = 5000 lbl_cutting_money[""text""] = f'Стоимость лазерной резки: {cutting_money} рублей' # функция по просчету стоимости вставок def insert_cost(): global insert_money insert_money = int(ent_vstavki.get()) * 5 lbl_insert_money[""text""] = f'Стоимость вставок: {insert_money} рублей' # функция по просчету стоимости гибки def bending_cost(): bending_count = int(ent_gibov.get()) if bending_count < 20: bending_price = 200 else: bending_price = 100 global bending_money bending_money = bending_count * bending_price lbl_bending_money[""text""] = f'Стоимость гибки: {bending_money} рублей' # функция вызывает другие функции и считает итоговую стоимость, это команда для кнопки в приложении def cost_out(): metal_params() cutting_cost() insert_cost() bending_cost() lbl_out_cost[""text""] = f'Если металл наш: {metal_money + cutting_money + insert_money + bending_money}' lbl_out_cost2[""text""] = f'Если метал НЕ наш: {cutting_money + insert_money + bending_money}' # создали окно и название окна window = tk.Tk() window.title('Калькулятор заказов в мастерской') window.resizable(width=False, height=False) # создали рамку frm_data в которой разместили ярлыки и поля ввода frm_data = tk.Frame(master=window) lbl_length = tk.Label(master=frm_data, text='Длинна мм = ') lbl_width = tk.Label(master=frm_data, text='Ширина мм = ') lbl_t = tk.Label(master=frm_data, text='Толщина мм = ') lbl_number_of_pieces = tk.Label(master=frm_data, text='Кол-во деталей шт = ') lbl_rezka = tk.Label(master=frm_data, text='Длинна резки м/п = ') lbl_vstavki = tk.Label(master=frm_data, text='Кол-во вставок шт = ') lbl_gibov = tk.Label(master=frm_data, text='Кол-во гибов шт = ') # поля ввода для каждого ярлыка ent_length = tk.Entry(master=frm_data, width=10) ent_width = tk.Entry(master=frm_data, width=10) ent_t = tk.Entry(master=frm_data, width=10) ent_number_of_pieces = tk.Entry(master=frm_data, width=10) ent_rezka = tk.Entry(master=frm_data, width=10) ent_vstavki = tk.Entry(master=frm_data, width=10) ent_gibov = tk.Entry(master=frm_data, width=10) # указываем положение ярлыков в рамке lbl_length.grid(row=0, column=0, sticky=""e"") lbl_width.grid(row=1, column=0, sticky=""e"") lbl_t.grid(row=2, column=0, sticky=""e"") lbl_number_of_pieces.grid(row=3, column=0, sticky=""e"") lbl_rezka.grid(row=4, column=0, sticky=""e"") lbl_vstavki.grid(row=5, column=0, sticky=""e"") lbl_gibov.grid(row=6, column=0, sticky=""e"") # указываем положение полей ввода в рамке ent_length.grid(row=0, column=1, sticky=""w"") ent_width.grid(row=1, column=1, sticky=""w"") ent_t.grid(row=2, column=1, sticky=""w"") ent_number_of_pieces.grid(row=3, column=1, sticky=""w"") ent_rezka.grid(row=4, column=1, sticky=""w"") ent_vstavki.grid(row=5, column=1, sticky=""w"") ent_gibov.grid(row=6, column=1, sticky=""w"") # обьявляем кнопку btn_go = tk.Button(master=window, text='Посчитать', command=cost_out) # рамка с результатами вычислений frm_result = tk.Frame(master=window, width=1000) # ярлыки в которых результаты вычислений lbl_metal_square = tk.Label(master=frm_result, text='Площадь металла: ') lbl_metal_massa = tk.Label(master=frm_result, text='Масса маталла: ') lbl_metal_money = tk.Label(master=frm_result, text='Стоимость металла: ') lbl_cutting_money = tk.Label( master=frm_result, text='Стоимость лазерной резки: ') lbl_insert_money = tk.Label(master=frm_result, text='Стоимость вставок: ') lbl_bending_money = tk.Label(master=frm_result, text='Стоимость гибки: ') lbl_out_cost = tk.Label(master=frm_result, text='Если металл наш: ') lbl_out_cost2 = tk.Label(master=frm_result, text='Если металл НЕ наш: ') # указываем положение результатов в рамке результатов lbl_metal_square.grid(row=0, column=0) lbl_metal_massa.grid(row=1, column=0) lbl_metal_money.grid(row=2, column=0) lbl_cutting_money.grid(row=3, column=0) lbl_insert_money.grid(row=4, column=0) lbl_bending_money.grid(row=5, column=0) lbl_out_cost.grid(row=6, column=0) lbl_out_cost2.grid(row=7, column=0) # указываем положение рамки и кнопки в общем окне frm_data.grid(row=0, column=0, padx=10) btn_go.grid(row=0, column=1, padx=10) frm_result.grid(row=0, column=2, padx=10) # шоб все заработало window.mainloop()

ввод и вывод стал выглядеть так:

+ если меняется один параметр , появилась возможность поменять его значение ""на лету"", а не вбивать все данные заново

Сейчас учу тему по ООП, хз делать V 4.0 или что то более масштабное сообразить?... Кто дочитал до конца - красавчик.

Респект автору канала Python Hub Studio, Я.Практикуму и всем кто выкладывает образовательные материалы по программированию. Земной поклон вам, сделаю вам скидку при просчете заказа :-)"'https://habr.com/share/publication/723218/cac47ce94cefcfb07c69573133db064e/'"['https://habrastorage.org/getpro/habr/avatars/fd4/9a9/d44/fd49a9d44921f306c91be27500a30c66.jpg', 'https://habr.com/share/publication/723218/cac47ce94cefcfb07c69573133db064e/', 'https://habrastorage.org/r/w48/getpro/habr/avatars/fd4/9a9/d44/fd49a9d44921f306c91be27500a30c66.jpg', 'https://habrastorage.org/getpro/habr/upload_files/b6a/1df/58a/b6a1df58a3fa4f11dd891b834f580ad0.JPG', 'https://habrastorage.org/getpro/habr/upload_files/c07/71a/fc1/c0771afc13472ad963f41a64939d477e.JPG', 'https://mc.yandex.ru/watch/24049213']"
11'723216'Как запросто потерять данные в таблице Teradata'Доброго дня всем заинтересованным в теме. Пару дней назад столкнулся я с одной настолько неочевидной и вместе с тем опасной особенностью выполнения SQL в Teradata, что не мог не поделиться. Хотя...'https://habr.com/ru/post/723216/'"Доброго дня всем заинтересованным в теме. Пару дней назад столкнулся я с одной настолько неочевидной и вместе с тем опасной особенностью выполнения SQL в Teradata, что не мог не поделиться. Хотя допускаю, что post mortem поведение ее (Терадаты) выглядит по-своему логичным, но все же для тех, кто не специализируется конкретно на Teradata и при этом много работает с данными в разных типах хранилищ, подобное поведение является первоклассной расческой ловушкой, и мне пока не удалось найти другую БД, в которой она есть.

Постараюсь кратко.

Представим, что у нас есть огромная таблица с критичными данными:

select * from pcast.huge_table

ID VALUE 0 zero 1 one 2 two 3 three 4 four 5 five 6 six 7 seven 8 eight 9 nine 777 too much

Также есть небольшая таблица со списком ключей, которые требуется удалить из большой критичной таблицы:

select * from pcast.small_table

ID VALUE 777 Boss asked to remove this key from huge table

Удалим данные из большой таблицы по списку ключей, содержащихся в в малой:

delete from pcast.huge_table ht where ht.id in (select ht.id from pcast.small_table st)

Кто читает эту строку и уже видит ошибку, тому большой респект.

Кто не увидел и выполнил, тому привет ) Вы удалили ВСЕ данные из таблицы. Бегите за бэкапом, если сделали коммит. Казалось бы, подзапрос не имеет смысла, но не для Терадаты. В любой другой системе подобный скрипт упал бы с ошибкой вроде ""не найдено поле ht.id в подзапросе"" :

MySQL:

Databricks:

Databricks

Но Терадата поступает по-своему. Ниже explain delete для такого запроса. Выделена самая интересная строка:

Как видим, ht.id - в рамках всего запроса для Терадаты есть поле известное, потому оно найдено, и это то же самое поле, с которым идет сравнение. Таким образом, условие where раносильно 1=1, delete срабатывает весьма успешно, и горе тому, кто не оценил Updated rows:

Я хотел привести правдивое описание реальных последствий подобных действий над парой таблиц в сотни миллионов строк, но оказалось, что оно превращается в отдельную статью о том, что бывает, если не думать о правильности алгоритмов генерации суррогатных ключей при проектировании хранилищ данных и затем потерять данные, например, при помощи описаного в статье способа. Это тема для отдельной статьи, возможно когда-то, когда меня перестанет трясти, я напишу и об этом.

Будьте внимательны и осторожны!"'https://habr.com/share/publication/723216/06364cb5fe6b0c1c7520b3b71ea25f33/'"['https://habr.com/share/publication/723216/06364cb5fe6b0c1c7520b3b71ea25f33/', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/50a/5df/c58/50a5dfc580ac5d6d40186d2652a299d3.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/130/c42/d33/130c42d33a49335cb932d9b3a87dea63.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/6ca/7ea/eee/6ca7eaeee034003e2bfe33c87f65444a.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/65e/b8b/d07/65eb8bd0754c0b7b6221e5dd1bd27b3b.png', 'https://mc.yandex.ru/watch/24049213']"
12'723152'Безопасность ASP.NET'Веб платформа ASP.NET за последние десятилетия получила достаточно широкое распространение. С ее помощью разрабатывают веб-сайты и веб-приложения с помощью таких средств как HTML, CSS и JavaScript....'https://habr.com/ru/post/723152/'"Веб платформа ASP.NET за последние десятилетия получила достаточно широкое распространение. С ее помощью разрабатывают веб-сайты и веб-приложения с помощью таких средств как HTML, CSS и JavaScript. Также с помощью ASP.NET можно создавать веб-API и веб сокеты.

Одной из основных проблем при разработке в контексте безопасности является невозможность функциональной проверки у того, или иного приложения. То есть, при разработке приложения мы не можем просто подключить какие-то библиотеки, сделать какие-то настройки при сборке проекта, и затем сказать, что все, наше приложение защищено и можно передавать его в продакшен. Так не бывает. На практике возможны два основных сценария: худший когда мы узнаем о проблемах с безопасностью нашего приложения из СМИ и интернета, например, когда приложение взломали или, когда в сеть утекли данные, обрабатываемые нашим приложением (да, обычно эти утечки организуют бывшие или действующие сотрудники, и это не совсем вина приложения, но, как говориться осадочек все-равно остается). Более мягким является сценарий, когда мы узнаем об уязвимостях в нашем приложении в результате пентеста или когда сознательные исследователи сами сообщают разработчикам о найденных уязвимостях, например в рамках баг баунти. В таком случае нас скорее всего еще не скомпрометировали и репутационного ущерба для компании разработчика не будет. Ну а срочные баг фиксы выпускают все.

И к чему было все это вступление? ASP.NET является достаточно сложным решением, а сложность это всегда враг безопасности. С одной стороны вроде-бы злоумышленнику трудно разобраться в сложном решении, но с другой и защищать сложное решение тоже весьма непросто. И практика показывает, что очень часто именно злоумышленники быстрее разбираются в сложных системах и оперативно находят уязвимые места.

Так и фреймворк .NET Майкрософт разработала ряд “готовых” к использованию компонентов безопасности, которые обеспечивают выполнение общих требований по безопасности веб приложений, например это управление сеансами, аутентификация пользователей, хранение учетных данных и т.д. Большинство этих защитных механизмов включены в работу платформы .NET по умолчанию. И таким образом и разработчики и атакующие могут легко получить доступ к этим функциям. В результате использование этих функций делает работу всей платформы более уязвимой.

И далее в этой статье мы основные угрозы и компоненты, которые необходимо использовать при разработке веб приложений.

Ролевая модель безопасности

Начнем с основных концепций безопасности, которые есть в .NET. Прежде всего это ролевая модель безопасности. Ролевая модель безопасности подразумевает два основных режима работы. Первый это создание пользователей и ролей, которые не зависят от ролей ОС Windows. Такая модель удобна, когда все разграничение прав внутри приложения ведется именно с помощью ролей. Все это никоим образом не связано (и в принципы не должно быть связано) с учетками в ОС. Например, это доступность каких-либо компонентов веб приложения в зависимости от заданной роли пользователя.

Второй предполагает жесткую привязку ролей в приложении к учетным записям в Windows. Обычно подобную модель безопасности можно встретить в веб-приложениях, работающих во внутрикорпоративной среде и тесно связанных с инфраструктурой Active Directory.

Аутентификация в ASP.NET приложениях обычно реализуется или с помощью аутентификации Windows или с помощью форм. Первый вариант построен на использовании штатных средств операционной системы . В каждом случае пользователь предъявляет некий аналог “удостоверения” – в первом случае это SID (Security Identifier), а во втором случае формируется так называемый билет, который затем сохраняется в cookie. Далее мы подробно рассмотрим именно второй вариант, так как он наиболее распространен в веб приложениях и наиболее интересен с точки зрения возможных уязвимостей.

Аутентификация с помощью форм

Когда клиент заходит на страницу и вводит логин и пароль, его учетные данные передаются на сервер. В случае, если аутентификация успешно пройдена, сервер формирует сессионный билет для данного пользователя и при всех последующих обращениях к серверу используется уже этот билет, данные которого сохраняются в cookie. По умолчанию время жизни билета составляет 30 минут. По окончании этого времени билет может быть автоматически продлен. В случае, если в течении определенного интервала времени обращений больше не было, сервер отправляет клиенту сообщение с предложением “забыть” этот билет, в результате чего браузер удаляет данный куки и пользователю надо заново вводить учетные данные, чтобы войти в систему.

Казалось бы, все вполне логично и правильно. Но клиент (а точнее злоумышленник) может периодически просить сервер продлевать свой билет, по сути, неограниченное число раз. То есть сервер никак не контролирует, какое количество раз продлевался билет. И злоумышленник может просто игнорировать полученное от сервера предложение “забыть” свой билет и продолжать продлевать его и дальше.

Таким образом, если злоумышленник смог похитить куки с билетом, он сможет использовать пользовательскую сессию.

Нам необходимо как-то контролировать сессии для нашего веб приложения. Для этого мы можем осуществлять идентификацию и проверку информации о клиенте от запроса к запросу. Если запрос поступает от другого клиента для одного и того же идентификатора сеанса, то это можно рассматривать как атаку. Чтобы идентифицировать клиента, ниже приведена некоторая информация, которую мы можем получить из запроса (ip-адрес, идентификационная информация пользователя и информация о браузере и ОС).

По отдельности каждый из этих параметров может быть в той или иной степени изменен злоумышленником, но вместе они могут помочь защитить сессию. Если файл cookie содержит эту информацию также помимо идентификатора сеанса или идентификатор сеанса генерируется таким образом, что эти данные сохраняются в этом идентификаторе, то для каждого запроса, поступающего от клиента, следует проверять, и если данные сеанса и данные запроса не совпадают, то это попытка захвата сеанса, и мы можем заблокировать этот запрос.

Этот метод может быть реализован в ASP.NET очень простым способом. Давайте рассмотрим, как можно использовать идентификатор сеанса для сохранения информации о проверке. Простой идентификатор сеанса, сгенерированный ASP.NET выглядит как fvd4hu45ihqco1ftmvprfe69 буквенно-цифровое значение длиной 24 символа. Итак, теперь давайте попробуем привязать данные клиента к этому идентификатору сеанса.

Для этого необходимо взять ASP.NET_SessionID, куки и значение, создать на основе данных о браузере, ОС, URL с которого перешли и других параметров уникальный хэш, присоединить его к значению куки и подключить этот куки к ответу. Для проверки мы соответственно берем полученные данные, берем хэш и сравниваем эти значения.

Эти проверки могут быть на уровне модуля HTTP или вы можете разместить в файле Global.asax.

Это фрагмент кода генерирует хэши на основе пользовательской информации.

string GenerateHashKey() { StringBuilder myStr = new StringBuilder(); myStr.Append(Request.Browser.Browser); myStr.Append(Request.Browser.Platform); myStr.Append(Request.Browser.MajorVersion); myStr.Append(Request.Browser.MinorVersion); myStr.Append(Request.LogonUserIdentity.User.Value); SHA1 sha = new SHA1CryptoServiceProvider(); byte[] hashdata = sha.ComputeHash(Encoding.UTF8.GetBytes(myStr.ToString())); return Convert.ToBase64String(hashdata); }

Как видите мы берем набор значений о браузере и пользователе и создаем на их основе хэш.

Посмотрим, как можно проверить полученный запрос.

protected void Application_BeginRequest(object sender, EventArgs e) { if (Request.Cookies[""ASP.NET_SessionId""] != null && Request.Cookies[""ASP.NET_SessionId""].Value != null) { string newSessionID = Request.Cookies[""ASP.NET_SessionID""].Value; if (newSessionID.Length <= 24) { //Log the attack details here throw new HttpException(""Invalid Request""); } if (GenerateHashKey() != newSessionID.Substring(24)) { //Log the attack details here throw new HttpException(""Invalid Request""); } //Use the default one so application will work as usual//ASP.NET_SessionId Request.Cookies[""ASP.NET_SessionId""].Value = Request.Cookies[""ASP.NET_SessionId""].Value.Substring(0, 24); } }

А эта процедура обновляет значение сессионных куков.

protected void Application_EndRequest(object sender, EventArgs e) { if (Response.Cookies[""ASP.NET_SessionId""] != null) { Response.Cookies[""ASP.NET_SessionId""].Value = Request.Cookies[""ASP.NET_SessionId""].Value + GenerateHashKey(); } }

Таким способом в ASP.NET можно контролировать пользовательские сессии и отслеживать возможные манипуляции с ними.

Cross Site Request Forgery

Старый добрый CSRF актуален и для .NET. Напомним, что CSRF это вид атак на посетителей веб-сайтов, использующий недостатки протокола HTTP. Если жертва заходит на сайт, созданный злоумышленником, от её лица тайно отправляется запрос на другой сервер (например, на сервер платёжной системы), осуществляющий некую вредоносную операцию (например, перевод денег на счёт злоумышленника).

Для осуществления этой атаки должны быть выполнено несколько условий. Во-первых, жертва должна быть аутентифицирована на том сервере, на котором выполняется запрос. Также этот запрос не должен требовать какого-либо подтверждения со стороны пользователя, которое не может быть автоматизировано, то есть, которое не может быть подделано атакующим скриптом.

В качестве примера рассмотрим ситуацию, когда пользователь входит в систему www.bank.com с помощью проверки подлинности на основе тех самых форм, о которых мы говорили чуть раньше. Сервер выполняет проверку подлинности пользователя и выдает ответ, включающий билет пользователя в cookie. При этом, сайт банка доверяет любому запросу, который он получает с допустимым билетом в cookie. Далее пользователь не завершая принудительно сессию на сайте банка посещает другой сайт. www.hacker.com который содержит HTML-форму, в которой запрятана отправка в форме следующих даных:

<form action=""https://bank.com/api/account"" method=""post""> <input type=""hidden"" name=""Transaction"" value=""withdraw"" /> <input type=""hidden"" name=""Amount"" value=""1000000"" /> <input type=""submit"" value=""Click to collect your prize!"" /> </form>

Обратите внимание, что форма отправит данные именно на сайт банка. Это ""межсайтовая"" часть CSRF. Далее под каким-либо предлогом на hacker.com пользователю предлагается нажать кнопку, которая скрытно отправит данные формы. При отправке формы браузер автоматически отправит и билет в cookie для запрошенного домена www.bank.com, ведь пользователь формально еще залогинен на сайте банка. В результате запрос будет выполнен на сайте банка. Стоит отметить, что использование HTTPS не предотвращает атаки CSRF. Вредоносный сайт может отправлять https://www.bank.com/ запрос так же легко, как и небезопасный запрос.

Такие атаки становятся возможными благодаря тому, что в браузере хранятся cookie, выданные приложением, эти куки содержат в том числе сеансовые билеты, прошедших проверку пользователей, и наконец браузер отправляет веб-приложению все cookie связанные с доменом независимо от того, как запрос к приложению был создан в браузере.

Как бороться

Общие рекомендации OWASP для борьбы с CSRF требуют включения непредсказуемого токена в каждый HTTP-запрос. Лучше всего, когда этот уникальный токен помещен в скрытое поле. В определенной степени это метод аналогичен тому, что мы уже использовали с контролем сессий.

В ASP.NET эти рекомендации реализуются следующим образом. Маркер защиты от подделки, представленный в cookie, сгенерированный как псевдослучайное значение и зашифрованный.

Дополнительный токен, включаемый либо в виде поля формы, заголовка, либо в виде того же cookie. Он включает в себя то же псевдослучайное значение плюс дополнительные данные из идентификатора текущего пользователя и также шифруется.

Эти токены будут сгенерированы на стороне сервера и переданы вместе с html-документом в браузер пользователя. Маркер cookie будет включаться по умолчанию всякий раз, когда браузер отправляет новый запрос, в то время как приложению необходимо убедиться, что маркер запроса также включен.

В случае, если значения этих двух токенов отличаются, либо одно из них отсутствует, запрос на подключение будет отклонен.

Чтобы проверка защиты от подделки прошла успешно, нам нужно убедиться, что как токен cookie, так и токен запроса включены в запросы, которые будут проходить проверку.

<form asp-controller=""Foo"" asp-action=""Bar""> … <button type=""submit"">Submit</button> </form>

Сгенерируется следующий html:

<form action=""/Foo/Bar"" method=""post""> … <button type=""submit"">Submit</button> <input name=""__RequestVerificationToken"" type=""hidden"" value=""CfDJ8P4n6uxULApNkzyVaa34lxdNGtmIOsdcJ7SYtZiwwTeX9DUiCWhGIndYmXAfTqW0U3sdSpzJ-NMEoQPjxXvx6-1V-5sAonTik5oN9Yd1hej6LmP1XcwnoiQJ2dRAMyhOMIYqbduDdRI1Uxqfd0GszvI""> </form>

Content Security Policy

Еще одна широко известная атака это межсайтовый скриптинг (XSS). Эти атаки реализуются на стороне клиента, но мы можем предотвратить подобные атаки с помощью политик безопасности контента (Content Security Policy). Политика безопасности контента, является средством, с помощью которого веб-страницы могут контролировать, какие ресурсы разрешено загружать. Например, страница может явно объявлять домены, с которых разрешено загружать ресурсы JavaScript, CSS, изображения и т.д.

В современных веб приложениях данная политика содержит множество различных параметров: она сообщает браузеру, что он может загружать фреймы, Ajax-запросы, веб-сокеты, шрифты, изображения, аудио, видео, и другие компоненты. Вполне возможно, что вы не используете большинство вещей из этого списка. Гораздо лучшей политикой было бы заблокировать все по умолчанию, а затем разрешить только определенные ресурсы, которые вы действительно используете, как показано ниже.

Content-Security-Policy: default-src 'none';

script-src TrustedSite.com;

style-src 'self';

img-src 'self';

font-src 'self';

connect-src 'self';

form-action 'self'

Здесь мы разрешаем загрузку скриптов с доверенного сайта, а другие компоненты, такие как стили, шрифты и прочее могут грузится только с нашего сайта.

Далее посмотрим фрагмент кода ASP.NET для конфигурации настройки CSP. Здесь мы добавляем параметр Content-Security-Policy со значением, позволяющим загрузку контента только с исходного сайта.

<system.webServer> … <httpProtocol> <customHeaders> <add name=""Content-Security-Policy"" value=""default-src 'self';"" /> </customHeaders> </httpProtocol> … </system.webServer>

Чтобы не закрыть лишнего

Стоит понимать, что CSP может нанести вред при неправильной настройке. Так, если функционал вашего сайта предполагает демонстрацию видео с Youtube, а CSP не позволяет использовать этот ресурс получится не слишком хорошо.

Чтобы справиться с этой проблемой, W3C создал HTTP-заголовок Content-Security-Policy-Report-Only. Это работает точно так же, как Content-Security-Policy, но оно только ничего не блокирует, а просто сообщает о попытках открыть нарушения ваших политик.

Заключение

В этой статье мы коснулись некоторых аспектов безопасности Web применительно к приложениям написанным на ASP.NET, хотя большинство из этих атак также актуальны для приложений, написанных на других языках.

А прямо сейчас приглашаю всех читателей на talk-сессию: ""Мифы и реальность в DevSecOps""."'https://habrastorage.org/getpro/habr/upload_files/784/cee/3e9/784cee3e9c2c905f9467580c31da3a99.png'"['https://habrastorage.org/r/w1560/getpro/habr/upload_files/e70/a4e/f28/e70a4ef282da6a03821a1386c2f14e58.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/644/13a/e53/64413ae536b472f013087e43dffc68fc.png', 'https://habrastorage.org/getpro/habr/upload_files/784/cee/3e9/784cee3e9c2c905f9467580c31da3a99.png', 'https://habrastorage.org/getpro/habr/company/2d5/0ed/b57/2d50edb57cf45fa07cc4f39f53b78395.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/714/f3d/6da/714f3d6da58a372b4998a7607d1656d8.png', 'https://mc.yandex.ru/watch/24049213']"
13'723104'Как кражи и вымогательство западных технологий обеспечили японское экономическое чудо'Молниеносное развитие Японии после Второй Мировой войны — одно из главных чудес мировой экономики. Всего за пару десятилетий страна, которая потеряла почти все и лежала в руинах, смогла построить...'https://habr.com/ru/post/723104/'"Молниеносное развитие Японии после Второй Мировой войны — одно из главных чудес мировой экономики. Всего за пару десятилетий страна, которая потеряла почти все и лежала в руинах, смогла построить мощнейшую точную промышленность и превратиться в главного мирового производителя электроники. Но у этого успеха есть и темная сторона.

Японским компаниям нередко было некогда с нуля разрабатывать новые технологии. Поэтому приходилось добывать их всеми правдами и неправдами — покупать, вымогать, шантажировать и воровать. И в этом им активно помогало правительство, которое порой курировало однозначно незаконные действия. Рассказываем, как нарушения прав интеллектуальной собственности помогли воплотить в жизнь величайшее экономическое чудо нашей эпохи.

Как Япония вставала с колен

После поражения во Второй Мировой войне, Япония была оккупирована союзниками во главе с США. Страна лежала в руинах, а ее экономика была уничтожена — около ⅓ промышленных мощностей были потеряны. Площадь страны уменьшилась в 20 раз — империя потеряла все свои огромные колонии от Маньчжурии до многочисленных острововов в Тихом океане. В 1948 году среднестатистический японец потреблял чуть больше пары колобков риса в сутки. Но уже в 1952 году экономика начала восстанавливаться, а через 3-4 года японские компании производили сложнейшую для того времени электронику, которая была по качеству не хуже, чем в Америке. Давайте сперва разберемся, почему страна так быстро оправилась от шока.

Раздача продуктовых пайков японским женщинам в Токио, 1946 год. Каждая получала 300 грамм риса

В 1952 году американская оккупационная администрация передала власть гражданскому правительству, а Минобороны США, осознавшее реалии разгорающейся Холодной войны, начало размещать крупные оборонные заказы на японских предприятиях. К тому же, американский рынок был открыт для японского экспорта. Уже к 1955 году японское производство достигло уровня 1944 года, в котором воюющая империя достигла пика экономической мобилизации. Америка стала главным рынком для экспорта японских промышленных изделий. Темпы роста ВВП достигли 10% в год и сохранялись на таком уровне до 1970-х.

Чтобы достичь таких успехов, японское руководство выработало уникальную экономическую стратегию, которую затем в общих чертах воспроизвели в Корее, Тайване и Китае. При этом первый шаг на этом пути был навязан еще американцами. Оккупационные власти под командованием генерала Макартура принудили японскую администрацию провести ряд социальных реформ. Как отмечает журналист и экономист Джо Стадвелл, ключевой из них стала земельная реформа, которую современники воспринимали как очень «левую» — наделы были примерно поровну поделены между всеми крестьянскими семьями, а крупные землевладельцы и безземельные крестьяне перестали существовать.

Японские фермеры обрабатываютт рис, 1950-е годы

В стране появился класс мелких, но самостоятельных аграриев, каждый из которых с любовью возделывал свой небольшой надел. Стадвелл пишет, что эти фермеры, у которых водятся лишние деньги, стали первичными платежеспособными потребителями зарождающейся японской промышленности. Это было необходимо, ведь крестьяне, которые не владеют землей и арендуют ее у лендлордов, слишком бедны, чтобы покупать магнитофоны и телевизоры. Опираясь на этот внутренний спрос, промышленные компании смогли потихоньку развивать качество продукции до уровня, востребованного на международных рынках.

Затем японские бизнес и государство заключили негласный ультрапротекционистский пакт. Предприятия, которые будут эффективно развиваться, получат любую господдержку, а доступ иностранных компаний будет ограничен так, чтобы конкуренция с ними никак не вредила национальным производителям. Но в обмен на это компании должны сохранять капиталы в стране, и при этом стремиться покорять зарубежные рынки. Эффективность предприятий мерялась способностью производить товары, которые можно было продавать на экспорт. Ради этого японские промышленники нередко даже уходили в минус, реализуя продукцию ниже себестоимости — но огромные программы господдержки компенсировали потери. Но если компания не справлялась с задачами по экспорту, ее лишали поддержки, и могли принудить к слиянию с более успешными конкурентами.

Среди прочего госорганы помогали фирмам через «серые» схемы. Например, через дипломатические каналы власти способствовали затягиванию процессов о недобросовестной конкуренции над японскими корпорациями в других странах. А японские шпионы выведывали у иностранцев технологические секреты для гражданских отраслей промышленности точно так же, как в других странах — для военных.

Японский метод добычи технологий

Японской экономикой в те годы крайне эффективно рулило Министерство внешней торговли и промышленности (MITI), которое полностью контролировало потоки финансов, заведовало интеллектуальной собственностью и направляло промышленные компании страны.

Для того, чтобы насытить японскую промышленность инновациями, MITI разработало множество механизмов вымогательства технологий у западных предприятий.

Когда зарубежный производитель пытался выйти на местный рынок, который быстро стал весьма привлекательным, Министерство предоставляло им выбор: либо вы лицензируете нашим фирмам свои технологии за малую долю их реальной стоимости, либо мы не пускаем вас в страну.

К примеру, в конце 1950-х MITI вынудил IBM передать японским компаниям лицензии на разработки за 5% от их реальной цены — американским компьютерщикам был необходим доступ в Японию, поэтому им пришлось согласиться.

Исследователи считают, что иностранные фирмы соглашались на такие условия прежде всего потому, что всерьез не верили, что японские промышленники могут добиться серьезных успехов. Но на деле уже через несколько лет японские производители начинали выпускать товары, которые были дешевле и не хуже по качеству, чем иностранные.

Так, Studebaker был настолько уверен в бесполезности японского рынка, что даже не запросил контрольный пакет акций, когда в середине 1950-х создал совместное предприятие с японской Daihatsu Company. Но уже через 10 лет Studebaker был вынужден уйти из Японии, а Daihatsu стал одним из лидером местного рынка и даже импортировал машины в Европу — правда, не очень удачно.

Еще одним методом принудить компании к передаче технологий был «патентный флуд», который был возможен благодаря тому, что японское патентное ведомство находилось в ведении MITI — и в нем же было написано японское законодательство об интеллектуальной собственности. Вскоре после того, как иностранец подавал в патентное ведомство Японии заявку на регистрацию изобретения, туда приходили десятки и сотни заявок от японских фирм, оспаривающих ее.

«Представьте, что вы изобрели что-то полезное и уникальное, например, велосипед, и запросили патент Японии, — объясняет этот процесс политический исследователь Пат Чоат. — После этого японская компания неожиданно подает заявку на патент на правую педаль, а другая — на левую. Третья просит патент на защелку, которая прикрепляет тормозные тросы к рулю — и так далее».

В теории, зарубежная компания могла отстоять свою правоту и доказать, что ее изобретение уникальное. Но вот незадача — японское регулирование делало такие споры невероятно дорогими, за каждое из десятков и сотен разбирательств пришлось бы заплатить от $100 000 до $250 000. Затем зарубежной компании предлагали либо лицензировать технологию японцам, либо убираться восвояси. По некоторым подсчетам, с 1950 по 1978 год японские предприятия получили 32 000 лицензии общей стоимостью около $1 трлн, заплатив за них всего $9 млрд, то есть 0,9% — IBM, получившей 5%, еще повезло.

Кроме того, японские компании выстроили мощную систему промышленного шпионажа. Когда американская фирма выпускала новинку, японцы тут же копировали их, и через год-два начинали производство почти полностью аналогичных изделий, которые при этом были дешевле, и нередко более коммерчески успешными.

К примеру, в 1954 году Texas Instruments и Raytheon разработали и выпустили на рынок первые миниатюрные транзисторные радиоприемники, которые были в несколько раз меньше своих предшественников — размером с коробку хлопьев. Уже через год Sony выпустила похожий приемник TR-55. Вслед за ними аналогичные радио выпустили британские и западногерманские фирмы. Мы не знаем точно, имел ли здесь место именно шпионаж, но тайминг выхода очень многих новинок заставляет задуматься.

Несмотря на это, США продолжали поддерживать Японию и передавать ей технологии и через официальные, поддержанные правительством каналы. В 1955 году Вашингтон и Токио учредили Программу поддержки продуктивности, в рамках которой американские специалисты обучали японцев менеджменту, маркетингу и промышленной инженерии. С 1950 по 1972 год американские и японские компании заключили 12 000 соглашений о технических помощи и консультировании на общую сумму в $3,3 млрд.

Американские специалисты на предприятии Tokyo Shibaura Electric, 1951 год.

MITI взращивала в Японии одну индустрию за другой, без устали похищая и скупая инновации по смешным ценам. В 1982 году Кобаяси Кодзи, председатель совета директоров японского производителя электроники NEC Corporation, описывал этот процесс так: «где бы мы не находили новую технологию, мы не могли успокоиться, пока не купим ее».

Министерство разработало четкую стратегию подъема национальной экономики, и просчитало сроки, в которые нужно было «напитывать» технологиями каждую из индустрий. В 1950-х и 1960-х в приоритете были технологии, связанные с производством стали, текстиля и бытовой электроники. В 1970-х — автомобили, станков и робототехники. А в 1980-х — уже компьютеры, полупроводники и другая сложная электроника. Каждый раз MITI следовала одинаковому плану, который начинался с создания отраслевого картеля, который консолидировал усилия регуляторов, частных и госкомпаний. Если индустрия оказывалась успешной, то картель продолжал работу на зарубежных рынках.

Покажем, как работала эта схема на примере индустрии телевидения, в которой Япония преуспела сильнее всего.

Как японцы уничтожили американскую индустрию телевизоров

Все знают американские телефоны, компьютеры, самолеты и лекарства, но об американских телевизорах уже много десятилетий никто не слышал. Все потому, что молодые японские компании разгромили эту индустрию в пух и прах, как только она зародилась.

Токио, 1955 год. На заднем плане — новая телебашня

В 1956 году крупнейшие японские производители телевизоров сформировали картель, который назвали «Совет по стабилизации рынка бытовой электроники». Многие его участники хорошо известны даже спустя почти 70 лет: Sony, Sharp, Toshiba, Hitachi и Matsushita (в будущем Panasonic). Участники договорились сначала выдавить иностранные фирмы с национального рынка, а затем совместно захватить и американский. В этом им потакало японское правительство в лице MITI, хотя национальный антимонопольный орган пытался вяло сопротивляться до 1961 года.

Картель ограничивал цены, установил нормы прибыли компаний, а также лоббировал повышение тарифных пошлин. MITI приняло норму, по которой американские радиопроизводители могли получать прибыль в Японии, только лицензировав технологии локальным компаниям. Так на рубеже 1950-х и 1960-х японцы завладели рядом новейших разработок для черно-белого и цветного телевидения. К этому периоду японские компании сами начали создавать лидерские разработки: в 1960 году Sony выпустила первый в истории транзисторный телевизор TV8-301, а в 1963 году — первый видеомагнитофон.

Первый транзисторный телевизор Sony

Уже в 1963 году японские компании создали новый картель — для поддержки экспорта своих телевизоров. Они поставили своей целью заполонить американский рынок дешевыми телевизорами, и таким образом разорить американских производителей. Японские компании могли позволить себе продавать продукцию даже в минус, так как правительство предоставляло огромные льготы и преференции экспортерам.

Участники картеля придумали хитрую и преступную схему импорта телевизоров в США. Американские импортеры-посредники закупали японские телевизоры по формальной рыночной цене, о которой отчитывались Антимонопольной службе. Но на деле японские предприятия компенсировали им значительную часть этой суммы, проводя их по графам вроде «Маркетинговых исследований» или в форме скидок за другие товары и услуги. Взамен импортеры продавали японские телевизоры задешево — их руками японцы демпинговали цены. Дешевые японские телевизоры появились почти в каждом доме, а американские пылились на полках магазинов.

С 1966 по 1970 год количество рабочих мест в телевизионной индустрии США сократилось на 50%. В период с 1971 по 1975 год — еще на 30%, а с 1977 по 1981 год — еще на 25%. Американцы заподозрили неладное слишком поздно — в 1968 году Ассоциация производителей электроники США подала петицию в Минфин, потребовав проверить ценообразование на японские телевизоры, а также разослало крупнейшим японским компаниям анкеты-опросники — но те просто проигнорировали запрос.

Минфин продолжил давить, и компании начали тянуть время — в этом им помогал японский МИД, который выпустил официальное обращение о продлении сроков еще на год. В это время японские компании и их американские контрагенты вычистили все улики. В итоге Минфин все же обвинил японские фирмы в демпинге, но процесс расчета сумм компенсационных пошлин тоже растянулся. В итоге они так и не были приняты — правительство испугалось развязывать торговый конфликт с Японией.

Телевизоры Panasonic 1972 и 1973 годов

В 1970-х японские корпорации начали покупать американские — Matsushita приобрела телевизионное подразделение Motorola, а Sanyo поглотила Warwick Electronics, изначально лидера рынка. В 1980-х и 1990-х поглощение американских фирм стало для японцев основным способом овладения технологиями. С января 1989 г. по май 1994 г. японские корпорации купили более 452 высокотехнологичных американских компаний, в основном из областей передовых материалов, биотехнологий, электроники и производства полупроводников. Патриотичные американские авторы, такие как Пат Чоат, сетуют, что нередко таким образом японцы становились бенефициарами исследований, которые финансировались из казны США, а значит из кармана американцев. Посочувствовать им сложно — ведь ядерные бомбардировки японских городов за 50 лет до этого тоже были оплачены американским налогоплательщиком.

Но вернемся в конец 1970-х. Несмотря на то, что американские компании не могли остановить японское вторжение, а власти США боялись предпринимать слишком серьезные шаги, непорядочность действий японцев стала очевидна. Работать на американском рынке им становилось все сложнее из-за огромного количества исков. Поэтому в 1977 году картель нанял лоббиста, чтобы раз и навсегда договориться с Федеральным правительством. Им стал бывший заместитель торгового представителя США Харальд Мальмгрен, которому заплатили $300 000.

Он отлично отработал этот гонорар — в 1978 году США и Япония заключили соглашение, по которому экспорт японских телевизоров был ограничен до 1,5 млн единиц в год. При этом телевизоры, которые японские фирмы производят на своих новоприобретенных американских предприятиях, не входят в этот лимит. Также было подписано секретное соглашение, в котором США обязались не расследовать демпинг цен японскими компаниями и не вводить карательных тарифов.

Патентные войны и конец японского экономического чуда

Конец 1980-х и начало 1990-х ознаменовались «патентными войнами» между США и Японией. В это время американские компании начали очень бдительно отслеживать, не используют ли конкуренты их технологии, и подавать на них в суд, требуя роялти.

Некоторые американские предприятия требовали у японцев роялти за использование технологий в коммерчески успешных устройствах, которые были выпущены десятилетие назад. Обозреватели того времени сравнивали эту стратегию с откормом свиньи перед тем, как пустить ее на убой — чем больше на украденной технологии было заработано, тем больше можно отсудить. Так, в 1992 году суд обязал японского производителя камер Minolta выплатить американской Honeywell $96 млн за нарушение патентов при разработке автофокусной камеры, а малоизвестный американский изобретатель отсудил у Sega $33 млн за нарушение его прав на патент, зарегистрированный еще в 1975 году.

Японские корпорации, многие из которых тоже патентовали и лицензировали технологии в США, стали отвечать тем же. Когда в 1989 году Motorola подала в суд на Hitachi за нарушение патента на технологию, связанную с микропроцессорами, японская компания отыскала случай, в котором Motorola тоже якобы нарушила ее патент, и подала встречный иск. В итоге оба иска были удовлетворены, но Hitachi вышла победителем, так как использовала победу по своему иску как инструмент, чтобы получить более выгодные позиции по иску Motorola против нее.

Лишь в 1993-1994 году в Японии были принятые новые законы, которые приблизили модель защиты интеллектуальной собственности и трансфера технологий к западным. Принято считать, что к этому времени исчерпало себя и японское экономическое чудо — темпы роста ВВП упали почти до нуля. К этому времени Япония стала одной из самых богатых и процветающих стран мира, и немного опережала США по ВВП на душу населения. Жесткая экономическая политика, задуманная руководителями MITI, сработала лучше, чем кто-либо мог предположить."'https://habrastorage.org/getpro/habr/upload_files/35b/160/e79/35b160e79e78bfffa08b60191c3ddfbf.png'"['https://habrastorage.org/getpro/habr/company/post_desktop/5a5/23f/069/5a523f0690db172e81f2a0d65bcefbf4.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/35b/160/e79/35b160e79e78bfffa08b60191c3ddfbf.png', 'https://vk.com/rtrg?p=VK-RTRG-1669144-8I6Rb', 'https://habrastorage.org/getpro/habr/branding/77e/913/273/77e913273854c5e4ce598bda9d498c69.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/c55/d74/6b5/c55d746b5adb6aa410cdf092f9a9838c.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/e94/6ee/1f5/e946ee1f5751476f6450082a25bbb6f0.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/1b8/4c7/bd6/1b84c7bd62f83e71eb54eef1e8087fe4.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/e1e/ee9/b5f/e1eee9b5f477773abd1e07c5f42a0e18.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/c78/a16/783/c78a167832573d1f250d3a296103a4e0.png', 'https://habrastorage.org/getpro/habr/upload_files/35b/160/e79/35b160e79e78bfffa08b60191c3ddfbf.png', 'https://habrastorage.org/getpro/habr/company/3a0/49e/ff5/3a049eff5348e0517954069b5a7c61e2.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/f51/174/e06/f51174e06a9f0bf00bd7edd697fc2582.png', 'https://mc.yandex.ru/watch/24049213', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/617/f23/a18/617f23a185712ad8a0f497ed75645968.png']"
14'723198'3 правила в веб-дизайне, которые упрощают жизнь разработчикам'С началом карьеры веб-дизайнера, я сталкивалась с ситуацией, когда макеты не верстались из-за бардака везде. Несколько раз приходилось переделывать работу, потому что верстальщики отправляли её...'https://habr.com/ru/post/723198/'"С началом карьеры веб-дизайнера, я сталкивалась с ситуацией, когда макеты не верстались из-за бардака везде. Несколько раз приходилось переделывать работу, потому что верстальщики отправляли её обратно (с матюками). Нервные какие-то...

Закон жизни №1

Изрядно поколотив подушку, я собрала «волю в кулак» и оформила стандарты и правила, по которым макет сайта будет проектироваться. Назваю их микстурами от нервов. В этой статье я опишу, что «под капотом» моих макетов.

1 микстура от нервов — Grid options

С чего я начала? Конечно с размеров макетов и сетки. Тут не обойти вопрос: «Какую сетку использовать: Bootstrap или google.material?» Для себя я выбрала скомбинировать эти две методологии . Их системы сеток мне как дизайнеру понятны, а разработчики уже имеют наработки breakpoints.

Итак, фреймворк Bootstrap 5 предлагает создателям интерфейсов, 6 уровней сетки, в каждой из которых свой размер контейнера. На основе этих требований я строю модульные сетки (базовая сетка + колоночная) с шагом 8 px.

Разрешение XX-Large

Общая ширина макета 1480 px, а боковые отступы справа и слева по 80 px.

Дублирую информацию с картинки: Ширина макета 1480 px, ширина контейнера — 1320 px, количество колонок — 12, ширина 1 колонки — 88 px , ширина отступов — 24 px. Sitebar off — 64 px, type — left. Sitebar on — 200 px, type — left. Скачать image тут.

Этого мне показалось мало, и я решила в сетке XX-Large, X-Large и Large разместить фиксированный размер sitebar off и sitebar on. Эта заготовка на случай, когда сетка будет использоваться для 1 экрана с возможным выбором решения использовать боковое меню.

Разрешение X-Large

Общая ширина макета 1272 px, а боковые отступы справа и слева по 72 px.

Дублирую информацию с картинки: Ширина макета 1272 px, ширина контейнера — 1128 px, количество колонок — 12, ширина 1 колонки — 72 px , ширина отступов — 24 px. Sitebar off — 64 px, type — left. Sitebar on — 200 px, type — left. Скачать image тут.

Разрешение Large

Общая ширина макета 1096 px, а боковые отступы справа и слева по 80 px.

Дублирую информацию с картинки: Ширина макета 1096 px, ширина контейнера — 936 px, количество колонок — 12, ширина 1 колонки — 56 px , ширина отступов — 24 px. Sitebar off — 64 px, type — left. Sitebar on — 200 px, type — left. Скачать image тут.

Разрешение Medium

Общая ширина макета 808 px, а боковые отступы справа и слева по 32 px.

Дублирую информацию с картинки: Ширина макета 808 px, ширина контейнера — 744 px, количество колонок — 12, ширина 1 колонки — 40 px , ширина отступов — 24 px. Sitebar off — 48 px, type — left. Sitebar on — 160 px, type — left. Скачать image тут.

Разрешение Small

Общая ширина макета 592 px, а боковые отступы справа и слева по 16 px.

Дублирую информацию с картинки: Ширина макета 592 px, ширина контейнера — 560 px, количество колонок — 8, ширина 1 колонки — 56 px , ширина отступов — 16 px. Скачать image тут.

Фиксированный размер места для бургера 32×32 px, type Right, Top. Icon «Burger» — 21 px.

Место для бургерного меню

Меню раскрывается на 100% разрешения экрана. Оставляю себе напоминание об Icon «Clouse» — 21 px.

Пример как будет выглядеть раскрывшийся “бургер”

Разрешение Extra Small

Общая ширина макета 368 px, а боковые отступы справа и слева по 16 px.

Дублирую информацию с картинки: Ширина макета 368 px, ширина контейнера — Auto, количество колонок — 4, ширина 1 колонки — Auto , ширина отступов — 16 px. Скачать image тут.

Фиксированный размер места для бургера 24×24 px, type Right, Top. Icon «Burger» — 21 px.

Место для бургерного меню

Меню раскрывается на 100% разрешения экрана. Оставляю себе напоминание об Icon «Clouse» — 21 px.

Пример как будет выглядеть раскрывшийся “бургер”

Пояснение.

Несмотря на большое количество описанных сеток, я базово для клиента делаю 3 разрешения: XX-Large, Medium, Extra Small. Остальные разрешения выполняю только при просьбе подробно проработать дизайн.

2 микстура от нервов — Названия слоёв

Стоило однажды завести себе привычку правильно называть слои и всё — эти принципы навсегда уложились в голове. Работа стала намного быстрее и стало проще возвращаться к проектам спустя много лет.

Схема вложенности слоёв

Логика тут сказочная «игла в яйце, яйцо в утке, а утка в зайце». Поясню словами, container всегда только один. Его ширина определена выше, исходя из разрешения экрана. Я буду много опираться на размеры сеток, потому что принцип однообразия важен для лечения нервов разработчиков.

Основной принцип в веб-дизайне

Продолжаем разговор, в этом container лежат screen 1, screen 2 и т.п. Этим Screen будет, например, главный экран или призыв к действию (Call To Action). А внутри каждого screen содержание согласно ТЗ.

Главное, помнить-то 6 слов:

Container; Screen; Column (-s); Image; Raw (-s); Icon (-s).

Скриншот расположения слоев

Скачать image тут.

3 микстура от нервов — Отступы

Куда отступать и по каким правилам учат курсы дизайна, называется это горизонтальным и вертикальным ритмами. Не буду подробно останавливаться, а скорее покажу свой вариант изменений расстояний в зависимости от размеров container.

Таблица размеров отступов в px

Скачать image тут.

Причем, 1 уровень использую как отступы между блоками. Какие уровни использовать и где, решает сам дизайнер. Думаю ясно, что в месте, где был отступ 48 px на XX-Large, в разрешении Medium он станет 32 px. Важно, чтобы из макета в макет использовать одни и те же значения, чтобы градус напряжения в команде (например, в больших проектах) был сведен к минимуму.

Заключение

Конечно, я не открыла новую страну, а только показала свои наработки. Эти 3 микстуры от нервов на курсах для веб-дизайнеров называют «базовыми знаниями» и рассказывают про правила их использования, но мало говорят о точных значениях.

А меня как человека очень дотошного интересуют только цифры и «сколько вешать в граммах». У разработчиков достаточно забот, поэтому не стоит добавлять к ним еще и мигрень с макетом."'https://habr.com/share/publication/723198/586d5671436606dca420c544dd8db7d2/'"['https://habrastorage.org/r/w780q1/getpro/habr/upload_files/853/08b/baf/85308bbafcc11d44e8bbedda72d52079.jpg', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/2e7/5ee/7ef/2e75ee7efa8cec9117651a957fafb0c6.jpg', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/db0/10a/f76/db010af769157bb45e20296f615e3618.jpg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/85b/0ff/1b0/85b0ff1b09fa5ebf7108bc9d3e09b6ee.png', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/db4/bb0/68c/db4bb068ccd027a9a703611293729069.jpg', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/36c/733/041/36c733041a14d3586f543e09a047a62a.jpg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/ad7/183/df5/ad7183df5d07a43c439f2f426fd38422.png', 'https://habrastorage.org/r/w48/getpro/habr/avatars/370/5e9/0f1/3705e90f106452b754012ff6ba325dba.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/78b/d59/223/78bd592236a4ec79a848cafa003b9285.png', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/d25/59b/8f5/d2559b8f5ea5162b05f82bcc50dea07c.jpg', 'https://mc.yandex.ru/watch/24049213', 'https://habrastorage.org/getpro/habr/avatars/370/5e9/0f1/3705e90f106452b754012ff6ba325dba.png', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/08c/7d6/e10/08c7d6e105476064da6ae5f294dc7647.jpg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/4e3/978/9fe/4e39789fe2dbe24a8cfbdc78f4797295.png', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/cea/fa9/1e5/ceafa91e5b635170f4a6186971cffa8f.jpg', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/c58/1aa/5d5/c581aa5d5efd9fdc9738f519089a4a26.jpg', 'https://habr.com/share/publication/723198/586d5671436606dca420c544dd8db7d2/', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/2e3/236/8e5/2e32368e5770798f3333a3b3a6980c16.jpg', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/2c5/aa3/f64/2c5aa3f64ed6fabbe5b30807520f58e3.jpg', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/a19/807/76c/a1980776cf8221f2b1de21887e01a666.jpg']"
15'723136'Браузерные инструменты: как и зачем их приручать'Сложно найти тестировщика, который не знал бы о DevTools, но еще сложнее найти человека, который знает о них всё . Помимо знакомой всем базовой функциональности, есть много полезных и удобных фич. А...'https://habr.com/ru/post/723136/'"Сложно найти тестировщика, который не знал бы о DevTools, но еще сложнее найти человека, который знает о них всё. Помимо знакомой всем базовой функциональности, есть много полезных и удобных фич. А если не ограничиваться Хромом, то их количество запросто можно удвоить.

Осенью на нашей конференции по тестированию Heisenbug Татьяна Дроздова рассказала о возможностях DevTools в Chrome, Firefox и Safari, и доклад очень понравился участникам. Сейчас мы готовим следующий Heisenbug, где Татьяна выступит с новым докладом о браузерных расширениях — а в ожидании этой конференции сделали для Хабра текстовую версию доклада с предыдущей. Далее текст идёт от лица Татьяны.

Поговорим про браузерные инструменты и то, как ими пользоваться в реальных задачах.

Немного обо мне: я уже больше трех лет в тестировании. Тестировала всякое — и веб, и бэк, и автоматизацию на Python. Если говорить про веб, то тестировала всё — от лендингов с кучей разной верстки до сложных интеграций на оплатах, регистрациях и авторизациях. Скопилось столько опыта, что я решила делиться им в своем канале .

На момент доклада я тестировала бэкенд, автоматизировала на Python и была ex-лидом тестирования веб-сервисов в START. Онлайн-кинотеатр START вы наверняка знаете по оригинальным продуктам, таким как сериалы «Контейнер», «Два холма», «Вампиры средней полосы», «Содержанки».

Честно говоря, я ненавижу скучные задачи и нудные неинтересные способы их решения. Тут мне на помощь приходят инструменты, в первую очередь — встроенные. В данном докладе мы поговорим о возможностях DevTools и их пользе для повседневных задач, немного пробежимся по особенностям инструментов и настроек Chrome, Firefox и Safari (потому что все знают про Chrome, но часто приходится тестировать и в других браузерах, про особенности которых не все в курсе). Также покажу в качестве маленькой приятный плюшки инструмент для monkey testing веба.

Мы не будем говорить о плагинах — о них уже много говорили, и на YouTube есть куча видео. А еще плагины часто устаревают и перестают поддерживаться. Также не будем говорить о базовых фичах. Я думаю, что вы все уже знаете базовый функционал DevTools — где что лежит, где посмотреть запросы и так далее.

Кому будет полезен этот доклад? Мне, как тестировщику веба, и моей команде из шести тестировщиков это было суперполезно. Инструменты, которые я покажу, помогали нам существенно ускорять тестирование. По моему опыту, тестировщики бэка не часто смотрят, что же там нового появилось в DevTools и как это можно использовать для решения задач, поэтому им тоже будет полезно. Ну и конечно, доклад пригодится нашим любимым коллегам из DevOps, PM, администрирования и разработки.

Стоит отметить, что инструменты — достаточно опасная тема для доклада. Они быстро устаревают, меняются, перестают поддерживаться и так далее. Но DevTools такое не грозит: мы знаем, что они стабильные, бесплатные и есть по дефолту во всех браузерах. Поэтому мы про них и поговорим.

План

Есть маленькая оговорка: то, про что я буду рассказывать, точно актуально для Chrome v.107 (по аналогии применимо к Opera v. 91, Яндекс.Браузер v. 22.7), Firefox v.104, Safari v. 15.2. Если у вас предыдущие версии, в большинстве своем эти фичи будут работать, но если можете, лучше обновиться.

Скажу честно, я не люблю тестировать верстку. Для меня это достаточно нудная задача, и я пыталась найти способы, как сделать её круче, быстрее и менее болезненно.

Вьюпорты

Какие вообще бывают проблемы с версткой? Нужно переключаться между разными вьюпортами, помнить их все, актуализировать этот список, не пропускать критичные. Особенно часто мы их пропускаем, когда что-нибудь хотфиксим и забываем, какие разрешения экрана должны поддерживаться.

Чем мы можем для этого воспользоваться? В Chrome и Firefox есть огромные списки уже готовых девайсов, можно выбирать из них. Вот инструкция, что с ними делать:

Точно скажу, что в Firefox список немного актуальнее. Здесь же вы найдете подробную информацию про Device Toolbar.

Что у нас есть еще? Firefox как всегда отличился и дал нам очень удобную фичу: можно поставить галочки на перезагрузку при смене девайсов, и когда в Device Toolbar вы будете переключаться между разными девайсами, браузер сам будет перезагружать вам веб.

Нередко мы сталкиваемся с проблемой, когда при переходе между вьюпортами и девайсами верстка отображается неправильно, а мы не можем понять, почему. Оказывается, мы как всегда забыли рефрешнуться. Firefox как раз от этого спасает.

Помимо тех девайсов, которые уже предусмотрены в готовых списках, можно также завести кастомные:

Это можно сделать и в Chrome, и в Firefox. Главное — не забыть, указать User agent. Тут может быть mobile, desktop, tablet. Это критично для вёрстки.

Если вы модные и современные и используете User agent client hints ( здесь подробнее, что это за штука и почему она модная),

то вместо User agent string заполняйте соответствующий блок.

Safari в этом смысле не самый классный браузер. Вот инструкция, что подкрутить, чтобы хоть как-то подстроиться под девайсы:

Здесь самое главное: у вас будет отдельная строка под указание User agent. Обратите внимание: там просто строка — никаких подсказок не будет, так что максимально точно и аккуратно указывайте User agent.

Иногда нам нужно проверить, скейлится ли вёрстка. Например, на макете максимальное разрешение 1440, на нем всё понятно. Но наши пользователи смотрят веб и на больших разрешениях, а макета под них нет. Как тогда проверять? Обычно нам говорят, что вёрстка скейлится пропорционально. Как эту пропорциональность быстрее всего проверить, особенно если у нас много мелких элементов? Для этого в Firefox есть классная функция — «Измерить часть страницы»

Если мы ее включим, то сможем измерять целые блоки элементов на странице. Например, если откроем какой-нибудь базовый вьюпорт и вьюпорт в два раза больше базового, то сразу сможем измерить нужный блок и посмотреть, пропорционально он скейлится или нет. Если не пропорционально, то отдаем сразу чинить, а если пропорционально, то уже можем углубиться в более детальные проверки. То есть мы не будем тратить драгоценное время на перепроверку каждого маленького элемента, если блоки имеют неправильные размеры.

Скриншоты

Проблем с версткой бывает сильно больше. Например, иногда разработчик говорит: «На моей машине проблем не воспроизводятся — все круто и красиво». В таких случаях мы прикладываем скриншоты с подтверждением проблем с вёрсткой.

Посмотрим, какие вообще бывают скриншоты:

Скриншоты видимой части — это то, с чем мы сталкиваемся обычно.

Fullpage скриншоты — это скриншоты всей страницы, а не только её видимой части. На слайде пример Full page скриншота — крайний справа. Их классно сочетать с Device Toolbar. Например, вы можете не просто открыть страницу на своем базовом разрешении и сделать скриншот, но и на какой-нибудь конкретной мобилочке.

Также есть скриншоты узлов. Вы можете заскринить всё, что угодно — от самого-самого маленького узелочка, например, блока с именем, до какого-то большого узла. И вам не придется вымерять руками и линейками, чтобы был ровный элемент. На слайде «Герои сериала» — это как раз скриншот узла.

Вот инструкция, как делать упомянутые скриншоты:

Еще немного про скриншоты. Firefox позволяет делать скриншоты из консоли с разными параметрами. Самые полезные, на мой взгляд, — это clipboard, delay и fullpage. Круто, что их можно можно сочетать. Например, я хочу сделать скриншот с задержкой и скриншот, который сохранится в буфер обмена. Это можно сделать очень быстро. На сайте Firefox есть полный список таких параметров.

Шрифты

Переходим к шрифтам. Это еще то мучение: если у нас огромное количество элементов на экране, бывает довольно трудозатратно проверить правильность шрифта для каждого элемента. Честно скажу, у нас тоже однажды был баг, когда мы пропустили шрифт, которого не должно было быть.

Здесь работу сильно упрощает Firefox, в котором есть функция «Все шрифты на странице». Необходимые шаги описаны ниже::

Во-первых, благодаря этой фиче, мы видим, какие шрифты вообще есть — какие лишние, а какие нужные, правильно ли они называются, какие начертания использованы и так далее. А ещё круто, что мы можем выбрать конкретный шрифт и он подсветится на странице. Можем проверить, чтобы единообразные элементы имели одинаковый шрифт.

Контрастность

Бывает такое, что дизайн классный, и всё сделано правильно по требованиям, но оказывается, что не всё читабельно и контрастно. Вы видите это невооруженным глазом, но нужно как-то доказать эту нечитабельность. Для этого вы можете использовать accessibility отчёт в Lighthouse.

Он сгодится для всех целей — и проверить, как видят сайт люди с дальтонизмом, и как он в целом смотрится. Отчет сгенерируется буквально за несколько секунд. Идем в раздел с контрастом — там мы получим скрины с готовыми не контрастными элементами и их селекторы. Всё это теперь можно приложить к задаче, показать дизайнеру и разработчику.

Анимация

Анимация бывает крайне сложная — с множеством переходов, где что-то мелькает, появляется, исчезает. Конечно, иногда уловить это человеческим глазом и сравнить с прототипом практически невозможно. В таких случаях нам помогут фичи, которые есть в Firefox и Chrome:

Они позволяют записать анимацию и потом проиграть ее с отличной от оригинальной скоростью. Благодаря этому мы рассмотрим все детали и сможем внести изменения. Очень удобно!

Динамическое масштабирование элементов

Это практически мое любимое. Помните, нам в самом начале всяких курсов и по тестированию, и по JS рассказывали, что можно выделить элемент в elements, поменять там текст, произойдет магия и всё применится. Это, конечно, классно, но бывают такие страницы, на которых текста и элементов крайне много, а вам хочется менять текст везде, быстро и не переключаясь между элементами в elements. Для этого мы можем перейти в консоль, ввести там document.designMode = ’on’ и всё — магия начинается. Теперь вы сможете редактировать любой текст в любом блоке и видеть результат, не возвращаясь каждый раз в DevTools. Кажется, так намного удобнее.

Dark mode

Еще одна сложность, не так давно появившаяся, но уже полюбившаяся. Для целей доклада я разделила этот режим на Dark mode здорового человека и Dark mode курильщика.

Dark mode здорового человека — если речь про Firefox — это ещё и Dark mode рискового человека, потому что вам нужно перейти в конфиг и выбрать необходимые значения, принимая на себя риск, что что-то пойдёт не так.

Тестировщику такой подход не очень удобен — потом придется возвращать дефолтные значения и переключать конфиг вручную.

Есть еще Dark Mode терпеливого человека — это несколько упрямые кнопочки, которые есть в инспекторе в правилах DevTools.

Там есть солнце и луна, которые соответствуют отключенному и включенному Dark Mode. Google в примере на слайде прекрасно реагирует на переключение режимов, но, как вы понимаете, не на всех сайтах это реализовано.

И тут нам приходит на помощь Dark Mode курильщика. Google решил сделать фичу Auto Dark Mode for Web Contents — это когда неважно, есть ли на сайте Dark Mode или нет, его все равно можно включить. Как по мне, довольно болезненная штука. Пользователи могут включить данный функционал через флаги, а тестировщики — через рендеринг в DevTools (ну или тоже через флаги).

Тут начинается страшное: слева вы видите мой дорогой веб, на котором много тёмных элементов:

Но когда мы включаем Auto Dark Mode, браузер инвертирует цвета. То, что было чёрным, почему-то стало светлым, хотя это Dark Mode. Что было светлым, перекрасилось в тёмный, но не стало более читабельным. Итого, получается довольно неприятная фича. Решайте сами, будете ли вы это как-то поддерживать и тестировать, но знать про это точно нужно.

И снова про скейл

Еще маленькая фишечка про верстку. Вёрстка бывает просто неудобной для работы. Я лично сталкиваюсь с проблемами с TV apps, потому что он, к сожалению, не сверстан под мой вьюпорт 1440, и я постоянно мучаюсь, чтобы подскроллить нужный блок, найти нужные кнопки и так далее. Тут на помощь снова приходит Device Toolbar. Я просто ставлю себе рандомное устройство с вьюпортом 1920 и все нужные кнопки уже отображаются на экране. Это же может помочь вам с любым приложением, которые не сверстано под ваше разрешение. Иногда такое бывает с админками или мобильными веб-приложениями.

Функциональные проверки

HAR, cURL и Postman

Переходим к более хардкорным вещам — функциональным проверкам. Начнём с экспорта данных. Часто нам бывает нужно сохранить какие-то логи или перенести данные. Есть волшебная штука — HAR.

По сути это HTTP-архив для экспорта данных. Это такой JSON с данными запросов и ответов.

Будьте осторожны: поскольку вы записываете его по ходу прохождения тестируемого флоу, в нем окажутся и куки, и логины, и пароли. Чтобы эти конфиденциальные данные не расшарить, можете воспользоваться любым текстовым редактором и обрезать лишнее до отправки.

Зачем я все это вам рассказала? Во-первых, HAR можно использовать для логирования. Вы у себя в DevTools записали HAR, сохранили и отправили своему разработчику. Он, не используя никаких дополнительных инструментов, сможет почистить Нетворк и просто перетащить туда этот архив и открыть. Таким образом, он увидит ровно те же запросы с ответами, что вы сами только что смотрели.

Когда это бывает нужно? Когда речь идет о плавающих багах. Не нужно заставлять тестировщиков и разработчиков проходить много раз сложный флоу — можно сразу скинуть им архивчик.

Но есть и минусы: нельзя выбрать, какие именно запросы попадут в ваш архив, поэтому, если будете записывать HAR, лучше сначала почистить нетворк. Если вы этого не сделали или сделали, но ответы на запросы оказались тяжёлыми, имейте в виду, что HAR может весить 100 МБ или даже больше.

Логирование — это не единственное назначение HAR. Такие архивы также возможно использовать с Postman. Можно сохранить HAR, импортировать в Postman и всего за несколько секунд у вас сгенерируется готовая коллекция по заданным параметрам. Мало того, что там будут сами запросы, там ещё будут экзамплы — они пригодятся, когда сами запросы будут изменены и их потребуется сравнить с образцом.

HAR также можно использовать со снифферами — точно так же импортируем его в сниффер и получаем те же самые ответы, что могли бы получить, если бы снифферили траффик с какого-то другого девайса.

Зачем это всё может понадобится? Например, вам нужно произвести в сниффере дополнительные действия — добавить что-то в блок-листы, поставить брейкпоинты, что-то отредактировать и так далее. Благодаря HAR, вы можете не дублировать прохождение флоу в сниффере, а просто использовать готовый архив.

И мое любимое: что ещё можно сделать с запросом? Конечно, перенести его в Postman и это можно сделать невероятно быстро. Обычно мы копируем сам URL, потом перетаскиваем его в Postman, потом копируете хэдеры, payload и так далее. Больше так можно не делать.

Нужно лишь сделать копию «as cURL», зайти в Postman, импортировать как текст и всё. Вы получите уже готовый запрос, в котором есть и куки, и хэдеры, и все нужные параметры запроса. Вы ничего не потеряли и можете работать с ним дальше и менять все, что вам необходимо.

Также вы наверняка заметили, что payload в Chrome вынесли в отдельную вкладку. Но есть там и незаметная кнопочка «View Source», она помогает выстроить query-параметры и другой payload в единую строку и скопировать в таком формате. Например, я часто использую это для автоматизации запросов.

JSON

Не могу не рассказать вам про парсинг JSON. В Firefox есть JSON viewer. Если вы об этом не знали, то это взрыв мозга. Вы просто дергаете get-запрос в адресной строке в Firefox и браузер парсит вам JSON. Причем настолько круто, что даже Postman так не умеет — вы не используете никакие дополнительные инструменты, видите всё в едином окне, там есть очень удобный поиск по JSON, можно посмотреть как обработанный JSON, так и не обработанный, можно сохранять файл. А можно сделать еще проще: перейдите в Нетворк, найдите там свой запрос, два раза кликнете на него. В соседней вкладке откроется парсер JSON viewer.

Я чаще всего использую этот функционал для просмотра конфигов, когда мне важно, чтобы огромный и страшный конфиг был виден целиком в читабельном формате.

Сортировка и фильтрация в Нетворке

Вы наверняка знаете про фильтрацию в Нетворке. Конечно, по частичному совпадению там можно найти почти всё. Но это не лучший подход. Я же советую использовать разные фильтры, инвертировать и совмещать их

На сайте DevTools Сhrome вы найдете полный список фильтров, а здесь я собрала небольшой перечень тех, которыми я пользуюсь чаще всего, с примерами.

Отправка отредактированных запросов

Мы привыкли к тому, что запрос нужно перетащить в Postman, отредактировать там и только потом отправить. Но можно сделать проще: для этого заходим в Firefox, выбираем нужный запрос и нажимаем «Повторить запрос». Открывается окошко, в котором мы можем сделать с запросом всё, что угодно: убрать параметры, вставить тестовые данные или же полностью его переписать. Почему это удобнее? Нам не нужны другие инструменты, можем сделать всё прямо в браузере. Также мы увидим, как ответы отображаются на фронте. Например, мы отправляем тестовые данные или вообще ломаем бэк и смотрим, как фронт это обработает. То есть мы не тестируем сначала фронт, потом бэк, а смотрим все в одном месте.

Ок, в Firefox можно сделать такую крутую штуку, но вам нужно отредактировать запрос в Chrome… Как же быть? Одна из фич, которую можно найти в любом браузере, — отправка запроса из консоли. Переходите к запросу, делаете его копию «as fetch», переносите в консоль или текстовый редактор, редактируете, как вам требуется, и отправляете из консоли. Там же вы увидите ответ на отправленный запрос, он также продублируется в Нетворке, а на фронте вы увидите, как обработался ответ на запрос.

Теперь поговорим о получении данных о веб-приложении из консоли. Вам могут пригодиться следующие инструменты. Юзер-агент, особенно если вы его меняли. В таком случае можно удостовериться, что юзер-агент правильный и совпадает у вас и у разработчика. Также в консоли можно посмотреть внутреннюю ширину и высоту окна у браузера до и после изменений, а также размер элемента и его позицию относительно вьюпорта — это пригодится для автоматизации UI и проверки верстки. Необходимые скрипты и примеры их использования указаны ниже:

Логирование в консоли мобильного девайса

Я мало рассказываю про мобилки, но не могу обойти эту фичу. Chrome сделал встроенное логирование прямо в мобильном браузере. Можно зайти на вкладку chrome://inspect, запустить логирование, сходить на свой веб, поделать целевые действия, вернуться обратно и увидеть логи как в обычной консоли.

Раньше вы подключали провод, искали нужные девайсы, а тут такая магия — крайне советую!

Мэтчинг кук и запросов

Не всегда из названия куки понятно, за что она отвечает и зачем нужна. Но вы можете перейти в Application > Cookies и посмотреть, какие запросы отправляются с конкретными куками. Даже если вы знаете, что это за кука, можно посмотреть, везде ли она используется, где должна. Или вдруг кто-то спросит, не лишняя ли это кука. Вы сможете пройти весь флоу и быстро посмотреть, используется она или нет.

Последовательность и полнота загрузки страницы

Иногда в single-page applications мы сталкиваемся с жуткими проблемами с поэтапной загрузкой страницы — когда контент загружается частями, мелькает, заметно скейлится. Особенно если у пользователя невысокая скорость соединения, на экране происходят чудеса и ужасы. Чтобы это запечатлеть, есть Capture screenshot в Нетворке, также одновременно мы можем включить троттлинг. Например, с их помощью я нашла, что у меня бьется картинка при загрузке страницы:

Проверка SEO

Вы можете сказать, что у вас есть свой SEO-специалист, на SEO никогда не хватает времени и т. д. Но создание отчета по SEO в DevTools не займет много времени. В нем будет много разных полезных данных — title страниц, статусы документов, alt картинок. Вот, как его сделать:

Также если мы работаем с SEO, то часто сталкиваемся с исходным кодом. Специально для вас, я посравнивала, где его лучше смотреть. Например, в Safari хуже всего:

В Chrome получше — он откроет исходный код в отдельной вкладке, там есть поиск, можно посмотреть код с переносом по строкам, а не в одной бесконечной строке.

И удобнее всего — Firefox. В нём можно и с определенным регистром поискать, и синтаксис подсветить, и длинные строки перенести. В общем, очень советую работать с исходным кодом именно в этом браузере.

Monkey Testing Tools

Мобильщики часто радуются, что у них есть удобные monkey testing tools. Не многие знают, но для веба тоже есть аналогичный инструмент — gremlins.js. Вот репозиторий проекта. В нём же есть ссылка на сайт и инструкция по установке и настройке. Этот инструмент умеет кликать в рандомные места, скроллить страницу, закрывать окошки и т. д. Я использую его, когда мне нужно сломать приложение, например, если мы сделали что-то новое и хотим проверить, не упадет ли оно от минимальных взаимодействий. Еще использую его, когда требуется генерировать запросы и ивенты, потому что делать это руками крайне скучно.

Боли автоматизации

Бывают сложноуловимые элементы, взаимодействие с которыми нужно автоматизировать. Например, некоторые из них появляются и исчезают по ховеру или клику. Чтобы их поймать, вам потребуется узнать, какой ивент ассоциируется с появлением этого элемента. Например, у меня это был клик. Чтобы его поймать, я перешла в Sources → Event Listener Breakpoint, выбрала там клик. И при следующем клике по элементу, браузер остановил выполнение JS-кода и я смогла сделать необходимые действия — например, подобрать локатор.

Еще есть случаи, когда элемент появляется по клику, но исчезает при смещении курсора. В моём случае так было с меню пользователя. Как же его поймать? Для этого перейдем в Elements, скопируем JS path до этого элемента и теперь можем кликнуть на него в консоли.

Со 107 версии в Chrome (наконец-то) можно отключить поиск элемента при вводе локатора. Вот, как это сделать:

Теперь никакой суеты и никакой боли — крайне рекомендую!

Recorder

Chrome уже долго разрабатывает Recorder. Он все еще находится в статусе Preview feature, но очень активно развивается. Recorder предназначен для записи и проигрывания пользовательского флоу, который после можно выгрузить, оценить, доработать.

Все мы знаем, что у рекордеров много минусов — нестабильность, выполнение новых шагов до завершения предыдущих и т. д. Но я хочу похвалить рекордер от Chrome. В нём, как минимум, есть редактирование шагов, постановка breakpoints, ожидания, добавление шагов вручную, изменение таймаутов для всего флоу и отдельных шагов, использование data-testid.

Сделаем ещё немного удобнее

При открытых DevTools можно зажать кнопку рефреша и увидеть 3 варианта перезагрузки страницы. Самый интересный из них — empty cache and hard reload. Его суть в том, что он сначала очищает кэш и только потом перезапрашивает все запросы. Чем это круто? Не все запросы запрашиваются в момент рефреша. Может быть такое, что вы сделали hard reload, запросы отправились без кэша, а дальше есть запросы, которые привязаны к рефрешу, и они могут подхватить кэш. Чтобы избежать такой ситуации, можно использовать empty cache and hard reload.

Синк настроек Devtools

Обидно терять настройки, которые вы установили ранее. Поэтому обязательно включайте «Enable settings sync» на тестовых устройствах и тогда при авторизации под единым тестовым Google-аккаунтом, все сделанные настройки останутся с вами.

Итоги

Самое главное, что я хочу сказать:

не ограничивайтесь DevTools в Chrome. Помимо него есть очень много интересного — надеюсь, я смогла вас заинтересовать;

проще и быстрее узнать про обновление DevTools из документации;

подумайте, нельзя ли вашу задачу решить встроенными инструментами. Не всегда стоит искать плагины, специальные программы и устройства, в большинстве случаев можно облегчить себе жизнь и решить вопрос встроенными DevTools.

А еще я подготовила для вас свои любимые материалы по теме:

Если вы хотите похвалить или поругать меня за доклад или задать вопросы, то пишите мне в Telegram , LinkedIn или на канале .

Спасибо за внимание!"'https://habrastorage.org/getpro/habr/upload_files/95d/6bb/646/95d6bb646264c0cd02dd7567de1682df.JPG'"['https://habrastorage.org/r/w1560/getpro/habr/upload_files/b08/f4a/1f0/b08f4a1f092592f19ee5364d4a53bb62.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/2ec/f61/add/2ecf61add5474c6ba9c0fe15b65d6c8f.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/b70/d67/169/b70d67169e434f7fb856a934e3bb0986.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/f48/2da/38e/f482da38eb66a3ee6cfc98508b5e7da2.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/850/e8a/a62/850e8aa620e20f6efa929f2aa55eb9b9.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/12e/b74/1be/12eb741beebbea36d4dba78f4a5031f1.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/74a/753/f05/74a753f0515f71d6781a0050b5ebc04a.png', 'https://habrastorage.org/getpro/habr/branding/bbb/0e2/057/bbb0e2057e68546553089288d451965c.jpg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/70f/16e/8e3/70f16e8e3ea8ffd5158dda12b66c945f.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/334/677/204/3346772045e8fca710bcbfda30684f6f.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/e08/1a9/623/e081a9623a34ddf9f0ca839b51f432cc.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/938/111/5f2/9381115f2df8759e3db9e2fd06a34e3e.png', 'https://vk.com/rtrg?p=VK-RTRG-412679-4FWK5', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/0e6/e52/aea/0e6e52aea636aa57a82c5716ff23f50a.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/cd7/dbc/64d/cd7dbc64d15c376582737762f246e5c9.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/521/936/f40/521936f408351210e9cc2dd9da865589.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/ea5/525/93e/ea552593e32bee38ec378bd750e23b9c.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/c35/5ed/e11/c355ede113c8cea27d78c69a6354cd6a.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/fe6/b3e/a16/fe6b3ea16bb8adda60ccf0c79dbad80d.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/d98/a6b/282/d98a6b282e1f977e1c586f517d5f9ecc.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/073/dc6/2e0/073dc62e08b507a39a5f1e087e784d7f.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/190/10d/f69/19010df696d792cbc5944317cf3b5f9b.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/0b2/19f/ebb/0b219febba7b981bb9b5895f71133609.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/669/c03/7b2/669c037b20b9bd79a1c29a4992a5f21d.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/efa/dff/2f5/efadff2f5b57267f4b5414096127b1a5.png', 'https://habrastorage.org/getpro/habr/company/0a7/ce6/a86/0a7ce6a86556ff20579e90e6b732e663.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/56c/fd5/5f4/56cfd55f44e952ccc9a1064a0bdf6bd1.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/cba/b56/ad8/cbab56ad86b1c5bfa9a9061fb86727fd.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/0d6/3d6/7c8/0d63d67c8c579d7a971fc86ffae96e6d.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/bcf/670/5bb/bcf6705bb7f53686abf72a294f56e000.png', 'https://mc.yandex.ru/watch/24049213', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/328/8c7/13b/3288c713b36f866b706543ed544562f4.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/a75/90c/4d6/a7590c4d6b8586916a7cebd5d748c764.png', 'https://www.facebook.com/tr?id=2610199939046212&ev=PageView&noscript=1', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/85c/eb9/32a/85ceb932a63994b09100b85d12e8e104.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/b77/65b/ad5/b7765bad54614254136ab76c67c6e7c1.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/aa2/d01/454/aa2d014542650a7fb92cb33f00e4f50a.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/ca9/f9d/3ee/ca9f9d3ee0479276c95fd0545dbb10d1.png', 'https://habrastorage.org/getpro/habr/upload_files/95d/6bb/646/95d6bb646264c0cd02dd7567de1682df.JPG', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/260/e9c/2a7/260e9c2a7524975d263824ec02ddc46a.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/209/595/7f0/2095957f07d667c8615d811832191e52.png']"
16'723194'Кросс-компилируем Rust приложения при помощи Nix'На текущем месте работы столкнулся с необходимости собирать Docker образы для сервисов написанных на Rust. Обычно в таком случае пишется Dockerfile, который внутри докера просто собирает контейнер и...'https://habr.com/ru/post/723194/'"На текущем месте работы столкнулся с необходимости собирать Docker образы для сервисов написанных на Rust. Обычно в таком случае пишется Dockerfile, который внутри докера просто собирает контейнер и все. Но все оказалось не так однозначно: такая схема довольно неплохо работает, когда у тебя есть x86_64 Linux машина, но любой шаг в сторону и начинаются большие проблемы.

Все довольно неприятно уже на Intel MacBook машинах, докер поедает довольно много ресурсов с хоста, а еще возникают всякие странные приколы с монтированием файловой системы и правами доступа. Но настоящий ужас начинается на Макбуках с Apple Silicon процессорами, где обычной виртуализацией уже не обойдешься и можно часами ждать сборки простого сервиса через qemu. Можно решать эту проблему через сборку контейнеров в CI, но когда разработчиков много, а им надо часто что-то пересобирать, то там образовывалась очередь.

Поэтому я начал искать пути, а каким же образом можно избежать в общем-то не нужной виртуализации и в результате нашел довольно успешный и универсальный подход, которым и хочу теперь поделиться.

Nix Package Manager

В проекте мы уже довольно давно для контроля зависимостей пользовались Nix Package Manager, кто не знает, это такой вот чисто функциональный пакетный менеджер и среда разработки ПО, которая позволяет изолировать зависимости проекта, обеспечивая воспроизводимость и предсказуемость в разработке.

Если более простыми словами, то это такой вот аналог virtualenv, или nvm, но который умеет создавать виртуальные окружения, состоящие из вообще любых мыслимых и немыслимых программ и зависимостей.

Устанавливается он довольно просто (хотя на маке и требует создание APFS тома и root прав), и позволяет обходиться единым описанием окружения как на Linux (в том числе WSL), так и на MacOS. А само окружение описываются в специальном shell.nix файле, и выглядят следующим образом:

{ pkgs ? import <nixpkgs> {} }: pkgs.mkShell { # Всякие бинарные программы, типа компиляторов nativeBuildInputs = with pkgs; [ rustc cargo protobuf cmake pkg-config ]; # Всякие библиотечные зависимости buildInputs = with pkgs; [ openssl zlib ]; }

Ну а дальше просто в директории, в которой описан этот shell.nix файл просто достаточно написать команду

# Просто войти в шелл nix-shell shell.nix # А можно еще и сразу выполнить команду из под шелла nix-shell --run ""cargo build""

И дальше Nix Package Manager соберет окружение, содержащее все описанное в shell.nix файле. Такого файла вполне достаточно, чтобы собирать простые Rust проекты. Причем, все зависимости будут установлены в /nix/store директорию и тем самым не будут загрязнять систему, и могут быть позже удалены командой nix store gc.

Думаю, что наступило самое время попробовать этот файлик в деле и убедиться, что все установилось и работает, перед тем, как идти дальше.

Использование его в качестве кросс-компилятора

Дальше оказалось, что Nix довольно неплохо поддерживает кросс-компиляцию, но мои попытки просто так взять и в лоб собрать с Мака под Линукс что-то, воспользовавшись шеллом, описанным выше, с треском провалилась. Оказалось, что и Rust из Nix пакетов не очень умеет в кросс-компиляцию и еще куча библиотек по факту просто не собираются.

Но в интернете было довольно много подсказок и советов как заставить эту всю схему работать, а дальше я уже, руководствуясь накопленным опытом и документацией по Nix, начал совершенствовать все эти наработки и в конце концов это все выросло в полноценный оверлей для кросс-компиляции, в котором я смог существенно упростить настройку кросс-компиляции, и не только это.

Существует еще и кеш двоичных пакетов, в котором уже есть большое количество собранных библиотек, что заметно убыстряет первую сборку шелла, чтобы включить его, выполните команду. Очень рекомендую это сделать до того, как вы будете пробовать запускать примеры.

nix-shell -p cachix --run ""cachix use nixpkgs-cross-overlay""

В итоге, чтобы получить работающий шелл, который может собирать статически слинкованные musl бинарники под x86_86 достаточно воспользоваться примерно таким файлом:

{ localSystem ? builtins.currentSystem # Default cross-compilation configuration, you may override it by passing the # `--arg crossSystem '<our-own-config>'` to `nix-shell`. , crossSystem ? { config = ""x86_64-unknown-linux-musl""; isStatic = true; useLLVM = true; } # Override nixpkgs-cross-overlay branch. }: let # Fetch the nixpkgs-cross-overlay sources. src = builtins.fetchTarball ""https://github.com/alekseysidorov/nixpkgs-cross-overlay/tarball/main""; # Use the nixpkgs revision provided by the overlay. # This is the best way, as they are the most proven and compatible. nixpkgs = ""${src}/utils/nixpkgs.nix""; # Make cross system packages. pkgs = import nixpkgs { inherit localSystem crossSystem; overlays = [ # <- You may add your extra overlays here. ]; }; in # And now, with the resulting packages, we can describe the cross-compilation shell. pkgs.mkShell { # Native project dependencies like build utilities and additional routines # like container building, linters, etc. nativeBuildInputs = [ # This overlay also provides the `rust-overlay`, so it is easy to override the default Rust toolchain setup. # Uncomment this line if you want to use the Rust toolchain provided by this shell. pkgs.pkgsBuildHost.rust-bin.stable.latest.default # Will add some dependencies like libiconv. pkgs.pkgsBuildHost.rustBuildHostDependencies # Crates dependencies pkgs.cargoDeps.openssl-sys pkgs.cargoDeps.prost ]; # Libraries essential to build the service binaries. buildInputs = with pkgs; [ # Enable Rust cross-compilation support. rustCrossHook # Some native libraries. icu ]; # Prettify shell prompt. shellHook = ""${pkgs.crossBashPrompt}""; }

Запускать привычным образом:

nix-shell shell.nix

Такие бинарники не зависят от libc и их можно просто напрямую распространять в любом Linux дистрибутиве, ну или паковать в докер образ. Одним словом, быстро, просто и удобно. В принципе, уже на этом месте можно расслабиться и получать удовольствие от жизни, получившиеся бинарники вполне себе можно паковать в Alpine Linux и дальше распространять, но Nix сам умеет собирать докер образы вообще без самого Докера и написания докерфайлов.

Nix dockerTools

При помощи dockerTools можно собирать докер образы напрямую при помощи Nix, причем содержать они будут только лишь самый минимальный набор файлов, сравнимый с distroless образами, а все зависимости можно разруливать все так-же при помощи Nix Package Manager.

У меня есть пример скрипта, который может собрать минимальный докер образ из выданного ему Rust бинарника:

{ localSystem ? builtins.currentSystem , crossSystem ? { config = ""x86_64-unknown-linux-musl""; isStatic = true; useLLVM = true; } }: let # Fetch the nixpkgs-cross-overlay sources. src = builtins.fetchTarball ""https://github.com/alekseysidorov/nixpkgs-cross-overlay/tarball/main""; # Use the nixpkgs revision provided by the overlay. # This is the best way, as they are the most proven and compatible. nixpkgs = ""${src}/utils/nixpkgs.nix""; # Make cross system packages. pkgs = import nixpkgs { inherit localSystem crossSystem; overlays = [ # <- You may add your extra overlays here. ]; }; in # And now, with the resulting packages, we can describe the cross-compilation shell. pkgs.mkShell { # Native project dependencies like build utilities and additional routines # like container building, linters, etc. nativeBuildInputs = [ pkgs.pkgsBuildHost.rust-bin.stable.latest.default # Will add some dependencies like libiconv. pkgs.pkgsBuildHost.rustBuildHostDependencies # Crates dependencies. pkgs.cargoDeps.openssl-sys # A simple script to create a docker image from the Cargo workspace member. (pkgs.pkgsBuildHost.writeShellApplication { name = ""cargo-nix-docker-image""; runtimeInputs = with pkgs.pkgsBuildHost; [ nix docker ]; text = let shellFile = ./shell.nix; in '' binary_name=$1 # Compile cargo binary cargo build --release # Copy this shell to the target dir cp ${shellFile} ./target/shell.nix # Build docker image from the compiled service image_archive=$(nix-build ./target/shell.nix -A dockerImage --argstr name ""$binary_name"") docker load <""$image_archive"" ''; }) ]; # Libraries essential to build the service binaries. buildInputs = with pkgs; [ # Enable Rust cross-compilation support. rustCrossHook ]; # Prettify shell prompt. shellHook = '' ${pkgs.crossBashPrompt} echo ""Welcome to the Cargo docker images builder demo shell!"" echo """" echo ""Usage:"" echo """" echo ""$ cargo-nix-docker-image <executable-name>"" echo """" echo ""Have a nice day!"" ''; /* Service docker image definition Usage: ```shell cargo-nix-docker-image executable-name> ``` */ passthru.dockerImage = ( { # Cargo workspace member name name , tag ? ""latest"" }: pkgs.pkgsBuildHost.dockerTools.buildLayeredImage { inherit tag name; contents = with pkgs; [ coreutils bashInteractive dockerTools.caCertificates # Actual service binary compiled by Cargo (copyBinaryFromCargoBuild { inherit name; targetDir = ./.; buildInputs = [ openssl.dev ]; }) # Utilites like ldd to help image debugging stdenv.cc.libc_bin ]; config = { Cmd = [ name ]; WorkingDir = ""/""; Expose = 8080; }; } ); }

Он уже чуть более хитрый, тут shell.nix используется одновременно в двух ипостасях: как описание среды сборки и как аналог Dockerfile. Чтобы собрать докер образ вы должны сделать два шага:

# Зайти в шелл и выполнить команду сборки самого проекты nix-shell shell.nix cargo build --release # Использовать команду nix-build с атрибутом dockerImage для упаковки # бинарника в Докер образ export IMAGE=$(nix-build ./target/shell.nix -A dockerImage --argstr name <имя бинарника>) # Причем в результате у вас в переменной $IMAGE будет ссылка на докер архив, # который надо будет загрузить командой docker load <""$IMAGE""

То есть, на первом шаге вы собираете бинарник, а на втором уже пакуете его в докер образ. А чтобы описать оба этих этапа используется passthru, идея ее в том, что на самом деле pkgs.mkShell это функция, а шелл это результат вычисления этой функции, или другими словами output derivation, ну а buildLayeredImage тоже является функцией, результатом вычисления которой является архив с докер образом и если эту функцию передать через атрибут passthru, то можно будет вызывать ее при помощи ключа -A у команды nix-build.

nix-build ./target/shell.nix -A dockerImage --argstr name <имя бинарника>

Думаю, что на этом можно завершить технические детали, о них можно рассуждать бесконечно и главное вовремя остановиться, поэтому, предлагаю перейти уже к заключению.

Полезные ссылки

Nix - официальный сайт

nixpkgs-cross-overlay - сам оверлей

nixpkgs-rust-service-example - полноценный пример использования оверлея, включающий в себя CI и обеспечение воспроизводимости сборки (об этом будет следующая статья).

Заключение

Это лишь наглядная демонстрация возможностей Nix с моим подключенным оверлеем, в принципе, этого уже достаточно, чтобы значительно облегчить себе жизнь, особенно, если вы владелец Apple Silicon машины. Я прямо очень сильно ощутил разницу между тем, что было раньше и как оно стало теперь, а еще с помощью Nix можно делать свои внутренние оверлеи, которые могут содержать любые необходимые для сопровождения проектов утилиты и очень просто их переиспользовать между проектами - это действительно просто археудобно.

И я надеюсь, что это все реально упрощает жизнь, но есть еще много интересного, о чем бы я хотел рассказать, в особенности, на тему воспризводимости сборки, но все это тянет на большую отдельную статью, в общем, ждите новостей.

Кстати говоря, этот оверлей прекрасно будет работать и с C++ или C проектами."'https://habr.com/share/publication/723194/2fb356997adcad931dd14533c67cf195/'"['https://habrastorage.org/r/w48/getpro/habr/avatars/483/3cc/24b/4833cc24b09e586af2d23ecebc59b7cd.jpg', 'https://mc.yandex.ru/watch/24049213', 'https://habr.com/share/publication/723194/2fb356997adcad931dd14533c67cf195/', 'https://habrastorage.org/getpro/habr/avatars/483/3cc/24b/4833cc24b09e586af2d23ecebc59b7cd.jpg']"
17'723108'[Личный опыт] Плохая колбаса и бассейн на крыше: как системный инженер живёт и работает в ОАЭ'Наш спикер и экс-CTO Слёрма Марсель Ибраев почти год живёт и работает системным инженером в Абу-Даби. Мы поговорили с Марселем, и он рассказал: Как прошёл собеседование на иностранном языке, хотя его...'https://habr.com/ru/post/723108/'"Наш спикер и экс-CTO Слёрма Марсель Ибраев почти год живёт и работает системным инженером в Абу-Даби. Мы поговорили с Марселем, и он рассказал:

Как прошёл собеседование на иностранном языке, хотя его английский и сейчас далёк от идеала, а до переезда в ОАЭ был ещё хуже.

На какую зарплату не стоит соглашаться айтишнику, который собирается жить в Эмиратах.

Про квартиру в ЖК с бассейном на крыше и конские ценники в больницах.

Дисклеймер. В статье Марсель опирается исключительно на опыт своей семьи и знакомых. Материал никак не связан с политической ситуацией и событиями, которые происходят в мире.

Передаём слово Марселю.

Каср аль-Ватан — президентский дворец Объединенных Арабских Эмиратов, расположенный в Абу-Даби

Мы посетили 20 стран, но нигде не появилось желания остаться пожить

Мысли, что было бы неплохо пожить за рубежом, у нас с женой появились ещё в 2019 году, во время тура по Европе. Хотелось расширить кругозор, познакомиться с новыми людьми, прокачать иностранный язык. Ещё одной целью был профессиональный рост. Меня интересовало, как в зарубежных компаниях работают вещи, которые используем мы, и как решаются проблемы, которые есть у нас.

Но переезд никогда не был первоочередной задачей. Будь оно так, я бы, конечно, и английским плотнее занялся, и страну тщательнее выбирал. Мы просто путешествовали и приценивались: «Хотим тут жить или нет?» За 2019–2022 годы посетили около 20 стран. Везде оказалось прикольно и весело, как туристам, но нигде не возникло желания остаться жить, хотя на некоторые страны я рассчитывал.

Например, возлагал большие надежды на Черногорию, но она не зашла. Не хочу никого обидеть: мне показалось, что Черногория — одна большая деревня. Она понравится тем, кто не любит городскую суету. Я же всё-таки привык к большей движухе.

«EXPO-2020» в Дубае, Российский павильон

Про вакансии в зарубежных компаниях спрашивал у знакомых

Так как мы не спешили с переездом, я не торопился искать новую работу. Иногда спрашивал про вакансии у русскоговорящих знакомых, которые работали в небольших европейских компаниях, и мне скидывали варианты.

Само собой, я обращал внимание, сколько предлагают денег. Чаще всего сумма была либо такая же, какую получал я, либо чуть выше, поэтому эти варианты мне не подходили. В Европе не очень большие зарплаты (конечно, зависит ещё и от страны) и высокая стоимость жизни. Я знаю примеры ребят, которые очень хорошо жили в России, а после переезда их уровень жизни снижался. Я не противник такого выбора, но для моей семьи он не подходил.

Скорее всего, зарплата в крупной международной корпорации была бы намного больше, но с моим английским Google или Amazon я даже не рассматривал. Я знал язык где-то на уровне A2 : помнил основные правила и времена, мог более или менее понять простые вопросы и криво, косо, запинаясь ответить. В работе иностранный нет-нет, да пригождался. И когда я был инженером в девопс-аутсорсере Southbridge, и позже, когда стал CTO и спикером Слёрма. Мы планировали выйти на зарубежный рынок, поэтому я пытался учить английский и самостоятельно, и с преподавателем. Но силы воли надолго не хватало. В общем, с моим уровнем пройти собеседование на иностранном языке казалось нереальным.

Про G42 Cloud , которая находится в Абу-Даби, мне рассказал товарищ. Я поспрашивал его про работу и жизнь в ОАЭ.

Было много предрассудков об Эмиратах: чуть что, там сразу отрубают руку, все ходят в парандже, нет ни свинины, ни алкоголя. Я не понимал, что некоторые коллеги делают в ОАЭ уже 3 года.

Рассказ про страну и компанию понравился. Я узнал, что G42 Cloud строит облако, которым могут пользоваться внутренние заказчики Эмиратов. Это звучало круто — захотелось там поработать. Конечно, в ОАЭ есть зарубежные облачные сервисы, например AWS. Но государству требовалась внутренняя платформа, ведь хранить данные в чужих облаках, во-первых, опасно, во-вторых, противозаконно.

Через моего товарища я передал резюме в G42 Cloud. Скажу честно, ни на что не рассчитывал. Мой английский всё так же хромал, а желание переехать не занимало первых мест в списке задач. Но как говорится: «Не можешь идти к цели — ложись и лежи в её направлении». 😊

В январе 2022 года меня пригласили пройти первое онлайн-собеседование. Как раз в это время мы с женой были в Абу-Даби и изучали страну. Эмираты приятно удивили, я избавился от многих заблуждений.

В G42 Cloud работают люди со всего мира: у меня есть коллеги из Казахстана, Индии, Польши, Венгрии, Китая, Занзибара

Собеседование на английском прошло неловко: я много мычал, кряхтел, подолгу подбирал слова

Перед собеседованием я по-русски написал ответы на общие вопросы, которые задают, чтобы узнать опыт кандидата: «Расскажите о вашем самом крутом проекте» и прочие. Через Google Translate перевёл на английский, проверил перевод, насколько хватило знаний, и научился пересказывать этот текст, более или менее не запинаясь. Ответы на технические вопросы не готовил: их трудно предугадать — они зависят от компании.

Собеседование состояло из двух этапов: первый — с техлидом, второй — с менеджером. Каждый длился час-полтора. Я внимательно слушал вопросы, вылавливал из них ключевые слова, чтобы понять, что спрашивают, и отвечал. В целом, было очень неловко. Я много мычал, кряхтел, подолгу подбирал слова.

Когда оба этапа закончились, я подумал, что не прошёл. Во-первых, из-за уровня языка. Во-вторых, не смог достойно ответить на пару-тройку технических вопросов.

В Слёрме и Southbridge я уже несколько лет работал на менеджерских должностях, иногда подключаясь к проектам как RND. Единственное, в чём старался сохранять компетенцию — Kubernetes, ведь я преподаю на курсах по K8s. Linux, сетевой стек, настройки ядра, строение пакетов — то, что я изучал лет 10 назад, когда занимался FreeBSD и настраивал интернет-шлюзы. Многое забылось.

Однако через неделю пришёл оффер: меня пригласили системным инженером в команду баз данных (Database Team). Я был удивлён, но с радостью принял предложение.

Мне кажется, я получил работу благодаря нескольким факторам. Во-первых, так сошлись звёзды: проект развивался стремительно, а рук не хватало. Чтобы как можно быстрее найти людей, процесс найма упростили: оставили двухэтапное собеседование, а тестовое задание убрали. Во-вторых, думаю, не последнюю роль сыграла рекомендация моего товарища. Ещё, возможно, сработали мои харизма, подача и искреннее желание.

На фото люди из Бразилии, Казахстана, России и Китая собрались в Эмиратах, чтобы угоститься ливанской едой

Резидентство ОАЭ, Emirates ID и клиренс

Коллеги из России рассказывали, что у них на переезд ушло 2–3 месяца. У меня история немного затянулась: оффер я получил в середине января 2022 года, а переехал только в середине мая. Первая причина — личные обстоятельства, вторая — долгое оформление резидентской визы и остальных документов.

Население ОАЭ на 80% состоит из экспатов — людей, которые приехали в страну по рабочему контракту. К ним относятся строго. Чтобы официально жить и работать в Эмиратах, нужно получить резидентскую визу и Emirates ID. Плюс ко всему — наша компания работает с государственными подразделениями, в том числе военными. Это обязывает сотрудников проходить клиренс (clearance) — проверку службой безопасности.

Резидентская виза в ОАЭ — это аналог вида на жительство (ВНЖ). Есть много способов её получить. Например, устроиться в Эмиратах на работу, как в моём случае. Я могу находиться и работать в стране, пока действует контракт. У меня он на два года. Для оформления резидентской визы потребовалось легализовать — перевести на арабский и заверить у нотариуса — кипу документов: паспорт, свидетельство о браке, диплом и т. д.

Ещё я получил Emirates ID — удостоверение личности, которое должно быть у всех проживающих в Арабских Эмиратах. Emirates ID выглядит как пластиковая карточка с личными данными, чипом и идентификационным номером из 15 цифр. Emirates ID выдан также на два года.

Мой Emirates ID

Проверка службой безопасности — клиренс — заняла месяц. Я слышал, бывает и дольше. Моего участия не потребовалось: меня не вызывали в кабинет без окон и не тестировали на детекторе лжи. Служба безопасности всё сделала сама. Клиренс проводится не только при приёме на работу, но и при продлении контракта. Никто не знает, как служба безопасности проверяет сотрудника и по каким причинам можно не пройти. Но, если «завалить» клиренс, придётся покинуть страну.

Зарплаты и бонусы: обычный системный инженер может получать в месяц от 7 тысяч долларов

Мне кажется, в ОАЭ легче найти высокооплачиваемую работу в IT, чем в России или Европе. Причём я говорю про рядовые должности. Обычный системный инженер уровня мидл может здесь получать в месяц от 7 тысяч долларов на руки. Ещё раз — это зарплата не менеджера или тимлида, а простого инженера. Не знаю, как сейчас, но 2–3 года назад, когда я мониторил рынок Европы, найти такое предложение было крайне сложно.

Городской пейзаж Абу-Даби

Однако столько платят далеко не везде. Множество эмиратских компаний готовы предложить сильно меньше — 3–4 тысячи долларов. С учётом аренды жилья это очень маленькая сумма даже для одного человека. Возможно, плюсом будут идти бонусы: корпоративная связь, компенсация каких-то трат. Но плюшки несильно помогут. Скорее всего, уровень жизни у того, кто согласится на такую зарплату, упадёт, потому что в Арабских Эмиратах высокие цены почти на всё. Правда, мои коллеги из Москвы говорят, что тут недорого: они примерно столько же тратили в столице. Я из провинции, и для меня здесь дороже: на продукты уходит на 20–50% больше, чем на родине.

В общем, ехать в Арабские Эмираты из России за 3 тысячи баксов я бы точно не стал даже ради опыта. Оптимально соглашаться на зарплату от 5–6 тысяч долларов на руки — для одного уже более или менее. С 7–8 тысяч получится даже неплохо откладывать.

Наша компания предлагает зарплату выше рынка. Плюс помогает с переездом и оформлением документов; компенсирует траты на мобильную связь, аренду, садик или школу и много ещё чего; предоставляет отличную медицинскую страховку для всей семьи. Моя жена рожала в одной из лучших клиник Абу-Даби. Расходы на роды точно перевалили за миллион рублей, и страховка их полностью покрыла.

Вообще, без страховки в ОАЭ делать нечего. Здесь очень хорошая, но крайне дорогая медицина, которая может полностью съесть зарплату. В больницах — современное оборудование и квалифицированные врачи, но конские ценники. Чтобы вы понимали: мы не успели оформить ребёнку страховку и плановый осмотр у педиатра, который длился три минуты, встал нам в 12 тысяч рублей.

Квартиры в 95% случаев сдаются без мебели

После приезда в Абу-Даби мы два месяца жили в отеле. Первый месяц оплачивала компания, второй — сами. Нам хотелось спокойно выбрать квартиру, обустроиться и въехать.

Найти жильё в Эмиратах не проблема — здесь есть варианты на любой вкус и кошелёк. Однако стоит иметь в виду, что снять квартиру дешевле 50–60 тысяч рублей в месяц вряд ли получится. За 20–30 тысяч можно арендовать разве что комнату на окраине.

Ещё один важный момент — в 95% случаев квартиры сдаются без мебели. Есть кухня и санузел, а остальное: кровать, стол, стулья, телевизор — покупают жильцы. Когда съезжают, просто всё распродают.

Мы искали жильё через сайт Property Finder . Довольно быстро выбрали «еврооднушку» — квартиру с одной спальней и кухней-гостиной — в отличном ЖК, где на крыше расположены парк, несколько бассейнов, в том числе подогреваемые, корты, баскетбольные и футбольные площадки, сквош, сауна и ещё куча всего. Мы подписали договор с риелтором и заплатили security-депозит около 100 тысяч рублей. Если с квартирой всё будет в порядке, при выезде нам вернут всю сумму депозита. Если мы что-то сломаем или испортим, из него вычтут стоимость ремонта.

Частота арендной платы зависит от договорённостей с арендодателем. Коллеги рассказывали, что кто-то оплачивает аренду раз в два месяца, а кто-то договорился о скидке и заплатил сразу за год проживания. Мы платим за квартиру раз в квартал около 250 тысяч рублей. Для Эмиратов это очень хорошее соотношение цены и качества.

Вид на Абу-Даби из Observation Deck at 300

Безопасные улицы и плохая колбаса: общие наблюдения о жизни в ОАЭ

Эмираты немного отстают от России в плане цифровизации. У нас есть Госуслуги. Многие их хают за то, что они постоянно падают. А я считаю, что это одна из лучших вещей в России. Когда множество вопросов можно решить не выходя из дома — это обалденно. Пожив в Эмиратах, я начал ценить такую возможность.

В ОАЭ есть свой госпортал — он покрывает часть бюрократических забот. Но, когда в ноябре прошлого года у меня здесь родился ребёнок, пришлось побегать по разным организациям, чтобы оформить на него документы.

Запомнилась миграционная служба Абу-Даби. Это целый мини-город с КПП, обнесённый высоким забором с колючей проволокой. Когда я оказался внутри, увидел на асфальте линии разных цветов: зелёную, красную и жёлтую. Я не понимал, для чего они, пока на одной из стоек не сказали: «Вам в другой корпус. Выйдете из этого и идите по жёлтой линии». Я быстро нашёл нужное здание.

Высокий уровень безопасности. По данным сервиса NUMBEO.com, Абу-Даби — самый безопасный город в мире. Это правда ощущается: можно спокойно гулять ночью, оставлять вещи в общественных местах. Здесь запрещено находиться пьяным на улице. На каждом шагу камеры: если что-то сотворишь, быстро вычислят. В лучшем случае отделаешься штрафом, в худшем — выдворят из страны. К слову, штрафы огромные. Пересечение стоп-линии на красный, скорее всего, засчитают как проезд на запрещающий сигнал светофора и либо впаяют штраф в 50 тысяч рублей, либо заберут машину на штрафстоянку на месяц.

А вот руки в ОАЭ никому не рубят, и в целом страна с каждым годом становится лояльнее к проявлению европейской культуры. Здесь я себя ни коим образом не ощущаю ущемлённым.

Климат Арабских Эмиратов — это одновременно и плюс и минус страны. С мая по октябрь здесь ад: температура доходит до +50 и выше. Летом люди не гуляют, а перемещаются от кондиционера к кондиционеру. Хотя мы с коллегами умудрялись гулять. Выходили поздно вечером и кружили по району час-полтора. Влажно, неприятно, но терпимо.

Поздней осенью, зимой и ранней весной здесь прекрасно. В феврале днём температура держалась в районе 22—25 градусов — можно ходить в футболке. Иногда случались ветреные дни и нужно было надевать кофту или ветровку, но это редко.

В ОАЭ есть те же продукты, что в России. Вопреки расхожему мнению, в Эмиратах можно найти и свинину, и алкоголь. Выпивку продают в специальных магазинах, а свинину — в обычных, только она хранится в закрытых прилавках.

Заметил, что здесь очень плохая местная колбаса. Мы раза 3–4 пробовали разные сорта колбас и сосиски — кошмар какой-то. Не знаю, из чего её делают, но есть невозможно. То же касается мясных полуфабрикатов — пельменей, фарша и прочего — всё ужасное. Наша колбаса — российская, казахская — сильно вкуснее.

Минус Эмиратов — это страна из песка, бетона и стекла. Здесь не так много интересных природных мест. На фото — один из пустынных пейзажей ОАЭ

В Эмиратах классно, но уровень сервиса хромает

Я не призываю валить из России. У нас много классного. В России круто прокачана банковская сфера, высокий уровень цифровизации и сервиса. Как и в любой стране, в Эмиратах есть минусы и плюсы. Например, сервис здесь, честно говоря, хромает. Пообещают приехать кран починить, звонишь на следующий день, а они удивляются, что ты возмущаешься. Сказали, приедем, значит, когда-нибудь приедем. Такого уровня сервиса, как в России, в Эмиратах не хватает.

Однако я не пожалел, что переехал. Как и хотел, я познакомился со множеством людей со всего мира и подтянул английский до уровня, которого достаточно, чтобы общаться с коллегами и решать рабочие задачи. При этом он далёк от идеала — в англоязычных песнях я часто не понимаю и половины слов.

В общем, если у вас есть мечта пожить в другой стране, но останавливает незнание языка, посмотрите на меня — чувака, который на английском и двух слов связать не мог. В итоге я переехал туда, куда хотел. Всё возможно.

Больше интересного в нашем телеграм-канале"'https://habrastorage.org/getpro/habr/upload_files/e1b/9df/221/e1b9df221da717b7ae8d1b930afdc7ec.jpeg'"['https://habrastorage.org/r/w780q1/getpro/habr/upload_files/829/4e2/3df/8294e23df9a5cd55ee93c4af0418e900.jpeg', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/fd6/546/a66/fd6546a66a8a33818e0eea16f0403dcf.jpeg', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/eda/ce9/f38/edace9f387dbe2db173bb2f8f9333a07.jpeg', 'https://habrastorage.org/getpro/habr/company/754/d93/3ca/754d933caeb494c6127add17ff60feb5.png', 'https://habrastorage.org/r/w48/getpro/habr/avatars/72a/fed/8d5/72afed8d5b8ef74d485a71c6ccca5565.jpg', 'https://habrastorage.org/getpro/habr/avatars/72a/fed/8d5/72afed8d5b8ef74d485a71c6ccca5565.jpg', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/e1b/9df/221/e1b9df221da717b7ae8d1b930afdc7ec.jpeg', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/3d4/bcc/504/3d4bcc504d1fe440b5fdb0b2636a5b78.jpeg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/319/951/209/319951209212ffb379e1c0656fb481f6.png', 'https://habrastorage.org/getpro/habr/upload_files/e1b/9df/221/e1b9df221da717b7ae8d1b930afdc7ec.jpeg', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/0d4/8bb/3dd/0d48bb3dd0c8ba4160b3786166a0e92b.jpeg', 'https://mc.yandex.ru/watch/24049213', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/781/83a/0a8/78183a0a8af38b34d9d7595765373329.jpeg']"
18'722962'Понять комбинаторные селекторы и селекторы потомков в CSS'Периодически я сталкиваюсь с проблемой - не хочу ставить лишний класс элементу внутри различных кнопок, ссылок и label-ов. Зачастую это текст, который нужно подсветить или галочка чекбокса или...'https://habr.com/ru/post/722962/'"Периодически я сталкиваюсь с проблемой - не хочу ставить лишний класс элементу внутри различных кнопок, ссылок и label-ов. Зачастую это текст, который нужно подсветить или галочка чекбокса или маленькая иконка.

Как же справиться с такой проблемой? Тут самым простым и понятным решением будет наследование. Возьмём код ссылки с иконкой, которую нужно анимировать:

<a href=""#"" class=""text_arrow-btn""> <span>Все товары</span> <svg width=""37"" height=""15"" viewBox=""0 0 37 15"" fill=""none"" xmlns=""http://www.w3.org/2000/svg""> <path d=""M0 7.5H36M36 7.5L31.1538 0.5M36 7.5L31.1538 14.5"" stroke=""#323F4C""></path> </svg> </a>

Сделать это несложно, достаточно просто прописать несколько правил:

/*БАЗОВЫЕ ПРАВИЛА*/ a { text-decoration: none; color: inherit; font-family: sans-serif; } .text_arrow-btn { display: flex; align-items: center; font-size: 22px; line-height: 142%; } /*ИСПОЛЬЗОВАНИЕ НАСЛЕДОВАНИЯ*/ .text_arrow-btn span { /*Для span которые внутри ссылки*/ margin-right: 16px; } .text_arrow-btn svg { /*Для svg которые внутри ссылки*/ transition: transform 0.3s; width: 36px; height: 14px; } .text_arrow-btn:hover span { text-decoration: underline; } .text_arrow-btn:hover svg { transform: translateX(12px); }

Пробел обращается ко всем детям элемента с подходящим селектором. Символ ""больше"" > обратится только к прямому потомку.

Да, в CSS выглядет не очень, но в SASS всё уже немного приятнее:

a text-decoration: none color: inherit font-family: sans-serif color: #323F4C .text_arrow-btn display: flex align-items: center span margin-right: 16px svg transition: transform 0.3s width: 36px height: 14px path transition: stroke 0.3s &:hover svg transform: translateX(12px) span text-decoration: underline &:active color: #B6B5B5 path stroke: #B6B5B5

Думаю что этим я глаза никому не открыл - вполне стандартная история.

Соседний комбинатор - ""+""

Однако, на этом мы не останавливаемся. Теперь другая задача - стилизация чекбокса. Если вы хоть раз сталкивались с этой проблемой, то вы знаете лицо боли. Потому что убрать стандартные стили просто так не получится, получится только убрать чекбокс к чёртовой бабушке и стилизовать заново из div или span . Но чтобы добавить неинтерактивным элементам интерактивности придётся использовать JS. Или не придётся?..

Тут нам поможет волшебный + - это комбинатор родственных элементов. Он объединяет два элемента, находящихся на одном уровне, и второй должен следовать СРАЗУ за первым.

Звучит сложно - работает просто. Выбирается следующий сразу за элементом селектор. Вот так:

<label class=""main-checkbox""> <input type=""checkbox""> <span> <svg width=""13"" height=""10"" viewBox=""0 0 13 10"" fill=""none"" xmlns=""http://www.w3.org/2000/svg""> <path d=""M1 3.85714L5.30435 9L12 1"" stroke=""#323F4C""></path> </svg> </span> </label>

.main-checkbox cursor: pointer span display: inline-block width: 24px height: 24px background: #F8F8F8 display: flex align-items: center justify-content: center transition: background 0.3s svg width: 12px height: 9px opacity: 0 transition: opacity 0.3s &:hover span background: #EBEBEB input display: none &:checked+span /*вот он*/ background: #F8F8F8 svg opacity: 1

Обращаем внимание на: &:checked+span тут ""+"" говорит нам о том, что будет выбран следующий за чекнутым input span . И вуаля - чекбокс работает как часы и он стилизован.

Родственный комбинатор - ""~""

Но мы не останавливаемся. Имеем ещё одну задачу: чекбокс у которого внутри идёт span и svg одновременно и нужно при наведении изменить цвет и текста и svg. Да, можно обернуть элементы в div и использовать + , но фу, лишний тег - это полный отстой.

Тут нам поможет тильда ~ (не путать с тильтом). Этот символ не выражает усталость и безысходность - совсем наоборот. Он даёт нам выбрать теги, находящиеся на одном уровне с элементом.

Вот наш чекбокс с иконкой:

<label class=""radio-sort""> <input type=""checkbox""> <span>По возрастанию цены</span> <svg width=""11"" height=""14"" viewBox=""0 0 11 14"" fill=""none"" xmlns=""http://www.w3.org/2000/svg""> <path d=""M5.5 14V1M5.5 1L10 5.78947M5.5 1L1 5.78947"" stroke=""#323F4C"" /> </svg> </label>

И вот стили:

.radio-sort font-family: sans-serif margin-right: 48px cursor: pointer display: flex align-items: center &:last-child margin-right: 0 input display: none span display: inline-block svg width: 10px height: 14px display: inline-block margin-left: 12px input:checked + span font-weight: 800 input:hover + span color: #1eaf9f input:hover ~ svg path stroke: #1eaf9f

тильда выберет следующий за span svg - очень удобно!

Итак, подведём итог.

Пробел - выберет все дочерние элементы, соответствующие селектору:

Знак больше > выберет только дочерние элементы, являющиеся прямыми потомками:

Знак + выберет следующего за элементом потомка:"'https://habrastorage.org/getpro/habr/upload_files/231/399/dce/231399dce9a8e8552e40b43ad6a0d1e2.jpg'"['https://habrastorage.org/r/w48/getpro/habr/avatars/1d5/dda/56e/1d5dda56e0350c2639dd87737a7729f7.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/ac3/9cc/092/ac39cc0926b0465c6e4110aea44af803.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/d72/09b/0a1/d7209b0a188743c9307163a3fc8c776e.png', 'https://habrastorage.org/getpro/habr/upload_files/231/399/dce/231399dce9a8e8552e40b43ad6a0d1e2.jpg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/020/40f/d51/02040fd515973303ed3594dc7f96cd3a.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/afa/044/e75/afa044e753c4ac04ed90f26adb274520.png', 'https://habrastorage.org/r/w780q1/getpro/habr/upload_files/231/399/dce/231399dce9a8e8552e40b43ad6a0d1e2.jpg', 'https://habrastorage.org/getpro/habr/avatars/1d5/dda/56e/1d5dda56e0350c2639dd87737a7729f7.png', 'https://mc.yandex.ru/watch/24049213']"
19'723182'"[Перевод] Тестируйте API, как професионал. Часть 2: Как автоматизировать API с помощью 'cypress-plugin-api'"'cypress-plugin-api , написанный амбассадором Cypress Филипом Хриком (Filip Hric), представляет собой плагин для эффективного тестирования API. Представьте себе Postman, но в Cypress; этот плагин...'https://habr.com/ru/post/723182/'"cypress-plugin-api , написанный амбассадором Cypress Филипом Хриком (Filip Hric), представляет собой плагин для эффективного тестирования API. Представьте себе Postman, но в Cypress; этот плагин выводит на печать всю информацию о вызове API в пользовательском интерфейсе приложения Cypress, обеспечивая несколько преимуществ:

В cypress-plugin-api команда cy.api() работает также как cy.request() . Основное отличие заключается в том, что помимо вызова вашего API, cy.api() также печатает информацию о вызове API в вашем Cypress Test Runner.

Всю эту информацию можно просмотреть в виде time-travel (реверсивная отладка) snapshots.

Также формируется простая таблица для просмотра файлов cookie, сворачивания объектов данных JSON и массива, а также цветового кодирования методов в представлении пользовательского интерфейса и на таймлайне (временной шкале)

Самое важное: cy.api() использует cy.request() в фоновом режиме. Это означает, что вы получаете ту же функциональность плюс визуальный пользовательский интерфейс!

Давайте вместе установим плагин cypress-plugin-api

Шаг 1

Устновите плагин, используя npm или yarn.

npm i cypress-plugin-api # or yarn add cypress-plugin-api

После установки плагина API вы можете увидеть его в файле package.json:

Шаг 2

Далее добавьте плагин cypress/support/e2e.js в файл:

import 'cypress-plugin-api' // or require('cypress-plugin-api')

Ваши e2e.js файлы будут выглядеть так:

Шаг 3

Создайте плагин cypress_plugin_api.cy.js с помощью методов (GET, POST, PUT, DELETE).

Для данного обзора я беру различные примеры методов API из этого ресурса: https://reqres.in/ .

GET Запрос

it(""GET API testing Using Cypress API Plugin"", () => { cy.api(""GET"", ""https://reqres.in/api/users?page=2"").should((response) => { expect(response.status).to.eq(200); }); });

POST Запрос

it(""POST API testing Using Cypress API Plugin"", () => { cy.api(""POST"", ""https://reqres.in/api/users"", { name: ""morpheus"", job: ""leader"", }).should((response) => { expect(response.status).to.eq(201); }); });

PUT Запрос

it(""PUT API testing Using Cypress API Plugin"", () => { cy.api(""PUT"", ""https://reqres.in/api/users/2"", { name: ""morpheus"", job: ""zion resident"", }).should((response) => { expect(response.status).to.eq(200); }); });

DELETE Запрос

it(""DELETE API testing Using Cypress API Plugin"", () => { cy.api(""DELETE"", ""https://reqres.in/api/users/2"").should((response) => { expect(response.status).to.eq(204); }); });

Отчет о выполнении тестового кейса API

На скриншоте ниже мы видим данные Body, Response, Headers и Cookies, отображенные в пользовательском интерфейсе приложения Cypress. Ранее для просмотра этой информации нам приходилось нажимать на кнопку 'inspect', но теперь у нас есть пользовательский интерфейс, который позволяет нам легко получить к ней доступ.

GET Запрос

POST Запрос

PUT Запрос

DELETE Запрос

В завершение приглашаем всех желающих на открытый урок «Автоматизация API + удобные отчеты», который пройдет 24 марта в преддверии старта курса ""JavaScript QA Engineer""."'https://habrastorage.org/getpro/habr/upload_files/d7d/fe5/084/d7dfe508432ddbadd565b10fb386545e.png'"['https://habrastorage.org/getpro/habr/avatars/b9f/baf/5f9/b9fbaf5f96ae52973706a0716bd9216e.jpg', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/524/3a2/43a/5243a243a34880bc546e2fdb1e0f14cb.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/1ed/bb9/798/1edbb97989cdb51f6f0ebc5c061d4969.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/68d/c57/8f1/68dc578f163ce4e6c52c1a20116c7005.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/99d/a73/4af/99da734afd9b242beed66eb484ef5d2f.png', 'https://habrastorage.org/getpro/habr/upload_files/d7d/fe5/084/d7dfe508432ddbadd565b10fb386545e.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/8c1/c99/3dd/8c1c993ddc7b15b59bc529204c35b024.png', 'https://habrastorage.org/getpro/habr/company/2d5/0ed/b57/2d50edb57cf45fa07cc4f39f53b78395.png', 'https://habrastorage.org/r/w1560/getpro/habr/upload_files/347/111/98f/34711198fa40503daaa053a8ad07e4e9.png', 'https://mc.yandex.ru/watch/24049213', 'https://habrastorage.org/r/w48/getpro/habr/avatars/b9f/baf/5f9/b9fbaf5f96ae52973706a0716bd9216e.jpg']"
