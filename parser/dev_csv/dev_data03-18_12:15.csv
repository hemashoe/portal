'post_id'title'body'source_link'image'images
0'0NOOV6AVK'TINYMCE Editor with angular'"<p><strong>tinymce</strong> editor is paid editor to use in our application. tinymce has many toolbar, plugins, and events to use in our application. today we add in our angular app.</p>

<h2>
  
  
  Setup and installation
</h2>



<div class=""highlight js-code-highlight"">
<pre class=""highlight plaintext""><code>import { NgModule } from '@angular/core';

import 'tinymce';
import 'tinymce/themes/modern';
import 'tinymce/plugins/table';
import 'tinymce/plugins/link';
import { BrowserModule } from '@angular/platform-browser';
import { FormsModule } from '@angular/forms';
import { EditorModule } from '@tinymce/tinymce-angular';


import { TinyEditorComponent } from './app.component';

@NgModule({
  imports:      [ BrowserModule, FormsModule, EditorModule ],
  declarations: [ TinyEditorComponent ],
  providers: [],
  bootstrap:    [ TinyEditorComponent ]
})
export class AppModule { }


</code></pre>

</div>



<h2>
  
  
  Setup editor configuration
</h2>



<div class=""highlight js-code-highlight"">
<pre class=""highlight plaintext""><code>import {
  Component,
  AfterViewInit,
  EventEmitter,
  OnDestroy,
  Input,
  Output,
} from '@angular/core';

declare var tinymce: any;

@Component({
  selector: 'tinymce-editor',
  template: `&lt;textarea id=""editor""&gt;&lt;/textarea&gt;`,
})
export class TinyEditorComponent implements AfterViewInit, OnDestroy {
  @Output() onEditorContentChange = new EventEmitter();

  editor;

  ngAfterViewInit() {
    tinymce.init({
      selector: '#editor',
      plugins: ['link', 'table'],
      skin_url: 'assets/skins/lightgray',
      setup: (editor) =&gt; {
        this.editor = editor;
        editor.on('keyup change', () =&gt; {
          const content = editor.getContent();
          this.onEditorContentChange.emit(content);
        });
      },
    });
  }

  ngOnDestroy() {
    tinymce.remove(this.editor);
  }
</code></pre>

</div>



<h2>
  
  
  Add editor event
</h2>



<div class=""highlight js-code-highlight"">
<pre class=""highlight plaintext""><code>  ngAfterViewInit() {
    tinymce.init({
      selector: '#local-upload',
      plugins: 'image code',
      toolbar: 'undo redo | image code',

      /* we override default upload handler to simulate successful upload*/
      images_upload_handler: function (blobInfo, success, failure) {
        setTimeout(function () {
          /* no matter what you upload, we will turn it into TinyMCE logo :)*/
          success('http://moxiecode.cachefly.net/tinymce/v9/images/logo.png');
        }, 2000);
      },
    });
  }
</code></pre>

</div>



<h2>
  
  
  Hide toolabr &amp; menubar
</h2>

<h2>
  
  
  Add domain in tinymce cloud
</h2>"'https://dev.to/deepakjaiswal/tinymce-editor-with-angular-1cd3'https://res.cloudinary.com/practicaldev/image/fetch/s--60OCq2A_--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4omcmfrq7ci83e6y3gew.png'"['https://dev-to-uploads.s3.amazonaws.com/uploads/logos/resized_logo_UQww2soKuUsjaOGNB38o.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--k1koERPL--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4omcmfrq7ci83e6y3gew.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--FFkRKjGu--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/776540/abd9720c-608b-40a5-abc0-8b4eab648e73.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--S1o1Nsky--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/776540/abd9720c-608b-40a5-abc0-8b4eab648e73.jpg', 'https://dev.to/assets/raised-hands-74b2099fd66a39f2d7eed9305ee0f4553df0eb7b4f11b01b6b1b499973048fe5.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--pcSkTMZL--/c_limit,f_auto,fl_progressive,q_80,w_190/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://dev.to/assets/exploding-head-daceb38d627e6ae9b730f36a1e390fca556a4289d5a41abb2c35068ad3e2c4b5.svg', 'https://dev.to/assets/loading-ellipsis-b714cf681fd66c853ff6f03dd161b77aa3c80e03cdc06f478b695f42770421e9.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s---hjC6dyo--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/810352/18b3331f-1788-40e0-8b17-c9ab8fad8c78.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--60OCq2A_--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4omcmfrq7ci83e6y3gew.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--DPa_tbhM--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/4337/fa74d805-e19a-4b9f-96ec-55f716de6bb8.jpg', 'https://dev.to/assets/sparkle-heart-5f9bee3767e18deb1bb725290cb151c25234768a0e9a2bd39370c382d02920cf.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--RmY55OKL--/c_limit,f_auto,fl_progressive,q_auto,w_256/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--R60bnFh4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_775/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l1x8yg5jxz0ond3yh2fb.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--SjvoIwaj--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/742973/23cc543f-d79e-41bf-b42e-53f1a4d60a88.jpeg', 'https://dev.to/assets/heart-plus-active-9ea3b22f2bc311281db911d416166c5f430636e76b15cd5df6b3b841d830eefa.svg', 'https://dev.to/assets/fire-f60e7a582391810302117f987b22a8ef04a2fe0df7e3258a5f49332df1cec71e.svg', 'https://dev.to/assets/multi-unicorn-b44d6f8c23cdd00964192bedc38af3e82463978aa611b4365bd33a0f1f4f3e97.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--0_HEvahs--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/262084/80ee4eb4-82a1-4bdb-afff-5f31431eda99.png']"
1'S5EVILNHC'Make your own jQuery from scratch'"<p>jQuery is one of the most popular JavaScript library . It greatly simplifies JavaScript programming. You might be curious about how jQuery is made. If you look through the source code of any well-known library, it's likely that you won't understand anything or you may feel that you need to be a genius to build one. However, it's not as difficult as it seems in reality. In this article I'm going show you how you can make your own library like jQuery from scratch.</p>

<p>Lets get started!</p>

<h2>
  
  
  Creating the selector function
</h2>



<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""kd"">const</span> <span class=""nx"">$</span> <span class=""o"">=</span> <span class=""kd"">function</span><span class=""p"">(</span><span class=""nx"">el</span><span class=""p"">)</span> <span class=""p"">{</span>
    <span class=""k"">return</span> <span class=""k"">new</span> <span class=""nx"">jQuery</span><span class=""p"">(</span><span class=""nx"">el</span><span class=""p"">);</span>
<span class=""p"">}</span>
</code></pre>

</div>



<p>As you can see the selector function returns a class named jQuery. Every time you use the selector  a new instance of jQuery will be created .</p>

<p>Now lets create our jQuery Class</p>

<h2>
  
  
  jQuery object
</h2>



<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code> <span class=""kd"">class</span> <span class=""nx"">jQuery</span> <span class=""kd"">extends</span> <span class=""nb"">Array</span><span class=""p"">{</span>
    <span class=""kd"">constructor</span><span class=""p"">(</span><span class=""nx"">el</span><span class=""p"">)</span> <span class=""p"">{</span>
        <span class=""k"">super</span><span class=""p"">();</span>
        <span class=""k"">if</span> <span class=""p"">(</span><span class=""nx"">el</span> <span class=""o"">==</span> <span class=""nb"">document</span> <span class=""o"">||</span> <span class=""nx"">el</span> <span class=""k"">instanceof</span> <span class=""nx"">HTMLElement</span><span class=""p"">)</span> <span class=""p"">{</span>
            <span class=""k"">this</span><span class=""p"">.</span><span class=""nx"">push</span><span class=""p"">(</span><span class=""nx"">el</span><span class=""p"">);</span>
        <span class=""p"">}</span> <span class=""k"">else</span> <span class=""p"">{</span>
            <span class=""kd"">let</span> <span class=""nx"">elements</span><span class=""o"">=</span><span class=""nb"">document</span><span class=""p"">.</span><span class=""nx"">querySelectorAll</span><span class=""p"">(</span><span class=""nx"">el</span><span class=""p"">);</span>
            <span class=""k"">for</span><span class=""p"">(</span><span class=""kd"">let</span> <span class=""nx"">i</span><span class=""o"">=</span><span class=""mi"">0</span><span class=""p"">;</span><span class=""nx"">i</span><span class=""o"">&lt;</span><span class=""nx"">elements</span><span class=""p"">.</span><span class=""nx"">length</span><span class=""p"">;</span><span class=""nx"">i</span><span class=""o"">++</span><span class=""p"">){</span>
                <span class=""k"">this</span><span class=""p"">.</span><span class=""nx"">push</span><span class=""p"">(</span><span class=""nx"">elements</span><span class=""p"">[</span><span class=""nx"">i</span><span class=""p"">]);</span>
            <span class=""p"">}</span>
        <span class=""p"">}</span>
    <span class=""p"">}</span>
<span class=""p"">}</span>
</code></pre>

</div>



<p>Our jQuery class extends the build-in Array class so every instance behave like an array and an object at the same time.Every time we create a new jQuery instance it checks if the element is  html element or if it is the document itself. If not then it performs a querySelectorAll to get the all matched elements. Then it pushes each element to itself. Now we can add our methods to it.</p>

<h2>
  
  
  Chaining
</h2>

<p>The best thing I like about jQuery is that you can chain methods, like<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""nx"">$</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">div</span><span class=""dl"">'</span><span class=""p"">).</span><span class=""nx"">addClass</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">red</span><span class=""dl"">'</span><span class=""p"">).</span><span class=""nx"">html</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">hello</span><span class=""dl"">'</span><span class=""p"">);</span>
</code></pre>

</div>



<p>to apply Chaining to our jQuery class we just need to return the current instance,  i.e adding<br />
<code>return this</code> after every method.</p>
<h3>
  
  
  ready()
</h3>


<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""nx"">ready</span><span class=""p"">(</span><span class=""nx"">callback</span><span class=""p"">){</span>
    <span class=""k"">this</span><span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">].</span><span class=""nx"">addEventListener</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">readystatechange</span><span class=""dl"">'</span><span class=""p"">,</span> <span class=""nx"">e</span> <span class=""o"">=&gt;</span> <span class=""p"">{</span>
        <span class=""k"">if</span><span class=""p"">(</span><span class=""k"">this</span><span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">].</span><span class=""nx"">readyState</span> <span class=""o"">===</span> <span class=""dl"">""</span><span class=""s2"">complete</span><span class=""dl"">""</span><span class=""p"">){</span>
            <span class=""nx"">callback</span><span class=""p"">();</span>
            <span class=""k"">return</span> <span class=""kc"">true</span><span class=""p"">;</span>
        <span class=""p"">}</span>
      <span class=""p"">});</span>
<span class=""p"">}</span>
</code></pre>

</div>



<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""nx"">$</span><span class=""p"">(</span><span class=""nb"">document</span><span class=""p"">).</span><span class=""nx"">ready</span><span class=""p"">(</span><span class=""kd"">function</span><span class=""p"">(){</span>
 <span class=""c1"">//codes</span>
<span class=""p"">})</span>
</code></pre>

</div>


<p>Checks the readyStates of an element if the readyState is complete than we know the element is completely loaded and ready for use;</p>
<h3>
  
  
  each()
</h3>


<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""nx"">each</span><span class=""p"">(</span><span class=""nx"">callback</span><span class=""p"">)</span> <span class=""p"">{</span>
    <span class=""k"">if</span> <span class=""p"">(</span><span class=""nx"">callback</span> <span class=""o"">||</span> <span class=""k"">typeof</span><span class=""p"">(</span><span class=""nx"">callback</span><span class=""p"">)</span> <span class=""o"">==</span> <span class=""dl"">'</span><span class=""s1"">function</span><span class=""dl"">'</span><span class=""p"">)</span> <span class=""p"">{</span>
        <span class=""k"">if</span> <span class=""p"">(</span><span class=""k"">this</span><span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">]</span> <span class=""o"">==</span> <span class=""nb"">document</span> <span class=""o"">||</span> <span class=""k"">this</span><span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">]</span> <span class=""k"">instanceof</span> <span class=""nx"">HTMLElement</span><span class=""p"">){</span>
            <span class=""nx"">callback</span><span class=""p"">(</span><span class=""k"">this</span><span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">])</span>
        <span class=""p"">}</span>
        <span class=""k"">for</span> <span class=""p"">(</span><span class=""kd"">let</span> <span class=""nx"">i</span> <span class=""o"">=</span> <span class=""mi"">0</span><span class=""p"">;</span> <span class=""nx"">i</span> <span class=""o"">&lt;</span> <span class=""k"">this</span><span class=""p"">.</span><span class=""nx"">length</span><span class=""p"">;</span> <span class=""nx"">i</span><span class=""o"">++</span><span class=""p"">)</span> <span class=""p"">{</span>
            <span class=""nx"">callback</span><span class=""p"">(</span><span class=""k"">this</span><span class=""p"">[</span><span class=""nx"">i</span><span class=""p"">],</span> <span class=""nx"">i</span><span class=""p"">);</span>
        <span class=""p"">}</span>
        <span class=""c1"">//Chaining</span>
        <span class=""k"">return</span> <span class=""k"">this</span><span class=""p"">;</span>
    <span class=""p"">}</span> 
<span class=""p"">}</span>
</code></pre>

</div>



<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""nx"">$</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">div</span><span class=""dl"">'</span><span class=""p"">).</span><span class=""nx"">each</span><span class=""p"">(</span><span class=""kd"">function</span><span class=""p"">(</span><span class=""nx"">el</span><span class=""p"">){</span>
    <span class=""nx"">$</span><span class=""p"">(</span><span class=""nx"">el</span><span class=""p"">).</span><span class=""nx"">html</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">text</span><span class=""dl"">'</span><span class=""p"">)</span>
<span class=""p"">})</span>
</code></pre>

</div>


<p>this method iterate over all elements and give a callback for each element. We will use this for creating other methods.</p>
<h3>
  
  
  siblings()
</h3>


<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""nx"">siblings</span><span class=""p"">(){</span>
    <span class=""k"">return</span>  <span class=""p"">[...</span><span class=""k"">this</span><span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">].</span><span class=""nx"">parentNode</span><span class=""p"">.</span><span class=""nx"">children</span><span class=""p"">].</span><span class=""nx"">filter</span><span class=""p"">(</span><span class=""nx"">c</span><span class=""o"">=&gt;</span><span class=""nx"">c</span><span class=""o"">!=</span><span class=""k"">this</span><span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">])</span>
<span class=""p"">}</span>
</code></pre>

</div>



<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""nx"">console</span><span class=""p"">.</span><span class=""nx"">log</span><span class=""p"">(</span><span class=""nx"">$</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">script</span><span class=""dl"">'</span><span class=""p"">).</span><span class=""nx"">siblings</span><span class=""p"">())</span>
</code></pre>

</div>


<p>It's a pretty simple one liner. We first select all the child elements of parent element and then just remove the current element from the list , resulting an array of sibling elements.</p>
<h3>
  
  
  addClass()
</h3>


<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""nx"">addClass</span><span class=""p"">(</span><span class=""nx"">className</span><span class=""p"">)</span> <span class=""p"">{</span>
    <span class=""k"">this</span><span class=""p"">.</span><span class=""nx"">each</span><span class=""p"">(</span><span class=""kd"">function</span><span class=""p"">(</span><span class=""nx"">el</span><span class=""p"">)</span> <span class=""p"">{</span>
        <span class=""nx"">el</span><span class=""p"">.</span><span class=""nx"">classList</span><span class=""p"">.</span><span class=""nx"">add</span><span class=""p"">(</span><span class=""nx"">className</span><span class=""p"">);</span>
    <span class=""p"">})</span>
    <span class=""k"">return</span> <span class=""k"">this</span><span class=""p"">;</span>
<span class=""p"">}</span>
</code></pre>

</div>



<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""nx"">$</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">div</span><span class=""dl"">'</span><span class=""p"">).</span><span class=""nx"">addClass</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">pink</span><span class=""dl"">'</span><span class=""p"">)</span>
</code></pre>

</div>


<p>we use classList.add() to add the className to each item with the help of this.each method.</p>
<h3>
  
  
  removeClass()
</h3>


<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""nx"">removeClass</span><span class=""p"">(</span><span class=""nx"">className</span><span class=""p"">)</span> <span class=""p"">{</span>
    <span class=""k"">this</span><span class=""p"">.</span><span class=""nx"">each</span><span class=""p"">(</span><span class=""kd"">function</span><span class=""p"">(</span><span class=""nx"">el</span><span class=""p"">)</span> <span class=""p"">{</span>
        <span class=""nx"">el</span><span class=""p"">.</span><span class=""nx"">classList</span><span class=""p"">.</span><span class=""nx"">remove</span><span class=""p"">(</span><span class=""nx"">className</span><span class=""p"">);</span>
    <span class=""p"">})</span>
    <span class=""k"">return</span> <span class=""k"">this</span><span class=""p"">;</span>
<span class=""p"">}</span>
</code></pre>

</div>



<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""nx"">$</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">div</span><span class=""dl"">'</span><span class=""p"">).</span><span class=""nx"">removeClass</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">pink</span><span class=""dl"">'</span><span class=""p"">)</span>
</code></pre>

</div>


<p>similar to addClass we use classList.remove() to remove the className .</p>
<h3>
  
  
  hasClass()
</h3>


<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code>
<span class=""nx"">hasClass</span><span class=""p"">((</span><span class=""nx"">className</span><span class=""p"">)</span> <span class=""p"">{</span>
    <span class=""k"">return</span> <span class=""k"">this</span><span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">].</span><span class=""nx"">classList</span><span class=""p"">.</span><span class=""nx"">contains</span><span class=""p"">(</span><span class=""nx"">className</span><span class=""p"">);</span>
<span class=""p"">}</span>
</code></pre>

</div>



<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""nx"">console</span><span class=""p"">.</span><span class=""nx"">log</span><span class=""p"">(</span><span class=""nx"">$</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">div</span><span class=""dl"">'</span><span class=""p"">).</span><span class=""nx"">hasClass</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">pink</span><span class=""dl"">'</span><span class=""p"">))</span> <span class=""c1"">//returns true or false</span>
</code></pre>

</div>


<p>hasClass check if the 1st selected element has any specific class with the help of classList.contains() and return true or false accordingly.</p>
<h3>
  
  
  css()
</h3>


<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code> <span class=""nx"">css</span><span class=""p"">(</span><span class=""nx"">propertyObject</span><span class=""p"">)</span> <span class=""p"">{</span>
       <span class=""k"">this</span><span class=""p"">.</span><span class=""nx"">each</span><span class=""p"">(</span><span class=""kd"">function</span><span class=""p"">(</span><span class=""nx"">el</span><span class=""p"">)</span> <span class=""p"">{</span>
           <span class=""nb"">Object</span><span class=""p"">.</span><span class=""nx"">assign</span><span class=""p"">(</span><span class=""nx"">el</span><span class=""p"">.</span><span class=""nx"">style</span><span class=""p"">,</span><span class=""nx"">propertyObject</span><span class=""p"">);</span>
        <span class=""p"">})</span>
        <span class=""k"">return</span> <span class=""k"">this</span><span class=""p"">;</span>
    <span class=""p"">}</span>
</code></pre>

</div>



<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""nx"">$</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">div</span><span class=""dl"">'</span><span class=""p"">).</span><span class=""nx"">css</span><span class=""p"">({</span>
    <span class=""na"">color</span><span class=""p"">:</span><span class=""dl"">'</span><span class=""s1"">red</span><span class=""dl"">'</span>
<span class=""p"">})</span>
</code></pre>

</div>


<p>in this method the parameter is a type of object. each property of this object is added to the element.style object using  in-build  Object.assign  function()</p>
<h3>
  
  
  attr()
</h3>


<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""nx"">attr</span><span class=""p"">(</span><span class=""nx"">attr</span><span class=""p"">,</span> <span class=""nx"">value</span> <span class=""o"">=</span> <span class=""kc"">null</span><span class=""p"">)</span> <span class=""p"">{</span>
    <span class=""kd"">let</span> <span class=""nx"">getattr</span> <span class=""o"">=</span> <span class=""kc"">undefined</span><span class=""p"">;</span>
    <span class=""k"">if</span> <span class=""p"">(</span><span class=""nx"">value</span><span class=""p"">)</span> <span class=""p"">{</span>
        <span class=""k"">this</span><span class=""p"">.</span><span class=""nx"">each</span><span class=""p"">(</span><span class=""kd"">function</span><span class=""p"">(</span><span class=""nx"">el</span><span class=""p"">)</span> <span class=""p"">{</span>
            <span class=""nx"">el</span><span class=""p"">.</span><span class=""nx"">setAttribute</span><span class=""p"">(</span><span class=""nx"">attr</span><span class=""p"">,</span> <span class=""nx"">value</span><span class=""p"">);</span>
            <span class=""nx"">getattr</span> <span class=""o"">=</span> <span class=""k"">this</span><span class=""p"">;</span>
        <span class=""p"">});</span>
    <span class=""p"">}</span> <span class=""k"">else</span> <span class=""p"">{</span>
            <span class=""nx"">getattr</span> <span class=""o"">=</span> <span class=""k"">this</span><span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">].</span><span class=""nx"">getAttribute</span><span class=""p"">(</span><span class=""nx"">attr</span><span class=""p"">);</span>
    <span class=""p"">}</span>
    <span class=""k"">return</span> <span class=""nx"">getattr</span><span class=""p"">;</span>
<span class=""p"">}</span>
</code></pre>

</div>



<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""nx"">console</span><span class=""p"">.</span><span class=""nx"">log</span><span class=""p"">(</span><span class=""nx"">$</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">div</span><span class=""dl"">'</span><span class=""p"">).</span><span class=""nx"">attr</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">class</span><span class=""dl"">'</span><span class=""p"">))</span> <span class=""c1"">//gets the attribute value</span>
<span class=""nx"">$</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">div</span><span class=""dl"">'</span><span class=""p"">).</span><span class=""nx"">attr</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">name</span><span class=""dl"">'</span><span class=""p"">,</span><span class=""dl"">'</span><span class=""s1"">div</span><span class=""dl"">'</span><span class=""p"">)</span> <span class=""c1"">//sets the name attribute with value</span>
</code></pre>

</div>


<p>If the value argument is not present then we just simple return the attribute value else we set the attribute for each element. </p>
<h3>
  
  
  html()
</h3>


<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""nx"">html</span><span class=""p"">(</span><span class=""nx"">data</span><span class=""p"">)</span> <span class=""p"">{</span>
    <span class=""k"">if</span> <span class=""p"">(</span><span class=""nx"">data</span><span class=""p"">)</span> <span class=""p"">{</span>
        <span class=""k"">this</span><span class=""p"">.</span><span class=""nx"">each</span><span class=""p"">(</span><span class=""kd"">function</span><span class=""p"">(</span><span class=""nx"">el</span><span class=""p"">)</span> <span class=""p"">{</span>
            <span class=""nx"">el</span><span class=""p"">.</span><span class=""nx"">innerHTML</span> <span class=""o"">=</span> <span class=""nx"">data</span><span class=""p"">;</span>
        <span class=""p"">})</span>
    <span class=""p"">}</span> <span class=""k"">else</span> <span class=""p"">{</span>
        <span class=""k"">return</span> <span class=""k"">this</span><span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">].</span><span class=""nx"">innerHTML</span><span class=""p"">;</span>
    <span class=""p"">}</span>
    <span class=""k"">return</span> <span class=""k"">this</span><span class=""p"">;</span>
<span class=""p"">}</span>
</code></pre>

</div>



<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""nx"">console</span><span class=""p"">.</span><span class=""nx"">log</span><span class=""p"">(</span><span class=""nx"">$</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">div</span><span class=""dl"">'</span><span class=""p"">).</span><span class=""nx"">html</span><span class=""p"">())</span> <span class=""c1"">//gets the innerHTML </span>
<span class=""nx"">$</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">div</span><span class=""dl"">'</span><span class=""p"">).</span><span class=""nx"">html</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">x</span><span class=""dl"">'</span><span class=""p"">)</span> <span class=""c1"">//add the innerHTML</span>
</code></pre>

</div>


<p>Similar to attr() method just uses innerHTML instead of attribute </p>
<h3>
  
  
  prepend()
</h3>


<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""nx"">prepend</span><span class=""p"">(</span><span class=""nx"">el</span><span class=""p"">){</span>
    <span class=""k"">this</span><span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">].</span><span class=""nx"">prepend</span><span class=""p"">(</span><span class=""nx"">el</span><span class=""p"">);</span>
    <span class=""k"">return</span> <span class=""k"">this</span><span class=""p"">;</span>
<span class=""p"">}</span>
</code></pre>

</div>



<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""kd"">let</span> <span class=""nx"">h1</span><span class=""o"">=</span><span class=""nb"">document</span><span class=""p"">.</span><span class=""nx"">createElement</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">h1</span><span class=""dl"">'</span><span class=""p"">);</span>
<span class=""nx"">h1</span><span class=""p"">.</span><span class=""nx"">innerHTML</span><span class=""o"">=</span><span class=""dl"">'</span><span class=""s1"">this is a heading</span><span class=""dl"">'</span><span class=""p"">;</span>
<span class=""nx"">$</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">div</span><span class=""dl"">'</span><span class=""p"">).</span><span class=""nx"">prepend</span><span class=""p"">(</span><span class=""nx"">h1</span><span class=""p"">)</span> <span class=""c1"">//prepend the node</span>
<span class=""nx"">$</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">div</span><span class=""dl"">'</span><span class=""p"">).</span><span class=""nx"">prepend</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">hello</span><span class=""dl"">'</span><span class=""p"">)</span> <span class=""c1"">//prepend the string </span>
</code></pre>

</div>


<p>prepend a node or string to the selected elements using in-build node.prepend().</p>
<h3>
  
  
  append()
</h3>


<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""nx"">append</span><span class=""p"">(</span><span class=""nx"">el</span><span class=""p"">){</span>
    <span class=""k"">this</span><span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">].</span><span class=""nx"">append</span><span class=""p"">(</span><span class=""nx"">el</span><span class=""p"">);</span>
    <span class=""k"">return</span> <span class=""k"">this</span><span class=""p"">;</span>
<span class=""p"">}</span>
</code></pre>

</div>



<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""kd"">let</span> <span class=""nx"">h1</span><span class=""o"">=</span><span class=""nb"">document</span><span class=""p"">.</span><span class=""nx"">createElement</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">h1</span><span class=""dl"">'</span><span class=""p"">);</span>
<span class=""nx"">h1</span><span class=""p"">.</span><span class=""nx"">innerHTML</span><span class=""o"">=</span><span class=""dl"">'</span><span class=""s1"">this is a heading</span><span class=""dl"">'</span><span class=""p"">;</span>
<span class=""nx"">$</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">div</span><span class=""dl"">'</span><span class=""p"">).</span><span class=""nx"">append</span><span class=""p"">(</span><span class=""nx"">h1</span><span class=""p"">)</span> <span class=""c1"">//append the node</span>
<span class=""nx"">$</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">div</span><span class=""dl"">'</span><span class=""p"">).</span><span class=""nx"">append</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">hello</span><span class=""dl"">'</span><span class=""p"">)</span> <span class=""c1"">//append the string</span>
</code></pre>

</div>


<p>append a node or string to the selected elements using in-build node.append().</p>
<h3>
  
  
  hide()
</h3>


<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""nx"">hide</span><span class=""p"">()</span> <span class=""p"">{</span>
    <span class=""k"">this</span><span class=""p"">.</span><span class=""nx"">each</span><span class=""p"">(</span><span class=""kd"">function</span><span class=""p"">(</span><span class=""nx"">el</span><span class=""p"">)</span> <span class=""p"">{</span>
        <span class=""nx"">el</span><span class=""p"">.</span><span class=""nx"">style</span><span class=""p"">.</span><span class=""nx"">display</span> <span class=""o"">=</span> <span class=""dl"">""</span><span class=""s2"">none</span><span class=""dl"">""</span><span class=""p"">;</span>
    <span class=""p"">});</span>
    <span class=""k"">return</span> <span class=""k"">this</span><span class=""p"">;</span>
<span class=""p"">}</span>
</code></pre>

</div>



<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""nx"">$</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">div</span><span class=""dl"">'</span><span class=""p"">).</span><span class=""nx"">hide</span><span class=""p"">()</span>
</code></pre>

</div>


<p>change the style.display property to none</p>
<h3>
  
  
  show()
</h3>


<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""nx"">show</span><span class=""p"">()</span> <span class=""p"">{</span>
    <span class=""k"">this</span><span class=""p"">.</span><span class=""nx"">each</span><span class=""p"">(</span><span class=""kd"">function</span><span class=""p"">(</span><span class=""nx"">el</span><span class=""p"">)</span> <span class=""p"">{</span>
        <span class=""nx"">el</span><span class=""p"">.</span><span class=""nx"">style</span><span class=""p"">.</span><span class=""nx"">display</span> <span class=""o"">=</span> <span class=""dl"">""</span><span class=""s2"">block</span><span class=""dl"">""</span><span class=""p"">;</span>
    <span class=""p"">});</span>
    <span class=""k"">return</span> <span class=""k"">this</span><span class=""p"">;</span>
<span class=""p"">}</span>
</code></pre>

</div>



<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""nx"">$</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">div</span><span class=""dl"">'</span><span class=""p"">).</span><span class=""nx"">show</span><span class=""p"">()</span>
</code></pre>

</div>


<p>change the style.display property to block</p>
<h2>
  
  
  on()
</h2>


<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""nx"">on</span><span class=""p"">(</span><span class=""nx"">event</span><span class=""p"">,</span> <span class=""nx"">child</span><span class=""p"">,</span> <span class=""nx"">callback</span> <span class=""o"">=</span> <span class=""kc"">null</span><span class=""p"">)</span> <span class=""p"">{</span>
    <span class=""k"">if</span> <span class=""p"">(</span><span class=""nx"">callback</span> <span class=""o"">!=</span> <span class=""kc"">null</span><span class=""p"">)</span> <span class=""p"">{</span>
        <span class=""kd"">let</span> <span class=""nx"">selector</span> <span class=""o"">=</span> <span class=""nx"">child</span><span class=""p"">;</span>
        <span class=""k"">this</span><span class=""p"">.</span><span class=""nx"">each</span><span class=""p"">(</span><span class=""kd"">function</span><span class=""p"">(</span><span class=""nx"">element</span><span class=""p"">)</span> <span class=""p"">{</span>
            <span class=""nx"">element</span><span class=""p"">.</span><span class=""nx"">addEventListener</span><span class=""p"">(</span><span class=""nx"">event</span><span class=""p"">,</span> <span class=""kd"">function</span><span class=""p"">(</span><span class=""nx"">event</span><span class=""p"">)</span> <span class=""p"">{</span>
                <span class=""k"">if</span> <span class=""p"">(</span><span class=""nx"">event</span><span class=""p"">.</span><span class=""nx"">target</span><span class=""p"">.</span><span class=""nx"">matches</span><span class=""p"">(</span><span class=""nx"">selector</span> <span class=""o"">+</span> <span class=""dl"">'</span><span class=""s1"">, </span><span class=""dl"">'</span> <span class=""o"">+</span> <span class=""nx"">selector</span> <span class=""o"">+</span> <span class=""dl"">'</span><span class=""s1""> *</span><span class=""dl"">'</span><span class=""p"">))</span> <span class=""p"">{</span>
                    <span class=""nx"">callback</span><span class=""p"">.</span><span class=""nx"">apply</span><span class=""p"">(</span><span class=""nx"">event</span><span class=""p"">.</span><span class=""nx"">target</span><span class=""p"">.</span><span class=""nx"">closest</span><span class=""p"">(</span><span class=""nx"">selector</span><span class=""p"">),</span> <span class=""nx"">arguments</span><span class=""p"">);</span>
                <span class=""p"">}</span>
            <span class=""p"">})</span>
        <span class=""p"">})</span>
    <span class=""p"">}</span> <span class=""k"">else</span> <span class=""p"">{</span>
    <span class=""c1"">//if the callback argument is not present then assume  the child argument is being use as callback</span>
        <span class=""nx"">callback</span> <span class=""o"">=</span> <span class=""nx"">child</span><span class=""p"">;</span>
        <span class=""k"">this</span><span class=""p"">.</span><span class=""nx"">each</span><span class=""p"">(</span><span class=""kd"">function</span><span class=""p"">(</span><span class=""nx"">element</span><span class=""p"">)</span> <span class=""p"">{</span>
        <span class=""nx"">element</span><span class=""p"">.</span><span class=""nx"">addEventListener</span><span class=""p"">(</span><span class=""nx"">event</span><span class=""p"">,</span> <span class=""nx"">callback</span><span class=""p"">);</span>
        <span class=""p"">})</span>
    <span class=""p"">}</span>

    <span class=""k"">return</span> <span class=""k"">this</span><span class=""p"">;</span>
<span class=""p"">}</span>
</code></pre>

</div>



<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""nx"">$</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">div</span><span class=""dl"">'</span><span class=""p"">).</span><span class=""nx"">on</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">click</span><span class=""dl"">'</span><span class=""p"">,</span><span class=""kd"">function</span><span class=""p"">(){</span>
    <span class=""nx"">alert</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">x</span><span class=""dl"">'</span><span class=""p"">)</span>
<span class=""p"">})</span>
<span class=""nx"">$</span><span class=""p"">(</span><span class=""nb"">document</span><span class=""p"">).</span><span class=""nx"">on</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">click</span><span class=""dl"">'</span><span class=""p"">,</span><span class=""dl"">'</span><span class=""s1"">div</span><span class=""dl"">'</span><span class=""p"">,</span><span class=""kd"">function</span><span class=""p"">(){</span>
    <span class=""nx"">alert</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">x</span><span class=""dl"">'</span><span class=""p"">)</span>
<span class=""p"">})</span>
</code></pre>

</div>


<p>this one is little bit complex. <br />
If we pass all three arguments to the method it will add an EventListener to the parent element and only if the target matches child element then will give a callback.</p>

<p>but if we just pass two argument then it will simply add an EventListener to the element with a callback.</p>

<p>for the first case we can take this as an example<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""nx"">$</span><span class=""p"">(</span><span class=""nb"">document</span><span class=""p"">).</span><span class=""nx"">on</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">click</span><span class=""dl"">'</span><span class=""p"">,</span><span class=""dl"">'</span><span class=""s1"">div</span><span class=""dl"">'</span><span class=""p"">,</span><span class=""kd"">function</span><span class=""p"">(){</span>
    <span class=""nx"">alert</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">x</span><span class=""dl"">'</span><span class=""p"">)</span>
<span class=""p"">})</span>
</code></pre>

</div>



<p>and for the second case<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""nx"">$</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">div</span><span class=""dl"">'</span><span class=""p"">).</span><span class=""nx"">on</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">click</span><span class=""dl"">'</span><span class=""p"">,</span><span class=""kd"">function</span><span class=""p"">(){</span>
    <span class=""nx"">alert</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">x</span><span class=""dl"">'</span><span class=""p"">)</span>
<span class=""p"">})</span>
</code></pre>

</div>



<p>both serves their different purpose . First one is very useful for binding event to dynamic element.<br />
Second one is useful for general event binding .</p>

<h3>
  
  
  $.ajax()
</h3>



<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""nx"">$</span><span class=""p"">.</span><span class=""nx"">ajax</span><span class=""o"">=</span><span class=""kd"">function</span><span class=""p"">(</span><span class=""nx"">args</span><span class=""p"">)</span> <span class=""p"">{</span>
        <span class=""kd"">let</span> <span class=""nx"">url</span> <span class=""o"">=</span> <span class=""nx"">args</span><span class=""p"">[</span><span class=""dl"">""</span><span class=""s2"">url</span><span class=""dl"">""</span><span class=""p"">];</span>
        <span class=""kd"">let</span> <span class=""nx"">type</span> <span class=""o"">=</span> <span class=""dl"">""</span><span class=""s2"">get</span><span class=""dl"">""</span><span class=""p"">;</span>
        <span class=""kd"">let</span> <span class=""nx"">success</span> <span class=""o"">=</span><span class=""kd"">function</span><span class=""p"">(){};</span>
        <span class=""kd"">let</span> <span class=""nx"">fail</span> <span class=""o"">=</span> <span class=""kd"">function</span><span class=""p"">(){};</span>
        <span class=""k"">if</span><span class=""p"">(</span><span class=""nx"">args</span><span class=""p"">[</span><span class=""dl"">'</span><span class=""s1"">success</span><span class=""dl"">'</span><span class=""p"">]){</span>
            <span class=""nx"">success</span><span class=""o"">=</span><span class=""nx"">args</span><span class=""p"">[</span><span class=""dl"">'</span><span class=""s1"">success</span><span class=""dl"">'</span><span class=""p"">];</span>
        <span class=""p"">}</span>
        <span class=""k"">if</span><span class=""p"">(</span><span class=""nx"">args</span><span class=""p"">[</span><span class=""dl"">'</span><span class=""s1"">fail</span><span class=""dl"">'</span><span class=""p"">]){</span>
            <span class=""nx"">fail</span><span class=""o"">=</span><span class=""nx"">args</span><span class=""p"">[</span><span class=""dl"">'</span><span class=""s1"">fail</span><span class=""dl"">'</span><span class=""p"">];</span>
        <span class=""p"">}</span>
        <span class=""kd"">let</span> <span class=""nx"">xhttp</span> <span class=""o"">=</span> <span class=""k"">new</span> <span class=""nx"">XMLHttpRequest</span><span class=""p"">();</span>
        <span class=""nx"">xhttp</span><span class=""p"">.</span><span class=""nx"">onerror</span> <span class=""o"">=</span> <span class=""kd"">function</span><span class=""p"">(</span><span class=""nx"">error</span><span class=""p"">){</span>
        <span class=""c1"">//return fial callback with error </span>
            <span class=""k"">return</span> <span class=""nx"">fail</span><span class=""p"">(</span><span class=""nx"">error</span><span class=""p"">);</span>
        <span class=""p"">}</span>
        <span class=""nx"">xhttp</span><span class=""p"">.</span><span class=""nx"">onload</span> <span class=""o"">=</span> <span class=""kd"">function</span><span class=""p"">()</span> <span class=""p"">{</span>
            <span class=""kd"">let</span> <span class=""nx"">response</span><span class=""p"">;</span>
            <span class=""k"">if</span> <span class=""p"">(</span><span class=""k"">this</span><span class=""p"">.</span><span class=""nx"">readyState</span> <span class=""o"">==</span> <span class=""mi"">4</span> <span class=""o"">&amp;&amp;</span> <span class=""k"">this</span><span class=""p"">.</span><span class=""nx"">status</span> <span class=""o"">==</span> <span class=""mi"">200</span><span class=""p"">)</span> <span class=""p"">{</span>
                <span class=""kd"">let</span> <span class=""nx"">response</span><span class=""o"">=</span><span class=""dl"">""""</span><span class=""p"">;</span>
                <span class=""k"">try</span> <span class=""p"">{</span>
                <span class=""c1"">//check if the response in json </span>
                <span class=""c1"">//if json the parse it</span>
                    <span class=""nx"">response</span><span class=""o"">=</span><span class=""nx"">JSON</span><span class=""p"">.</span><span class=""nx"">parse</span><span class=""p"">(</span><span class=""k"">this</span><span class=""p"">.</span><span class=""nx"">responseText</span><span class=""p"">)</span>
                <span class=""p"">}</span> <span class=""k"">catch</span> <span class=""p"">(</span><span class=""nx"">e</span><span class=""p"">)</span> <span class=""p"">{</span>
                <span class=""c1"">//if not json the simple reurn the response</span>
                    <span class=""nx"">response</span> <span class=""o"">=</span> <span class=""k"">this</span><span class=""p"">.</span><span class=""nx"">responseText</span><span class=""p"">;</span>
                    <span class=""p"">}</span>
                 <span class=""c1"">// give a success callback</span>
                <span class=""k"">return</span> <span class=""nx"">success</span><span class=""p"">(</span><span class=""nx"">response</span><span class=""p"">);</span>
            <span class=""p"">}</span> <span class=""k"">else</span> <span class=""p"">{</span>
            <span class=""c1"">//give a fail callback with the error status </span>
                <span class=""k"">return</span> <span class=""nx"">fail</span><span class=""p"">(</span><span class=""k"">this</span><span class=""p"">.</span><span class=""nx"">status</span><span class=""p"">);</span>
            <span class=""p"">}</span>
        <span class=""p"">};</span>
        <span class=""kd"">let</span> <span class=""nx"">parameters</span><span class=""o"">=</span><span class=""dl"">""""</span><span class=""p"">;</span>
        <span class=""k"">if</span> <span class=""p"">(</span><span class=""nx"">args</span><span class=""p"">)</span> <span class=""p"">{</span>
            <span class=""nx"">type</span> <span class=""o"">=</span> <span class=""nx"">args</span><span class=""p"">[</span><span class=""dl"">""</span><span class=""s2"">type</span><span class=""dl"">""</span><span class=""p"">];</span>
            <span class=""k"">if</span> <span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">data</span><span class=""dl"">'</span> <span class=""k"">in</span> <span class=""nx"">args</span><span class=""p"">)</span> <span class=""p"">{</span>
            <span class=""c1"">//converting object to url URLSearchParams</span>
                <span class=""nx"">parameters</span> <span class=""o"">=</span> <span class=""k"">new</span> <span class=""nx"">URLSearchParams</span><span class=""p"">(</span><span class=""nx"">args</span><span class=""p"">[</span><span class=""dl"">'</span><span class=""s1"">data</span><span class=""dl"">'</span><span class=""p"">]).</span><span class=""nx"">toString</span><span class=""p"">();</span>
            <span class=""p"">}</span>

        <span class=""p"">}</span>
        <span class=""k"">if</span> <span class=""p"">(</span><span class=""nx"">type</span> <span class=""o"">&amp;&amp;</span> <span class=""nx"">type</span><span class=""p"">.</span><span class=""nx"">toUpperCase</span><span class=""p"">()</span><span class=""o"">==</span><span class=""dl"">'</span><span class=""s1"">POST</span><span class=""dl"">'</span><span class=""p"">)</span> <span class=""p"">{</span>
            <span class=""nx"">xhttp</span><span class=""p"">.</span><span class=""nx"">open</span><span class=""p"">(</span><span class=""dl"">""</span><span class=""s2"">POST</span><span class=""dl"">""</span><span class=""p"">,</span> <span class=""nx"">url</span><span class=""p"">,</span> <span class=""kc"">true</span><span class=""p"">);</span>
            <span class=""nx"">xhttp</span><span class=""p"">.</span><span class=""nx"">setRequestHeader</span><span class=""p"">(</span><span class=""dl"">""</span><span class=""s2"">Content-type</span><span class=""dl"">""</span><span class=""p"">,</span> <span class=""dl"">""</span><span class=""s2"">application/x-www-form-urlencoded</span><span class=""dl"">""</span><span class=""p"">);</span>
            <span class=""nx"">xhttp</span><span class=""p"">.</span><span class=""nx"">send</span><span class=""p"">(</span><span class=""nx"">parameters</span><span class=""p"">);</span>
        <span class=""p"">}</span> <span class=""k"">else</span> <span class=""k"">if</span> <span class=""p"">(</span><span class=""o"">!</span><span class=""nx"">type</span> <span class=""o"">||</span> <span class=""nx"">type</span><span class=""p"">.</span><span class=""nx"">toUpperCase</span><span class=""p"">()</span><span class=""o"">==</span><span class=""dl"">'</span><span class=""s1"">GET</span><span class=""dl"">'</span><span class=""p"">){</span>
            <span class=""nx"">xhttp</span><span class=""p"">.</span><span class=""nx"">open</span><span class=""p"">(</span><span class=""dl"">""</span><span class=""s2"">GET</span><span class=""dl"">""</span><span class=""p"">,</span> <span class=""nx"">url</span> <span class=""o"">+</span> <span class=""dl"">""</span><span class=""s2"">?</span><span class=""dl"">""</span> <span class=""o"">+</span> <span class=""nx"">parameters</span><span class=""p"">,</span> <span class=""kc"">true</span><span class=""p"">);</span>
            <span class=""nx"">xhttp</span><span class=""p"">.</span><span class=""nx"">setRequestHeader</span><span class=""p"">(</span><span class=""dl"">""</span><span class=""s2"">X-Requested-With</span><span class=""dl"">""</span><span class=""p"">,</span> <span class=""dl"">""</span><span class=""s2"">XMLHttpRequest</span><span class=""dl"">""</span><span class=""p"">);</span>
            <span class=""nx"">xhttp</span><span class=""p"">.</span><span class=""nx"">send</span><span class=""p"">();</span>
        <span class=""p"">}</span>
    <span class=""p"">}</span>
</code></pre>

</div>





<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""nx"">$</span><span class=""p"">.</span><span class=""nx"">ajax</span><span class=""p"">({</span>
    <span class=""na"">url</span><span class=""p"">:</span><span class=""dl"">'</span><span class=""s1"">post.php</span><span class=""dl"">'</span><span class=""p"">,</span>
    <span class=""na"">type</span><span class=""p"">:</span><span class=""dl"">'</span><span class=""s1"">post</span><span class=""dl"">'</span><span class=""p"">,</span>
    <span class=""na"">data</span><span class=""p"">:{</span>
        <span class=""na"">name</span><span class=""p"">:</span><span class=""dl"">'</span><span class=""s1"">hello</span><span class=""dl"">'</span>
    <span class=""p"">},</span>
    <span class=""na"">success</span><span class=""p"">:</span> <span class=""kd"">function</span><span class=""p"">(</span><span class=""nx"">res</span><span class=""p"">){</span>
        <span class=""nx"">console</span><span class=""p"">.</span><span class=""nx"">log</span><span class=""p"">(</span><span class=""nx"">res</span><span class=""p"">)</span>
    <span class=""p"">}</span>
<span class=""p"">})</span>
</code></pre>

</div>



<p>this ajax function is not a method but works as a property of $ object.<br />
this function takes url,type,data,success and fail arguments just like the original jQuery.<br />
What we do is that we create a new new XMLHttpRequest() each time the function is called and send post or get request. Now if we receive the response then we check if it is JSON response.For JSON response we parse it otherwise just simply return a success callback with the response.But if request gives a error,  fail callback with the status code will be returned.</p>

<h2>
  
  
  Putting it all together
</h2>



<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""kd"">class</span> <span class=""nx"">jQuery</span> <span class=""kd"">extends</span> <span class=""nb"">Array</span><span class=""p"">{</span>
    <span class=""kd"">constructor</span><span class=""p"">(</span><span class=""nx"">el</span><span class=""p"">)</span> <span class=""p"">{</span>
        <span class=""k"">super</span><span class=""p"">();</span>
        <span class=""k"">if</span> <span class=""p"">(</span><span class=""nx"">el</span> <span class=""o"">==</span> <span class=""nb"">document</span> <span class=""o"">||</span> <span class=""nx"">el</span> <span class=""k"">instanceof</span> <span class=""nx"">HTMLElement</span><span class=""p"">)</span> <span class=""p"">{</span>
            <span class=""k"">this</span><span class=""p"">.</span><span class=""nx"">push</span><span class=""p"">(</span><span class=""nx"">el</span><span class=""p"">);</span>
        <span class=""p"">}</span> <span class=""k"">else</span> <span class=""p"">{</span>
            <span class=""kd"">let</span> <span class=""nx"">elements</span><span class=""o"">=</span><span class=""nb"">document</span><span class=""p"">.</span><span class=""nx"">querySelectorAll</span><span class=""p"">(</span><span class=""nx"">el</span><span class=""p"">);</span>
            <span class=""k"">for</span><span class=""p"">(</span><span class=""kd"">let</span> <span class=""nx"">i</span><span class=""o"">=</span><span class=""mi"">0</span><span class=""p"">;</span><span class=""nx"">i</span><span class=""o"">&lt;</span><span class=""nx"">elements</span><span class=""p"">.</span><span class=""nx"">length</span><span class=""p"">;</span><span class=""nx"">i</span><span class=""o"">++</span><span class=""p"">){</span>
                <span class=""k"">this</span><span class=""p"">.</span><span class=""nx"">push</span><span class=""p"">(</span><span class=""nx"">elements</span><span class=""p"">[</span><span class=""nx"">i</span><span class=""p"">]);</span>
            <span class=""p"">}</span>
        <span class=""p"">}</span>
    <span class=""p"">}</span>
    <span class=""nx"">ready</span><span class=""p"">(</span><span class=""nx"">callback</span><span class=""p"">){</span>
        <span class=""k"">this</span><span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">].</span><span class=""nx"">addEventListener</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">readystatechange</span><span class=""dl"">'</span><span class=""p"">,</span> <span class=""nx"">e</span> <span class=""o"">=&gt;</span> <span class=""p"">{</span>
            <span class=""k"">if</span><span class=""p"">(</span><span class=""k"">this</span><span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">].</span><span class=""nx"">readyState</span> <span class=""o"">===</span> <span class=""dl"">""</span><span class=""s2"">complete</span><span class=""dl"">""</span><span class=""p"">){</span>
                <span class=""nx"">callback</span><span class=""p"">();</span>
                <span class=""k"">return</span> <span class=""kc"">true</span><span class=""p"">;</span>
            <span class=""p"">}</span>
          <span class=""p"">});</span>
    <span class=""p"">}</span>
    <span class=""nx"">each</span><span class=""p"">(</span><span class=""nx"">callback</span><span class=""p"">)</span> <span class=""p"">{</span>
        <span class=""k"">if</span> <span class=""p"">(</span><span class=""nx"">callback</span> <span class=""o"">||</span> <span class=""k"">typeof</span><span class=""p"">(</span><span class=""nx"">callback</span><span class=""p"">)</span> <span class=""o"">==</span> <span class=""dl"">'</span><span class=""s1"">function</span><span class=""dl"">'</span><span class=""p"">)</span> <span class=""p"">{</span>
            <span class=""k"">if</span> <span class=""p"">(</span><span class=""k"">this</span><span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">]</span> <span class=""o"">==</span> <span class=""nb"">document</span> <span class=""o"">||</span> <span class=""k"">this</span><span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">]</span> <span class=""k"">instanceof</span> <span class=""nx"">HTMLElement</span><span class=""p"">){</span>
                <span class=""nx"">callback</span><span class=""p"">(</span><span class=""k"">this</span><span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">])</span>
            <span class=""p"">}</span>
            <span class=""k"">for</span> <span class=""p"">(</span><span class=""kd"">let</span> <span class=""nx"">i</span> <span class=""o"">=</span> <span class=""mi"">0</span><span class=""p"">;</span> <span class=""nx"">i</span> <span class=""o"">&lt;</span> <span class=""k"">this</span><span class=""p"">.</span><span class=""nx"">length</span><span class=""p"">;</span> <span class=""nx"">i</span><span class=""o"">++</span><span class=""p"">)</span> <span class=""p"">{</span>
                <span class=""nx"">callback</span><span class=""p"">(</span><span class=""k"">this</span><span class=""p"">[</span><span class=""nx"">i</span><span class=""p"">],</span> <span class=""nx"">i</span><span class=""p"">);</span>
            <span class=""p"">}</span>
            <span class=""k"">return</span> <span class=""k"">this</span><span class=""p"">;</span>
        <span class=""p"">}</span> 
    <span class=""p"">}</span>
    <span class=""nx"">siblings</span><span class=""p"">(){</span>
        <span class=""k"">return</span>  <span class=""p"">[...</span><span class=""k"">this</span><span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">].</span><span class=""nx"">parentNode</span><span class=""p"">.</span><span class=""nx"">children</span><span class=""p"">].</span><span class=""nx"">filter</span><span class=""p"">(</span><span class=""nx"">c</span><span class=""o"">=&gt;</span><span class=""nx"">c</span><span class=""o"">!=</span><span class=""k"">this</span><span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">])</span>
    <span class=""p"">}</span>
    <span class=""nx"">addClass</span><span class=""p"">(</span><span class=""nx"">className</span><span class=""p"">)</span> <span class=""p"">{</span>
        <span class=""k"">this</span><span class=""p"">.</span><span class=""nx"">each</span><span class=""p"">(</span><span class=""kd"">function</span><span class=""p"">(</span><span class=""nx"">el</span><span class=""p"">)</span> <span class=""p"">{</span>
            <span class=""nx"">el</span><span class=""p"">.</span><span class=""nx"">classList</span><span class=""p"">.</span><span class=""nx"">add</span><span class=""p"">(</span><span class=""nx"">className</span><span class=""p"">);</span>
        <span class=""p"">})</span>
        <span class=""k"">return</span> <span class=""k"">this</span><span class=""p"">;</span>
    <span class=""p"">}</span>

    <span class=""nx"">removeClass</span><span class=""p"">(</span><span class=""nx"">className</span><span class=""p"">)</span> <span class=""p"">{</span>
        <span class=""k"">this</span><span class=""p"">.</span><span class=""nx"">each</span><span class=""p"">(</span><span class=""kd"">function</span><span class=""p"">(</span><span class=""nx"">el</span><span class=""p"">)</span> <span class=""p"">{</span>
            <span class=""nx"">el</span><span class=""p"">.</span><span class=""nx"">classList</span><span class=""p"">.</span><span class=""nx"">remove</span><span class=""p"">(</span><span class=""nx"">className</span><span class=""p"">);</span>
        <span class=""p"">})</span>
        <span class=""k"">return</span> <span class=""k"">this</span><span class=""p"">;</span>
    <span class=""p"">}</span>

    <span class=""nx"">hasClass</span><span class=""p"">(</span><span class=""nx"">className</span><span class=""p"">)</span> <span class=""p"">{</span>
        <span class=""k"">return</span> <span class=""k"">this</span><span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">].</span><span class=""nx"">classList</span><span class=""p"">.</span><span class=""nx"">contains</span><span class=""p"">(</span><span class=""nx"">className</span><span class=""p"">);</span>
    <span class=""p"">}</span>

    <span class=""nx"">css</span><span class=""p"">(</span><span class=""nx"">propertyObject</span><span class=""p"">)</span> <span class=""p"">{</span>
        <span class=""k"">this</span><span class=""p"">.</span><span class=""nx"">each</span><span class=""p"">(</span><span class=""kd"">function</span><span class=""p"">(</span><span class=""nx"">el</span><span class=""p"">)</span> <span class=""p"">{</span>
            <span class=""nb"">Object</span><span class=""p"">.</span><span class=""nx"">assign</span><span class=""p"">(</span><span class=""nx"">el</span><span class=""p"">.</span><span class=""nx"">style</span><span class=""p"">,</span><span class=""nx"">propertyObject</span><span class=""p"">);</span>
        <span class=""p"">})</span>
        <span class=""k"">return</span> <span class=""k"">this</span><span class=""p"">;</span>
    <span class=""p"">}</span>

    <span class=""nx"">attr</span><span class=""p"">(</span><span class=""nx"">attr</span><span class=""p"">,</span> <span class=""nx"">value</span> <span class=""o"">=</span> <span class=""kc"">null</span><span class=""p"">)</span> <span class=""p"">{</span>
        <span class=""kd"">let</span> <span class=""nx"">getattr</span> <span class=""o"">=</span> <span class=""kc"">undefined</span><span class=""p"">;</span>
        <span class=""k"">if</span> <span class=""p"">(</span><span class=""nx"">value</span><span class=""p"">)</span> <span class=""p"">{</span>
            <span class=""k"">this</span><span class=""p"">.</span><span class=""nx"">each</span><span class=""p"">(</span><span class=""kd"">function</span><span class=""p"">(</span><span class=""nx"">el</span><span class=""p"">)</span> <span class=""p"">{</span>
                <span class=""nx"">el</span><span class=""p"">.</span><span class=""nx"">setAttribute</span><span class=""p"">(</span><span class=""nx"">attr</span><span class=""p"">,</span> <span class=""nx"">value</span><span class=""p"">);</span>
                <span class=""nx"">getattr</span> <span class=""o"">=</span> <span class=""k"">this</span><span class=""p"">;</span>
            <span class=""p"">});</span>
        <span class=""p"">}</span> <span class=""k"">else</span> <span class=""p"">{</span>
            <span class=""nx"">getattr</span> <span class=""o"">=</span> <span class=""k"">this</span><span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">].</span><span class=""nx"">getAttribute</span><span class=""p"">(</span><span class=""nx"">attr</span><span class=""p"">);</span>
        <span class=""p"">}</span>
        <span class=""k"">return</span> <span class=""nx"">getattr</span><span class=""p"">;</span>
    <span class=""p"">}</span>

    <span class=""nx"">html</span><span class=""p"">(</span><span class=""nx"">data</span><span class=""p"">)</span> <span class=""p"">{</span>
        <span class=""k"">if</span> <span class=""p"">(</span><span class=""nx"">data</span><span class=""p"">)</span> <span class=""p"">{</span>
            <span class=""k"">this</span><span class=""p"">.</span><span class=""nx"">each</span><span class=""p"">(</span><span class=""kd"">function</span><span class=""p"">(</span><span class=""nx"">el</span><span class=""p"">)</span> <span class=""p"">{</span>
                <span class=""nx"">el</span><span class=""p"">.</span><span class=""nx"">innerHTML</span> <span class=""o"">=</span> <span class=""nx"">data</span><span class=""p"">;</span>
            <span class=""p"">})</span>
        <span class=""p"">}</span> <span class=""k"">else</span> <span class=""p"">{</span>
            <span class=""k"">return</span> <span class=""k"">this</span><span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">].</span><span class=""nx"">innerHTML</span><span class=""p"">;</span>
        <span class=""p"">}</span>
        <span class=""k"">return</span> <span class=""k"">this</span><span class=""p"">;</span>
    <span class=""p"">}</span>
    <span class=""nx"">append</span><span class=""p"">(</span><span class=""nx"">el</span><span class=""p"">){</span>
        <span class=""k"">this</span><span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">].</span><span class=""nx"">append</span><span class=""p"">(</span><span class=""nx"">el</span><span class=""p"">);</span>
        <span class=""k"">return</span> <span class=""k"">this</span><span class=""p"">;</span>
    <span class=""p"">}</span>
    <span class=""nx"">prepend</span><span class=""p"">(</span><span class=""nx"">el</span><span class=""p"">){</span>
        <span class=""k"">this</span><span class=""p"">[</span><span class=""mi"">0</span><span class=""p"">].</span><span class=""nx"">prepend</span><span class=""p"">(</span><span class=""nx"">el</span><span class=""p"">);</span>
        <span class=""k"">return</span> <span class=""k"">this</span><span class=""p"">;</span>
    <span class=""p"">}</span>
    <span class=""nx"">hide</span><span class=""p"">()</span> <span class=""p"">{</span>
        <span class=""k"">this</span><span class=""p"">.</span><span class=""nx"">each</span><span class=""p"">(</span><span class=""kd"">function</span><span class=""p"">(</span><span class=""nx"">el</span><span class=""p"">)</span> <span class=""p"">{</span>
            <span class=""nx"">el</span><span class=""p"">.</span><span class=""nx"">style</span><span class=""p"">.</span><span class=""nx"">display</span> <span class=""o"">=</span> <span class=""dl"">""</span><span class=""s2"">none</span><span class=""dl"">""</span><span class=""p"">;</span>
        <span class=""p"">});</span>
        <span class=""k"">return</span> <span class=""k"">this</span><span class=""p"">;</span>
    <span class=""p"">}</span>
    <span class=""nx"">show</span><span class=""p"">()</span> <span class=""p"">{</span>
        <span class=""k"">this</span><span class=""p"">.</span><span class=""nx"">each</span><span class=""p"">(</span><span class=""kd"">function</span><span class=""p"">(</span><span class=""nx"">el</span><span class=""p"">)</span> <span class=""p"">{</span>
            <span class=""nx"">el</span><span class=""p"">.</span><span class=""nx"">style</span><span class=""p"">.</span><span class=""nx"">display</span> <span class=""o"">=</span> <span class=""dl"">""</span><span class=""s2"">block</span><span class=""dl"">""</span><span class=""p"">;</span>
        <span class=""p"">});</span>
        <span class=""k"">return</span> <span class=""k"">this</span><span class=""p"">;</span>
    <span class=""p"">}</span>
    <span class=""nx"">on</span><span class=""p"">(</span><span class=""nx"">event</span><span class=""p"">,</span> <span class=""nx"">child</span><span class=""p"">,</span> <span class=""nx"">callback</span> <span class=""o"">=</span> <span class=""kc"">null</span><span class=""p"">,</span> <span class=""nx"">state</span> <span class=""o"">=</span> <span class=""kc"">null</span><span class=""p"">)</span> <span class=""p"">{</span>
        <span class=""k"">if</span> <span class=""p"">(</span><span class=""nx"">callback</span> <span class=""o"">!=</span> <span class=""kc"">null</span><span class=""p"">)</span> <span class=""p"">{</span>
            <span class=""kd"">let</span> <span class=""nx"">selector</span> <span class=""o"">=</span> <span class=""nx"">child</span><span class=""p"">;</span>
            <span class=""k"">this</span><span class=""p"">.</span><span class=""nx"">each</span><span class=""p"">(</span><span class=""kd"">function</span><span class=""p"">(</span><span class=""nx"">element</span><span class=""p"">)</span> <span class=""p"">{</span>
                <span class=""nx"">element</span><span class=""p"">.</span><span class=""nx"">addEventListener</span><span class=""p"">(</span><span class=""nx"">event</span><span class=""p"">,</span> <span class=""kd"">function</span><span class=""p"">(</span><span class=""nx"">event</span><span class=""p"">)</span> <span class=""p"">{</span>
                    <span class=""k"">if</span> <span class=""p"">(</span><span class=""nx"">event</span><span class=""p"">.</span><span class=""nx"">target</span><span class=""p"">.</span><span class=""nx"">matches</span><span class=""p"">(</span><span class=""nx"">selector</span> <span class=""o"">+</span> <span class=""dl"">'</span><span class=""s1"">, </span><span class=""dl"">'</span> <span class=""o"">+</span> <span class=""nx"">selector</span> <span class=""o"">+</span> <span class=""dl"">'</span><span class=""s1""> *</span><span class=""dl"">'</span><span class=""p"">))</span> <span class=""p"">{</span>
                        <span class=""nx"">callback</span><span class=""p"">.</span><span class=""nx"">apply</span><span class=""p"">(</span><span class=""nx"">event</span><span class=""p"">.</span><span class=""nx"">target</span><span class=""p"">.</span><span class=""nx"">closest</span><span class=""p"">(</span><span class=""nx"">selector</span><span class=""p"">),</span> <span class=""nx"">arguments</span><span class=""p"">);</span>
                    <span class=""p"">}</span>
                <span class=""p"">},</span> <span class=""kc"">false</span><span class=""p"">)</span>
            <span class=""p"">})</span>
        <span class=""p"">}</span> <span class=""k"">else</span> <span class=""p"">{</span>
            <span class=""nx"">callback</span> <span class=""o"">=</span> <span class=""nx"">child</span><span class=""p"">;</span>
            <span class=""k"">this</span><span class=""p"">.</span><span class=""nx"">each</span><span class=""p"">(</span><span class=""kd"">function</span><span class=""p"">(</span><span class=""nx"">element</span><span class=""p"">)</span> <span class=""p"">{</span>
                <span class=""k"">if</span> <span class=""p"">(</span><span class=""nx"">state</span><span class=""p"">)</span> <span class=""p"">{</span>
                    <span class=""nx"">element</span><span class=""p"">.</span><span class=""nx"">addEventListener</span><span class=""p"">(</span><span class=""nx"">event</span><span class=""p"">,</span> <span class=""nx"">callback</span><span class=""p"">,</span> <span class=""nx"">state</span><span class=""p"">);</span>
                <span class=""p"">}</span> <span class=""k"">else</span> <span class=""p"">{</span>
                    <span class=""nx"">element</span><span class=""p"">.</span><span class=""nx"">addEventListener</span><span class=""p"">(</span><span class=""nx"">event</span><span class=""p"">,</span> <span class=""nx"">callback</span><span class=""p"">,</span> <span class=""kc"">false</span><span class=""p"">);</span>
                <span class=""p"">}</span>
            <span class=""p"">})</span>
        <span class=""p"">}</span>

        <span class=""k"">return</span> <span class=""k"">this</span><span class=""p"">;</span>
    <span class=""p"">}</span>
<span class=""p"">}</span>
<span class=""kd"">const</span> <span class=""nx"">$</span> <span class=""o"">=</span> <span class=""kd"">function</span><span class=""p"">(</span><span class=""nx"">el</span><span class=""p"">)</span> <span class=""p"">{</span>
    <span class=""k"">return</span> <span class=""k"">new</span> <span class=""nx"">jQuery</span><span class=""p"">(</span><span class=""nx"">el</span><span class=""p"">);</span>
<span class=""p"">}</span>
<span class=""nx"">$</span><span class=""p"">.</span><span class=""nx"">ajax</span><span class=""o"">=</span><span class=""kd"">function</span><span class=""p"">(</span><span class=""nx"">args</span><span class=""p"">)</span> <span class=""p"">{</span>
        <span class=""kd"">let</span> <span class=""nx"">url</span> <span class=""o"">=</span> <span class=""nx"">args</span><span class=""p"">[</span><span class=""dl"">""</span><span class=""s2"">url</span><span class=""dl"">""</span><span class=""p"">];</span>
        <span class=""kd"">let</span> <span class=""nx"">type</span> <span class=""o"">=</span> <span class=""dl"">""</span><span class=""s2"">get</span><span class=""dl"">""</span><span class=""p"">;</span>
        <span class=""kd"">let</span> <span class=""nx"">success</span> <span class=""o"">=</span><span class=""kd"">function</span><span class=""p"">(){};</span>
        <span class=""kd"">let</span> <span class=""nx"">fail</span> <span class=""o"">=</span> <span class=""kd"">function</span><span class=""p"">(){};</span>
        <span class=""k"">if</span><span class=""p"">(</span><span class=""nx"">args</span><span class=""p"">[</span><span class=""dl"">'</span><span class=""s1"">success</span><span class=""dl"">'</span><span class=""p"">]){</span>
            <span class=""nx"">success</span><span class=""o"">=</span><span class=""nx"">args</span><span class=""p"">[</span><span class=""dl"">'</span><span class=""s1"">success</span><span class=""dl"">'</span><span class=""p"">];</span>
        <span class=""p"">}</span>
        <span class=""k"">if</span><span class=""p"">(</span><span class=""nx"">args</span><span class=""p"">[</span><span class=""dl"">'</span><span class=""s1"">fail</span><span class=""dl"">'</span><span class=""p"">]){</span>
            <span class=""nx"">fail</span><span class=""o"">=</span><span class=""nx"">args</span><span class=""p"">[</span><span class=""dl"">'</span><span class=""s1"">fail</span><span class=""dl"">'</span><span class=""p"">];</span>
        <span class=""p"">}</span>
        <span class=""kd"">let</span> <span class=""nx"">xhttp</span> <span class=""o"">=</span> <span class=""k"">new</span> <span class=""nx"">XMLHttpRequest</span><span class=""p"">();</span>
        <span class=""nx"">xhttp</span><span class=""p"">.</span><span class=""nx"">onerror</span> <span class=""o"">=</span> <span class=""kd"">function</span><span class=""p"">(</span><span class=""nx"">error</span><span class=""p"">){</span>
            <span class=""k"">return</span> <span class=""nx"">fail</span><span class=""p"">(</span><span class=""nx"">error</span><span class=""p"">);</span>
        <span class=""p"">}</span>
        <span class=""nx"">xhttp</span><span class=""p"">.</span><span class=""nx"">onload</span> <span class=""o"">=</span> <span class=""kd"">function</span><span class=""p"">()</span> <span class=""p"">{</span>
            <span class=""kd"">let</span> <span class=""nx"">response</span><span class=""p"">;</span>
            <span class=""k"">if</span> <span class=""p"">(</span><span class=""k"">this</span><span class=""p"">.</span><span class=""nx"">readyState</span> <span class=""o"">==</span> <span class=""mi"">4</span> <span class=""o"">&amp;&amp;</span> <span class=""k"">this</span><span class=""p"">.</span><span class=""nx"">status</span> <span class=""o"">==</span> <span class=""mi"">200</span><span class=""p"">)</span> <span class=""p"">{</span>
                <span class=""kd"">let</span> <span class=""nx"">response</span><span class=""o"">=</span><span class=""dl"">""""</span><span class=""p"">;</span>
                <span class=""k"">try</span> <span class=""p"">{</span>
                    <span class=""nx"">response</span><span class=""o"">=</span><span class=""nx"">JSON</span><span class=""p"">.</span><span class=""nx"">parse</span><span class=""p"">(</span><span class=""k"">this</span><span class=""p"">.</span><span class=""nx"">responseText</span><span class=""p"">)</span>
                <span class=""p"">}</span> <span class=""k"">catch</span> <span class=""p"">(</span><span class=""nx"">e</span><span class=""p"">)</span> <span class=""p"">{</span>
                    <span class=""nx"">response</span> <span class=""o"">=</span> <span class=""k"">this</span><span class=""p"">.</span><span class=""nx"">responseText</span><span class=""p"">;</span>
                    <span class=""p"">}</span>
                <span class=""k"">return</span> <span class=""nx"">success</span><span class=""p"">(</span><span class=""nx"">response</span><span class=""p"">);</span>
            <span class=""p"">}</span> <span class=""k"">else</span> <span class=""p"">{</span>
                <span class=""k"">return</span> <span class=""nx"">fail</span><span class=""p"">(</span><span class=""k"">this</span><span class=""p"">.</span><span class=""nx"">status</span><span class=""p"">);</span>
            <span class=""p"">}</span>
        <span class=""p"">};</span>
        <span class=""kd"">let</span> <span class=""nx"">parameters</span><span class=""o"">=</span><span class=""dl"">""""</span><span class=""p"">;</span>
        <span class=""k"">if</span> <span class=""p"">(</span><span class=""nx"">args</span><span class=""p"">)</span> <span class=""p"">{</span>
            <span class=""nx"">type</span> <span class=""o"">=</span> <span class=""nx"">args</span><span class=""p"">[</span><span class=""dl"">""</span><span class=""s2"">type</span><span class=""dl"">""</span><span class=""p"">];</span>
            <span class=""k"">if</span> <span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">data</span><span class=""dl"">'</span> <span class=""k"">in</span> <span class=""nx"">args</span><span class=""p"">)</span> <span class=""p"">{</span>
                <span class=""nx"">parameters</span> <span class=""o"">=</span> <span class=""k"">new</span> <span class=""nx"">URLSearchParams</span><span class=""p"">(</span><span class=""nx"">args</span><span class=""p"">[</span><span class=""dl"">'</span><span class=""s1"">data</span><span class=""dl"">'</span><span class=""p"">]).</span><span class=""nx"">toString</span><span class=""p"">();</span>
            <span class=""p"">}</span>

        <span class=""p"">}</span>
        <span class=""k"">if</span> <span class=""p"">(</span><span class=""nx"">type</span> <span class=""o"">&amp;&amp;</span> <span class=""nx"">type</span><span class=""p"">.</span><span class=""nx"">toUpperCase</span><span class=""p"">()</span><span class=""o"">==</span><span class=""dl"">'</span><span class=""s1"">POST</span><span class=""dl"">'</span><span class=""p"">)</span> <span class=""p"">{</span>
            <span class=""nx"">xhttp</span><span class=""p"">.</span><span class=""nx"">open</span><span class=""p"">(</span><span class=""dl"">""</span><span class=""s2"">POST</span><span class=""dl"">""</span><span class=""p"">,</span> <span class=""nx"">url</span><span class=""p"">,</span> <span class=""kc"">true</span><span class=""p"">);</span>
            <span class=""nx"">xhttp</span><span class=""p"">.</span><span class=""nx"">setRequestHeader</span><span class=""p"">(</span><span class=""dl"">""</span><span class=""s2"">Content-type</span><span class=""dl"">""</span><span class=""p"">,</span> <span class=""dl"">""</span><span class=""s2"">application/x-www-form-urlencoded</span><span class=""dl"">""</span><span class=""p"">);</span>
            <span class=""nx"">xhttp</span><span class=""p"">.</span><span class=""nx"">send</span><span class=""p"">(</span><span class=""nx"">parameters</span><span class=""p"">);</span>
        <span class=""p"">}</span> <span class=""k"">else</span> <span class=""k"">if</span> <span class=""p"">(</span><span class=""o"">!</span><span class=""nx"">type</span> <span class=""o"">||</span> <span class=""nx"">type</span><span class=""p"">.</span><span class=""nx"">toUpperCase</span><span class=""p"">()</span><span class=""o"">==</span><span class=""dl"">'</span><span class=""s1"">GET</span><span class=""dl"">'</span><span class=""p"">){</span>
            <span class=""nx"">xhttp</span><span class=""p"">.</span><span class=""nx"">open</span><span class=""p"">(</span><span class=""dl"">""</span><span class=""s2"">GET</span><span class=""dl"">""</span><span class=""p"">,</span> <span class=""nx"">url</span> <span class=""o"">+</span> <span class=""dl"">""</span><span class=""s2"">?</span><span class=""dl"">""</span> <span class=""o"">+</span> <span class=""nx"">parameters</span><span class=""p"">,</span> <span class=""kc"">true</span><span class=""p"">);</span>
            <span class=""nx"">xhttp</span><span class=""p"">.</span><span class=""nx"">setRequestHeader</span><span class=""p"">(</span><span class=""dl"">""</span><span class=""s2"">X-Requested-With</span><span class=""dl"">""</span><span class=""p"">,</span> <span class=""dl"">""</span><span class=""s2"">XMLHttpRequest</span><span class=""dl"">""</span><span class=""p"">);</span>
            <span class=""nx"">xhttp</span><span class=""p"">.</span><span class=""nx"">send</span><span class=""p"">();</span>
        <span class=""p"">}</span>
    <span class=""p"">}</span>
</code></pre>

</div>



<p>Now you have your own jQuery library. Of course the Original jQuery have more methods and good optimization but this is enough for regular tasks. </p>

<blockquote>
<p>IF you are interested in this type of posts please check out my<br />
<a href=""https://codegleam.blogspot.com/"">blog</a><br /><br />
Read next<br />
<a href=""https://codegleam.blogspot.com/2023/03/virtual-dom-diffing-algorithm.html"">Virtual Dom Diffing Algorithm Implementation In Vanilla JavaScript</a><br /></p>
</blockquote>"'https://dev.to/joydeep23/make-your-own-jquery-from-scratch-20mh'https://res.cloudinary.com/practicaldev/image/fetch/s--kK6wwurA--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qxxwt2n38oym8b5bufh6.png'"['https://dev-to-uploads.s3.amazonaws.com/uploads/logos/resized_logo_UQww2soKuUsjaOGNB38o.png', 'https://dev.to/assets/raised-hands-74b2099fd66a39f2d7eed9305ee0f4553df0eb7b4f11b01b6b1b499973048fe5.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--pcSkTMZL--/c_limit,f_auto,fl_progressive,q_80,w_190/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--xwBoQC_6--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/186199/a3d1cfed-a1ca-41cd-a146-9db4e65711d4.jpeg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--9WAvw2st--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qxxwt2n38oym8b5bufh6.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--RahRXnDu--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/979431/09d27d5e-2072-44cc-8c04-0d62135e1053.png', 'https://dev.to/assets/exploding-head-daceb38d627e6ae9b730f36a1e390fca556a4289d5a41abb2c35068ad3e2c4b5.svg', 'https://dev.to/assets/loading-ellipsis-b714cf681fd66c853ff6f03dd161b77aa3c80e03cdc06f478b695f42770421e9.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--dbvzdS8a--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/979431/09d27d5e-2072-44cc-8c04-0d62135e1053.png', 'https://dev.to/assets/sparkle-heart-5f9bee3767e18deb1bb725290cb151c25234768a0e9a2bd39370c382d02920cf.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--Afj_CZW5--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/885267/fe4abb2a-5d51-461c-ae63-77bdc92da9b6.jpeg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--RmY55OKL--/c_limit,f_auto,fl_progressive,q_auto,w_256/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--I0MYt3ix--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1029022/a070b9e5-871a-43ed-b331-3924beaad912.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--LqgADxKo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_350/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jb3sc2966d2rvbcohxvq.png', 'https://dev.to/assets/heart-plus-active-9ea3b22f2bc311281db911d416166c5f430636e76b15cd5df6b3b841d830eefa.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--kK6wwurA--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qxxwt2n38oym8b5bufh6.png', 'https://dev.to/assets/fire-f60e7a582391810302117f987b22a8ef04a2fe0df7e3258a5f49332df1cec71e.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--DMXsSMVM--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/272637/76058249-2308-4e16-90c1-c56ece9a80aa.png', 'https://dev.to/assets/multi-unicorn-b44d6f8c23cdd00964192bedc38af3e82463978aa611b4365bd33a0f1f4f3e97.svg']"
2'5PBFY00UO'The Art of Debugging: Strategies and Techniques for Efficient Troubleshooting'"<p>Debugging is an essential skill for any developer, and yet it can be one of the most frustrating and time-consuming tasks. In this post, we'll explore strategies and techniques for efficient troubleshooting that can help you become a more effective and confident debugger.</p>

<p><strong>Understand the problem</strong> 🤔- Before you start trying to fix a problem, it's important to understand exactly what the problem is and how it's affecting your code. Take the time to reproduce the problem and gather as much information as possible.</p>

<p><strong>Use the right tools</strong> 🧰- There are many tools available for debugging, including IDEs, debuggers, profilers, and log analyzers. Make sure you're using the right tool for the job and that you're familiar with its capabilities.</p>

<p><strong>Simplify the problem</strong> 📉- Break down the problem into smaller pieces and isolate the code that's causing the issue. Use a process of elimination to narrow down the possible causes and focus your debugging efforts.</p>

<p><strong>Test your assumptions</strong> 👨‍🔬- Don't assume that you know what's causing the problem without testing your assumptions. Use logging, assertions, and unit tests to validate your assumptions and ensure that your fixes are working as expected.</p>

<p><strong>Collaborate and seek help</strong> 🤝- Don't be afraid to ask for help when you're stuck. Collaborate with your team members or seek help from online communities or forums. Sometimes, a fresh perspective can help you see the problem in a new light.</p>

<p>Debugging is a skill that requires patience, persistence, and creativity. By following these strategies and techniques, you can become a more efficient and effective debugger, and save yourself time and frustration in the long run. Keep honing your debugging skills and don't be afraid to tackle even the most challenging problems!</p>"'https://dev.to/bhavin9920/the-art-of-debugging-strategies-and-techniques-for-efficient-troubleshooting-53a6'https://res.cloudinary.com/practicaldev/image/fetch/s--ca5hKgXb--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5bip5j21tqd5g5c84z0y.jpg'"['https://dev-to-uploads.s3.amazonaws.com/uploads/logos/resized_logo_UQww2soKuUsjaOGNB38o.png', 'https://dev.to/assets/raised-hands-74b2099fd66a39f2d7eed9305ee0f4553df0eb7b4f11b01b6b1b499973048fe5.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--pcSkTMZL--/c_limit,f_auto,fl_progressive,q_80,w_190/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--TeUzrQAm--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/888582/60ff3cdd-5675-4c9a-90df-85cd2fd4286f.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--Mq6mz4Zj--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/827951/4a8003cf-4903-4e99-8fde-aeea3606be9b.jpeg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--asGFgLE1--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/501812/a080c186-99d4-4bcd-989e-9dd395d50d32.png', 'https://dev.to/assets/exploding-head-daceb38d627e6ae9b730f36a1e390fca556a4289d5a41abb2c35068ad3e2c4b5.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--qDOwKmrl--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/998054/28fcb42b-89b3-47c5-8ab9-1ef55f66b037.jpg', 'https://dev.to/assets/loading-ellipsis-b714cf681fd66c853ff6f03dd161b77aa3c80e03cdc06f478b695f42770421e9.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--o34qQazl--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5bip5j21tqd5g5c84z0y.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--QJch703D--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1046315/a88ad905-de90-4bda-810f-dc9f2d7c39e1.jpg', 'https://dev.to/assets/sparkle-heart-5f9bee3767e18deb1bb725290cb151c25234768a0e9a2bd39370c382d02920cf.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--RmY55OKL--/c_limit,f_auto,fl_progressive,q_auto,w_256/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--ca5hKgXb--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5bip5j21tqd5g5c84z0y.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--LqgADxKo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_350/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jb3sc2966d2rvbcohxvq.png', 'https://dev.to/assets/heart-plus-active-9ea3b22f2bc311281db911d416166c5f430636e76b15cd5df6b3b841d830eefa.svg', 'https://dev.to/assets/fire-f60e7a582391810302117f987b22a8ef04a2fe0df7e3258a5f49332df1cec71e.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--hSY74b40--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_775/https://res.cloudinary.com/practicaldev/image/fetch/s--UYyR8aE8--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://i.ibb.co/vPH0YMV/32-neumorphism.gif', 'https://dev.to/assets/multi-unicorn-b44d6f8c23cdd00964192bedc38af3e82463978aa611b4365bd33a0f1f4f3e97.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--rwQ_MprE--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1046315/a88ad905-de90-4bda-810f-dc9f2d7c39e1.jpg']"
3'B5B74JPC8'Scope, Hoisting and Closures in Javascript'"<h3>
  
  
  Scope
</h3>

<p>Scope in JavaScript refers to the accessibility of variables, functions, and objects in a particular part of the code. JavaScript uses lexical scoping, which means that the scope of a variable or function is determined by its location in the code.<br />
Before getting into scope we have to know how we can declare variables in javascript. There are three methods in javascript to declare variables ie. let var and const.</p>

<ul>
<li>The variables declared with a var will have function scope.
Example
</li>
</ul>
<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""kd"">function</span> <span class=""nx"">foo</span><span class=""p"">()</span> <span class=""p"">{</span>
  <span class=""kd"">var</span> <span class=""nx"">a</span> <span class=""o"">=</span> <span class=""mi"">1</span><span class=""p"">;</span>
  <span class=""nx"">console</span><span class=""p"">.</span><span class=""nx"">log</span><span class=""p"">(</span><span class=""nx"">a</span><span class=""p"">);</span>
<span class=""p"">}</span>

<span class=""nx"">foo</span><span class=""p"">();</span> <span class=""c1"">// Output: 1</span>
<span class=""nx"">console</span><span class=""p"">.</span><span class=""nx"">log</span><span class=""p"">(</span><span class=""nx"">a</span><span class=""p"">);</span> <span class=""c1"">// Error: a is not defined</span>

</code></pre>

</div>


<ul>
<li>If a variable is declared in a function using var then it can be accessible in the function only but if it is defined in the block it will have block scope it can be accessed anywhere in the program
Example
</li>
</ul>
<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""k"">if</span><span class=""p"">(</span><span class=""mi"">2</span> <span class=""o"">&lt;</span> <span class=""mi"">3</span><span class=""p"">){</span>
  <span class=""kd"">var</span> <span class=""nx"">a</span> <span class=""o"">=</span> <span class=""mi"">1</span><span class=""p"">;</span>
  <span class=""nx"">console</span><span class=""p"">.</span><span class=""nx"">log</span><span class=""p"">(</span><span class=""nx"">a</span><span class=""p"">);</span>
<span class=""p"">}</span>

<span class=""nx"">console</span><span class=""p"">.</span><span class=""nx"">log</span><span class=""p"">(</span><span class=""nx"">a</span><span class=""p"">);</span> <span class=""c1"">// Output: 1</span>

</code></pre>

</div>


<ul>
<li>In javascript nested functions can access variables in their parent function these nested functions are called closures.
Example
</li>
</ul>
<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code>  <span class=""kd"">function</span> <span class=""nx"">outer</span><span class=""p"">()</span> <span class=""p"">{</span>
  <span class=""kd"">var</span> <span class=""nx"">a</span> <span class=""o"">=</span> <span class=""mi"">1</span><span class=""p"">;</span>

  <span class=""kd"">function</span> <span class=""nx"">inner</span><span class=""p"">()</span> <span class=""p"">{</span>
    <span class=""kd"">var</span> <span class=""nx"">b</span> <span class=""o"">=</span> <span class=""mi"">2</span><span class=""p"">;</span>
    <span class=""nx"">console</span><span class=""p"">.</span><span class=""nx"">log</span><span class=""p"">(</span><span class=""nx"">a</span><span class=""p"">,</span> <span class=""nx"">b</span><span class=""p"">);</span>
  <span class=""p"">}</span>

  <span class=""nx"">inner</span><span class=""p"">();</span>
<span class=""p"">}</span>

<span class=""nx"">outer</span><span class=""p"">();</span> <span class=""c1"">// Output: 1 2</span>
</code></pre>

</div>


<ul>
<li>The variables declared using let and const will have block scope means any variable declared within curly braces cannot accessible from outside of curly braces.
Example
</li>
</ul>
<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""k"">if</span><span class=""p"">(</span><span class=""mi"">2</span> <span class=""o"">&lt;</span> <span class=""mi"">3</span><span class=""p"">){</span>
  <span class=""kd"">var</span> <span class=""nx"">a</span> <span class=""o"">=</span> <span class=""mi"">1</span><span class=""p"">;</span>
  <span class=""nx"">console</span><span class=""p"">.</span><span class=""nx"">log</span><span class=""p"">(</span><span class=""nx"">a</span><span class=""p"">);</span>
<span class=""p"">}</span>

<span class=""nx"">console</span><span class=""p"">.</span><span class=""nx"">log</span><span class=""p"">(</span><span class=""nx"">a</span><span class=""p"">);</span> <span class=""c1"">// Output: undefined</span>

</code></pre>

</div>


<ul>
<li>Nested functions can access variables declared in an outer function</li>
<li>If a variable is declared outside all functions and blocks it will have global scope means it can be accessed from anywhere in the program.</li>
</ul>
<h3>
  
  
  Hoisting
</h3>

<p>In javascript, execution will have two phases one is the creation and another one is execution. In the creation phase all variables will be created in memory with the default value undefined and all the functions will store fully. Here only variables declared with var and regular functions will be created in the creation phase. This is known as hoisting</p>

<ul>
<li>In the execution phase variable initialization will take place
Example
</li>
</ul>
<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""nx"">console</span><span class=""p"">.</span><span class=""nx"">log</span><span class=""p"">(</span><span class=""nx"">hi</span><span class=""p"">)</span> <span class=""c1"">// undefined</span>
<span class=""nx"">console</span><span class=""p"">.</span><span class=""nx"">log</span><span class=""p"">(</span><span class=""nx"">hello</span><span class=""p"">)</span> <span class=""c1"">// reference error</span>

<span class=""kd"">var</span> <span class=""nx"">hi</span> <span class=""o"">=</span><span class=""mi"">90</span>
<span class=""kd"">let</span> <span class=""nx"">hello</span><span class=""o"">=</span><span class=""mi"">99</span>

</code></pre>

</div>



<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""kd"">var</span> <span class=""nx"">hii</span><span class=""o"">=</span><span class=""mi"">44</span>
<span class=""nx"">hi</span><span class=""p"">()</span>

<span class=""kd"">function</span> <span class=""nx"">hi</span><span class=""p"">(){</span>
    <span class=""nx"">console</span><span class=""p"">.</span><span class=""nx"">log</span><span class=""p"">(</span><span class=""nx"">hii</span><span class=""p"">);</span><span class=""c1"">// output: 44</span>
<span class=""p"">}</span>
</code></pre>

</div>

<h3>
  
  
  Closures
</h3>

<p>In JavaScript, a closure is created when a function is defined inside another function and the inner function is returned or passed as a reference to a variable outside its enclosing function. The closure captures and retains the values of all the variables that were in scope at the time of its creation, even after the outer function has returned. Closures allow you to create private variables and functions that are inaccessible from outside the function in which they were defined</p>

<p>Example<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""kd"">function</span> <span class=""nx"">outerFunction</span><span class=""p"">(</span><span class=""nx"">x</span><span class=""p"">)</span> <span class=""p"">{</span>
  <span class=""kd"">function</span> <span class=""nx"">innerFunction</span><span class=""p"">(</span><span class=""nx"">y</span><span class=""p"">)</span> <span class=""p"">{</span>
    <span class=""k"">return</span> <span class=""nx"">x</span> <span class=""o"">+</span> <span class=""nx"">y</span><span class=""p"">;</span>
  <span class=""p"">}</span>
  <span class=""k"">return</span> <span class=""nx"">innerFunction</span><span class=""p"">;</span>
<span class=""p"">}</span>

<span class=""kd"">let</span> <span class=""nx"">addFive</span> <span class=""o"">=</span> <span class=""nx"">outerFunction</span><span class=""p"">(</span><span class=""mi"">5</span><span class=""p"">);</span>
<span class=""nx"">console</span><span class=""p"">.</span><span class=""nx"">log</span><span class=""p"">(</span><span class=""nx"">addFive</span><span class=""p"">(</span><span class=""mi"">3</span><span class=""p"">));</span> <span class=""c1"">// Output: 8</span>

</code></pre>

</div>



<p>In this example, outerFunction returns innerFunction, which is then assigned to the variable addFive. When addFive is called with an argument of 3, it returns 8. The closure is created when innerFunction is defined inside outerFunction, and it captures the value of x, which is 5. Even though outerFunction has returned and its local variables are no longer in scope, the closure retains the value of x and can still access it when innerFunction is called.</p>

<p>Applications of closures</p>

<ol>
<li>Private variables and methods: Closures can be used to create private variables and methods that are inaccessible from outside the function in which they were defined. This can be useful for preventing unintended modifications to your code. 
For example:
</li>
</ol>

<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""kd"">function</span> <span class=""nx"">counter</span><span class=""p"">()</span> <span class=""p"">{</span>
  <span class=""kd"">let</span> <span class=""nx"">count</span> <span class=""o"">=</span> <span class=""mi"">0</span><span class=""p"">;</span>
  <span class=""kd"">function</span> <span class=""nx"">increment</span><span class=""p"">()</span> <span class=""p"">{</span>
    <span class=""nx"">count</span><span class=""o"">++</span><span class=""p"">;</span>
    <span class=""nx"">console</span><span class=""p"">.</span><span class=""nx"">log</span><span class=""p"">(</span><span class=""nx"">count</span><span class=""p"">);</span>
  <span class=""p"">}</span>
  <span class=""k"">return</span> <span class=""nx"">increment</span><span class=""p"">;</span>
<span class=""p"">}</span>

<span class=""kd"">let</span> <span class=""nx"">c</span> <span class=""o"">=</span> <span class=""nx"">counter</span><span class=""p"">();</span>
<span class=""nx"">c</span><span class=""p"">();</span> <span class=""c1"">// Output: 1</span>
<span class=""nx"">c</span><span class=""p"">();</span> <span class=""c1"">// Output: 2</span>
<span class=""nx"">c</span><span class=""p"">();</span> <span class=""c1"">// Output: 3</span>
</code></pre>

</div>



<ol>
<li>Memoization: Closures can be used to implement memoization, which is a technique for caching the results of expensive function calls to improve performance. 
For example:
</li>
</ol>

<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""kd"">function</span> <span class=""nx"">memoize</span><span class=""p"">(</span><span class=""nx"">func</span><span class=""p"">)</span> <span class=""p"">{</span>
  <span class=""kd"">let</span> <span class=""nx"">cache</span> <span class=""o"">=</span> <span class=""p"">{};</span>
  <span class=""k"">return</span> <span class=""kd"">function</span><span class=""p"">(...</span><span class=""nx"">args</span><span class=""p"">)</span> <span class=""p"">{</span>
    <span class=""kd"">let</span> <span class=""nx"">key</span> <span class=""o"">=</span> <span class=""nx"">JSON</span><span class=""p"">.</span><span class=""nx"">stringify</span><span class=""p"">(</span><span class=""nx"">args</span><span class=""p"">);</span>
    <span class=""k"">if</span> <span class=""p"">(</span><span class=""nx"">cache</span><span class=""p"">[</span><span class=""nx"">key</span><span class=""p"">])</span> <span class=""p"">{</span>
      <span class=""nx"">console</span><span class=""p"">.</span><span class=""nx"">log</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">Retrieving from cache</span><span class=""dl"">'</span><span class=""p"">);</span>
      <span class=""k"">return</span> <span class=""nx"">cache</span><span class=""p"">[</span><span class=""nx"">key</span><span class=""p"">];</span>
    <span class=""p"">}</span>
    <span class=""k"">else</span> <span class=""p"">{</span>
      <span class=""nx"">console</span><span class=""p"">.</span><span class=""nx"">log</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">Calculating result</span><span class=""dl"">'</span><span class=""p"">);</span>
      <span class=""kd"">let</span> <span class=""nx"">result</span> <span class=""o"">=</span> <span class=""nx"">func</span><span class=""p"">(...</span><span class=""nx"">args</span><span class=""p"">);</span>
      <span class=""nx"">cache</span><span class=""p"">[</span><span class=""nx"">key</span><span class=""p"">]</span> <span class=""o"">=</span> <span class=""nx"">result</span><span class=""p"">;</span>
      <span class=""k"">return</span> <span class=""nx"">result</span><span class=""p"">;</span>
    <span class=""p"">}</span>
  <span class=""p"">};</span>
<span class=""p"">}</span>

<span class=""kd"">function</span> <span class=""nx"">fibonacci</span><span class=""p"">(</span><span class=""nx"">n</span><span class=""p"">)</span> <span class=""p"">{</span>
  <span class=""k"">if</span> <span class=""p"">(</span><span class=""nx"">n</span> <span class=""o"">&lt;</span> <span class=""mi"">2</span><span class=""p"">)</span> <span class=""k"">return</span> <span class=""nx"">n</span><span class=""p"">;</span>
  <span class=""k"">return</span> <span class=""nx"">fibonacci</span><span class=""p"">(</span><span class=""nx"">n</span><span class=""o"">-</span><span class=""mi"">1</span><span class=""p"">)</span> <span class=""o"">+</span> <span class=""nx"">fibonacci</span><span class=""p"">(</span><span class=""nx"">n</span><span class=""o"">-</span><span class=""mi"">2</span><span class=""p"">);</span>
<span class=""p"">}</span>

<span class=""kd"">let</span> <span class=""nx"">memoizedFibonacci</span> <span class=""o"">=</span> <span class=""nx"">memoize</span><span class=""p"">(</span><span class=""nx"">fibonacci</span><span class=""p"">);</span>
<span class=""nx"">console</span><span class=""p"">.</span><span class=""nx"">log</span><span class=""p"">(</span><span class=""nx"">memoizedFibonacci</span><span class=""p"">(</span><span class=""mi"">10</span><span class=""p"">));</span> <span class=""c1"">// Output: 55</span>
<span class=""nx"">console</span><span class=""p"">.</span><span class=""nx"">log</span><span class=""p"">(</span><span class=""nx"">memoizedFibonacci</span><span class=""p"">(</span><span class=""mi"">10</span><span class=""p"">));</span> <span class=""c1"">// Output: Retrieving from cache, 55</span>

</code></pre>

</div>



<ol>
<li>Callback functions: Closures can be used to create callback functions that have access to variables from the parent function. This can be useful for implementing event handlers and other asynchronous operations. 
For example:
</li>
</ol>

<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""kd"">function</span> <span class=""nx"">doSomething</span><span class=""p"">(</span><span class=""nx"">callback</span><span class=""p"">)</span> <span class=""p"">{</span>
  <span class=""kd"">let</span> <span class=""nx"">data</span> <span class=""o"">=</span> <span class=""dl"">'</span><span class=""s1"">hello world</span><span class=""dl"">'</span><span class=""p"">;</span>
  <span class=""nx"">setTimeout</span><span class=""p"">(</span><span class=""kd"">function</span><span class=""p"">()</span> <span class=""p"">{</span>
    <span class=""nx"">callback</span><span class=""p"">(</span><span class=""nx"">data</span><span class=""p"">);</span>
  <span class=""p"">},</span> <span class=""mi"">1000</span><span class=""p"">);</span>
<span class=""p"">}</span>

<span class=""kd"">function</span> <span class=""nx"">callbackFunction</span><span class=""p"">(</span><span class=""nx"">data</span><span class=""p"">)</span> <span class=""p"">{</span>
  <span class=""nx"">console</span><span class=""p"">.</span><span class=""nx"">log</span><span class=""p"">(</span><span class=""nx"">data</span><span class=""p"">.</span><span class=""nx"">toUpperCase</span><span class=""p"">());</span>
<span class=""p"">}</span>

<span class=""nx"">doSomething</span><span class=""p"">(</span><span class=""nx"">callbackFunction</span><span class=""p"">);</span> <span class=""c1"">// Output: HELLO WORLD</span>
</code></pre>

</div>"'https://dev.to/tejeswararao123/scope-hoisting-and-closures-in-javascript-5e7o'https://dev.to/social_previews/article/1405359.png'"['https://res.cloudinary.com/practicaldev/image/fetch/s--4M3A2ci2--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1019283/e781f452-b496-4c23-bc68-e20602c3e898.png', 'https://dev-to-uploads.s3.amazonaws.com/uploads/logos/resized_logo_UQww2soKuUsjaOGNB38o.png', 'https://dev.to/assets/raised-hands-74b2099fd66a39f2d7eed9305ee0f4553df0eb7b4f11b01b6b1b499973048fe5.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--pcSkTMZL--/c_limit,f_auto,fl_progressive,q_80,w_190/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--OR4P6mU_--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/917884/32d0c5ea-a7a0-4344-8811-208d52e7ffba.jpeg', 'https://dev.to/assets/exploding-head-daceb38d627e6ae9b730f36a1e390fca556a4289d5a41abb2c35068ad3e2c4b5.svg', 'https://dev.to/assets/loading-ellipsis-b714cf681fd66c853ff6f03dd161b77aa3c80e03cdc06f478b695f42770421e9.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--o6Qw_YJ4--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1040250/e201e71f-f9ee-4fe9-be67-e69fc81afdae.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--aOvIEGLO--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1019283/e781f452-b496-4c23-bc68-e20602c3e898.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--eVza2yuC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_775/https://res.cloudinary.com/practicaldev/image/fetch/s--XDmbmZKz--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://i.ibb.co/6Z960jq/zoxide.gif', 'https://res.cloudinary.com/practicaldev/image/fetch/s--ONEBizn5--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/76131/7d2bf735-e6fe-42b4-8948-e5be83011f38.jpeg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--UiLadQgG--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/76131/7d2bf735-e6fe-42b4-8948-e5be83011f38.jpeg', 'https://dev.to/assets/sparkle-heart-5f9bee3767e18deb1bb725290cb151c25234768a0e9a2bd39370c382d02920cf.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--RmY55OKL--/c_limit,f_auto,fl_progressive,q_auto,w_256/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://dev.to/social_previews/article/1405359.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--yf8j_b5M--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/56811/e0ad1f68-5690-409c-bb94-44ca855230f4.png', 'https://dev.to/assets/heart-plus-active-9ea3b22f2bc311281db911d416166c5f430636e76b15cd5df6b3b841d830eefa.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--H-DtqmIM--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1016632/7eb96df4-4204-4837-87f8-2a224a50b520.png', 'https://dev.to/assets/fire-f60e7a582391810302117f987b22a8ef04a2fe0df7e3258a5f49332df1cec71e.svg', 'https://dev.to/assets/multi-unicorn-b44d6f8c23cdd00964192bedc38af3e82463978aa611b4365bd33a0f1f4f3e97.svg']"
4'6XDEAKFKY'"What I'd like to see AI used for - women's month edition"'"<p><em>(this blog post is a part of a DEV celebration of the annual #wecoded campaign - earlier known as #shecoded)</em></p>

<p>As I'm nearing my fourth year in tech, I see the same discussions happen over and over again around gender in tech - and I'm tired. Instead of sighing about how this tech reality is hard at times, I turned the reasons for my fatigue into ideas for your next-generation AI app ✨</p>




<h2>
  
  
  Salary negotiation
</h2>

<p>Contrary to common belief, women are equally as good (or bad, actually) as men in salary negotiation - that is, when they actually negotiate. Sadly, a number of factors can impact a woman's willingness to negotiate an offer, <a href=""https://dl.acm.org/doi/pdf/10.1145/3472306.3478348"">including how the job description is written</a>:</p>

<blockquote>
<p>When jobs advertisements contained female-threatening language, <strong>women lowered their salary minimums</strong> compared to when jobs were described in a female-supportive way, whereas men were unaffected. (...) If women have lower aspirations, they may feel less motivation to negotiate and simply accept the first offer.</p>
</blockquote>

<p>Consistent with my own experience, another study found that <a href=""https://hbswk.hbs.edu/item/when-gender-changes-the-negotiation"">women are especially good at negotiation when advocating for the salary of others</a>:</p>

<blockquote>
<p>Our research suggests that (...) women perform better when negotiating on behalf of others than they do when negotiating for themselves; no such difference emerges among male negotiators. (...) <strong>Female executives negotiating as the mentor secured compensation that was 18 percent higher than the compensation female executives negotiated when they were playing the candidate</strong>. Meanwhile, male executives performed consistently across both roles, at the level of female executives negotiating as the candidate.<br />
(...) It's not that our female participants felt less entitled to a good salary. (...) Nor were women more or less competent at the negotiation itself. Rather, it appears that the women executives were particularly energized when they felt a sense of responsibility to represent another person's interests.</p>
</blockquote>

<p><strong>⭐️ Here are some ideas for what AI could do:</strong></p>

<ul>
<li>a real-time salary negotiation assistant that will provide the applicant with the pep talk, sound bites, and arguments for a successful negotiation</li>
<li>estimating what folks at a given salary might be making (not only via Glassdoor or Blind) and what the candidate's skillset and experience is, and based on that, suggests acceptable salary ranges</li>
<li>(for HR) scanning job descriptions for gender triggers and suggesting alternatives</li>
<li>(for candidates) an extension that replaces gender triggers in job description with gender neutral language</li>
</ul>




<h2>
  
  
  At work
</h2>

<p>Am I really writing a section about gender at work? Well, let me just mention five things my friends and I noticed this past year:</p>

<ul>
<li>I see a lot of my amazing female friends partake in <a href=""https://www.youtube.com/watch?v=5cr2Yn_MrKg"">glue work</a>, either voluntarily or because they are expected to. </li>
<li>I have watched too many sessions where men talk a lot and engage in <em><a href=""https://en.wiktionary.org/wiki/killgissa"">killgissa</a></em> and <a href=""https://en.wikipedia.org/wiki/Mansplaining"">mansplaining</a> in 1:1 conversations with renown women or a non-binary folks who happen to be experts on the subject</li>
<li>I also have heard my share of ""well, actually""s and seen loads of passive aggressive nit-picky PR reviews that my female friends share with me to ask for a sanity check.</li>
<li>I read a lot about that <a href=""https://www.axios.com/2022/06/17/performance-reviews-bias-racism-sexism"">performance reviews for women focus mostly on their personality, and men on their work</a> (the same study found that men are so much more likely to be called ""genius"" or ""brilliant"" and women to be called ""overachievers"")</li>
<li>I see so many people having no problem remembering names of obscure retro games, a whole lineages of elves in some books, or the 80s niche bands but that amazing memory fails them in case of personal pronouns</li>
</ul>

<p><strong>⭐️ Here are some ideas for what AI could do:</strong></p>

<ul>
<li>a Notion/Confluence/Asana extension that shows stats for glue work for different team members</li>
<li>a Zoom app that measures air time, including air time spent on just taking space (EDIT: I heard that <a href=""https://www.vowel.com/"">Vowel</a> does that already! Awesome in case you don't want to reinvent the wheel.)</li>
<li>an extension that scans a performance review to show gendered biases</li>
<li>an app that scans all performance reviews from the company for a given year to make sure that the same metrics are used for all folks at given a level/role/team</li>
<li>grammarly but for correct pronouns</li>
<li>a Slack app that not only checks for exclusionary language but also reminds you to use the correct pronouns - before you even send the message! (even if you can't retain that knowledge, at least you don't create a situation that's awkward at best and damaging at worst)</li>
</ul>




<h2>
  
  
  Tech conferences, meetups, steams, events, twitter
</h2>

<p>Time and time again, we as a tech community learn about conferences offering unequal perks and payment for talks to different speakers.</p>

<p>We've also seen numerous conferences that completely forgot that there are plenty experts in tech who are women and non-binary people. To alleviate that, it happens frequently women (oftentimes experts themselves) are moderators in an all-male panel.</p>

<p><strong>⭐️ Here are some ideas for what AI could do:</strong></p>

<ul>
<li>create a list of women and non-binary speakers, together with examples of most recent talks, and contact info</li>
<li>create a list of male experts to moderate panels featuring women and non-binary experts</li>
<li>fetch a list of male tech community leaders who could deliver talks on the value of empathy, collaboration, inclusivity, team culture</li>
<li>find out if a male speaker you're considering is known to talk about gender equality so you can ask him to mentor a first-time speaker who is a woman or a non-binary person</li>
<li>get a report on whether your tech event location might be dangerous for any minority, such as <a href=""https://thenextweb.com/news/react-js-conference-return-in-november-lgbtq-not-invited"">LGBTQIAP+ folks in UAE</a> or <a href=""https://twitter.com/fables_tales/status/1510315916801855494?s=20"">trans folks in many US stated</a>
</li>
<li>(for male community tech leaders who state allyship with women and non-binary folks) checking stats on who you are retweeting, quote tweeting positively, and liking - it's really no longer enough to just say you support women, trans women and non-binary folks but in the times of wild twitter algorithms (for some, and life-threatening trans-hatred for others), you just gotta amplify their voices and recommend them as experts</li>
</ul>




<h2>
  
  
  Surveys
</h2>

<p>For at least as long as I have been in tech, the ""State of JS"" and ""State of CSS"" surveys have been not only doing a poor job when it comes to survey design, data collection, and analysis - they also have done a lot of damage for women in tech. For context, the survey consistently gets only around 5% of responses from women and non-binary folks, and year after year, there's some discussion around it.</p>

<p>There's a lot I could say about the survey given that I taught research methods for two years as a part of my PhD in Sociology. For example, the presentation of the data on most popular community leaders does not factor the gender of the responders, resulting in an impression that that is the ultimate list of who's who in the JS ecosystem - and it features only four women. But not if you adjust the data for demographics - then you'd already see 10 women creators there. And if the survey actually collects more responses from women and non-binary respondents, the list will be only more diverse.</p>

<p>But the survey design flaws are less important than its outcomes. I don't think there's any data on the actual consequences so for now, three anecdotes from my experience need to suffice:</p>

<ul>
<li>A male friend lamented how he can't get any women into the hiring pipeline ""but then again, there are fewer than 10% of women in the web dev"".</li>
<li>A conference organizer pondered if there's even any point in diversity efforts with regards to the lineup.</li>
<li>A few women streamers or community leaders were disheartened by not making it to the ""Top 50"" list of the survey.</li>
</ul>

<p>The organizers say they sent dozens emails to women in tech organizations and heard almost no responses. This sounds almost incredible given how easy it is to get a response for a project like that. Was there a problem with how the emails were written? Maybe when they were sent? Why emails, anyway? Why not a DM on Twitter or an intro through a friend? Weirdly enough, none of my six community organizer friends received such an email, nor did I found one in my inbox - even though I have been a co-organizer of a React community for women and non-binary folks for the past four years, and even though I myself offered such help for example <a href=""https://dev.to/sylwiavargas/comment/17cji"">here on DEV</a>. It's really odd because I have seen Sacha Greif, the main author of the survey, advocate vehemently for women, trans folks, and all other minorities - and I actually do trust that his intentions are good.</p>

<p><strong>⭐️ Here are some ideas for AI to fix it:</strong></p>

<ul>
<li>following the advice from the Sociology handbooks and research findings, evaluate the survey before it is released from the perspective of research method design, with special emphasis on potential biases (not only gender) 

<ul>
<li>OR: being given the goals of the survey, design one in reference to the advice from the Sociology handbooks and research findings</li>
</ul>


</li>
<li>given the scope of the survey (JavaScript ecosystem), define the representative sample, making sure it is statistically significant, as well as the sampling method</li>
<li>generate ideas for tweets, toots, blog posts, Discord and Slack messages that the organizers can post in various communities when asking for help</li>
<li>having received responses, assign a correct weight to respondents in representing the data</li>
<li>scan the final report for inaccuracies and include context information</li>
</ul>




<h2>
  
  
  Is a better world possible with AI?
</h2>

<p>As much as I'd love to believe the opposite was true, <a href=""https://mashable.com/article/chatgpt-ai-racism-bias"">AI is just an extension of the biases of its creators</a>.</p>

<p>For example, earlier in this post I mentioned performance reviews - in fact, <a href=""https://www.fastcompany.com/90844066/chatgpt-write-performance-reviews-sexist-and-racist"">ChatGPT writes longer and harsher performance reviews when it assumes that the employee is a woman</a>. It views: nurse, receptionist, kindergarten teacher as women; mechanic as a man; banker and engineer as men or neutral. Here's also <a href=""https://twitter.com/JSEllenberg/status/1288644518103965696"">a tweet about ChatGPT recommendation letters</a>:</p>

<blockquote>
<p>male name reports ""spotty attendance but very bright"" -- with female name, we hear about their kindness &amp; empathy and the children they tutored.</p>
</blockquote>

<p>All the above app ideas could (and should) be done not by AI but by a human - if only the humans in questions cared more, were more self-aware, and possibly less exhausted (here I'm giving a benefit of a doubt to everyone who is well-meaning but has <a href=""https://www.goodrx.com/health-topic/mental-health/spoon-theory"">only so many spoons</a>). For example, I spoke about better conference lineups - if you are curious about how to design one, read <a href=""https://bridgetkromhout.com/blog/in-the-kingdom-of-the-blind/"">this great writeup about DevOps Days</a> authored by <a href=""https://twitter.com/bridgetkromhout"">Bridget Kromhout</a>.</p>

<p>And before you actually go and design a next AI-driven app that will change the world - see if the change will be for better. AI has been designed with huge biases and it goes majorly unchallenged.</p>

<p>⭐️ If you'd like to learn more about the biases of AI, follow:</p>

<ul>
<li>
<a href=""https://www.dair-institute.org/about"">Timnit Gebru</a> who runs <a href=""https://www.dair-institute.org/"">Distributed AI Research Institute</a>
</li>
<li>
<a href=""https://twitter.com/KestralWrites"">Kestral Gaian</a> who teaches ethics at London Interdisciplinary School</li>
<li>
<a href=""https://twitter.com/safiyanoble"">Safiya Umoja Noble</a> who wrote <a href=""https://nyupress.org/9781479837243/algorithms-of-oppression/"">""Algorithms of Oppression""</a>
</li>
</ul>




<p>Cover photo was designed by DALLE with a prompt: ""if gender equality was a kaleidoscope image""</p>"'https://dev.to/sylwiavargas/what-id-like-to-see-ai-used-for-womens-month-edition-5768'https://res.cloudinary.com/practicaldev/image/fetch/s--Hf2JiIsJ--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5tmao7t4j2aickoxxv79.png'"['https://res.cloudinary.com/practicaldev/image/fetch/s--Hf2JiIsJ--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5tmao7t4j2aickoxxv79.png', 'https://dev-to-uploads.s3.amazonaws.com/uploads/logos/resized_logo_UQww2soKuUsjaOGNB38o.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--w52D1b_e--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/283021/487202dc-33a7-402d-9e81-e57602edd620.jpeg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--OPxJNIJw--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1014326/dd8ee549-a932-435e-8b9c-d6448217e927.png', 'https://dev.to/assets/raised-hands-74b2099fd66a39f2d7eed9305ee0f4553df0eb7b4f11b01b6b1b499973048fe5.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--SJfRLnec--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_350/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cwkw09cb5un6au3a9b5e.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--pcSkTMZL--/c_limit,f_auto,fl_progressive,q_80,w_190/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--BhFWJyrO--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5tmao7t4j2aickoxxv79.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--5CmVKlx2--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/283021/487202dc-33a7-402d-9e81-e57602edd620.jpeg', 'https://dev.to/assets/exploding-head-daceb38d627e6ae9b730f36a1e390fca556a4289d5a41abb2c35068ad3e2c4b5.svg', 'https://dev.to/assets/loading-ellipsis-b714cf681fd66c853ff6f03dd161b77aa3c80e03cdc06f478b695f42770421e9.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--SKv1l1xM--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/247560/803f25c6-05a3-4cff-932d-20dbe4915cb3.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--yB8vcL8o--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/226105/944b6e93-b39b-483e-8d2b-cfd20b85c035.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--8t-VGqgg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_775/https://dev-to-uploads.s3.amazonaws.com/i/7p7qe33hhlj5zdi3bj82.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--yXg8UT1z--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/180171/2365bc37-cc2b-4a06-bfdf-e9acb7c4f95d.jpg', 'https://dev.to/assets/sparkle-heart-5f9bee3767e18deb1bb725290cb151c25234768a0e9a2bd39370c382d02920cf.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--5TWqzoHl--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/868964/deaf69fc-c80d-48a4-bb6d-c3b57eb36fb1.jpeg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--RmY55OKL--/c_limit,f_auto,fl_progressive,q_auto,w_256/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--oqXUaU4G--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1047330/3f597db3-00ba-46c3-92ab-bff4fde372f8.png', 'https://dev.to/assets/heart-plus-active-9ea3b22f2bc311281db911d416166c5f430636e76b15cd5df6b3b841d830eefa.svg', 'https://dev.to/assets/fire-f60e7a582391810302117f987b22a8ef04a2fe0df7e3258a5f49332df1cec71e.svg', 'https://dev.to/assets/multi-unicorn-b44d6f8c23cdd00964192bedc38af3e82463978aa611b4365bd33a0f1f4f3e97.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--cnc0z5xu--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/337841/75deba0f-8d8a-476a-b62b-557c6de1bc8f.jpg']"
5'23LYZKWXP'AWS Terraform for Single Containers'"<p>I recently worked through and wrote up a basic comparison of cloud providers, with the intent of juxtaposing the process for a Terraform-based workflow to new colleagues. I would run each provider, using Terraform, through a basic set of steps like account signup for tokens; provider initialization for Terraform; single-container deployment; deployment of a Kubernetes cluster; and finally taking down any resources.</p>

<p>This went fairly well for the usual suspects (Azure, DigitalOcean, and others) until I ran into AWS, where it proved to be much more complicated (despite the well-celebrated Elastic Container Services) to get a single container up and running. Most research pointed towards the use of third-party libraries which (while official) seemed to obfuscate a lot of the complexity required to get a working configuration within a single Terraform file.</p>

<p>It took some additional research, reverse-engineering, and (relatively fruitless) conversation with ChatGPT, but I'm pleased to present the following for your pleasure: a single-file, single-container deployment to AWS using Terraform.</p>

<h2>
  
  
  Accounts and Tokens
</h2>

<p>The first step is to sign up for an account. There are some limited free-credit offers available that should be enough to get you through this exercise. You will also need an API token for Terraform to authenticate with. AWS will get mad if you try and attach these to your root account--which, in all fairness, is a pretty significant security consideration. If you do decide to create a ""service principal"" or machine account for Terraform, you will need to use the IAM dashboard to attach the following privileges to the relevant user group:</p>

<ul>
<li><p>ec2 (""AmazonEC2FullAccess"")</p></li>
<li><p>ecs (""AmazonECS_FullAccess"")</p></li>
<li><p>elb (""ElasticLoadBalancingFullAccess"")</p></li>
<li><p>vpc (""AmazonVPCFullAcces"")</p></li>
</ul>

<p>With either approach, you will need to create/attach tokens to your user under ""security credentials"". The access key ID and secret values can be set to your environmental variables ""AWS_ACCESS_KEY_ID"" and ""AWS_SECRET_ACCESS_KEY"", respectively, where Terraform's AWS provider will automatically discover them. I prefer this method over committing them to file (even if separate from your main <code>.TF</code> content) because you never know when your <code>.gitignore</code> is going to miss, and it's fairly agnostic across providers.</p>

<h2>
  
  
  Providers and initialization
</h2>

<p>With that set up, you're good to create your <code>main.tf</code> file and start defining provider data. I also like to cache key parameters as local data near the top in case some tweaks and/or experimentation are called for. We also declare a procedural reference to availability zones with a <code>data</code> block, which makes for elegant lookup later on.<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight terraform""><code><span class=""k"">terraform</span> <span class=""p"">{</span>
  <span class=""nx"">required_version</span> <span class=""p"">=</span> <span class=""s2"">""&gt;= 0.13""</span>

  <span class=""nx"">required_providers</span> <span class=""p"">{</span>
    <span class=""nx"">aws</span> <span class=""p"">=</span> <span class=""p"">{</span>
      <span class=""nx"">source</span>  <span class=""p"">=</span> <span class=""s2"">""hashicorp/aws""</span>
      <span class=""nx"">version</span> <span class=""p"">=</span> <span class=""s2"">""~&gt; 4.56""</span>
    <span class=""p"">}</span>
  <span class=""p"">}</span>
<span class=""p"">}</span>

<span class=""nx"">locals</span> <span class=""p"">{</span>
  <span class=""nx"">project</span>               <span class=""p"">=</span> <span class=""s2"">""aws-tf-single""</span>
  <span class=""nx"">container_name</span>        <span class=""p"">=</span> <span class=""s2"">""nginx""</span>
  <span class=""nx"">container_port</span>        <span class=""p"">=</span> <span class=""mi"">80</span>
  <span class=""nx"">region</span>                <span class=""p"">=</span> <span class=""s2"">""us-west-2""</span>
  <span class=""nx"">capacity_provider</span>     <span class=""p"">=</span> <span class=""s2"">""FARGATE""</span>
  <span class=""nx"">availability_replicas</span> <span class=""p"">=</span> <span class=""mi"">2</span>
<span class=""p"">}</span>

<span class=""k"">provider</span> <span class=""s2"">""aws""</span> <span class=""p"">{</span>
  <span class=""nx"">region</span> <span class=""p"">=</span> <span class=""kd"">local</span><span class=""p"">.</span><span class=""nx"">region</span>
<span class=""p"">}</span>

<span class=""k"">data</span> <span class=""s2"">""aws_availability_zones""</span> <span class=""s2"">""this""</span> <span class=""p"">{</span>
  <span class=""nx"">state</span> <span class=""p"">=</span> <span class=""s2"">""available""</span>
<span class=""p"">}</span>
</code></pre>

</div>



<p>With this saved, you can run <code>terraform init</code> from your command shell to get Terraform warmed up for deploying resources.</p>

<h2>
  
  
  Virtual Private Cloud
</h2>

<p>The first set of resources we are going to define are for your VPC. You can think of this as a set of high-level network configurations that define the context in which traffic will be managed.<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight terraform""><code><span class=""k"">resource</span> <span class=""s2"">""aws_vpc""</span> <span class=""s2"">""this""</span> <span class=""p"">{</span>
  <span class=""nx"">cidr_block</span> <span class=""p"">=</span> <span class=""s2"">""10.0.0.0/16""</span>
<span class=""p"">}</span>

<span class=""k"">resource</span> <span class=""s2"">""aws_security_group""</span> <span class=""s2"">""this""</span> <span class=""p"">{</span>
  <span class=""nx"">vpc_id</span>      <span class=""p"">=</span> <span class=""nx"">aws_vpc</span><span class=""p"">.</span><span class=""nx"">this</span><span class=""p"">.</span><span class=""nx"">id</span>
  <span class=""nx"">name_prefix</span> <span class=""p"">=</span> <span class=""s2"">""-""</span>

  <span class=""nx"">ingress</span> <span class=""p"">{</span>
    <span class=""nx"">cidr_blocks</span> <span class=""p"">=</span> <span class=""p"">[</span><span class=""s2"">""0.0.0.0/0""</span><span class=""p"">]</span>
    <span class=""nx"">description</span> <span class=""p"">=</span> <span class=""s2"">""HTTP web traffic""</span>
    <span class=""nx"">from_port</span>   <span class=""p"">=</span> <span class=""kd"">local</span><span class=""p"">.</span><span class=""nx"">container_port</span>
    <span class=""nx"">to_port</span>     <span class=""p"">=</span> <span class=""kd"">local</span><span class=""p"">.</span><span class=""nx"">container_port</span>
    <span class=""nx"">protocol</span>    <span class=""p"">=</span> <span class=""s2"">""tcp""</span>
  <span class=""p"">}</span>

  <span class=""nx"">egress</span> <span class=""p"">{</span>
    <span class=""nx"">cidr_blocks</span> <span class=""p"">=</span> <span class=""p"">[</span><span class=""s2"">""0.0.0.0/0""</span><span class=""p"">]</span>
    <span class=""nx"">from_port</span>   <span class=""p"">=</span> <span class=""mi"">0</span>
    <span class=""nx"">to_port</span>     <span class=""p"">=</span> <span class=""mi"">0</span>
    <span class=""nx"">protocol</span>    <span class=""p"">=</span> <span class=""s2"">""-1""</span>
  <span class=""p"">}</span>
<span class=""p"">}</span>

<span class=""k"">resource</span> <span class=""s2"">""aws_eip""</span> <span class=""s2"">""these""</span> <span class=""p"">{</span> <span class=""c1""># we will need one IP range for each NAT</span>
  <span class=""nx"">count</span>                <span class=""p"">=</span> <span class=""kd"">local</span><span class=""p"">.</span><span class=""nx"">availability_replicas</span>
  <span class=""nx"">network_border_group</span> <span class=""p"">=</span> <span class=""kd"">local</span><span class=""p"">.</span><span class=""nx"">region</span>
  <span class=""nx"">public_ipv4_pool</span>     <span class=""p"">=</span> <span class=""s2"">""amazon""</span>
  <span class=""nx"">vpc</span>                  <span class=""p"">=</span> <span class=""kc"">true</span>
<span class=""p"">}</span>

<span class=""k"">resource</span> <span class=""s2"">""aws_internet_gateway""</span> <span class=""s2"">""this""</span> <span class=""p"">{</span>
  <span class=""nx"">vpc_id</span> <span class=""p"">=</span> <span class=""nx"">aws_vpc</span><span class=""p"">.</span><span class=""nx"">this</span><span class=""p"">.</span><span class=""nx"">id</span>
<span class=""p"">}</span>
</code></pre>

</div>



<p>We have used a <code>aws_internet_gateway</code> here to identify the specific ingress point for our services network, and since we are just using a basic <code>nginx</code> container for this demonstration, we restrict the security group (which will be used later by our load balancer) to HTTP traffic on port 80.</p>

<p>You may also notice we are using the <code>count</code> meta-property. This involves some Terraform black magic that, once you wrap your head around it, is incredibly useful. The fundamental problem this addresses is the AWS requirement to deploy across multiple availability zones. (Recall that AWS availability zones are effectively unique data centers within the same region.) Therefore, we will need to define two virtual networks behind our ingress gateway. In the above code, this is reflected by the need to two elastic IP address ranges. More on this concept later.</p>

<h2>
  
  
  Public Networking
</h2>

<p>The load balancer will be responsible for routing traffic to either of the two availability zones. Because we are responsible cloud engineers, we will place our services within their own private network. After the load balancer, but before the private network, we must define a <em>public</em> network for routing to the NATs that will translate traffic across this division.<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight terraform""><code><span class=""k"">resource</span> <span class=""s2"">""aws_route_table""</span> <span class=""s2"">""public""</span> <span class=""p"">{</span>
  <span class=""nx"">vpc_id</span> <span class=""p"">=</span> <span class=""nx"">aws_vpc</span><span class=""p"">.</span><span class=""nx"">this</span><span class=""p"">.</span><span class=""nx"">id</span>

  <span class=""nx"">route</span> <span class=""p"">{</span>
    <span class=""nx"">cidr_block</span> <span class=""p"">=</span> <span class=""s2"">""0.0.0.0/0""</span>
    <span class=""nx"">gateway_id</span> <span class=""p"">=</span> <span class=""nx"">aws_internet_gateway</span><span class=""p"">.</span><span class=""nx"">this</span><span class=""p"">.</span><span class=""nx"">id</span>
  <span class=""p"">}</span>
<span class=""p"">}</span>

<span class=""k"">resource</span> <span class=""s2"">""aws_subnet""</span> <span class=""s2"">""public""</span> <span class=""p"">{</span>
  <span class=""nx"">count</span>                               <span class=""p"">=</span> <span class=""kd"">local</span><span class=""p"">.</span><span class=""nx"">availability_replicas</span>
  <span class=""nx"">cidr_block</span>                          <span class=""p"">=</span> <span class=""s2"">""10.0.10</span><span class=""k"">${</span><span class=""nx"">count</span><span class=""p"">.</span><span class=""nx"">index</span> <span class=""o"">+</span> <span class=""mi"">1</span><span class=""k"">}</span><span class=""s2"">.0/24""</span>
  <span class=""nx"">vpc_id</span>                              <span class=""p"">=</span> <span class=""nx"">aws_vpc</span><span class=""p"">.</span><span class=""nx"">this</span><span class=""p"">.</span><span class=""nx"">id</span>
  <span class=""nx"">availability_zone</span>                   <span class=""p"">=</span> <span class=""k"">data</span><span class=""p"">.</span><span class=""nx"">aws_availability_zones</span><span class=""p"">.</span><span class=""nx"">this</span><span class=""p"">.</span><span class=""nx"">names</span><span class=""p"">[</span><span class=""nx"">count</span><span class=""p"">.</span><span class=""nx"">index</span><span class=""p"">]</span>
  <span class=""nx"">map_public_ip_on_launch</span>             <span class=""p"">=</span> <span class=""kc"">true</span>
  <span class=""nx"">private_dns_hostname_type_on_launch</span> <span class=""p"">=</span> <span class=""s2"">""ip-name""</span>
<span class=""p"">}</span>

<span class=""k"">resource</span> <span class=""s2"">""aws_nat_gateway""</span> <span class=""s2"">""this""</span> <span class=""p"">{</span> <span class=""c1""># one NAT is required for mapping to each private route table</span>
  <span class=""nx"">count</span>         <span class=""p"">=</span> <span class=""kd"">local</span><span class=""p"">.</span><span class=""nx"">availability_replicas</span>
  <span class=""nx"">allocation_id</span> <span class=""p"">=</span> <span class=""nx"">aws_eip</span><span class=""p"">.</span><span class=""nx"">these</span><span class=""p"">[</span><span class=""nx"">count</span><span class=""p"">.</span><span class=""nx"">index</span><span class=""p"">].</span><span class=""nx"">id</span>
  <span class=""nx"">subnet_id</span>     <span class=""p"">=</span> <span class=""nx"">aws_subnet</span><span class=""p"">.</span><span class=""nx"">public</span><span class=""p"">[</span><span class=""nx"">count</span><span class=""p"">.</span><span class=""nx"">index</span><span class=""p"">].</span><span class=""nx"">id</span>
<span class=""p"">}</span>

<span class=""k"">resource</span> <span class=""s2"">""aws_route_table_association""</span> <span class=""s2"">""public""</span> <span class=""p"">{</span> <span class=""c1""># associate the public route table with each subnet</span>
  <span class=""nx"">count</span>          <span class=""p"">=</span> <span class=""kd"">local</span><span class=""p"">.</span><span class=""nx"">availability_replicas</span>
  <span class=""nx"">route_table_id</span> <span class=""p"">=</span> <span class=""nx"">aws_route_table</span><span class=""p"">.</span><span class=""nx"">public</span><span class=""p"">.</span><span class=""nx"">id</span>
  <span class=""nx"">subnet_id</span>      <span class=""p"">=</span> <span class=""nx"">aws_subnet</span><span class=""p"">.</span><span class=""nx"">public</span><span class=""p"">[</span><span class=""nx"">count</span><span class=""p"">.</span><span class=""nx"">index</span><span class=""p"">].</span><span class=""nx"">id</span>
<span class=""p"">}</span>
</code></pre>

</div>



<p>First, we define a route table for accepting universal traffic through our internet gateway (it's a minimal <code>nginx</code> image, we aren't going to be picky.) Then, we define a pair of subnets (one for each availability zone) for the public side of the translation. Once we define a NAT gateway to prepare for mapping from the public routes, we associate the (single) public route table across the pair of subnets.</p>

<p>The NAT element here is a critical component of the translation between public and private networks. Now that these are defined, we can cite them in our <em>private</em> route table later on, after which point the translation is complete.</p>

<h2>
  
  
  Load Balancing
</h2>

<p>With our public network defined, we can now set up a load balancer and related elements. Specifically, we will need a target group to define where load balancer traffic will be directed, and a listener that ties that group to the load balancer itself.<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight terraform""><code><span class=""k"">resource</span> <span class=""s2"">""aws_lb_target_group""</span> <span class=""s2"">""this""</span> <span class=""p"">{</span>
  <span class=""nx"">target_type</span>     <span class=""p"">=</span> <span class=""s2"">""ip""</span>
  <span class=""nx"">port</span>            <span class=""p"">=</span> <span class=""kd"">local</span><span class=""p"">.</span><span class=""nx"">container_port</span>
  <span class=""nx"">protocol</span>        <span class=""p"">=</span> <span class=""s2"">""HTTP""</span>
  <span class=""nx"">vpc_id</span>          <span class=""p"">=</span> <span class=""nx"">aws_vpc</span><span class=""p"">.</span><span class=""nx"">this</span><span class=""p"">.</span><span class=""nx"">id</span>
  <span class=""nx"">ip_address_type</span> <span class=""p"">=</span> <span class=""s2"">""ipv4""</span>

  <span class=""nx"">health_check</span> <span class=""p"">{</span>
    <span class=""nx"">healthy_threshold</span>   <span class=""p"">=</span> <span class=""mi"">5</span>
    <span class=""nx"">matcher</span>             <span class=""p"">=</span> <span class=""s2"">""200""</span>
    <span class=""nx"">path</span>                <span class=""p"">=</span> <span class=""s2"">""/""</span>
    <span class=""nx"">timeout</span>             <span class=""p"">=</span> <span class=""mi"">5</span>
    <span class=""nx"">unhealthy_threshold</span> <span class=""p"">=</span> <span class=""mi"">2</span>
  <span class=""p"">}</span>

  <span class=""nx"">stickiness</span> <span class=""p"">{</span>
    <span class=""nx"">enabled</span> <span class=""p"">=</span> <span class=""kc"">false</span>
    <span class=""nx"">type</span>    <span class=""p"">=</span> <span class=""s2"">""lb_cookie""</span>
  <span class=""p"">}</span>
<span class=""p"">}</span>

<span class=""k"">resource</span> <span class=""s2"">""aws_lb""</span> <span class=""s2"">""this""</span> <span class=""p"">{</span>
  <span class=""nx"">ip_address_type</span>    <span class=""p"">=</span> <span class=""s2"">""ipv4""</span>
  <span class=""nx"">load_balancer_type</span> <span class=""p"">=</span> <span class=""s2"">""application""</span>
  <span class=""nx"">subnets</span>            <span class=""p"">=</span> <span class=""nx"">aws_subnet</span><span class=""p"">.</span><span class=""nx"">public</span><span class=""p"">[*].</span><span class=""nx"">id</span>

  <span class=""nx"">security_groups</span> <span class=""p"">=</span> <span class=""p"">[</span>
    <span class=""nx"">aws_security_group</span><span class=""p"">.</span><span class=""nx"">this</span><span class=""p"">.</span><span class=""nx"">id</span><span class=""p"">,</span>
    <span class=""nx"">aws_vpc</span><span class=""p"">.</span><span class=""nx"">this</span><span class=""p"">.</span><span class=""nx"">default_security_group_id</span>
  <span class=""p"">]</span>
<span class=""p"">}</span>

<span class=""k"">resource</span> <span class=""s2"">""aws_lb_listener""</span> <span class=""s2"">""this""</span> <span class=""p"">{</span>
  <span class=""nx"">load_balancer_arn</span> <span class=""p"">=</span> <span class=""nx"">aws_lb</span><span class=""p"">.</span><span class=""nx"">this</span><span class=""p"">.</span><span class=""nx"">arn</span>
  <span class=""nx"">port</span>              <span class=""p"">=</span> <span class=""kd"">local</span><span class=""p"">.</span><span class=""nx"">container_port</span>
  <span class=""nx"">protocol</span>          <span class=""p"">=</span> <span class=""s2"">""HTTP""</span>

  <span class=""nx"">default_action</span> <span class=""p"">{</span>
    <span class=""nx"">type</span>             <span class=""p"">=</span> <span class=""s2"">""forward""</span>
    <span class=""nx"">target_group_arn</span> <span class=""p"">=</span> <span class=""nx"">aws_lb_target_group</span><span class=""p"">.</span><span class=""nx"">this</span><span class=""p"">.</span><span class=""nx"">id</span>
  <span class=""p"">}</span>
<span class=""p"">}</span>
</code></pre>

</div>



<p>Some key elements to note here: First, the AWS provider will occasionally complain about stickiness if it isn't defined for the target group explicitly (even if disabled). Second, there are many types of load balancer approaches for different use cases. Because the load balancer is making decisions about modifying traffic routing, it will need to be part of the security group we defined earlier for ingress/egress routes. This is an <em>application</em> load balancer; for other use cases, see the (always excellent) Terraform documentation for the AWS provider:</p>

<p><a href=""https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lb"">https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lb</a></p>

<h2>
  
  
  Private Networking
</h2>

<p>With our ingress route defined, we can now start defining our private subnet. Our objective here is, for each availability zone, to define a subnet across a suitable (non-overlapping) range of addresses, with their own internal routing table, that will not be accessible from the ""outside"" (public internet).<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight terraform""><code><span class=""k"">resource</span> <span class=""s2"">""aws_subnet""</span> <span class=""s2"">""private""</span> <span class=""p"">{</span>
  <span class=""nx"">count</span>                               <span class=""p"">=</span> <span class=""kd"">local</span><span class=""p"">.</span><span class=""nx"">availability_replicas</span>
  <span class=""nx"">cidr_block</span>                          <span class=""p"">=</span> <span class=""s2"">""10.0.</span><span class=""k"">${</span><span class=""nx"">count</span><span class=""p"">.</span><span class=""nx"">index</span> <span class=""o"">+</span> <span class=""mi"">1</span><span class=""k"">}</span><span class=""s2"">.0/24""</span>
  <span class=""nx"">vpc_id</span>                              <span class=""p"">=</span> <span class=""nx"">aws_vpc</span><span class=""p"">.</span><span class=""nx"">this</span><span class=""p"">.</span><span class=""nx"">id</span>
  <span class=""nx"">availability_zone</span>                   <span class=""p"">=</span> <span class=""k"">data</span><span class=""p"">.</span><span class=""nx"">aws_availability_zones</span><span class=""p"">.</span><span class=""nx"">this</span><span class=""p"">.</span><span class=""nx"">names</span><span class=""p"">[</span><span class=""nx"">count</span><span class=""p"">.</span><span class=""nx"">index</span><span class=""p"">]</span>
  <span class=""nx"">private_dns_hostname_type_on_launch</span> <span class=""p"">=</span> <span class=""s2"">""ip-name""</span>
<span class=""p"">}</span>

<span class=""k"">resource</span> <span class=""s2"">""aws_route_table""</span> <span class=""s2"">""private""</span> <span class=""p"">{</span>
  <span class=""nx"">count</span>  <span class=""p"">=</span> <span class=""kd"">local</span><span class=""p"">.</span><span class=""nx"">availability_replicas</span>
  <span class=""nx"">vpc_id</span> <span class=""p"">=</span> <span class=""nx"">aws_vpc</span><span class=""p"">.</span><span class=""nx"">this</span><span class=""p"">.</span><span class=""nx"">id</span>

  <span class=""nx"">route</span> <span class=""p"">{</span>
    <span class=""nx"">cidr_block</span>     <span class=""p"">=</span> <span class=""s2"">""0.0.0.0/0""</span>
    <span class=""nx"">nat_gateway_id</span> <span class=""p"">=</span> <span class=""nx"">aws_nat_gateway</span><span class=""p"">.</span><span class=""nx"">this</span><span class=""p"">[</span><span class=""nx"">count</span><span class=""p"">.</span><span class=""nx"">index</span><span class=""p"">].</span><span class=""nx"">id</span>
  <span class=""p"">}</span>
<span class=""p"">}</span>

<span class=""k"">resource</span> <span class=""s2"">""aws_route_table_association""</span> <span class=""s2"">""private""</span> <span class=""p"">{</span>
  <span class=""nx"">count</span>          <span class=""p"">=</span> <span class=""kd"">local</span><span class=""p"">.</span><span class=""nx"">availability_replicas</span>
  <span class=""nx"">route_table_id</span> <span class=""p"">=</span> <span class=""nx"">aws_route_table</span><span class=""p"">.</span><span class=""nx"">private</span><span class=""p"">[</span><span class=""nx"">count</span><span class=""p"">.</span><span class=""nx"">index</span><span class=""p"">].</span><span class=""nx"">id</span>
  <span class=""nx"">subnet_id</span>      <span class=""p"">=</span> <span class=""nx"">aws_subnet</span><span class=""p"">.</span><span class=""nx"">private</span><span class=""p"">[</span><span class=""nx"">count</span><span class=""p"">.</span><span class=""nx"">index</span><span class=""p"">].</span><span class=""nx"">id</span>
<span class=""p"">}</span>
</code></pre>

</div>



<p>Note, unlike the public networking (which ingested from a single route table for the internet gateway before splitting across availability zones), every element in the private network is replicated. We use some very handy tricks with <code>count.index</code>, to define everything from which NAT gateway to associate with to which range of addresses to include in our private subnet.</p>

<p>This is a good time to talk about classless inter-domain routing, or CIDR:</p>

<p><a href=""https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing"">https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing</a></p>

<p>You will typically see CIDR used to define a range of addresses by combining a traditional dotted-quad (""10.0.0.0"") with a subnet mask in the form of a number following a trailing slash. This number defines the length of the mask used to fix bytes from the <em>beginning</em> of the address. So, the bigger this number is, the bigger the mask, and the fewer addresses included in the range.</p>

<p>When we defined our CIDR block for our public network, we used the following expression:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight terraform""><code>  <span class=""nx"">cidr_block</span>                          <span class=""err"">=</span> <span class=""s2"">""10.0.10</span><span class=""k"">${</span><span class=""nx"">count</span><span class=""p"">.</span><span class=""nx"">index</span> <span class=""o"">+</span> <span class=""mi"">1</span><span class=""k"">}</span><span class=""s2"">.0/24""</span>
</code></pre>

</div>



<p>In other words, since we are using two replicas (as defined by <code>local.availability_replicas</code>), our public subnets will have a block of ""10.0.101.0/24"" and ""10.0.102.0/24"". In contrast, our private subnet used the following CIDR block expression:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight terraform""><code>  <span class=""nx"">cidr_block</span>                          <span class=""err"">=</span> <span class=""s2"">""10.0.</span><span class=""k"">${</span><span class=""nx"">count</span><span class=""p"">.</span><span class=""nx"">index</span> <span class=""o"">+</span> <span class=""mi"">1</span><span class=""k"">}</span><span class=""s2"">.0/24""</span>
</code></pre>

</div>



<p>This means our private subnets will have blocks of ""10.0.1.0/24"" and ""10.0.2.0/24"", respectively. Non-overlapping CIDR blocks for address allocation using built-in procedural expressions within Terraform! Told you it was neat.</p>

<h2>
  
  
  Elastic Containers
</h2>

<p>Finally, we're ready to define our container deployment! This starts with a cluster, which (in AWS land) is basically an abstract set of resources. We also need to define ""capacity providers"" that will satisfy the needs (or tasks) that cluster will execute. Here's the full set of ECS resources:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight terraform""><code><span class=""k"">resource</span> <span class=""s2"">""aws_ecs_cluster""</span> <span class=""s2"">""this""</span> <span class=""p"">{</span>
  <span class=""nx"">name</span> <span class=""p"">=</span> <span class=""s2"">""</span><span class=""k"">${</span><span class=""kd"">local</span><span class=""p"">.</span><span class=""nx"">project</span><span class=""k"">}</span><span class=""s2"">-cluster""</span>
<span class=""p"">}</span>

<span class=""k"">resource</span> <span class=""s2"">""aws_ecs_cluster_capacity_providers""</span> <span class=""s2"">""this""</span> <span class=""p"">{</span>
  <span class=""nx"">cluster_name</span>       <span class=""p"">=</span> <span class=""nx"">aws_ecs_cluster</span><span class=""p"">.</span><span class=""nx"">this</span><span class=""p"">.</span><span class=""nx"">name</span>
  <span class=""nx"">capacity_providers</span> <span class=""p"">=</span> <span class=""p"">[</span><span class=""kd"">local</span><span class=""p"">.</span><span class=""nx"">capacity_provider</span><span class=""p"">]</span>
<span class=""p"">}</span>

<span class=""k"">resource</span> <span class=""s2"">""aws_ecs_task_definition""</span> <span class=""s2"">""this""</span> <span class=""p"">{</span>
  <span class=""nx"">family</span>                   <span class=""p"">=</span> <span class=""s2"">""</span><span class=""k"">${</span><span class=""kd"">local</span><span class=""p"">.</span><span class=""nx"">project</span><span class=""k"">}</span><span class=""s2"">-tasks""</span>
  <span class=""nx"">cpu</span>                      <span class=""p"">=</span> <span class=""mi"">256</span>
  <span class=""nx"">memory</span>                   <span class=""p"">=</span> <span class=""mi"">512</span>
  <span class=""nx"">network_mode</span>             <span class=""p"">=</span> <span class=""s2"">""awsvpc""</span>
  <span class=""nx"">requires_compatibilities</span> <span class=""p"">=</span> <span class=""p"">[</span><span class=""kd"">local</span><span class=""p"">.</span><span class=""nx"">capacity_provider</span><span class=""p"">]</span>

  <span class=""nx"">container_definitions</span> <span class=""p"">=</span> <span class=""nx"">jsonencode</span><span class=""p"">([{</span>
    <span class=""nx"">essential</span> <span class=""p"">=</span> <span class=""kc"">true</span>
    <span class=""nx"">image</span>     <span class=""p"">=</span> <span class=""s2"">""</span><span class=""k"">${</span><span class=""kd"">local</span><span class=""p"">.</span><span class=""nx"">container_name</span><span class=""k"">}</span><span class=""s2"">:latest""</span>
    <span class=""nx"">name</span>      <span class=""p"">=</span> <span class=""kd"">local</span><span class=""p"">.</span><span class=""nx"">container_name</span>
    <span class=""nx"">portMappings</span> <span class=""p"">=</span> <span class=""p"">[{</span>
      <span class=""nx"">containerPort</span> <span class=""p"">=</span> <span class=""kd"">local</span><span class=""p"">.</span><span class=""nx"">container_port</span>
      <span class=""nx"">hostPort</span>      <span class=""p"">=</span> <span class=""kd"">local</span><span class=""p"">.</span><span class=""nx"">container_port</span>
    <span class=""p"">}]</span>
  <span class=""p"">}])</span>
<span class=""p"">}</span>

<span class=""k"">resource</span> <span class=""s2"">""aws_ecs_service""</span> <span class=""s2"">""this""</span> <span class=""p"">{</span>
  <span class=""nx"">cluster</span>         <span class=""p"">=</span> <span class=""nx"">aws_ecs_cluster</span><span class=""p"">.</span><span class=""nx"">this</span><span class=""p"">.</span><span class=""nx"">id</span>
  <span class=""nx"">desired_count</span>   <span class=""p"">=</span> <span class=""mi"">1</span>
  <span class=""nx"">launch_type</span>     <span class=""p"">=</span> <span class=""kd"">local</span><span class=""p"">.</span><span class=""nx"">capacity_provider</span>
  <span class=""nx"">name</span>            <span class=""p"">=</span> <span class=""s2"">""</span><span class=""k"">${</span><span class=""kd"">local</span><span class=""p"">.</span><span class=""nx"">project</span><span class=""k"">}</span><span class=""s2"">-service""</span>
  <span class=""nx"">task_definition</span> <span class=""p"">=</span> <span class=""nx"">aws_ecs_task_definition</span><span class=""p"">.</span><span class=""nx"">this</span><span class=""p"">.</span><span class=""nx"">arn</span>

  <span class=""nx"">lifecycle</span> <span class=""p"">{</span>
    <span class=""nx"">ignore_changes</span> <span class=""p"">=</span> <span class=""p"">[</span><span class=""nx"">desired_count</span><span class=""p"">]</span>
  <span class=""p"">}</span>

  <span class=""nx"">load_balancer</span> <span class=""p"">{</span>
    <span class=""nx"">container_name</span>   <span class=""p"">=</span> <span class=""kd"">local</span><span class=""p"">.</span><span class=""nx"">container_name</span>
    <span class=""nx"">container_port</span>   <span class=""p"">=</span> <span class=""kd"">local</span><span class=""p"">.</span><span class=""nx"">container_port</span>
    <span class=""nx"">target_group_arn</span> <span class=""p"">=</span> <span class=""nx"">aws_lb_target_group</span><span class=""p"">.</span><span class=""nx"">this</span><span class=""p"">.</span><span class=""nx"">arn</span>
  <span class=""p"">}</span>

  <span class=""nx"">network_configuration</span> <span class=""p"">{</span>
    <span class=""nx"">subnets</span> <span class=""p"">=</span> <span class=""nx"">aws_subnet</span><span class=""p"">.</span><span class=""nx"">private</span><span class=""p"">[*].</span><span class=""nx"">id</span>
  <span class=""p"">}</span>
<span class=""p"">}</span>
</code></pre>

</div>



<p>Note that we've encoded a Fargate assumption into our local variables. This can be easily changed to EC2 or Fargate Spot approaches, though there may be some side effects on your resource specifications and deployment patterns.</p>

<p>If you're coming from a Kubernetes or Docker-Compose background, what you're most likely interested in is the <code>container_definitions</code> block within our task definition. AWS encapsulates a lot of elements that we don't typically think about being separate. (This is probably already obvious if you've made it this far!) In this case, a ""task"" is something our cluster's service should do. Since we want it to host a web server (nginx container). this is where we define how that container will be deployed.</p>

<p>Once we've defined the cluster &amp; capacity providers, and identified our container deployment, we can tie everything together in the service our cluster will run. (This is roughly analogous to a ""service"" in the Kubernetes sense.) We tell AWS that the service will run on our specific cluster, with only one replica, with the given task definition. We also need to define associations to the load balancer and target group, as well as attaching it to our private network configuration.</p>

<h2>
  
  
  At Last
</h2>

<p>Eighteen resources later (not including replicas!), we've finally done it.</p>

<p>If you're like me, you may prefer to run <code>terraform plan</code> and <code>terraform apply</code> with each resource you add. This gives you a good incremental feeling for how resources are related together, and how ""heavy"" (e.g., startup time) they are. But if you haven't yet, now's the time:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight shell""><code><span class=""nv"">$ </span>terraform plan
...
<span class=""nv"">$ </span>terraform apply
</code></pre>

</div>



<p>With any luck, everything will deploy successfully! But you still don't know how to ""get"" (browse) into your service to see your precious <code>nginx</code> container. I find it is a big help to attach an output (in this case, from the load balancer DNS name) to report the final address you can plug into your browser. At the end of your Terraform file, add the following before you run <code>terraform plan</code> and <code>terraform apply</code> one last time.<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight terraform""><code><span class=""k"">output</span> <span class=""s2"">""url""</span> <span class=""p"">{</span>
  <span class=""nx"">value</span> <span class=""p"">=</span> <span class=""s2"">""http://</span><span class=""k"">${</span><span class=""nx"">aws_lb</span><span class=""p"">.</span><span class=""nx"">this</span><span class=""p"">.</span><span class=""nx"">dns_name</span><span class=""k"">}</span><span class=""s2"">""</span>
<span class=""p"">}</span>
</code></pre>

</div>



<p>Browse to that address, and you should see the basic <code>nginx</code> welcome page!</p>

<h2>
  
  
  Some Conclusions
</h2>

<p>Before I forget, the first thing you'll want to do is destroy your resources so Jeff Bezos doesn't take any more of your hard-earned money. Fortunately, we're using Terraform, so that's trivial:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight shell""><code><span class=""nv"">$ </span>terraform destroy
</code></pre>

</div>



<p>I've also uploaded this article and relevant <code>.TF</code> file content to the following repository, if you just want to clone and play with this solution or use it as a template:</p>

<p><a href=""https://github.com/Tythos/aws-tf-single"">https://github.com/Tythos/aws-tf-single</a></p>

<p>More to the point, though, a conclusion to our experiment. Why was this so painful? Similar activities in Azure or DigitalOcean will take one, maybe two, resources and will deploy at the drop of a hat. What's so special about AWS?</p>

<p>I've concluded that there are two reasons. The first is what I call ""first mover disadvantage"". There's no doubt AWS is the first and (to this day) biggest cloud provider in the commercial market. Along with defining the territory comes a risk of a) failing to streamline processes for developers across a variety of skill levels and backgrounds (not everyone is a network specialist or IT security professional!), and b) defining paradigms that made sense at first but soon became out of date or automated as new or better standards emerged and evolved.</p>

<p>The second reason is one that was nicely summarized by ChatGPT when I asked this question, although it wasn't a surprise:</p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--Rv_ZUF9y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cn6x3i6zdxrodibttayu.png""><img alt=""Image description"" height=""397"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--Rv_ZUF9y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cn6x3i6zdxrodibttayu.png"" width=""725"" /></a></p>

<p>And that's as good an observation as any.</p>"'https://dev.to/tythos/aws-terraform-for-single-containers-5dkf'https://res.cloudinary.com/practicaldev/image/fetch/s--Tu4wo8Bf--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x940ea11q7va5xwj2cpk.png'"['https://res.cloudinary.com/practicaldev/image/fetch/s--AFiofawr--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/908384/d467baa1-58e6-4105-9bc3-232dc5b820b7.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--IiURlZIZ--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/193513/03a87f5f-e188-46f8-a1d1-c9fb3b876007.jpg', 'https://dev-to-uploads.s3.amazonaws.com/uploads/logos/resized_logo_UQww2soKuUsjaOGNB38o.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--1T0GdWVX--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297560/fb0c24f6-3714-4048-aef4-d8855d3c341f.jpeg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--OOwzaeSF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_775/https://res.cloudinary.com/practicaldev/image/fetch/s--XIICQ_e4--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2ja8tymo646or3emo07.gif', 'https://res.cloudinary.com/practicaldev/image/fetch/s--Rv_ZUF9y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cn6x3i6zdxrodibttayu.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--Sdv6w4m5--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297560/fb0c24f6-3714-4048-aef4-d8855d3c341f.jpeg', 'https://dev.to/assets/raised-hands-74b2099fd66a39f2d7eed9305ee0f4553df0eb7b4f11b01b6b1b499973048fe5.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--pcSkTMZL--/c_limit,f_auto,fl_progressive,q_80,w_190/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--wSa6z_hR--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/248623/3bc01c08-2153-41ed-8d52-c8845f3a917a.jpeg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--EflgEmF3--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/744579/e36b8e07-2ecf-447c-b9a1-9ce51865b599.jpeg', 'https://dev.to/assets/exploding-head-daceb38d627e6ae9b730f36a1e390fca556a4289d5a41abb2c35068ad3e2c4b5.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--HZG0eYc_--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/823908/263a2e26-6494-4e59-bd8f-7891a5240288.png', 'https://dev.to/assets/loading-ellipsis-b714cf681fd66c853ff6f03dd161b77aa3c80e03cdc06f478b695f42770421e9.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s---8Mori0o--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/136849/0b73c223-1000-41cb-958a-507edaee17fc.jpeg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--y1cpK7WH--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/908384/d467baa1-58e6-4105-9bc3-232dc5b820b7.png', 'https://dev.to/assets/sparkle-heart-5f9bee3767e18deb1bb725290cb151c25234768a0e9a2bd39370c382d02920cf.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--tRobRUoW--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/823908/263a2e26-6494-4e59-bd8f-7891a5240288.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--RmY55OKL--/c_limit,f_auto,fl_progressive,q_auto,w_256/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--ocIGp9xf--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x940ea11q7va5xwj2cpk.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--Tu4wo8Bf--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x940ea11q7va5xwj2cpk.png', 'https://dev.to/assets/heart-plus-active-9ea3b22f2bc311281db911d416166c5f430636e76b15cd5df6b3b841d830eefa.svg', 'https://dev.to/assets/fire-f60e7a582391810302117f987b22a8ef04a2fe0df7e3258a5f49332df1cec71e.svg', 'https://dev.to/assets/multi-unicorn-b44d6f8c23cdd00964192bedc38af3e82463978aa611b4365bd33a0f1f4f3e97.svg']"
6'MHYULMFC8'Mulheres na Tecnologia'"<p>Nesta celebração do <a href=""https://dev.to/wecoded"">WeCoded</a>, quero aproveitar para compartilhar com todes, diversas mulheres que mudaram o mundo da tecnologia e que continuam atuando de maneira inspiradora e excepcional, mostrando a área pode ser o nosso lugar.</p>

<p>Essa lista foi extraída de um projeto que organizo dentro do GitHub e pode ser encontrado <a href=""https://github.com/morgannadev/mulherestecnologia/"">aqui</a>.</p>

<p>O projeto é dinâmico, então este artigo é uma ""foto"" de como a lista está até este momento. Novas mulheres são adicionadas com frequência, então não deixe de acompanhar o projeto e deixar sua estrela para apoiar. </p>

<h2>
  
  
  [0] Ada Lovelace
</h2>

<p>Nascida como Augusta Ada Byron King. Viveu entre 1815 e 1852. Foi a primeira pessoa (e não apenas a primeira mulher) a desenvolver um algoritmo que poderia ser implementado em um computador. Foi matemática, primeira pessoa programadora, poetisa, cientista da computação, inventora, tradutora, escritora e engenheira.</p>

<h2>
  
  
  [1] Grace Hopper
</h2>

<p>Grace Murray Hopper, viveu entre 1906 e 1992. Foi a criadora da linguagem de programação de alto nível Flow-Matic, utilizada como base para a criação de outra linguagem importante, o COBOL. Também foi uma das primeiras programadoras do computador Mark I. Foi almirante e analista de sistemas da Marinha dos Estados Unidos. Antes disso, conquistou o Ph.D. em matemática na Universidade de Yale e foi professora de matemática na Faculdade Vassar.</p>

<h2>
  
  
  [2] Margaret Hamilton
</h2>

<p>Margaret Heafield Hamilton, nasceu em 1936. É cientista da computação, engenheira de software e empresária estadunidense. Foi diretora da Divisão de Software no Laboratório de Instrumentação do MIT, que desenvolveu o programa de voo usado no projeto Apollo 11, a primeira missão tripulada à Lua. O software de Hamilton impediu que o pouso na Lua fosse abortado.</p>

<h2>
  
  
  [3] Karen Jones
</h2>

<p>Karen Spärck Jones, viveu entre 1935 e 2007. Foi cientista da computação e responsável pela criação do conceito da frequência inversa de documentos, uma tecnologia que sustenta os mecanismos de buscas mais modernos. É conhecida principalmente por ser a pioneira da ciência da computação para trabalhos combinando estatísticas e linguísticas, e uma defensora das mulheres neste segmento.</p>

<h2>
  
  
  [4] Irmã Mary Keller
</h2>

<p>Irmã Mary Kenneth Keller, viveu entre 1913 e 1985. Foi freira e uma grande cientista da computação. Foi a primeira mulher a receber um doutorado na área. Sua tese chama-se Inferência indutiva em padrões gerados por computador. Participou do desenvolvimento da linguagem de programação BASIC e também era defensora da inclusão e do envolvimento de mulheres na ciência da computação.</p>

<h2>
  
  
  [5] Dorothy Vaughan
</h2>

<p>Dorothy Johnson Vaughan, viveu entre 1910 e 2008. Foi uma matemática estadunidense, que trabalhou na National Advisory Committee for Aeronautics (NACA), a agência predecessora da NASA. Em 1949, ela foi a primeira mulher negra a ser promovida chefe de departamento na NASA. Ela lutava pela inserção das mulheres negras em todas as áreas de pesquisa. Aprendeu FORTRAM e ensinou outras mulheres, garantindo seus empregos, além de atender aos requisitos da equipe de computação da NASA.</p>

<h2>
  
  
  [6] Carol Shaw
</h2>

<p>Carol Shaw, nasceu em 1955. Ela é uma engenheira computacional conhecida por ser a primeira mulher desenvolvedora de jogos eletrônicos no mundo, que trabalhou na empresa Atari. Seu primeiro jogo criado foi o 3D Tic-Tac-Toe e sua entrada nessa indústria, abriu portas para outras mulheres também. Hoje, Carol é aposentada, mas realiza diversos trabalhos em organizações relacionadas à tecnologia.</p>

<h2>
  
  
  [7] Mulheres do ENIAC
</h2>

<p>Foram 6: Betty Holberton, Marlyn Meltzer, Frances Spence, Kathleen Antonelli, Ruth Teitelbaum e Adele Goldstine. Eram responsáveis pelas configurações do ENIAC para realizar diversos cálculos. Também criaram protocolos utilizados até hoje, o teclado numérico para facilitar a programação, entre outras coisas.</p>

<h2>
  
  
  [8] Betty Holberton
</h2>

<p>Frances Elizabeth Holberton, viveu entre 1917 e 2001. Foi uma das programadoras originais do ENIAC. Foi cientista da computação, programadora e matemática. Enquanto trabalhava no ENIAC, Betty teve várias ideias, especialmente à noite, o que virou uma piadinha entre as programadoras de que Betty resolvia vários problemas dormindo. Trabalhou no desenvolvimento do COBOL e FORTRAN com Hopper.</p>

<h2>
  
  
  [9] Radia Perlman
</h2>

<p>Radia Joy Perlman, nasceu em 1951. É cientista da computação, projetista de software e engenheira de redes. É considerada ""mãe da Internet"" por sua invenção do protocolo Spanning Tree (STP), fundamental para a operação de pontes de rede. Também contribuiu na criação dos protocolos de roteamento link-state. Inventou o protocolo TRILL para corrigir problemas das spanning trees. Atualmente, ela é funcionária da Dell EMC.</p>

<h2>
  
  
  [10] Anne Aaron
</h2>

<p>Anne Aaron, é engenheira e diretora de algoritmos de vídeo da Netflix. Foi bacharel em Física e Engenharia da Computação, além de ser PhD em Engenharia Elétrica. Trabalhou nas empresas Modulus Video, Dyyno, Cisco Systems. Foi reconhecida como uma das 43 engenheiras mais poderosas em 2017 pela Business Insider. Em 2018 foi reconhecida ""Top 50 mulheres da América em Tecnologia"" pela Forbes.</p>

<h2>
  
  
  [11] Jean Sammet
</h2>

<p>Jean E. Sammet, viveu entre 1928 e 2017. Foi cientista da computação estadunidense que desenvolveu a linguagem FORMAC em 1962. Trabalhou por 27 anos para a IBM onde desenvolveu o FORMAC, a primeira linguagem de computador amplamente utilizada para manipulação simbólica de fórmulas matemáticas. Ela foi também um dos membros da subcomissão que criou a linguagem COBOL.</p>

<h2>
  
  
  [12] Rózsa Péter
</h2>

<p>Rózsa Péter viveu entre 1905 e 1977. Ela começou estudando química, mas se formou como matemática, chegando ao doutorado. Desenvolveu seu próprio modo de acessar as funções recursivas e contribuiu significativamente com a teoria das mesmas. Foi proibida de lecionar por ser judia e foi por pouco tempo presa em Budapeste. Em 1973 foi eleita membro da Academia de Ciências da Hungria.</p>

<h2>
  
  
  [13] Michelle Simmons
</h2>

<p>Michelle Yvonne Simmons, nasceu em 1967. É professora de Física Quântica, diretora do Centro de Excelência em Computação Quântica e Tecnologia de Comunicação do Australian Research Council. Reconhecida internacionalmente como pioneira em eletrônica atômica. Editora-chefe da Quantum Information, um jornal acadêmico que publica artigos no campo emergente da ciência da informação quântica. Fundou a primeira empresa de computação quântica. Ela está literalmente liderando a corrida para construir o primeiro computador quântico. É apaixonada por incentivar as meninas a seguirem uma carreira em ciência e tecnologia. ""Ver as mulheres em funções de liderança e competindo internacionalmente é importante. Isso dá a elas a sensação de que tudo é possível"".</p>

<h2>
  
  
  [14] Hedy Lamarr
</h2>

<p>Hedwig Eva Maria Kiesler, viveu entre 1914 e 2000. Foi atriz, mas tornou-se também inventora. Por causa dos acontecimentos com a Segunda Guerra Mundial, sentiu-se ameaçada por suas raízes judias e algumas alianças que seu marido tinha. Em 1940 ela patenteou com seu amigo George Antheil, um aparelho de interferência em rádio para despistar radares nazistas. Contudo, apenas em 1962 as forças armadas começaram a utilizar, que foi quando a patente expirou. Em 1998, o aparelho serviu de base para a evolução da comunicação: telefonia celulares, a conexão Wi-Fi, satélites e o GPS.</p>

<h2>
  
  
  [15] Barbara Liskov
</h2>

<p>Barbara Jane Huberman, nasceu em 1939. É cientista da computação e conhecida por criar o Princípio da Substituição de Liskov, por ser a primeira mulher a obter um PhD em Ciência da Computação nos Estados Unidos e por inventar o Tipo Abstrato de Dado. É professora no Depto de Engenharia Elétrica e Ciência da Computação no MIT. É autora de mais de 140 artigos científicos. Escreveu duas linguagens de programação e metodologia de software e design de linguagem que levaram à programação orientada a objetos.</p>

<h2>
  
  
  [16] Frances Allen
</h2>

<p>Frances Allen, viveu entre 1932 e 2020. Mestre em Matemática. Pioneira no campo de otimização de compiladores. Suas realizações incluem compiladores, otimização de códigos e computação paralela. Também teve um trabalho de inteligência em linguagens de programação e códigos de segurança para a National Security Agency. Foi a primeira IBM Fellow e em 2006 tornou-se a primeira mulher a ganhar o Prêmio Turing.</p>

<h2>
  
  
  [17] Cynthia Breazeal
</h2>

<p>Cynthia Lynn Breazeal, nasceu em 1967. Cientista especialista em robótica pelo MIT. Pioneira da robótica social e da interação humano-robô. Inclusive, projetou um robô chamado JIBO que foi usado para investigar a cognição social e as habilidades da Teoria da Mente.</p>

<h2>
  
  
  [18] Mariéme Jamme
</h2>

<p>Mariéme Jamme, nasceu em 1974. Nascida no Senegal e ativista da tecnologia. Em 2016, ela fundou a iniciativa iamtheCODE e faz parte do conselho da World Wide Web Foundation. Apoiar globalmente meninas e mulheres jovens e promover os Objetivos de Desenvolvimento Sustentável da ONU. Um dos objetivos é 1 milhão de meninas e mulheres programadoras até 2030.</p>

<h2>
  
  
  [19] Sophie Wilson
</h2>

<p>Sophie Wilson, nasceu em 1957, mulher trans, cientista da computação. Foi a arquiteta chefe do processador Firepath da Broadcom. Hoje é diretora da empresa. Projetou o conjunto de instruções para um dos primeiros microprocessadores RISC, o ARM, que se tornou um dos mais bem sucedidos casos de propriedade intelectual, ainda usado em smartphones. Foi eleita uma das 15 mulheres mais importantes da história da tecnologia.</p>

<h2>
  
  
  [20] Adele Goldberg
</h2>

<p>Adele Goldberg, nasceu em 1945. Pioneira em GUI (Graphical User Interface). Desenvolveu o smalltalk-80, linguagem que introduziu um ambiente de janelas sobrepostas em telas de exibição gráfica que permitia aos usuários interagirem com o computador por meio de uma interface. O sistema foi apresentado a Steve Jobs que mais tarde confirmou que o desenvolvimento da tecnologia inspirou o que viria a ser a Apple.</p>

<h2>
  
  
  [21] Deborah Estrin
</h2>

<p>Deborah Estrin, nasceu em 1959. PhD em Engenharia Elétrica e Ciência da Computação MIT. Professora de Ciência da Computação na Cornell Tech, onde ocupa a cadeira do fundador R. Tishman e também atua como reitora. Considerada pioneira no desenvolvimento de sistemas móveis e sem fio para coletar e analisar dados em tempo real, além de ser reconhecida pelas suas pesquisas de tecnologias para cuidados e saúde imersiva.</p>

<h2>
  
  
  [22] Coraline Ada Ehmke
</h2>

<p>Coraline Ada Ehmke, mulher trans, engenheira de software. Criadora do Contributor Covenant para comunidades de código aberto, da Hippocratic License que proíbe o uso de código aberto para violações de direitos humanos, da Organization for Ethical Source uma organização que capacita devs de código aberto. Sempre ativa em falas e ações sobre diversidade, a igualdade e a justiça.</p>

<h2>
  
  
  [23] Mave Houston
</h2>

<p>Mave Houston, aprendeu a programar aos 8 anos. PhD em CC e Engenharia de Software. Head de UXR na Disney Streaming. Palestrante do evento Lesbians Who Tech. Líder de design com mais de 13 anos de experiência. Fundadora da Capital One USERLabs, o primeiro programa de pesquisa de UX da Capital One. Criou e liderou um amplo Programa de Pesquisa do Usuário que tornou a pesquisa de design fácil e acessível para todos.</p>

<h2>
  
  
  [24] Divya Manian
</h2>

<p>Divya Manian é pioneira e defensora do open web standards. Co-criadora do framework HTML5 Boilerplate, membro do W3C, escritora de livros de tecnologia. Já trabalhou no Opera, na Adobe e hoje trabalha na Apple. Junto com 8 mulheres, escreveu uma carta para a indústria de tecnologia para descrever a discriminação generalizada. Foi coberto no Washington Post, NYTimes, PBS, CBS, Elle e outros.</p>

<h2>
  
  
  [25] Lynn Conway
</h2>

<p>Lynn Conway, nasceu em 1938. Cientista da computação, engenheira elétrica, inventora e ativista transgênera. Inventou o manuseio de instruções dinâmicas generalizadas, usado na execução fora de ordem por processadores para desempenho. Quando criança, construiu um telescópio refletor de 6 polegadas. Teve uma tentativa de transição de gênero em 57/58 que falhou devido às questões médicas da época. Trabalhou na IBM.</p>

<h2>
  
  
  [26] Sophie Alpert
</h2>

<p>Sophie Alpert, mulher trans que foi engenheira de tecnologia do Facebook e uma das líderes do projeto de código aberto React dentro da empresa.</p>

<h2>
  
  
  [27] Svetlana Isakova
</h2>

<p>Svetlana Isakova trabalhou na linguagem Kotlin na JetBrains. Ela é co-autora dos livros 'Kotlin em ação' e 'AtomicKotlin' e agora é uma Developer Advocate da JetBrains, onde passa seu tempo ensinando Kotlin e falando em conferências em todo o mundo. Seu twitter é: sveta_isakova.</p>

<h2>
  
  
  [28] Ekaterina Petrova
</h2>

<p>Ekaterina Petrova é Developer Advocate na JetBrains e produz vários conteúdos sobre Kotlin e também sobre KMM (Kotlin Multiplatform Mobile).</p>

<h2>
  
  
  [29] Edith Clarke
</h2>

<p>Edith Clarke, nasceu em 1883. Formou-se em matemática e astronomia em 1908 e depois estudou Engenharia Civil. Em 1919 tornou-se a primeira mulher a conquistar um Mestrado no Departamento de Engenharia Elétrica e Ciência da Computação do MIT, tornando-se a primeira engenheira elétrica do país. Dois anos depois registrou sua primeira patente: uma calculadora gráfica, que melhorava os métodos para solucionar problemas de transmissão de energia elétrica.</p>

<h2>
  
  
  [30] Joan Clarke
</h2>

<p>Joan Clarke, 1917 — 1996. Em Cambridge formou-se como primeira da classe em matemática. Porém, o título pleno de matemática lhe foi negado, pois até o ano de 1948 somente homens podiam receber tal título. Foi uma criptoanalista inglesa, mais conhecida pelo seu trabalho como decodificadora de mensagens nazistas durante a II Guerra Mundial que possibilitou salvar inúmeras vidas. Ainda há um selo de confidencialidade sobre seu trabalho para o governo, então boa parte de seus feitos ainda não são conhecidos.</p>

<h2>
  
  
  [31] Mary Winston Jackson
</h2>

<p>Mary Winston Jackson, formou-se no Hampton Institute em 1942, onde estudou matemática e física. Foi autora e co-autora de diversos relatórios de pesquisa e destacou-se na NASA, onde começou a trabalhar em 1951. Para poder continuar seus experimentos na Insitituição, teve que cursar enegenharia, sendo a primeira mulher negra engenheira da Nasa.</p>

<h2>
  
  
  [32] Kathy Kleiman
</h2>

<p>Kathy Kleiman fundadora do projeto de programadoras ENIAC, historiadora e autora. Sua tese de último ano exploraram a história dass programadoras ENIAC e muitas outras mulheres que foram pioneiras na programação inicial e software. Decidiu registrar suas histórias, buscar reconhecimento por suas realizações e produzir um documentário para contar sua dramática história. <a href=""http://eniacprogrammers.org/"">http://eniacprogrammers.org/</a></p>

<h2>
  
  
  [33] Cláudia Medeiros
</h2>

<p>Cláudia Maria Bauzer Medeiros é doutora em Ciência da Computação pela Universidade de Waterloo (Canadá). Foi presidente da Sociedade Brasileira de Computação (SBC) de 2004 a 2007. Atualmente é professora da Unicamp, onde fundou o Laboratory of Information Systems (LIS), e professora visitante da Universidade Paris-Dauphine, onde 2015 conquistou o título de Dr Honoris Causa. Tem diversos reconhecimentos internacionais por suas pesquisas e por fomentar a participação de mulheres na área de TI.</p>

<h2>
  
  
  [34] Clarisse Sieckenius de Souza
</h2>

<p>Clarisse S. de Souza veio da área de Linguística. Pesquisou Linguística Computacional em seu doutorado, o que iniciou seu caminho na área de tecnologia. Hoje, ela estuda a IHC e suas características empregadas no desenvolvimento e uso de sistemas de software. É professora e já foi escolhida uma das 54 mulheres de todos os tempos da área de Ciência da Computação.</p>

<h2>
  
  
  [35] Iana Chan
</h2>

<p>Iana é jornalista e sempre foi apaixonada por tecnologia. Desde quando era mais nova, tinha um blog e já gostava de mexer nos códigos para deixa-lo do jeito que queria. Ela é uma inspiração para muitas mulheres. CEO e Fundadora do Programaria, uma iniciativa maravilhosa para promover a inclusão de mulheres na tecnologia.</p>

<h2>
  
  
  [36] Marissa Mayer
</h2>

<p>Marissa Ann Mayer possui doutorado em Ciência da Computação e seu trabalho acadêmico lhe rendeu diversas patentes na IA. Foi a primeira mulher engenheira do Google e chegou a ser vice-presidente de serviços geográficos. Integrou a diretoria do Yahoo, mas saiu deste cargo após a compra de outra empresa. Hoje, atua em sua startup focada em IA chamada Lumi Labs.</p>

<h2>
  
  
  [37] Shirley Ann Jackson
</h2>

<p>Shirley Ann Jackson. PhD em física nuclear pelo MIT, primeira mulher negra a receber o título de doutora no mesmo instituto. Primeira mulher negra a se tornar chefe da US NRC (uma comissão regulatória nuclear). Suas pesquisas permitiram avanços em telecomunicações, como o fax portátil, cabos de fibra óptica, a tecnologia que existe por trás da identificação de chamadas, entre outros.</p>

<h2>
  
  
  [38] Nina Da Hora
</h2>

<p>Nina Da Hora. Cientista da Computação pela PUCRio. Pesquisadora na área de Pensamento Computacional. Criadora das iniciativas Computação da Hora e o Ogunhê sobre educação. Divulgadora científica e HackerAntirracista. <a href=""https://www.ninadahora.dev"">https://www.ninadahora.dev</a></p>

<h2>
  
  
  [39] Mária Telkes
</h2>

<p>Mária Telkes (1900 - 1995). Cientista e inventora que trabalhou com tecnologias de energia solar. Ela então estudou na Universidade de Budapeste, graduando-se como físico-química em 1920 e PhD em 1924. Telkes é considerada uma das fundadoras dos sistemas de armazenamento térmico solar, o que lhe valeu o apelido de ""Rainha do Sol"".</p>

<h2>
  
  
  [40] Mary Allen Wilkes
</h2>

<p>Mary Allen Wilkes, advogada e programadora, conhecida por seu trabalho com o computador LINC, agora reconhecido por muitos como o primeiro ""computador pessoal"" do mundo. Ela quem desenvolveu o sistema operacional LAP6, presente no computador</p>

<h2>
  
  
  [41] Roberta Williams
</h2>

<p>Roberta Williams, designer de jogos de computador muito respeitada e também a jogadora mulher mais influente de seu tempo. Teve grande contribuição para os campos de design de jogos, produção, conteúdo e som. Junto ao marido, fundou a empresa On-Line Systems, que mais tarde tornou-se a Sierra. Algumas de suas criações foram King's Quest, The Dagger of Amon Ra e Phantasmagoria.</p>

<h2>
  
  
  [42] Susan Kare
</h2>

<p>Susan Kare designer que influenciou a iconografia da computação. Começou a trabalhar na Apple em 1982, criando a interface gráfica para o SO do primeiro Macintosh. Criou ícone de salvar, lixeira, alerta, relógio e paint etc. Projetou a primeira fonte com espaçamento criado para o meio digital, com o objetivo de ser tão legível quanto as letras nas páginas de livro. Hoje trabalha no Pinterest.</p>

<h2>
  
  
  [43] Juliana Freitag Borin
</h2>

<p>Juliana Borin, PhD em Ciência da Computação, escritora da revista SBC Horizontes e professora da UNICAMP. Estuda comunicação sem fio e IoT. Coordena Android Smart Girls, iniciativa que pretende estimular a formação de mulheres em STEM.</p>

<h2>
  
  
  [44] Timnit Gebru
</h2>

<p>Timnit Gebru é uma cientista da computação que trabalha com polarização algorítmica, mineração de dados e ética para a inteligência artificia. Nascida na Etiópia, se mudou para o EUA sob asilo político, se graduou em Stanford e trabalhou para empresas como Apple, Microsoft e Google. Gebru desenvolve estudos e pesquisas visando focadas na ética da inteligência artificial.</p>

<h2>
  
  
  [45] Valerie Thomas
</h2>

<p>Cientista e analista de dados, inventou o transmissor de ilusão, patenteado em 1980. Responsável pelo desenvolvimento dos sistemas de processamento de imagem em formatos de mídia digital usados nos primeiros anos do programa de satélites da NASA.</p>

<h2>
  
  
  [46] Gladys Mae West
</h2>

<p>Matemática que teve papel fundamental na criação do GPS. Programadora e diretora de um projeto de processamento de dados usados em análises de satélites.</p>

<h2>
  
  
  [47] Marian Rogers Croak
</h2>

<p>VP de engenharia do Google. Foi VP de pesquisa e desenvolvimento da AT&amp;T. Foi introduzida no Hall da Fama dos Inventores por sua patente sobre a tecnologia VoIP.</p>

<h2>
  
  
  [48] Victória Corotto
</h2>

<p>Travesti, ativista LGBTQIAP+, desenvolvedora front-end e também atua com gestão de pessoas no projeto educaTRANSforma, onde começou sua carreira sendo uma das primeiras alunas.</p>

<h2>
  
  
  [49] Ana Gouvêa
</h2>

<p>Pessoa cega envolvida com diversidade e acessibilidade. Trabalha em prol da acessibilidade na sua rotina no PicPay como Accessibility Program Manager. Formou-se como UX Writing. Voluntária na Ladies That UX.</p>

<h2>
  
  
  [50] Joyce Rocha
</h2>

<p>Pessoa autista neurodivergente. UX Research e Designer de Acessibilidade. Consultora em acessibilidade digital e ativista pelos direitos da comunidade.</p>

<h2>
  
  
  [51] Geisa Farini
</h2>

<p>Pessoa cega. Produtora de conteúdo digital. Youtuber, palestrante, cantora. Também atua como Engenheira de Software no Itaú.</p>

<h2>
  
  
  [52] Erica Riello
</h2>

<p>Pessoa surda. Trabalha como Software Engineer na empresa Uber. Tem experiência em sistemas distribuídos, experimentação e desenvolvimento de aplicativos Android. Accessibility advocate.</p>

<h2>
  
  
  [53] Andreza Rocha
</h2>

<p>CEO e fundadora da iniciativa AfrOya Tech Hub. Tem participação significativa em iniciativas voltadas à diversidade e inclusão na tecnologia, principalmente as comunidades.</p>

<h2>
  
  
  [54] Angelica Ross
</h2>

<p>Angelica Ross é uma atriz famosa por seus papéis em Pose e American Horror Story, porém além de suas habilidades de atuação ela é uma programadora autodidata. Em 2014, ela fundou a TransTech Social Enterprises que é uma incubadora de Talentos LGBTQ com foco em capacitar economicamente as pessoas transgênerona sociedade. Os membros da TransTech também têm acesso à treinamento, workshops, equipamentos profissionais, espaço de escritório, orientação e oportunidades de trabalho, ou seja, todos os recursos que podem ajudá-los a construir uma carreira em tecnologia. <a href=""https://missross.com/about/"">https://missross.com/about/</a></p>

<h2>
  
  
  [55] Rebecca Parsons
</h2>

<p>Responsável por conduzir a excelência em tecnologia da Thoughtworks. Forte defensora da diversidade e inclusão na indústria, especialmente aumentando o número de mulheres na codificação. Fez parte dos conselhos da CodeChix, AnitaB.org e da Agile Alliance, e foi consultora da Women Who Code.</p>

<h2>
  
  
  [56] Roberta Arcoverde
</h2>

<p>Roberta Arcoverde é Cientista da Computação formada pela UFPE e Diretora de Engenharia na Stack Overflow em 2022 gerenciando o time do qual fez parte como desenvolvedora durante quase 8 anos. Ela também é podcaster e tem várias participações em podcasts. <a href=""https://rla4.com/"">https://rla4.com/</a></p>

<h2>
  
  
  [57] Katherine Johnson
</h2>

<p>Katherine Johnson, além de concluir aos 18 anos as suas primeiras graduações, em Matemática e Francês, ainda foi a primeira mulher negra a ingressar em um curso de pós-graduação na universidade West Virginia State. Suas ideias fizeram com que trabalhasse na NACA, um órgão que, futuramente, viria a se tornar a NASA. Uma de suas principais contribuições foi o cálculo de trajetória de voo para a missão de primeiro pouso na lua, feito pelo Apolo 11. Uma parte de sua história pode ser assistida no filme “Estrelas Além do Tempo”.</p>

<h2>
  
  
  [58] Camila Laranjeira
</h2>

<p>Mila Laranjeira faz douturado de Ciência da Computação pela UFMG (Universidade Federal de Minas Gerais), é divulgadora ciêntífica no canal Peixe Babel, em que fala sobre Inteligência artificial, linguagens de programação e tudo que envolve o mundo tecnológica com a Vivi Mota, e também cria conteúdo e apresenta alguns quadros no Nerdologia, apresentando a tecnologia com conceitos do cotidiano e relacionando com temas sociais.</p>

<h2>
  
  
  [59] Kathleen Booth
</h2>

<p>Kathleen Hylda Valerie Booth (1922 – 2022), cientista da computação e matemática que escreveu a primeira linguagem assembly e projetou o assembler e o autocode para os primeiros sistemas de computador no Birkbeck College, Universidade de Londres. Ajudou a projetar três máquinas diferentes, incluindo o ARC (Automatic Relay Calculator), SEC (Simple Electronic Computer) e APE(X)C. Chegou também a trabalhar como pesquisadora, professora e publicou seus materiais com artigos e também um livro.</p>

<h2>
  
  
  [60] Loiane Groner
</h2>

<p>Loiane Groner possui mais de 10 anos de experiência em TI. Já palestrou por vários eventos no Brasil e Estados Unidos. Trabalha como desenvolvedora e analista nos EUA, está sempre compartilhando conhecimento, faz vídeos e diversos materiais gratuitos sobre Angular, Java e muitos outros assuntos. Além disso, é autora de vários livros e participa ativamente dessas comunidades. É possível acompanhar seu conteúdo pelo site loiane.training.</p>

<h2>
  
  
  [61] Muriel Tramis
</h2>

<p>Muriel Tramis, nascida em 1958, é designer de videogame. Foi a primeira mulher negra designer de jogos. Escreveu e dirigiu diversos jogos de aventura como Méwilo, Freedom: Rebels in the Darkness, Geisha, Fascination, Lost in Time e Urban Runner na Coktel Vision. Co-criou a série Gobliiins com Pierre Gilhodes. Desde 2003 dirige a Avantilles, especialista em aplicações 3D em tempo real para a web.</p>

<h2>
  
  
  [62] Rebecca Heineman
</h2>

<p>Rebecca Ann Heineman é uma designer e programadora de videogames. Considerada pioneira no mundo dos jogos. Foi membro fundadora das empresas de videogame Interplay Productions, Logicware, Contraband Entertainment e Olde Sküül. Ela é diretora executiva da Olde Sküül desde 2013.</p>

<h2>
  
  
  [63] Cynthia Zanoni
</h2>

<p>Teve o primeiro contato com a tecnologia aos 8 anos. Aos 14 anos, ganhou os primeiros livros e CDs sobre sistema operacional, montagem de computadores e programação. Hoje é fundadora da organização WoMakersCode. Trabalha na Microsoft como Partner Technology Strategist e Cloud Advocate. É palestrante sobre tecnologia e inovação, também ativa na comunidade há vários anos.</p>

<h2>
  
  
  [64] Mary Ann Horton
</h2>

<p>Pioneira da Usenet e da Internet. Contribuiu para o Berkeley UNIX, incluindo o editor vi e o banco de dados terminfo. Criou a primeira ferramenta de anexo binário de e-mail. Solicitou (e conseguiu) a primeira linguagem inclusiva para transgêneros adicionada à Política de Igualdade de Emprego em uma grande empresa americana. É cientista da computação, educadora e ativista transgênero.</p>

<h2>
  
  
  [65] Elizebeth Smith Friedman
</h2>

<p>Foi uma criptoanalista e autora americana que decifrou códigos em ambas as guerras mundiais e ajudou a resolver casos de contrabando internacional durante a Lei Seca. Foi reconhecida como ""a primeira mulher criptoanalista da América"".</p>

<h2>
  
  
  [66] Nina Silva
</h2>

<p>Executiva e especialista em tecnologia e inovação. Uma das 100 pessoas afrodescendentes com menos de 40 anos mais influentes do mundo (chancelada pela ONU). Fundou o Movimento Black Money e D’Black Bank tendo se especializado em finanças, negócios e web3.0. É investidora anjo, palestrante e empresária. Em 2021 foi eleita a Mulher Mais Disruptiva do mundo pela Women in Tech Global Awards.</p>

<h2>
  
  
  [67] Camila Achutti
</h2>

<p>Formada em Ciência da Computação pela USP e mestre pela mesma instituição, estagiou no Google na Califórnia e trabalhou para a Iridescent Learning, ONG americana de educação a distância. Voltou ao Brasil para mostrar o poder de transformação da tecnologia e do empreendedorismo. CEO da Mastertech, escola de tecnologia. Fundou a Somas, uma ONG de pesquisa sobre tecnologia nas práticas educacionais, com foco em publicações de domínio público.</p>

<h2>
  
  
  [68] Silvia Coelho
</h2>

<p>Paraense, mãe, Mestra e graduada em Engenharia Elétrica, com vasta atuação em pesquisa e desenvolvimento de software para celulares, treinada na LG-Coreia do Sul. Após quase 10 anos de pausa na carreira, decidiu retornar ao mercado de tecnologia. Fundou a iniciativa Elas Programam para mudar o gap de gênero e diversidade. CTO da Forum Hub. LinkedIn Top Voices 2022 e LinkedIn Creator.</p>




<p>Gostou do conteúdo? Sinta-se livre para contribuir, complementando-o com seus comentários.</p>

<p>Obrigada por ter lido até aqui e deixo o canal aberto para troca de ideias e feedbacks.</p>"'https://dev.to/feministech/mulheres-na-tecnologia-51mo'https://res.cloudinary.com/practicaldev/image/fetch/s--xOOmFzAn--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0huqqxtdjldg3i0iqg9a.png'"['https://res.cloudinary.com/practicaldev/image/fetch/s--0byGfeRS--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/180359/ad488d0c-36e0-45bd-8865-23ce51428e4e.jpg', 'https://dev-to-uploads.s3.amazonaws.com/uploads/logos/resized_logo_UQww2soKuUsjaOGNB38o.png', 'https://dev.to/assets/raised-hands-74b2099fd66a39f2d7eed9305ee0f4553df0eb7b4f11b01b6b1b499973048fe5.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--pcSkTMZL--/c_limit,f_auto,fl_progressive,q_80,w_190/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--J9eWxRDO--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/864528/c164a545-3e3a-42db-b941-51ea078ee6dd.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--uEg95DPo--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/790277/df9f5c1c-569e-4930-9800-e5af406cf04a.jpeg', 'https://dev.to/assets/exploding-head-daceb38d627e6ae9b730f36a1e390fca556a4289d5a41abb2c35068ad3e2c4b5.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--hR5d8eOV--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/320326/24bcb175-3f3c-41b7-9020-7a29d88b07a1.png', 'https://dev.to/assets/loading-ellipsis-b714cf681fd66c853ff6f03dd161b77aa3c80e03cdc06f478b695f42770421e9.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--xOOmFzAn--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0huqqxtdjldg3i0iqg9a.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--h929Jotu--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/524325/261c49f3-4f2c-4afa-bf84-17df60139a47.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--ryUZ1YVi--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/4218/6ba7e378-7eb8-4c33-a1d7-99296f37436d.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--eVza2yuC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_775/https://res.cloudinary.com/practicaldev/image/fetch/s--XDmbmZKz--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://i.ibb.co/6Z960jq/zoxide.gif', 'https://res.cloudinary.com/practicaldev/image/fetch/s--aaMdSWCB--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/264/40d89fb9-4de0-414d-8a06-f52ddda0bc75.jpg', 'https://dev.to/assets/sparkle-heart-5f9bee3767e18deb1bb725290cb151c25234768a0e9a2bd39370c382d02920cf.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--RmY55OKL--/c_limit,f_auto,fl_progressive,q_auto,w_256/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--M1i5-r7l--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/524325/261c49f3-4f2c-4afa-bf84-17df60139a47.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--MEPrf_ab--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/4218/6ba7e378-7eb8-4c33-a1d7-99296f37436d.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--2Jhk7Jtt--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0huqqxtdjldg3i0iqg9a.png', 'https://dev.to/assets/heart-plus-active-9ea3b22f2bc311281db911d416166c5f430636e76b15cd5df6b3b841d830eefa.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--tTx6GYKW--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/320326/24bcb175-3f3c-41b7-9020-7a29d88b07a1.png', 'https://dev.to/assets/fire-f60e7a582391810302117f987b22a8ef04a2fe0df7e3258a5f49332df1cec71e.svg', 'https://dev.to/assets/multi-unicorn-b44d6f8c23cdd00964192bedc38af3e82463978aa611b4365bd33a0f1f4f3e97.svg']"
7'9UIMPBG6F'Amazon VPC Lattice — Build Applications, Not Networks'"<p>Last year's re:Invent brought a lot of amazing updates to the big family of AWS services. In this blog post, I would like to explain one of such new offerings — <strong>Amazon VPC Lattice</strong> — an exciting new service that simplifies the networking layer for developers and cloud administrators.</p>

<h2>
  
  
  What is Lattice
</h2>

<p>So what exactly is Amazon VPC Lattice? It is an application layer networking service that enables consistent and secure service-to-service communication without the need for prior networking expertise. With VPC Lattice, you can easily configure network access, traffic management, and network monitoring, making service-to-service communication seamless across VPCs and accounts, irrespective of the underlying compute type.</p>

<h2>
  
  
  How it helps
</h2>

<p>VPC Lattice helps address several use cases, including connecting services at scale, implementing granular access permissions, advanced traffic controls, and observing service-to-service interactions. The service offers connectivity over HTTP/HTTPS and gRPC protocols through a dedicated data plane within VPC. Administrators can use AWS Resource Access Manager (AWS RAM) to control which accounts and VPCs can establish communication through a service network.</p>

<p>What's more, VPC Lattice is designed to be non-invasive and work alongside existing architecture patterns, allowing development teams across your organization to onboard their services incrementally.</p>

<h2>
  
  
  How it works
</h2>

<p>VPC Lattice introduces four key components: Service, Service Directory, Service Network, and Auth Policy. These components simplify how users enable connectivity and apply standard policies to a collection of services. Service networks can be shared across accounts with AWS RAM and associated with VPCs to allow connectivity to a group of services.</p>

<p>Here is the diagram that illustrates the use of Amazon VPC Lattice and the Service Network Manager to create a service network, define policies, and share cross-account access. </p>

<p>The Service Network Manager subset at the top consists of four icons representing the process flow:</p>

<p>1️⃣ The first step involves creating a service network by choosing a name and authentication type. </p>

<p>2️⃣ The second step consists in defining access and monitoring by setting and managing access policies and selecting log destinations. </p>

<p>3️⃣ The third step involves associating clients and services, allowing resources in associated VPCs to access the benefits associated with the service network. </p>

<p>4️⃣The fourth step consists in adding specific assistance or service networks to AWS RAM shares to facilitate cross-account access.</p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--YdQxL_H3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0o9ftrwy93t34xwag4wx.png""><img alt=""Lattice diagram"" height=""518"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--YdQxL_H3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0o9ftrwy93t34xwag4wx.png"" width=""880"" /></a></p>

<p>The Service Owner subset at the bottom consists of three steps:</p>

<p>1️⃣ The first step involves creating a service by identifying the benefit and defining access and monitoring. </p>

<p>2️⃣ The second step consists in defining routing by adding listeners and rules that point to the target groups that store the service. </p>

<p>3️⃣ The third step consists in selecting the networks from the service that receives traffic.</p>

<h2>
  
  
  Win-win for Ops and Developers
</h2>

<p>Overall, VPC Lattice bridges the gap between developers and cloud administrators by providing role-specific features and capabilities. Developers can focus on building applications, not networks, while cloud and network administrators can increase their organization's security posture by enabling authentication, authorization, and encryption consistently across mixed computing environments.</p>

<p>Currently, Amazon VPC Lattice is in Preview in the US West (Oregon) region. I'm excited to see how VPC Lattice will shape the future of networking and make it even easier for developers to build complex applications. 🚀</p>

<p>Some additional resources to learn more about Lattice:</p>

<p>Presentation at re:Invent 2022 <br />


</p>

<p>A blog post at AWS with examples <a href=""https://aws.amazon.com/blogs/aws/introducing-vpc-lattice-simplify-networking-for-service-to-service-communication-preview/"">Introducing VPC Lattice – Simplify Networking for Service-to-Service Communication</a></p>"'https://dev.to/aws-builders/amazon-vpc-lattice-build-applications-not-networks-59j8'https://res.cloudinary.com/practicaldev/image/fetch/s--QRvGt9TJ--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nt5s20ohvyaylbpgqlb3.png'"['https://dev-to-uploads.s3.amazonaws.com/uploads/logos/resized_logo_UQww2soKuUsjaOGNB38o.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--OPxJNIJw--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1014326/dd8ee549-a932-435e-8b9c-d6448217e927.png', 'https://dev.to/assets/raised-hands-74b2099fd66a39f2d7eed9305ee0f4553df0eb7b4f11b01b6b1b499973048fe5.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--pcSkTMZL--/c_limit,f_auto,fl_progressive,q_80,w_190/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--FdVBHe7K--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/871628/6ce3bf5a-487a-4b59-a0d5-962a8cd15a37.jpeg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--vWmcJ-ty--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2794/88da75b6-aadd-4ea1-8083-ae2dfca8be94.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--YdQxL_H3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0o9ftrwy93t34xwag4wx.png', 'https://dev.to/assets/exploding-head-daceb38d627e6ae9b730f36a1e390fca556a4289d5a41abb2c35068ad3e2c4b5.svg', 'https://dev.to/assets/loading-ellipsis-b714cf681fd66c853ff6f03dd161b77aa3c80e03cdc06f478b695f42770421e9.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s---_doXe3O--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/51518/60259e60-86ea-47fe-92ff-5ac3f00835d2.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--8t-VGqgg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_775/https://dev-to-uploads.s3.amazonaws.com/i/7p7qe33hhlj5zdi3bj82.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--g6iagNAY--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/879749/0bce2c84-de06-45b3-bafd-1d977ac24bcb.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--_wMf7UF9--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/720355/f65e8943-05e7-4d3c-9923-b8d0257e082d.jpg', 'https://dev.to/assets/sparkle-heart-5f9bee3767e18deb1bb725290cb151c25234768a0e9a2bd39370c382d02920cf.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--RmY55OKL--/c_limit,f_auto,fl_progressive,q_auto,w_256/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--EMvM7JfJ--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nt5s20ohvyaylbpgqlb3.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--3vA9CcCA--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2794/88da75b6-aadd-4ea1-8083-ae2dfca8be94.png', 'https://dev.to/assets/heart-plus-active-9ea3b22f2bc311281db911d416166c5f430636e76b15cd5df6b3b841d830eefa.svg', 'https://dev.to/assets/fire-f60e7a582391810302117f987b22a8ef04a2fe0df7e3258a5f49332df1cec71e.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--QRvGt9TJ--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nt5s20ohvyaylbpgqlb3.png', 'https://dev.to/assets/multi-unicorn-b44d6f8c23cdd00964192bedc38af3e82463978aa611b4365bd33a0f1f4f3e97.svg']"
8'DF4PZAHN7'SPVM::Sys now supports symbolic links on Windows, adds Perl-compatible API.'"<p>We reported last week that we were working on support for symbolic links on Windows to <a href=""https://metacpan.org/pod/SPVM::Sys"">SPVM::Sys</a>. Finally, SPVM::Sys now supports symbolic links on Windows.</p>

<h1>
  
  
  Symbolic Link Support on Windows
</h1>

<p>Portable <a href=""https://metacpan.org/pod/SPVM::Sys#symlink"">symlink</a>, <a href=""https://metacpan.org/pod/SPVM::Sys#readlink"">readlink</a>, and <a href=""https://metacpan.org/pod/SPVM::Sys#l"">l</a> methods have been added that also work on Windows, and <a href=""https://metacpan.org/pod/SPVM::Sys#unlink"">unlink</a> and <a href=""https://metacpan.org/pod/SPVM::Sys#rename"">rename</a> methods also support symbolic links.</p>

<p>In the process of testing symlinks, it was necessary to run Github Action in Windows developer mode. This is because symlink, which creates symbolic links, is not authorized in administrator mode, but only in developer mode. You can see how to do this in <a href=""https://github.com/yuki-kimoto/SPVM-Sys/blob/master/.github/workflows/windows-latest-devel-mode.yml"">this Github Action</a> using <code>ilammy/msvc-dev-cmd</code>.</p>

<h1>
  
  
  Perl Compatible API
</h1>

<p>A Perl-compatible API has been added to the <a href=""https://metacpan.org/pod/SPVM::Sys#Class-Methods"">Sys</a> class, so if you need to change your implementation between Linux and Windows, this class will take care of it.</p>

<h1>
  
  
  zlib support
</h1>

<p>Next week, we will try to support <a href=""https://github.com/madler/zlib"">zlib</a>, a module for GZIP. First we will resource the latest version of the zlib library. Then, we will implement the GZIP compression and decompression features of Perl's <a href=""https://metacpan.org/pod/Compress::Raw::Zlib"">Compress::Raw::Zlib</a>. And implement GZIP and compression functionality in <a href=""https://metacpan.org/pod/IO::Compress::Gzip"">IO::Compress::Gzip</a>.</p>

<p>The goal of the SPVM project within one year is to create a module to implement a web framework, GZIP compression is required for the ability to send and receive compressed content.</p>

<p>Translated with <a href=""http://www.DeepL.com/Translator"">www.DeepL.com/Translator</a> (free version)</p>"'https://dev.to/yukikimoto/spvmsys-now-supports-symbolic-links-on-windows-adds-perl-compatible-api-4nle'https://dev.to/social_previews/article/1405159.png'"['https://res.cloudinary.com/practicaldev/image/fetch/s--33YHBkJv--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/510993/d0e608ad-447b-4b66-96e7-1c37eeb08c7a.jpeg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--W0aR2Oc4--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/285827/cdaa974c-cb9e-44cc-a155-fd44092a0462.png', 'https://dev-to-uploads.s3.amazonaws.com/uploads/logos/resized_logo_UQww2soKuUsjaOGNB38o.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--Fh3aZB8L--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/592222/b7033b06-7559-4902-9325-49521389b3c4.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--92mdeo_j--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/520170/c4002303-5d36-46d7-827a-4aa1b65b192b.jpeg', 'https://dev.to/assets/loading-ellipsis-b714cf681fd66c853ff6f03dd161b77aa3c80e03cdc06f478b695f42770421e9.svg', 'https://dev.to/social_previews/article/1405159.png', 'https://dev.to/assets/exploding-head-daceb38d627e6ae9b730f36a1e390fca556a4289d5a41abb2c35068ad3e2c4b5.svg', 'https://dev.to/assets/heart-plus-active-9ea3b22f2bc311281db911d416166c5f430636e76b15cd5df6b3b841d830eefa.svg', 'https://dev.to/assets/raised-hands-74b2099fd66a39f2d7eed9305ee0f4553df0eb7b4f11b01b6b1b499973048fe5.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--H1_tgykv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_775/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/84ohvrdv1c6vsa0laos1.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--pcSkTMZL--/c_limit,f_auto,fl_progressive,q_80,w_190/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://dev.to/assets/fire-f60e7a582391810302117f987b22a8ef04a2fe0df7e3258a5f49332df1cec71e.svg', 'https://dev.to/assets/sparkle-heart-5f9bee3767e18deb1bb725290cb151c25234768a0e9a2bd39370c382d02920cf.svg', 'https://dev.to/assets/multi-unicorn-b44d6f8c23cdd00964192bedc38af3e82463978aa611b4365bd33a0f1f4f3e97.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--ECEogqxF--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/592222/b7033b06-7559-4902-9325-49521389b3c4.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--RmY55OKL--/c_limit,f_auto,fl_progressive,q_auto,w_256/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png']"
9'DJL2ANSRI'How to Debug Jetpack Compose Recomposition with Logging?'"<p><strong>What is the best way to debug Jetpack Compose recomposition? Breakpoints in debugger, standard logging (i.e. Log.d) or do we need custom logging?</strong></p>

<p>Recomposition in Jetpack Compose is a complex topic. It is complex because sometimes you have no idea why a certain function is recomposed, which is not what you expected based on your knowledge. Thus, you need to debug it.</p>

<h2>
  
  
  Breakpoints in Debugger
</h2>

<p>Using breakpoints in a debugger first comes to my mind to debug recomposition. However, there are a few limitations to this approach.</p>

<ul>
<li><p>It doesn't tell you <strong>recomposition scope</strong> information(i.e. <code>$currentRecomposeScope</code>- see below)</p></li>
<li><p>It doesn't keep track of <strong>how many recompositions</strong> have been occurred</p></li>
</ul>

<h2>
  
  
  Standard Logging
</h2>

<p>So to debug with logging, you use <code>Log.d</code>. It looks like this<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight kotlin""><code><span class=""nc"">Log</span><span class=""p"">.</span><span class=""nf"">d</span><span class=""p"">(</span><span class=""s"">""DebugRecomposition""</span><span class=""p"">,</span> <span class=""s"">""RecompositionExample() function scope""</span><span class=""p"">)</span>
</code></pre>

</div>



<p>But it missed one important piece of information, which doesn't tell the current recompose scope information. This information is important because different composable functions can still have the same recompose scope - see the explanation below.</p>

<p>To print this recompose scope information, you use <code>$currentRecomposeScope</code>. Now the logging looks like this<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight kotlin""><code><span class=""nc"">Log</span><span class=""p"">.</span><span class=""nf"">d</span><span class=""p"">(</span><span class=""s"">""DebugRecomposition""</span><span class=""p"">,</span> <span class=""s"">""RecompositionExample() function scope $currentRecomposeScope""</span><span class=""p"">)</span>
</code></pre>

</div>



<p>The log output looks like this:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight kotlin""><code><span class=""nc"">D</span><span class=""p"">/</span><span class=""nc"">DebugRecomposition</span><span class=""p"">:</span> <span class=""nc"">RecompositionExample</span><span class=""p"">()</span> <span class=""n"">function</span> <span class=""n"">androidx</span><span class=""p"">.</span><span class=""n"">compose</span><span class=""p"">.</span><span class=""n"">runtime</span><span class=""p"">.</span><span class=""nc"">RecomposeScopeImpl</span><span class=""err"">@</span><span class=""mf"">894f</span><span class=""n"">ab8</span>
</code></pre>

</div>



<p>This <code>RecomposeScopeImpl@894fab8</code> is the unique ID for this recompose scope. If another composable function has the same unique ID, it means it also belongs to this same recompose scope.</p>

<p>Well, there is still one missing piece of information - the <strong>recomposition count</strong>. Technically, you still can manually count the log statement, but that is very troublesome and prone to error. Because of that, you need custom logging.</p>

<h2>
  
  
  Custom Logging
</h2>

<p>I steal the custom logging code from this very good post about recomposition <a href=""https://www.jetpackcompose.app/articles/donut-hole-skipping-in-jetpack-compose"">here</a>, and I make a few modifications to it because I think some stuff is just unnecessary.</p>

<p>Here is the modified version:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight kotlin""><code><span class=""kd"">class</span> <span class=""nc"">RecompositionCounter</span><span class=""p"">(</span><span class=""kd"">var</span> <span class=""py"">value</span><span class=""p"">:</span> <span class=""nc"">Int</span><span class=""p"">)</span>

<span class=""nd"">@Composable</span>
<span class=""k"">inline</span> <span class=""k"">fun</span> <span class=""nf"">LogCompositions</span><span class=""p"">(</span><span class=""n"">tag</span><span class=""p"">:</span> <span class=""nc"">String</span><span class=""p"">,</span> <span class=""n"">msg</span><span class=""p"">:</span> <span class=""nc"">String</span><span class=""p"">)</span> <span class=""p"">{</span>
    <span class=""k"">if</span> <span class=""p"">(</span><span class=""nc"">BuildConfig</span><span class=""p"">.</span><span class=""nc"">DEBUG</span><span class=""p"">)</span> <span class=""p"">{</span>
        <span class=""kd"">val</span> <span class=""py"">recompositionCounter</span> <span class=""p"">=</span> <span class=""nf"">remember</span> <span class=""p"">{</span> <span class=""nc"">RecompositionCounter</span><span class=""p"">(</span><span class=""mi"">0</span><span class=""p"">)</span> <span class=""p"">}</span>

        <span class=""nc"">Log</span><span class=""p"">.</span><span class=""nf"">d</span><span class=""p"">(</span><span class=""n"">tag</span><span class=""p"">,</span> <span class=""s"">""$msg ${recompositionCounter.value} $currentRecomposeScope""</span><span class=""p"">)</span>
        <span class=""n"">recompositionCounter</span><span class=""p"">.</span><span class=""n"">value</span><span class=""p"">++</span>
    <span class=""p"">}</span>
<span class=""p"">}</span>
</code></pre>

</div>



<ul>
<li><p>I renamed class <code>Ref</code> to class <code>RecompositionCounter</code>to better reflect it is the recomposition count</p></li>
<li><p>I removed <code>SideEffect {}</code> and moved the counter increment after the logging. I do not think we need <a href=""https://vtsen.hashnode.dev/side-effects-summary-in-jetpack-compose#heading-non-suspended-effect-handler""><code>SideEffect {}</code></a>here.</p></li>
<li><p>I added <code>$currentRecomposeScope</code> as additional information which I think is important.</p></li>
</ul>

<blockquote>
<p>The <code>inline</code> is to ensure the parent who calls this composable function has the same composable function scope. In other words, when a parent is recomposed, this <code>LogCompositions()</code> function definitely will be called.</p>
</blockquote>

<h2>
  
  
  Examples
</h2>

<p>Let's look at a simple example below.<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight kotlin""><code><span class=""nd"">@Composable</span>
<span class=""k"">fun</span> <span class=""nf"">RecompositionExample</span><span class=""p"">()</span> <span class=""p"">{</span>
    <span class=""kd"">var</span> <span class=""py"">count</span> <span class=""k"">by</span> <span class=""nf"">remember</span> <span class=""p"">{</span> <span class=""nf"">mutableStateOf</span><span class=""p"">(</span><span class=""mi"">0</span><span class=""p"">)</span> <span class=""p"">}</span>

    <span class=""nc"">LogCompositions</span><span class=""p"">(</span><span class=""s"">""DebugRecomposition""</span><span class=""p"">,</span> <span class=""s"">""RecompositionExample() function scope""</span><span class=""p"">)</span>

    <span class=""nc"">Column</span> <span class=""p"">{</span>

        <span class=""nc"">LogCompositions</span><span class=""p"">(</span><span class=""s"">""DebugRecomposition""</span><span class=""p"">,</span> <span class=""s"">""Column() content scope""</span><span class=""p"">)</span>

        <span class=""nc"">MyButton</span><span class=""p"">(</span><span class=""n"">onClick</span> <span class=""p"">=</span> <span class=""p"">{</span> <span class=""n"">count</span><span class=""p"">++</span> <span class=""p"">},</span> <span class=""n"">text</span> <span class=""p"">=</span> <span class=""n"">count</span><span class=""p"">.</span><span class=""nf"">toString</span><span class=""p"">())</span>

    <span class=""p"">}</span>
<span class=""p"">}</span>

<span class=""nd"">@Composable</span>
<span class=""k"">fun</span> <span class=""nf"">MyButton</span><span class=""p"">(</span>
    <span class=""n"">onClick</span><span class=""p"">:</span> <span class=""p"">()</span> <span class=""p"">-&gt;</span> <span class=""nc"">Unit</span><span class=""p"">,</span>
    <span class=""n"">text</span><span class=""p"">:</span> <span class=""nc"">String</span><span class=""p"">)</span> <span class=""p"">{</span>

    <span class=""nc"">LogCompositions</span><span class=""p"">(</span><span class=""s"">""DebugRecomposition""</span><span class=""p"">,</span> <span class=""s"">""MyButton() function""</span><span class=""p"">)</span>

    <span class=""nc"">Button</span><span class=""p"">(</span><span class=""n"">onClick</span> <span class=""p"">=</span> <span class=""n"">onClick</span><span class=""p"">)</span> <span class=""p"">{</span>

        <span class=""nc"">LogCompositions</span><span class=""p"">(</span><span class=""s"">""DebugRecomposition""</span><span class=""p"">,</span> <span class=""s"">""Button() content""</span><span class=""p"">)</span>

        <span class=""nc"">Text</span><span class=""p"">(</span>
            <span class=""n"">text</span> <span class=""p"">=</span> <span class=""n"">text</span><span class=""p"">,</span>
        <span class=""p"">)</span>
    <span class=""p"">}</span>
<span class=""p"">}</span>
</code></pre>

</div>



<p><code>MyButton</code> is a wrapper for <code>Button()</code> with <code>Text()</code> in its content lambda.</p>

<p>Please note the difference between <strong>function scope</strong> and <strong>content scope</strong>.</p>

<ul>
<li>
<p>Function scope is the scope inside the function.</p>

<p>Content scope is the trailing lambda scope, the last lambda parameter of the function.</p>
</li>
</ul>

<p>The log output looks like this during start-up:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight kotlin""><code><span class=""nc"">D</span><span class=""p"">/</span><span class=""nc"">DebugRecomposition</span><span class=""p"">:</span> <span class=""nc"">RecompositionExample</span><span class=""p"">()</span> <span class=""n"">function</span> <span class=""n"">scope</span> <span class=""mi"">0</span> <span class=""n"">androidx</span><span class=""p"">.</span><span class=""n"">compose</span><span class=""p"">.</span><span class=""n"">runtime</span><span class=""p"">.</span><span class=""nc"">RecomposeScopeImpl</span><span class=""err"">@</span><span class=""mf"">894f</span><span class=""n"">ab8</span>

<span class=""nc"">D</span><span class=""p"">/</span><span class=""nc"">DebugRecomposition</span><span class=""p"">:</span> <span class=""nc"">Column</span><span class=""p"">()</span> <span class=""n"">content</span> <span class=""n"">scope</span> <span class=""mi"">0</span> <span class=""n"">androidx</span><span class=""p"">.</span><span class=""n"">compose</span><span class=""p"">.</span><span class=""n"">runtime</span><span class=""p"">.</span><span class=""nc"">RecomposeScopeImpl</span><span class=""err"">@</span><span class=""mf"">894f</span><span class=""n"">ab8</span>

<span class=""nc"">D</span><span class=""p"">/</span><span class=""nc"">DebugRecomposition</span><span class=""p"">:</span> <span class=""nc"">MyButton</span><span class=""p"">()</span> <span class=""n"">function</span> <span class=""mi"">0</span> <span class=""n"">androidx</span><span class=""p"">.</span><span class=""n"">compose</span><span class=""p"">.</span><span class=""n"">runtime</span><span class=""p"">.</span><span class=""nc"">RecomposeScopeImpl</span><span class=""err"">@</span><span class=""mi"">399</span><span class=""n"">bf6</span>

<span class=""nc"">D</span><span class=""p"">/</span><span class=""nc"">DebugRecomposition</span><span class=""p"">:</span> <span class=""nc"">Button</span><span class=""p"">()</span> <span class=""n"">content</span> <span class=""mi"">0</span> <span class=""n"">androidx</span><span class=""p"">.</span><span class=""n"">compose</span><span class=""p"">.</span><span class=""n"">runtime</span><span class=""p"">.</span><span class=""nc"">RecomposeScopeImpl</span><span class=""err"">@</span><span class=""n"">dc1e8e2</span>
</code></pre>

</div>



<ul>
<li>You notice the <code>RecompositionExample()</code> and <code>Column()</code> have the same recompose scope. This is because <strong>common layouts</strong> such as <code>Column()</code>, <code>Row()</code>, and <code>Box()</code> are all <strong>""inline"" composable functions</strong>. Thus, they have the <strong>SAME recompose scope</strong> as their callers.</li>
</ul>

<p>If you click the button, the log output looks like this:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight kotlin""><code><span class=""nc"">D</span><span class=""p"">/</span><span class=""nc"">DebugRecomposition</span><span class=""p"">:</span> <span class=""nc"">RecompositionExample</span><span class=""p"">()</span> <span class=""n"">function</span> <span class=""n"">scope</span> <span class=""mi"">1</span> <span class=""n"">androidx</span><span class=""p"">.</span><span class=""n"">compose</span><span class=""p"">.</span><span class=""n"">runtime</span><span class=""p"">.</span><span class=""nc"">RecomposeScopeImpl</span><span class=""err"">@</span><span class=""mf"">894f</span><span class=""n"">ab8</span>

<span class=""nc"">D</span><span class=""p"">/</span><span class=""nc"">DebugRecomposition</span><span class=""p"">:</span> <span class=""nc"">Column</span><span class=""p"">()</span> <span class=""n"">content</span> <span class=""n"">scope</span> <span class=""mi"">1</span> <span class=""n"">androidx</span><span class=""p"">.</span><span class=""n"">compose</span><span class=""p"">.</span><span class=""n"">runtime</span><span class=""p"">.</span><span class=""nc"">RecomposeScopeImpl</span><span class=""err"">@</span><span class=""mf"">894f</span><span class=""n"">ab8</span>

<span class=""nc"">D</span><span class=""p"">/</span><span class=""nc"">DebugRecomposition</span><span class=""p"">:</span> <span class=""nc"">MyButton</span><span class=""p"">()</span> <span class=""n"">function</span> <span class=""mi"">1</span> <span class=""n"">androidx</span><span class=""p"">.</span><span class=""n"">compose</span><span class=""p"">.</span><span class=""n"">runtime</span><span class=""p"">.</span><span class=""nc"">RecomposeScopeImpl</span><span class=""err"">@</span><span class=""mi"">399</span><span class=""n"">bf6</span>

<span class=""nc"">D</span><span class=""p"">/</span><span class=""nc"">DebugRecomposition</span><span class=""p"">:</span> <span class=""nc"">Button</span><span class=""p"">()</span> <span class=""n"">content</span> <span class=""mi"">1</span> <span class=""n"">androidx</span><span class=""p"">.</span><span class=""n"">compose</span><span class=""p"">.</span><span class=""n"">runtime</span><span class=""p"">.</span><span class=""nc"">RecomposeScopeImpl</span><span class=""err"">@</span><span class=""n"">dc1e8e2</span>
</code></pre>

</div>



<ul>
<li><p>When the button is clicked, the <code>count</code> state is mutated. Thus, all to recompose scopes that read the state will be recomposed.</p></li>
<li><p>In <code>column()</code> scope, it reads the <code>count</code> state from <code>text = count.toString()</code>. Thus, <code>column()</code> is recomposed. Because <code>column()</code> and <code>RecompositionExample()</code> has the same recompose scope, <code>RecompositionExample()</code> is recomposed as well.</p></li>
<li><p><code>MyButton()</code> is recomposed because the input parameter <code>text</code> is changed. Scope that read the <code>text</code> will be recomposed. Thus, <code>Button()</code> and <code>Text()</code> are recomposed too. There is no logging for <code>Text()</code>, so it doesn't show up in the log.</p></li>
</ul>

<h2>
  
  
  Conclusion
</h2>

<p>As mentioned, recompose is a complex topic. This article doesn't focus on why and how recomposition can happen. It covers a bit in the examples above, but it is just a fairly basic demonstration.</p>

<p>This article shows how you can debug it using the custom logging <code>LogCompositions()</code> to figure out how recomposition behaves. In my opinion, <strong>recomposition is the most important concept</strong> to master in Jetpack Compose, understanding how it works is crucial.</p>

<h2>
  
  
  Source Code
</h2>

<p>GitHub Repository: <a href=""https://github.com/vinchamp77/Demo_UnderstandComposeConcept"">Demo_UnderstandComposeConcept</a></p>




<p><em>Originally published at <a href=""https://vtsen.hashnode.dev/how-to-debug-jetpack-compose-recomposition-with-logging"">https://vtsen.hashnode.dev</a></em>.</p>"'https://dev.to/vtsen/how-to-debug-jetpack-compose-recomposition-with-logging-k7g'https://res.cloudinary.com/practicaldev/image/fetch/s--GZjF27Ns--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x4h4gr6yrlwxyhmc9c1n.jpg'"['https://res.cloudinary.com/practicaldev/image/fetch/s--poOlwUKc--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/902280/d419940e-e233-4e2f-b119-54e72e994671.png', 'https://dev-to-uploads.s3.amazonaws.com/uploads/logos/resized_logo_UQww2soKuUsjaOGNB38o.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--OOwzaeSF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_775/https://res.cloudinary.com/practicaldev/image/fetch/s--XIICQ_e4--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2ja8tymo646or3emo07.gif', 'https://res.cloudinary.com/practicaldev/image/fetch/s--DhDMHeut--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/808151/4bba0932-b910-4c38-b853-3b1bb64431f2.png', 'https://dev.to/assets/raised-hands-74b2099fd66a39f2d7eed9305ee0f4553df0eb7b4f11b01b6b1b499973048fe5.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--T4I4lcoU--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x4h4gr6yrlwxyhmc9c1n.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--pcSkTMZL--/c_limit,f_auto,fl_progressive,q_80,w_190/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--GZjF27Ns--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x4h4gr6yrlwxyhmc9c1n.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--SGrazDS5--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/706486/238a7265-aeed-4599-853e-f4bdc2580e2e.png', 'https://dev.to/assets/exploding-head-daceb38d627e6ae9b730f36a1e390fca556a4289d5a41abb2c35068ad3e2c4b5.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--DJnj-ZO6--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/706486/238a7265-aeed-4599-853e-f4bdc2580e2e.png', 'https://dev.to/assets/loading-ellipsis-b714cf681fd66c853ff6f03dd161b77aa3c80e03cdc06f478b695f42770421e9.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--b0O8QGSF--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/136661/6eef6885-797e-458e-93eb-1f6d618adbe9.jpeg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--esvUpwZQ--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/772506/b8acb44a-0d5d-47bb-aadf-4d31e951c369.png', 'https://dev.to/assets/sparkle-heart-5f9bee3767e18deb1bb725290cb151c25234768a0e9a2bd39370c382d02920cf.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--RmY55OKL--/c_limit,f_auto,fl_progressive,q_auto,w_256/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--LqgADxKo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_350/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jb3sc2966d2rvbcohxvq.png', 'https://dev.to/assets/heart-plus-active-9ea3b22f2bc311281db911d416166c5f430636e76b15cd5df6b3b841d830eefa.svg', 'https://dev.to/assets/fire-f60e7a582391810302117f987b22a8ef04a2fe0df7e3258a5f49332df1cec71e.svg', 'https://dev.to/assets/multi-unicorn-b44d6f8c23cdd00964192bedc38af3e82463978aa611b4365bd33a0f1f4f3e97.svg']"
10'ZA40PKKXL'Serverless - Beyond the Basics'"<p>Well folks, it appears the Serverless week for <a href=""https://github.com/MichaelCade/90DaysOfDevOps"">90DaysOfDevOps</a> has (already) come to an end. We have covered a ton of topics in serverless to get you started, and hopefully you're already well on your way to building your first serverless, event-driven application! We've <a href=""https://dev.to/aws-heroes/what-is-serverless-4d4p"">defined what serverless means</a>, we've talked about everything from <a href=""https://docs.aws.amazon.com/lambda/latest/dg/welcome.html"">lambda functions</a>, to <a href=""https://aws.amazon.com/dynamodb/"">DynamoDB tables</a>, <a href=""https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html"">Step Functions</a>, <a href=""https://aws.amazon.com/eventbridge/"">EventBridge</a>, and so many other core &amp; supporting AWS services to aid in your development journey. Although it's been a very high-level overview, I truly hoped you have enjoyed our week together, and have learned a thing or two about serverless development. Even if you've left this week with more questions than answers, I would say I've done my job - which is, made you interested and curious enough about serverless to want to explore it even more!</p>

<p>Instead of going into a ton of depth on various topics in serverless on our last day, I thought it would be much more useful to provide you all with resources where you can go to learn more. The problem is, there is so much content, so many well-formed opinions, and tons of sample projects out there, <strong><em>I</em></strong> don't even know where to begin! I know that if I start to list out individuals or blogs, I am going to forget so many, and not give proper credit where credit is due, so instead, I will provide you with some places or projects to get started, and let you explore on your own and form your own thoughts &amp; opinions. The only ask I have for you is this - <strong><em>please</em></strong> do your best to support and encourage diversity &amp; our minority content creators. Too often I see folks share lists of their favorite people, accounts, conference talks, blogs, or open source projects, and there is no diverse representation. There are tons of incredible content creators (or to-be content creators!) of all different backgrounds and identities that never get enough credit, and if all of us can help in any small way, it can make a huge impact. I encourage you to take advantage of the comment section below to promote some of your favorite diverse individuals - I'd love to add them to my network too!</p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--ChbseL6N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4269usgbdjkv84wcpxk2.jpg""><img alt=""Group hug, since we're all friends now. Image via Unsplash."" height=""587"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--ChbseL6N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4269usgbdjkv84wcpxk2.jpg"" width=""880"" /></a></p>

<p>Thanks again for taking this serverless journey with me this week, and please enjoy this list of more resources to explore. Until next time, my serverless friends!*</p>

<p><strong>Resources to Learn More</strong></p>

<ul>
<li>
<a href=""https://medium.com/"">Medium</a> - Blogging platform with tons of great content</li>
<li>
<a href=""https://dev.to/"">Dev.to</a> - Blogging platform with tons of great content, specific to developers</li>
<li>
<a href=""https://acloudguru.com/"">aCloudGuru</a> - Video learning platform, great for certifications</li>
<li>
<a href=""https://serverlessland.com/"">ServerlessLand</a> - All things serverless, resources &amp; announcements from AWS</li>
<li>
<a href=""https://www.twitch.tv/aws"">AWS Twitch</a> - Space for podcasts, walkthroughs, and casual conversations with AWS employees</li>
<li>
<a href=""https://aws.amazon.com/serverless/"">AWS Docs</a> - Official documentation for all things AWS serverless</li>
<li>
<a href=""https://aws.amazon.com/certification/"">AWS Certifications</a> - Explore getting certified</li>
<li>
<a href=""https://www.youtube.com/@amazonwebservices/featured"">AWS Youtube</a> - Great deep dive talks &amp; features on AWS services from years past</li>
<li>
<a href=""https://aws.amazon.com/cdk/"">AWS CDK</a> - Infrastructure as Code tool, popular in serverless development</li>
<li>
<a href=""https://aws.amazon.com/serverless/sam/"">AWS SAM</a> - Infrastructure as Code tool, specifically for serverless development</li>
<li>
<a href=""https://aws.amazon.com/developer/community/usergroups/?community-user-groups-cards.sort-by=item.additionalFields.ugName&amp;community-user-groups-cards.sort-order=asc&amp;awsf.location=*all&amp;awsf.category=*all"">AWS User Groups</a> - Get involved in your local community!</li>
<li>
<a href=""https://aws.amazon.com/developer/community/heroes/?community-heroes-all.sort-by=item.additionalFields.sortPosition&amp;community-heroes-all.sort-order=asc&amp;awsf.filter-hero-category=heroes%23serverless&amp;awsf.filter-location=*all&amp;awsf.filter-year=*all&amp;awsf.filter-activity=*all"">AWS Hero Program</a> - Learn more about our community evangelists</li>
<li>
<a href=""https://aws.amazon.com/developer/community/community-builders/"">AWS Community Builder Program</a> - Keep this bookmarked for the next round of applicants</li>
</ul>

<p>….and so much more out there for you to explore!</p>

<p>*This is part of a series that will be covered here, but I also encourage you to follow along with the rest of the series on <a href=""https://github.com/MichaelCade/90DaysOfDevOps"">90DaysOfDevOps</a>.</p>"'https://dev.to/aws-heroes/serverless-beyond-the-basics-kom'https://res.cloudinary.com/practicaldev/image/fetch/s--0mGDpmie--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v7pnlp1va2638bq0oh5i.jpg'"['https://dev-to-uploads.s3.amazonaws.com/uploads/logos/resized_logo_UQww2soKuUsjaOGNB38o.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--OOwzaeSF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_775/https://res.cloudinary.com/practicaldev/image/fetch/s--XIICQ_e4--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2ja8tymo646or3emo07.gif', 'https://dev.to/assets/raised-hands-74b2099fd66a39f2d7eed9305ee0f4553df0eb7b4f11b01b6b1b499973048fe5.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--SJfRLnec--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_350/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cwkw09cb5un6au3a9b5e.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--pcSkTMZL--/c_limit,f_auto,fl_progressive,q_80,w_190/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--WYbfTLfj--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/706486/238a7265-aeed-4599-853e-f4bdc2580e2e.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--ChbseL6N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4269usgbdjkv84wcpxk2.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--xdQcqWIg--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/287061/ec33a650-03c8-4167-970b-8590903f76cb.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--b24uVxx8--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/825436/9c764f96-1101-4d6a-bc34-046ed8abb802.jpeg', 'https://dev.to/assets/exploding-head-daceb38d627e6ae9b730f36a1e390fca556a4289d5a41abb2c35068ad3e2c4b5.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--qe8f1T6T--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2491/f0c1a659-c959-42cd-bb12-cd25909dd9db.png', 'https://dev.to/assets/loading-ellipsis-b714cf681fd66c853ff6f03dd161b77aa3c80e03cdc06f478b695f42770421e9.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--tXKmD_qx--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/173379/169217ff-1a6b-455d-aa88-b2a4def92817.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--FDZraPAM--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v7pnlp1va2638bq0oh5i.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--Tt7krvN5--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2491/f0c1a659-c959-42cd-bb12-cd25909dd9db.png', 'https://dev.to/assets/sparkle-heart-5f9bee3767e18deb1bb725290cb151c25234768a0e9a2bd39370c382d02920cf.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--RmY55OKL--/c_limit,f_auto,fl_progressive,q_auto,w_256/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--sTdArHjC--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/968077/8f6140fc-8ac0-4666-9fb8-2b6090f0da08.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--0mGDpmie--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v7pnlp1va2638bq0oh5i.jpg', 'https://dev.to/assets/heart-plus-active-9ea3b22f2bc311281db911d416166c5f430636e76b15cd5df6b3b841d830eefa.svg', 'https://dev.to/assets/fire-f60e7a582391810302117f987b22a8ef04a2fe0df7e3258a5f49332df1cec71e.svg', 'https://dev.to/assets/multi-unicorn-b44d6f8c23cdd00964192bedc38af3e82463978aa611b4365bd33a0f1f4f3e97.svg']"
11'MIVPRGE0A'HOW TO USE CHATGPT ON VSCODE'"<p><strong>What is ChatGPT?</strong></p>

<p><a href=""https://C:UsershpDocumentsopenai.com"">ChatGPT</a> is an Artificial Intelligence chatbot that mimics human conversation. The dialogue format makes it possible for ChatGPT to answer follow-up questions, admit its mistakes, challenge incorrect premises, and reject inappropriate requests. It was designed by an AI research company, OpenAI, and launched on 30th November 2023. Its latest version, <a href=""https://openai.com/research/gpt-4"">ChatGPT-4</a>, was recently launched on March, 2023. </p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--B69K9w9J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5sh4ucl7sycndkkztdl3.JPG""><img alt=""Image description"" height=""421"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--B69K9w9J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5sh4ucl7sycndkkztdl3.JPG"" width=""880"" /></a><br />
<strong>Features</strong><br />
ChatGPT has been embellished with great features that makes it too good to be true. Elon Musk said, “ChatGPT is scary good. We are not far from dangerously strong AI”. Some of the features are;<br />
• It is very versatile in that it can be used for various tasks cutting through different works of life. It can write and debug computer programs, and compose music, letters, reports, resume, articles, essay, etc. It can even answer test questions. ChatGPT-4 was tested to answer exams originally designed for humans and the estimated percentile for a uniform Bar exams was 298/400. <br />
• Also, it attempts to reduce deceitful responses by framing its answer as a hypothetical consideration of the prompt.<br />
• Similarly, ChatGPT can accept a prompt of both text and images. This really came to life with the ChatGPT-4 even though it outputs texts. Image inputs are still a research preview and not publicly available. That is, the image input will be available to only users of ChatGPT-4. <br />
• Lastly, ChatGPT does not erase previous prompts by a user on the same conversation.</p>

<p><strong>Limitations</strong><br />
Even though ChatGPT was created to imitate man and try to be as natural as possible. It can never replace man nor exist without its shortcomings. Hence, it is not fully reliable. Some of the limitations include;<br />
• It sometimes writes incorrect answers or answers without meaning.<br />
• It is sensible to tweaks in input statements. Like, given one phrasing of a question, the model can claim to not know the answer, but given a slight rephrase, can answer correctly.<br />
• It can sometimes respond to harmful instructions or show biased behavior. For this OpenAI uses the <a href=""https://dev.to/feed/**https:/openai.com/blog/new-and-improved-content-moderation-tooling/https:/openai.com/blog/new-and-improved-content-moderation-tooling/**"">Moderation API</a> to warn or block certain types of improper contents.<br />
• It can fail at hard problems the same way humans do, such as introducing security vulnerabilities into the code it produces.</p>

<p>However, GPT-4 scored 40% higher in its internal adversarial factuality evaluation making it better than GPT-3.5(the previous version).</p>

<p>Having talked extensively about ChatGPT, you will agree with me that using ChatGPT with caution will aid your productivity when coding. Now, this is how I use it on my VScode;</p>

<p>VScode has an extension available for download on it extension store called, CodeGPT</p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--O9VWR6tF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vnku76moiw1rupvz01dy.JPG""><img alt=""Image description"" height=""204"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--O9VWR6tF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vnku76moiw1rupvz01dy.JPG"" width=""880"" /></a><br />
<strong>Installation</strong><br />
This is pretty much simple. <br />
Search for Code GPT on your extensions search bar.</p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--2l4Kd_6Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yzshfybu3vdudlh9vdaw.jpg""><img alt=""Image description"" height=""350"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--2l4Kd_6Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yzshfybu3vdudlh9vdaw.jpg"" width=""377"" /></a><br />
Install and restart your VScode to activate.</p>

<p><strong>Usage</strong><br />
<strong><em>Caution:</em></strong><strong>_ Do not ask very tactical coding issues to prevent creating bugs in your codes. Use with caution and review every output!_</strong><br />
A chat icon will appear at the left menu bar on your VScode. Click on the chat icon and begin to use Code GPT.</p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--e7b5gnbR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j9q035xbs5n32gajrruw.jpg""><img alt=""Image description"" height=""781"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--e7b5gnbR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j9q035xbs5n32gajrruw.jpg"" width=""387"" /></a></p>

<p>You can write a comment asking for a specific code, press <strong>ctrl+shift+i</strong> or <strong>cmd+shift+i</strong> and use the code generated. <br />
You can also ask CodeGpt to review a set of code. <br />
<a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--DMgLZMWH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ew33lfynoo0xznl5qop9.JPG""><img alt=""Image description"" height=""350"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--DMgLZMWH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ew33lfynoo0xznl5qop9.JPG"" width=""674"" /></a></p>

<p>It has a functionality that allows you to get questions from Stackoverflow and compare the best human answer with the answer from an artificial intelligence. </p>

<p>You can ask CodeGPT to create a README.md for a set of codes<br />
<a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--kNBltKFl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4bjs4tfr8eifktkbz512.JPG""><img alt=""Image description"" height=""357"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--kNBltKFl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4bjs4tfr8eifktkbz512.JPG"" width=""624"" /></a></p>

<p>You can also select a block of code and ask CodeGPT to explain the code for you. <br />
And lots more!!</p>

<p>In summary, ChatGPT is an AI designed to help us but not to replace us. It cannot replace your intellect and what you code from your own understanding of a language. Utilize the help and give your best.</p>"'https://dev.to/umaola/how-to-use-chatgpt-on-vscode-3dn'https://res.cloudinary.com/practicaldev/image/fetch/s--M5Ykt3ej--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dfjm1kiifc5s0s1qxe0v.jpg'"['https://res.cloudinary.com/practicaldev/image/fetch/s--e7b5gnbR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j9q035xbs5n32gajrruw.jpg', 'https://dev-to-uploads.s3.amazonaws.com/uploads/logos/resized_logo_UQww2soKuUsjaOGNB38o.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--DMgLZMWH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ew33lfynoo0xznl5qop9.JPG', 'https://dev.to/assets/raised-hands-74b2099fd66a39f2d7eed9305ee0f4553df0eb7b4f11b01b6b1b499973048fe5.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--95U0NdA4--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1039813/358800b5-ae97-4d2e-88b3-3605e9353631.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--pcSkTMZL--/c_limit,f_auto,fl_progressive,q_80,w_190/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--Qy6RFNhC--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1039813/358800b5-ae97-4d2e-88b3-3605e9353631.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--2l4Kd_6Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yzshfybu3vdudlh9vdaw.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s---V_mtZqN--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/217/69e88d75-7d13-4f1a-bf55-211171ed6ffe.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--O9VWR6tF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vnku76moiw1rupvz01dy.JPG', 'https://dev.to/assets/exploding-head-daceb38d627e6ae9b730f36a1e390fca556a4289d5a41abb2c35068ad3e2c4b5.svg', 'https://dev.to/assets/loading-ellipsis-b714cf681fd66c853ff6f03dd161b77aa3c80e03cdc06f478b695f42770421e9.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--M5Ykt3ej--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dfjm1kiifc5s0s1qxe0v.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--8t-VGqgg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_775/https://dev-to-uploads.s3.amazonaws.com/i/7p7qe33hhlj5zdi3bj82.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--DRHPa3Qq--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/995013/ac08f63e-6c83-4e04-aa00-eebc7390f35c.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--DPa_tbhM--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/4337/fa74d805-e19a-4b9f-96ec-55f716de6bb8.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s---H7336Uk--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/38578/c785dfe1-aaa2-48fe-89b9-1563db95c85c.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--yXg8UT1z--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/180171/2365bc37-cc2b-4a06-bfdf-e9acb7c4f95d.jpg', 'https://dev.to/assets/sparkle-heart-5f9bee3767e18deb1bb725290cb151c25234768a0e9a2bd39370c382d02920cf.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--2FCszR36--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dfjm1kiifc5s0s1qxe0v.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--RmY55OKL--/c_limit,f_auto,fl_progressive,q_auto,w_256/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--kNBltKFl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4bjs4tfr8eifktkbz512.JPG', 'https://res.cloudinary.com/practicaldev/image/fetch/s--SjvoIwaj--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/742973/23cc543f-d79e-41bf-b42e-53f1a4d60a88.jpeg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--fWgpmUZY--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297775/8e227abe-ca93-49f8-bc04-cb954b3bb575.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--IxrGprDT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_350/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fbsvcwqnj5mgkzuwy24r.png', 'https://dev.to/assets/heart-plus-active-9ea3b22f2bc311281db911d416166c5f430636e76b15cd5df6b3b841d830eefa.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--B69K9w9J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5sh4ucl7sycndkkztdl3.JPG', 'https://dev.to/assets/fire-f60e7a582391810302117f987b22a8ef04a2fe0df7e3258a5f49332df1cec71e.svg', 'https://dev.to/assets/multi-unicorn-b44d6f8c23cdd00964192bedc38af3e82463978aa611b4365bd33a0f1f4f3e97.svg']"
