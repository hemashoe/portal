'post_id'title'body'source_link'image'images
0'EGYRZP5OC'Dear Princess Programmer: Keep Coding!'"<p>Yesterday I was checking my feed on Twitter when I saw one of my followers commenting on this tweet. This tweet was sharing screenshots of a post found on the Reddit forum r/AmItheAsshole forum. The original post has since been removed by the moderators, but screenshots and cross postings can still be found in other Reddit forums.</p>


<blockquote class=""ltag__twitter-tweet"">
    <div class=""ltag__twitter-tweet__media ltag__twitter-tweet__media__two-pics"">
      <img alt=""unknown tweet media content"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--nhS0hrDE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FrOU4hOacAAjTBD.jpg"" />
    </div>

  <div class=""ltag__twitter-tweet__main"">
    <div class=""ltag__twitter-tweet__header"">
      <img alt=""Lacey Williams Henschel profile image"" class=""ltag__twitter-tweet__profile-image"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--RnvHXgJy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1524873612066365440/CwSzv3L4_normal.jpg"" />
      <div class=""ltag__twitter-tweet__full-name"">
        Lacey Williams Henschel
      </div>
      <div class=""ltag__twitter-tweet__username"">
        @laceynwilliams
      </div>
      <div class=""ltag__twitter-tweet__twitter-logo"">
        <img alt=""twitter logo"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg"" />
      </div>
    </div>
    <div class=""ltag__twitter-tweet__body"">
      Hi programmers would you like to be incandescent with rage? 
    </div>
    <div class=""ltag__twitter-tweet__date"">
      01:26 AM - 15 Mar 2023
    </div>


    <div class=""ltag__twitter-tweet__actions"">
      <a class=""ltag__twitter-tweet__actions__button"" href=""https://twitter.com/intent/tweet?in_reply_to=1635814793906102273"">
        <img alt=""Twitter reply action"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg"" />
      </a>
      <a class=""ltag__twitter-tweet__actions__button"" href=""https://twitter.com/intent/retweet?tweet_id=1635814793906102273"">
        <img alt=""Twitter retweet action"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg"" />
      </a>
      <a class=""ltag__twitter-tweet__actions__button"" href=""https://twitter.com/intent/like?tweet_id=1635814793906102273"">
        <img alt=""Twitter like action"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg"" />
      </a>
    </div>
  </div>
</blockquote>


<p>A lot of comments were quick to point that this story had to be fake and this author had to be a troll just trying to create a reaction to get attention. Regardless if it was fake or not, the post quickly got reactions the author was wanting with 351 comments already responding to the original post. Many of these comments were criticizing him for how he handled the situation as well as his view of ""programming being serious and not a game"", telling his daughter to stop with the princess programmer stuff, and even saying C++ is outdated.</p>

<p>As DEV gets ready to end the WeCoded celebration this year, I want to use this year's post to reach out to Princess Programmer. While there's a lot of focus on her father, I want to use this post to reach out to his daughter to let her know that she inspires me as a programmer and I hope she continues to code. I can't speak for the rest of the tech community, but I think is is awesome she taught herself C++ and created her own game. Those are two big accomplishments she should be very proud of herself for. I hope she will feel ready to publish her game someday so little kids can play it and inspire others to create their own games too.</p>

<p>If she needs a mentor or someone to support her as she continues to learn how to code, there are tons of organizations and communities that can support. I'm also certain there are many developers that would also love to mentor her and help her out if she needs it too. So please don't hesitate to reach out and ask. </p>

<p>Most importantly, I hope she continues to keep being a princess programmer and what that means to her. One of the reasons I love tech is because tech allows everyone to bring what makes them special to the table so they can create awesome things. Tech needs more people like princess programmer in it and I hope she never gives up on that.</p>

<p>If there is anything we can learn from this Reddit post is the power a mentor can have and it makes a difference in breaking down the barriers in tech. Good and bad mentors do leave an impact that can leave a lasting influence new developers. This whole situation reminded me of the TV show <em>Scrubs</em>. In episode 17, J.D. is given a med student to teach and he gets so frustrated by his student's mistakes that he tells the student he shouldn't be a doctor. When he discovers that his student quits, he tries getting confirmation from others at the hospital that what happened wasn't his fault. Carla doesn't buy it and tells him that he was the one that failed since he was his teacher.</p>

<p>Carla's point is spot and it should serve as a reminder for all of us in tech about what it means to be a mentor or a teacher. Mentoring is much more than helping another developer figure out a problem or learn a new skill. Many times mentors are the first cheerleaders we have and can leave a lasting impact on the people they help.</p>

<p>Tech still is addressing a lot of issues so it is more equitable and diverse. In order to make this a reality, it starts by mentoring and supporting programmers like Princess Programmer so we don't miss on what they bring to tech. As WeCoded gets ready to end, I hope reading this post reminds everyone why this celebration is important and gives others the courage to mentor new developers coming into tech or at least cheer on their own princess programmers in their own lives.</p>

<p>Janna Loeffler's tweet responding to the Reddit post is the best way to end this one. I hope if Princess Programmer reads this someday she sees all the support she has gotten from others in tech and how we are all sending her lots of love her way.</p>


<blockquote class=""ltag__twitter-tweet"">
      <div class=""ltag__twitter-tweet__media"">
        <img alt=""unknown tweet media content"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--NofGsqDe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FrVWmeGXsAEdK9U.jpg"" />
      </div>

  <div class=""ltag__twitter-tweet__main"">
    <div class=""ltag__twitter-tweet__header"">
      <img alt=""Janna Loeffler profile image"" class=""ltag__twitter-tweet__profile-image"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--DHayT_b_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1451858128606216192/gF3gwgoa_normal.jpg"" />
      <div class=""ltag__twitter-tweet__full-name"">
        Janna Loeffler
      </div>
      <div class=""ltag__twitter-tweet__username"">
        @jannaloeffler
      </div>
      <div class=""ltag__twitter-tweet__twitter-logo"">
        <img alt=""twitter logo"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg"" />
      </div>
    </div>
    <div class=""ltag__twitter-tweet__body"">
      <a href=""https://twitter.com/eterry28"">@eterry28</a> <a href=""https://twitter.com/laceynwilliams"">@laceynwilliams</a> <a href=""https://twitter.com/techgirl1908"">@techgirl1908</a> <a href=""https://twitter.com/ParissAthena"">@ParissAthena</a> <a href=""https://twitter.com/ladyleet"">@ladyleet</a> <a href=""https://twitter.com/TheyWrestleTest"">@TheyWrestleTest</a> <a href=""https://twitter.com/bria_sullivan"">@bria_sullivan</a> <a href=""https://twitter.com/TaraWithTiaras"">@TaraWithTiaras</a> Much love from one Princess Programmer to another. (Yes, I did wear that to work… yes, I did work for Disney at the time) 
    </div>
    <div class=""ltag__twitter-tweet__date"">
      10:11 AM - 16 Mar 2023
    </div>


    <div class=""ltag__twitter-tweet__actions"">
      <a class=""ltag__twitter-tweet__actions__button"" href=""https://twitter.com/intent/tweet?in_reply_to=1636309262178701314"">
        <img alt=""Twitter reply action"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg"" />
      </a>
      <a class=""ltag__twitter-tweet__actions__button"" href=""https://twitter.com/intent/retweet?tweet_id=1636309262178701314"">
        <img alt=""Twitter retweet action"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg"" />
      </a>
      <a class=""ltag__twitter-tweet__actions__button"" href=""https://twitter.com/intent/like?tweet_id=1636309262178701314"">
        <img alt=""Twitter like action"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg"" />
      </a>
    </div>
  </div>
</blockquote>"'https://dev.to/theoriginalbpc/dear-princess-programmer-keep-coding-520a'https://dev.to/social_previews/article/1402806.png'"['https://res.cloudinary.com/practicaldev/image/fetch/s--Ea1OGrCb--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1/f451a206-11c8-4e3d-8936-143d0a7e65bb.png', 'https://dev.to/social_previews/article/1402806.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--pcSkTMZL--/c_limit,f_auto,fl_progressive,q_80,w_190/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://dev.to/assets/sparkle-heart-5f9bee3767e18deb1bb725290cb151c25234768a0e9a2bd39370c382d02920cf.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg', 'https://dev.to/assets/fire-f60e7a582391810302117f987b22a8ef04a2fe0df7e3258a5f49332df1cec71e.svg', 'https://dev.to/assets/multi-unicorn-b44d6f8c23cdd00964192bedc38af3e82463978aa611b4365bd33a0f1f4f3e97.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--JrbipfX7--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/720786/86ee408c-1489-48f1-bc24-89527b57d660.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--MND8hTwn--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/500968/21dd8184-fa55-43f0-ae0f-07290f059b68.jpeg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--nhS0hrDE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FrOU4hOacAAjTBD.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--iZB7bhKO--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/145382/b00f2a7f-f42c-490a-9fe4-30cd97a19901.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--OOwzaeSF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_775/https://res.cloudinary.com/practicaldev/image/fetch/s--XIICQ_e4--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2ja8tymo646or3emo07.gif', 'https://dev.to/assets/raised-hands-74b2099fd66a39f2d7eed9305ee0f4553df0eb7b4f11b01b6b1b499973048fe5.svg', 'https://dev-to-uploads.s3.amazonaws.com/uploads/logos/resized_logo_UQww2soKuUsjaOGNB38o.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--FD9KF6nZ--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/61140/fa4551ac-4fc2-4ca1-884d-325b97b0277b.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg', 'https://dev.to/assets/exploding-head-daceb38d627e6ae9b730f36a1e390fca556a4289d5a41abb2c35068ad3e2c4b5.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--DHayT_b_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1451858128606216192/gF3gwgoa_normal.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--RnvHXgJy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1524873612066365440/CwSzv3L4_normal.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--NofGsqDe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FrVWmeGXsAEdK9U.jpg', 'https://dev.to/assets/heart-plus-active-9ea3b22f2bc311281db911d416166c5f430636e76b15cd5df6b3b841d830eefa.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--OJchzEY3--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1046614/f46dc0c9-5e8a-4ae1-9cd5-3ff1a6d015ac.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--SKv1l1xM--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/247560/803f25c6-05a3-4cff-932d-20dbe4915cb3.jpg', 'https://dev.to/assets/loading-ellipsis-b714cf681fd66c853ff6f03dd161b77aa3c80e03cdc06f478b695f42770421e9.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--RmY55OKL--/c_limit,f_auto,fl_progressive,q_auto,w_256/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--umieLrZW--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/61140/fa4551ac-4fc2-4ca1-884d-325b97b0277b.jpg']"
1'S47PDXIYE'Serverless & Well Architected'"<p>Over the last few days, we've discussed a number of topics in the serverless space, covering <a href=""https://dev.to/aws-heroes/serverless-storage-50i3"">storage</a>, <a href=""https://dev.to/aws-heroes/serverless-apis-5bdp"">APIs</a>, <a href=""https://dev.to/aws-heroes/serverless-compute-3bgo"">compute</a>, and <a href=""https://dev.to/aws-heroes/serverless-orchestration-3879"">everything in between</a>. We've got all the components to build a fully functional, robust application in place, but before you run off and create The Next Big Thing, we have to cover one more crucial topic: <a href=""https://aws.amazon.com/architecture/well-architected/?wa-lens-whitepapers.sort-by=item.additionalFields.sortDate&amp;wa-lens-whitepapers.sort-order=desc&amp;wa-guidance-whitepapers.sort-by=item.additionalFields.sortDate&amp;wa-guidance-whitepapers.sort-order=desc"">Well Architected</a>. The Well Architected Framework is a set of guidelines or best practices that AWS introduced a few years ago. The six ""pillars"" of Well Architected are <a href=""https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/welcome.html"">Security</a>, <a href=""https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/welcome.html"">Cost</a>, <a href=""https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/welcome.html"">Operational Excellence</a>, <a href=""https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/welcome.html"">Reliability</a>, <a href=""https://docs.aws.amazon.com/wellarchitected/latest/performance-efficiency-pillar/welcome.html"">Performance Efficiency</a>, and <a href=""https://docs.aws.amazon.com/wellarchitected/latest/sustainability-pillar/sustainability-pillar.html"">Sustainability</a>. These concepts are not new, but by defining them in this way, AWS has established a reference that is easy to use and understand when evaluating your applications for best practices. In fact, AWS has created a <a href=""https://aws.amazon.com/well-architected-tool/"">Well Architected Tool &amp; Review process</a> centered around the six pillars, asking you questions about your application to review yourself or with your team. Before you start building your application, I would highly recommend you go through a formal Well Architected Review. You don't need to answer every single question, in fact some might not be applicable, but going through this exercise gets you thinking about how you want to architect your application, even highlighting key decision trade-offs, or potential issues that you haven't thought of just yet. In the subsections that follow, we'll talk about each of the pillars in a little more detail, and I'll briefly cover <a href=""https://docs.aws.amazon.com/wellarchitected/latest/userguide/lenses.html"">Well Architected Lenses</a>.</p>

<p><strong>Security</strong></p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--zltHy49P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w21as3t5slilesn51nvb.jpg""><img alt=""Lock keeping items secure. Image via Unsplash."" height=""587"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--zltHy49P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w21as3t5slilesn51nvb.jpg"" width=""880"" /></a></p>

<p>Simply put, how are you securing your app? Are you using authorization and authentication with <a href=""https://docs.aws.amazon.com/IAM/latest/UserGuide/introduction.html"">IAM users, roles, and policies</a> to limit access to your resources? Setting up <a href=""https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html"">permission boundaries</a> and using <a href=""https://aws.amazon.com/kms/"">KMS keys</a> for encryption? This can look like any number of measures, but the important idea here is, are you thinking about how to secure your app? Some of the questions in this space may not be applicable. This could be an app just for you, or one that isn't storing any data to worry about, or it could be wide open to the public and have no personal information to worry about. You don't need to have every single security measure in place for your application, but you do need to think about these things, and make conscious, defendable decisions about your <a href=""https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/welcome.html"">application security</a>.</p>

<p><strong>Cost</strong></p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--xHeDMOtc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g4nhh711kxnt3s66robn.jpg""><img alt=""Jar of money with a plant. Image via Unsplash."" height=""587"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--xHeDMOtc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g4nhh711kxnt3s66robn.jpg"" width=""880"" /></a></p>

<p>This one is pretty straightforward - I don't know anyone who gets excited when their cost or bills go up in price. Obviously, we all want to optimize for a low-cost application solution, whether this is for personal use, your business, or the company you work for (you may not care about that one personally, but I can tell you THEY certainly care about the bottom line). Look at the <a href=""https://aws.amazon.com/pricing/?aws-products-pricing.sort-by=item.additionalFields.productNameLowercase&amp;aws-products-pricing.sort-order=asc&amp;awsf.Free%20Tier%20Type=*all&amp;awsf.tech-category=*all"">pricing model</a> and see if there are any ways to cut costs. Some easy ones could be to minimize the number of API calls you're making, or utilize <a href=""https://awslabs.github.io/aws-lambda-powertools-python/2.9.1/"">Lambda Powertools</a> to optimize your lambda function for memory &amp; performance. If you've exhausted every option here, that's okay. Cost is typically a trade-off; you may be ok spending more money to make sure your application is secure, reliable, and not hindered in performance. Again, the idea here is that you're actively aware of where your money is going, and you've <a href=""https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/welcome.html"">reviewed your optimization options thoroughly</a>.</p>

<p><strong>Operational Excellence</strong></p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--vh6B5Qqs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v3m75wo0y0yo2max4eww.jpg""><img alt=""Group working at laptop computers. Image via Unsplash."" height=""587"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--vh6B5Qqs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v3m75wo0y0yo2max4eww.jpg"" width=""880"" /></a></p>

<p>One of my favorite topics to talk about is '<a href=""https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882"">Clean Code</a>', or better known as best practices within your code. Although this could cover many of these pillars, it arguably fits squarely within <a href=""https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/welcome.html"">Operational Excellence</a>. This pillar is all about building robust applications, code that is easy to understand, read, and maintainable, and having effective development processes in place. Creating small, logical code blocks, making small &amp; frequent code changes, <a href=""https://about.gitlab.com/topics/version-control/what-is-code-review/#:~:text=Code%20reviews%2C%20also%20known%20as,developers%20learn%20the%20source%20code."">reviewing code</a> periodically, having ample error handling, logging, and monitoring, and so much more fall into this category. For me, this one is sort of like a ""catch all"" pillar; not because it isn't well defined, but because it encompasses so many parts of the application development cycle. Many of the pillars overlap, but it is very likely that this one in particular will have overlap with one or more of the other pillars at any given time.</p>

<p><strong>Reliability</strong></p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--4BEgw0Tx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l6u0e706lmolbibz4egz.jpg""><img alt=""Chairs relying on each other. Image via Unsplash."" height=""587"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--4BEgw0Tx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l6u0e706lmolbibz4egz.jpg"" width=""880"" /></a></p>

<p>Is your application stable? Do you <a href=""https://aws.amazon.com/backup/"">backup your data</a> regularly? Do you have <a href=""https://docs.aws.amazon.com/whitepapers/latest/web-application-hosting-best-practices/failover-with-aws.html"">failovers</a> or other fail-safe measures in place? Can your application handle a large influx of traffic, or will any changes to the 'average' case break your current functionality? The key question this pillar asks is - are you prepared? Outages are never fun, especially when they significantly impact your customers, but they can (and they do) happen to the best of us. By reviewing the questions in the reliability pillar, you are thinking about your application's <a href=""https://docs.aws.amazon.com/whitepapers/latest/disaster-recovery-workloads-on-aws/disaster-recovery-options-in-the-cloud.html"">disaster recovery plans</a>, backing up your data, and having processes in place for the 'worst-case scenario'. Hopefully by completing a <a href=""https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/welcome.html"">reliability review</a>, these things don't occur as often, or aren't as widespread as they might've been before a review.</p>

<p><strong>Performance Efficiency</strong></p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--P8CDLNSe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8s0bfsx4dfn0k6g5nuaa.jpg""><img alt=""Performance on the track. Image via Unsplash."" height=""587"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--P8CDLNSe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8s0bfsx4dfn0k6g5nuaa.jpg"" width=""880"" /></a></p>

<p>Closely related to the Operational Excellence and Reliability pillars, the <a href=""https://docs.aws.amazon.com/wellarchitected/latest/performance-efficiency-pillar/welcome.html"">Performance Efficiency</a> pillar is, you guessed it, all about how well your application is performing. What I enjoy most about this pillar is if you're taking advantage of serverless architectures, you're already well on your way to having this one covered, as it's one of the <a href=""https://aws.amazon.com/blogs/apn/the-6-pillars-of-the-aws-well-architected-framework/"">five design principles</a> to adhere to. This is about your application running smoothly, scaling effectively, and taking advantage of only the resources you need. This is another big ""trade-off"" pillar, since you may compromise your performance in some cases to comply with security or save on cost.</p>

<p><strong>Sustainability</strong></p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--Zh1Lra9L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hlr4isgicbiitvpqfwui.jpg""><img alt=""Person holding a plant. Image via Unsplash."" height=""504"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--Zh1Lra9L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hlr4isgicbiitvpqfwui.jpg"" width=""880"" /></a></p>

<p><a href=""https://docs.aws.amazon.com/wellarchitected/latest/sustainability-pillar/sustainability-pillar.html"">Sustainability</a> is a recent addition to the Well Architected pillars, and I think it's a good one. It was <a href=""https://aws.amazon.com/blogs/aws/sustainability-pillar-well-architected-framework/"">introduced at the end of 2021</a>, and even though it's a focus I love to see, it also means there has not been a ton of guidance shared to optimize for sustainability. If you're invested in areas involving hardware, AI/ML, large sets of data, IoT, etc., this is a bit more obvious to contend to - simply put, you want to use less resources, and more sustainable (or at least recyclable) hardware. WIth serverless, you are already scaling automatically, only paying for what you use, and optimizing for your <a href=""https://aws.amazon.com/event-driven-architecture/"">event driven architecture</a>, which makes it more difficult to find areas to cut down on usage. My best advice is to review your architecture early &amp; often, and continually try to find ways to <a href=""https://www.nature.org/en-us/get-involved/how-to-help/carbon-footprint-calculator/#:~:text=A%20carbon%20footprint%20is%20the,is%20closer%20to%204%20tons."">lower your carbon footprint</a> with optimal architectural design, and if you haven't made the jump to serverless yet, maybe that's the first step!</p>

<p><strong>Serverless Lens</strong></p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--iskUYu0B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z5t8b3oue9295xu14dki.jpg""><img alt=""A pair of eyeglasses with lenses. Image via Unsplash."" height=""701"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--iskUYu0B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z5t8b3oue9295xu14dki.jpg"" width=""880"" /></a></p>

<p>In addition to the six pillars, AWS Well Architected has this concept of <a href=""https://docs.aws.amazon.com/wellarchitected/latest/userguide/lenses.html"">Well Architected Lenses</a>. Much like a pair of reading glasses, you can apply a specific Lens to your application to 'see' your application in a bit more detail. There are Lenses for <a href=""https://docs.aws.amazon.com/wellarchitected/latest/machine-learning-lens/machine-learning-lens.html"">Machine Learning</a>, <a href=""https://docs.aws.amazon.com/wellarchitected/latest/analytics-lens/analytics-lens.html?did=wp_card&amp;trk=wp_card"">Data Analytics</a>, <a href=""https://docs.aws.amazon.com/wellarchitected/latest/financial-services-industry-lens/welcome.html?did=wp_card&amp;trk=wp_card"">Financial Services</a>, and, of course, <a href=""https://docs.aws.amazon.com/wellarchitected/latest/serverless-applications-lens/welcome.html?did=wp_card&amp;trk=wp_card"">Serverless Applications</a>. These Lenses are simply a set of extra guidelines and questions for each of these six pillars relating specifically to the type of application you are building. They are 'optional', as is the entire Well Architected Review process, but again, if you are building a serverless application, I would highly recommend you complete a Well Architected Review with the Serverless Lens, as it will only strengthen your application posture in the context of these six pillars.</p>

<p>If you'd like to learn more about Well Architected or hear about it in practice, I have actually given a <a href=""https://www.twitch.tv/videos/1674539542?collection=T1passDrLhdY6Q"">recent talk on the subject with Build On at AWS Re:Invent</a>. This is an area of technology I have been very passionate about, and I truly believe these pillars and Well Architected Reviews are well worth the time and effort. We're coming up to end of our team together this week (I know, already?!) so for our last day tomorrow, I'm excited to summarize what we've learned so far, and present you with some next steps for going beyond the serverless basics.*</p>

<p>*This is part of a series that will be covered here, but I also encourage you to follow along with the rest of the series on <a href=""https://github.com/MichaelCade/90DaysOfDevOps"">90DaysOfDevOps</a>.</p>"'https://dev.to/aws-heroes/serverless-well-architected-40jn'https://res.cloudinary.com/practicaldev/image/fetch/s--H5E5fa48--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r3uxi17tkgn0fq727yoq.jpg'"['https://res.cloudinary.com/practicaldev/image/fetch/s--tnLnKJHa--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r3uxi17tkgn0fq727yoq.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--qe8f1T6T--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2491/f0c1a659-c959-42cd-bb12-cd25909dd9db.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--xHeDMOtc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g4nhh711kxnt3s66robn.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--pcSkTMZL--/c_limit,f_auto,fl_progressive,q_80,w_190/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--iskUYu0B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z5t8b3oue9295xu14dki.jpg', 'https://dev.to/assets/sparkle-heart-5f9bee3767e18deb1bb725290cb151c25234768a0e9a2bd39370c382d02920cf.svg', 'https://dev.to/assets/fire-f60e7a582391810302117f987b22a8ef04a2fe0df7e3258a5f49332df1cec71e.svg', 'https://dev.to/assets/multi-unicorn-b44d6f8c23cdd00964192bedc38af3e82463978aa611b4365bd33a0f1f4f3e97.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--Zh1Lra9L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hlr4isgicbiitvpqfwui.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--ezPgfAlx--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1/f451a206-11c8-4e3d-8936-143d0a7e65bb.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--Tt7krvN5--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2491/f0c1a659-c959-42cd-bb12-cd25909dd9db.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--1BAV27X7--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1013199/0d622a58-9438-432c-8a28-7cf52d80f6e3.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--OOwzaeSF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_775/https://res.cloudinary.com/practicaldev/image/fetch/s--XIICQ_e4--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2ja8tymo646or3emo07.gif', 'https://res.cloudinary.com/practicaldev/image/fetch/s--vh6B5Qqs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v3m75wo0y0yo2max4eww.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--Afj_CZW5--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/885267/fe4abb2a-5d51-461c-ae63-77bdc92da9b6.jpeg', 'https://dev.to/assets/raised-hands-74b2099fd66a39f2d7eed9305ee0f4553df0eb7b4f11b01b6b1b499973048fe5.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--bpILi8Nu--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/72394/c9117f05-e06d-428e-87d3-b97cf157d619.jpeg', 'https://dev-to-uploads.s3.amazonaws.com/uploads/logos/resized_logo_UQww2soKuUsjaOGNB38o.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--zltHy49P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w21as3t5slilesn51nvb.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--H5E5fa48--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r3uxi17tkgn0fq727yoq.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--b24uVxx8--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/825436/9c764f96-1101-4d6a-bc34-046ed8abb802.jpeg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--P8CDLNSe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8s0bfsx4dfn0k6g5nuaa.jpg', 'https://dev.to/assets/exploding-head-daceb38d627e6ae9b730f36a1e390fca556a4289d5a41abb2c35068ad3e2c4b5.svg', 'https://dev.to/assets/heart-plus-active-9ea3b22f2bc311281db911d416166c5f430636e76b15cd5df6b3b841d830eefa.svg', 'https://dev.to/assets/loading-ellipsis-b714cf681fd66c853ff6f03dd161b77aa3c80e03cdc06f478b695f42770421e9.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--RmY55OKL--/c_limit,f_auto,fl_progressive,q_auto,w_256/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--4BEgw0Tx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l6u0e706lmolbibz4egz.jpg']"
2'F4HJPPJQB'SQL JOIN explained'"<p>In this post we're going to see how the <strong>SQL JOIN</strong> works, guided by a practical example while covering SQL and <a href=""https://en.wikipedia.org/wiki/Set_theory"">Set theory</a> basics.</p>

<p>Even though you're not familiar with SQL, you can follow along as this post covers the very basics.</p>




<h2>
  
  
  ❕ A little disclaimer
</h2>

<p>As you may already know, every time I want to explain something, it's my <em>modus operandi</em> to take a step back and deep dive into the fundamentals. </p>

<p>But if you are comfortable with set theory and SQL basics such as CREATE TABLE, INSERT INTO, <em>generate_series</em>, SELECT and FROM, you may want to jump to the ""JOIN to the world"" section.</p>

<p>So fasten your seat belts and let's go into the journey of <strong>understanding SQL JOIN</strong>.</p>




<h2>
  
  
  ❗ First things first
</h2>

<p>The examples described here were tested using PostgreSQL 15. </p>

<p>Despite <a href=""https://en.wikipedia.org/wiki/SQL"">SQL</a> being a standard DSL that should work on any RDBMS, please review the examples before running on other RDBMS but PostgreSQL.</p>

<p>Without further ado, let's start the journey to <strong>understanding SQL JOINs</strong>.</p>




<h2>
  
  
  🗝️ Back to the basics
</h2>

<p>In SQL, tables are related to <a href=""https://en.wikipedia.org/wiki/Set_theory"">set theory</a> in mathematics. Usually, a <strong>set</strong> is a collection of different things, for instance:</p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--KIoGwpW5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7qf1g4n1tjrx2eqnir93.png""><img alt=""a set of different things"" height=""644"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--KIoGwpW5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7qf1g4n1tjrx2eqnir93.png"" width=""602"" /></a></p>

<p>Expressing the set above as a <a href=""https://en.wikipedia.org/wiki/Tuple"">tuple</a>:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight plaintext""><code>(Ana, Star Wars, Star Trek, Kate, John)
</code></pre>

</div>



<p>However, we can also represent users and movies as two distinct sets:</p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--JcX1-wOx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mfwgkyw2t82696clvkzl.png""><img alt=""two distinct sets"" height=""550"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--JcX1-wOx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mfwgkyw2t82696clvkzl.png"" width=""880"" /></a></p>

<p>Which can be expressed as tuples as well:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight plaintext""><code>users = (Ana, Kate, John)
movies = (Star Wars, Star Trek)
</code></pre>

</div>



<p>Using sets, we can perform some mathematical operations such as:</p>

<ul>
<li>
<strong>UNION</strong>: users ∪ movies</li>
<li>
<strong>INTERSECTION</strong>: users ∩ movies</li>
<li>
<strong>DIFFERENCE</strong>: users - movies</li>
<li>
<strong>CARTESIAN PRODUCT</strong>: users × movies</li>
</ul>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--lMpcSi0m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2cltv1x43z7hhm2et20r.png""><img alt=""set operations"" height=""569"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--lMpcSi0m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2cltv1x43z7hhm2et20r.png"" width=""880"" /></a></p>

<p>We'll take a closer look at set operations in the upcoming sections as we <em>relate them to SQL</em>.</p>




<h2>
  
  
  👉 SQL basics
</h2>

<p>In SQL, tables are relations that are physically persisted. An SQL table can be seen as a <a href=""https://en.wikipedia.org/wiki/Set_(mathematics)"">set</a> in set theory. </p>

<p>But how do structure a set in SQL <em>without persisting</em> physical tables?</p>

<h3>
  
  
  🔵 SELECT
</h3>

<p>With the <a href=""https://www.w3schools.com/sql/sql_select.asp"">SELECT</a> keyword, we can structure a set as follows:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight sql""><code><span class=""n"">postgres</span><span class=""o"">=#</span>  <span class=""k"">SELECT</span> <span class=""s1"">'John'</span><span class=""p"">;</span>

<span class=""o"">?</span><span class=""k"">column</span><span class=""o"">?</span>
<span class=""c1"">----------</span>
 <span class=""n"">John</span>
<span class=""p"">(</span><span class=""mi"">1</span> <span class=""k"">row</span><span class=""p"">)</span>
</code></pre>

</div>



<p>But that's a one-element set. We should add more items to the collection. </p>

<p>PostgreSQL provides a <a href=""https://www.postgresql.org/docs/current/functions-srf.html"">set-returning function</a> called <strong>generate_series</strong>:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight sql""><code><span class=""n"">postgres</span><span class=""o"">=#</span> <span class=""k"">SELECT</span> <span class=""n"">generate_series</span><span class=""p"">(</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">);</span>

 <span class=""n"">generate_series</span>
<span class=""c1"">-----------------</span>
               <span class=""mi"">1</span>
               <span class=""mi"">2</span>
               <span class=""mi"">3</span>
<span class=""p"">(</span><span class=""mi"">3</span> <span class=""k"">rows</span><span class=""p"">)</span>
</code></pre>

</div>



<p>We could add more and more information to the SELECT:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight sql""><code><span class=""k"">SELECT</span> 
    <span class=""n"">generate_series</span><span class=""p"">(</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">),</span>
    <span class=""n"">generate_series</span><span class=""p"">(</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">);</span>

 <span class=""n"">generate_series</span> <span class=""o"">|</span> <span class=""n"">generate_series</span>
<span class=""c1"">-----------------+-----------------</span>
               <span class=""mi"">1</span> <span class=""o"">|</span>               <span class=""mi"">1</span>
               <span class=""mi"">2</span> <span class=""o"">|</span>               <span class=""mi"">2</span>
               <span class=""mi"">3</span> <span class=""o"">|</span>               <span class=""mi"">3</span>

<span class=""p"">(</span><span class=""mi"">3</span> <span class=""k"">rows</span><span class=""p"">)</span>
</code></pre>

</div>



<p>However we're not yet satisfied. The SELECT should be capable of ""projecting fields"" coming <em>from</em> a structure that is already a set.</p>

<p>Meet SQL <a href=""https://www.w3schools.com/sql/sql_ref_from.asp"">FROM</a>.</p>

<h3>
  
  
  🔵 FROM
</h3>

<p>SQL <strong>FROM</strong> is a keyword used to specify a set of elements and, combined with  the <strong>SELECT</strong>, we could define our first set:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight sql""><code><span class=""k"">SELECT</span> 
    <span class=""o"">*</span>
<span class=""k"">FROM</span> 
    <span class=""n"">generate_series</span><span class=""p"">(</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">)</span> <span class=""k"">AS</span> <span class=""n"">id</span><span class=""p"">;</span>

 <span class=""n"">id</span>
<span class=""c1"">----</span>
  <span class=""mi"">1</span>
  <span class=""mi"">2</span>
  <span class=""mi"">3</span>
<span class=""p"">(</span><span class=""mi"">3</span> <span class=""k"">rows</span><span class=""p"">)</span>
</code></pre>

</div>



<p>Using a single FROM we can project multiple columns with SELECT:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight sql""><code><span class=""k"">SELECT</span> 
    <span class=""n"">id</span><span class=""p"">,</span>
    <span class=""s1"">'User-'</span> <span class=""o"">||</span> <span class=""n"">id</span> <span class=""k"">AS</span> <span class=""n"">name</span>
<span class=""k"">FROM</span> 
    <span class=""n"">generate_series</span><span class=""p"">(</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">)</span> <span class=""k"">AS</span> <span class=""n"">id</span><span class=""p"">;</span>
</code></pre>

</div>



<p>Which should print the output:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight plaintext""><code> id | name
----+-------
  1 | User-1
  2 | User-2
  3 | User-3
(3 rows)
</code></pre>

</div>



<p>Take for instance that we have two sets: </p>

<ul>
<li>the first set containing <code>(User-1, User-2, User-3)</code>
</li>
<li>and a second set containing <code>(User-2, User-3, User-4, User-5)</code>
</li>
</ul>

<p>Now, time to explore some <strong>operations</strong> using the two sets.</p>

<h3>
  
  
  🔵 UNION and UNION ALL
</h3>

<p>The SQL <a href=""https://www.w3schools.com/sql/sql_union.asp"">UNION</a> operator <strong>combines the result of two or more sets</strong>, i.e <em>SELECT</em> statements:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight sql""><code><span class=""k"">SELECT</span> <span class=""n"">id</span><span class=""p"">,</span> <span class=""s1"">'User-'</span> <span class=""o"">||</span> <span class=""n"">id</span> <span class=""k"">AS</span> <span class=""n"">name</span>
<span class=""k"">FROM</span> <span class=""n"">generate_series</span><span class=""p"">(</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">)</span> <span class=""k"">AS</span> <span class=""n"">id</span>

<span class=""k"">UNION</span>

<span class=""k"">SELECT</span> <span class=""n"">id</span><span class=""p"">,</span> <span class=""s1"">'User-'</span> <span class=""o"">||</span> <span class=""n"">id</span> <span class=""k"">AS</span> <span class=""n"">name</span>
<span class=""k"">FROM</span> <span class=""n"">generate_series</span><span class=""p"">(</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">5</span><span class=""p"">)</span> <span class=""k"">AS</span> <span class=""n"">id</span><span class=""p"">;</span>
</code></pre>

</div>



<p>Which outputs:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight plaintext""><code> id | name
----+-------
  2 | User-2
  3 | User-3
  1 | User-1
  5 | User-5
  4 | User-4
(5 rows)
</code></pre>

</div>



<p>The UNION operator removes all duplicates in the result. But in case we want to also return duplicates, we can use <strong>UNION ALL</strong>:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight sql""><code><span class=""k"">SELECT</span> <span class=""n"">id</span><span class=""p"">,</span> <span class=""s1"">'User-'</span> <span class=""o"">||</span> <span class=""n"">id</span> <span class=""k"">AS</span> <span class=""n"">name</span>
<span class=""k"">FROM</span> <span class=""n"">generate_series</span><span class=""p"">(</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">)</span> <span class=""k"">AS</span> <span class=""n"">id</span>

<span class=""k"">UNION</span> <span class=""k"">ALL</span>

<span class=""k"">SELECT</span> <span class=""n"">id</span><span class=""p"">,</span> <span class=""s1"">'User-'</span> <span class=""o"">||</span> <span class=""n"">id</span> <span class=""k"">AS</span> <span class=""n"">name</span>
<span class=""k"">FROM</span> <span class=""n"">generate_series</span><span class=""p"">(</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">5</span><span class=""p"">)</span> <span class=""k"">AS</span> <span class=""n"">id</span><span class=""p"">;</span>
</code></pre>

</div>



<p>Output:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight plaintext""><code> id | name
----+-------
  1 | User-1
  2 | User-2
  3 | User-3
  2 | User-2
  3 | User-3
  4 | User-4
  5 | User-5
(7 rows)
</code></pre>

</div>



<p>The result outputs 7 rows: 3 from the first SELECT and 4 from the second SELECT, including the <strong>duplicates</strong> <em>User-2 and User-3</em>.</p>

<p>Also, keep in mind some rules about <strong>SQL UNION</strong>:</p>

<ul>
<li>every set <strong>must have the same number</strong> of columns</li>
<li>the columns in both sets must be in the same order</li>
</ul>

<p>An illustrated example:</p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--VM2XE7Qw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oekbrkrjcu7ewrq06csq.png""><img alt=""union"" height=""460"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--VM2XE7Qw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oekbrkrjcu7ewrq06csq.png"" width=""880"" /></a></p>

<h3>
  
  
  🔵 INTERSECT
</h3>

<p>The SQL <a href=""https://www.tutorialspoint.com/sql/sql-intersect-clause.htm#:~:text=The%20SQL%20INTERSECT%20clause%2Foperator,by%20the%20two%20SELECT%20statements."">INTERSECT</a> operator also combines the result of two or more sets, but only return rows from the first set (first SELECT) <strong>that are identical</strong> to a row in the second set (second SELECT).<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight sql""><code><span class=""k"">SELECT</span> <span class=""n"">id</span><span class=""p"">,</span> <span class=""s1"">'User-'</span> <span class=""o"">||</span> <span class=""n"">id</span> <span class=""k"">AS</span> <span class=""n"">name</span>
<span class=""k"">FROM</span> <span class=""n"">generate_series</span><span class=""p"">(</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">)</span> <span class=""k"">AS</span> <span class=""n"">id</span>

<span class=""k"">INTERSECT</span>

<span class=""k"">SELECT</span> <span class=""n"">id</span><span class=""p"">,</span> <span class=""s1"">'User-'</span> <span class=""o"">||</span> <span class=""n"">id</span> <span class=""k"">AS</span> <span class=""n"">name</span>
<span class=""k"">FROM</span> <span class=""n"">generate_series</span><span class=""p"">(</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">5</span><span class=""p"">)</span> <span class=""k"">AS</span> <span class=""n"">id</span><span class=""p"">;</span>
</code></pre>

</div>



<p>Output:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight plaintext""><code> id |  name
----+--------
  3 | User-3
  2 | User-2
(2 rows)
</code></pre>

</div>



<p>Here, the query returned only the identical rows found in both sets. That's exactly the ""intersection"" between the two sets.</p>

<p>An illustrated example:</p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--IAsJ1S24--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4212qqe8h1bxfn427a6.png""><img alt=""intersection"" height=""435"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--IAsJ1S24--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4212qqe8h1bxfn427a6.png"" width=""880"" /></a></p>

<h3>
  
  
  🔵 EXCEPT
</h3>

<p>Another important operator is the SQL <a href=""https://www.tutorialspoint.com/sql/sql-except-clause.htm"">EXCEPT</a>, which in the set theory is the <em>DIFFERENCE</em> (A - B).</p>

<p>This operator also combines the result of two or more sets, but only return rows of the first set (first SELECT) <strong>that are not present</strong> in the second set (second SELECT).<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight sql""><code><span class=""k"">SELECT</span> <span class=""n"">id</span><span class=""p"">,</span> <span class=""s1"">'User-'</span> <span class=""o"">||</span> <span class=""n"">id</span> <span class=""k"">AS</span> <span class=""n"">name</span>
<span class=""k"">FROM</span> <span class=""n"">generate_series</span><span class=""p"">(</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">)</span> <span class=""k"">AS</span> <span class=""n"">id</span>

<span class=""k"">EXCEPT</span>

<span class=""k"">SELECT</span> <span class=""n"">id</span><span class=""p"">,</span> <span class=""s1"">'User-'</span> <span class=""o"">||</span> <span class=""n"">id</span> <span class=""k"">AS</span> <span class=""n"">name</span>
<span class=""k"">FROM</span> <span class=""n"">generate_series</span><span class=""p"">(</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">5</span><span class=""p"">)</span> <span class=""k"">AS</span> <span class=""n"">id</span><span class=""p"">;</span>
</code></pre>

</div>



<p>Output:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight plaintext""><code> id |  name
----+--------
  1 | User-1
(1 row)
</code></pre>

</div>



<p>Just 1 row. The only one that is present in the first set (left) but not in the second (right). We can also invert the sets and get the differences in reverse:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight sql""><code><span class=""k"">SELECT</span> <span class=""n"">id</span><span class=""p"">,</span> <span class=""s1"">'User-'</span> <span class=""o"">||</span> <span class=""n"">id</span> <span class=""k"">AS</span> <span class=""n"">name</span>
<span class=""k"">FROM</span> <span class=""n"">generate_series</span><span class=""p"">(</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">5</span><span class=""p"">)</span> <span class=""k"">AS</span> <span class=""n"">id</span>

<span class=""k"">EXCEPT</span>

<span class=""k"">SELECT</span> <span class=""n"">id</span><span class=""p"">,</span> <span class=""s1"">'User-'</span> <span class=""o"">||</span> <span class=""n"">id</span> <span class=""k"">AS</span> <span class=""n"">name</span>
<span class=""k"">FROM</span> <span class=""n"">generate_series</span><span class=""p"">(</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">3</span><span class=""p"">)</span> <span class=""k"">AS</span> <span class=""n"">id</span><span class=""p"">;</span>
</code></pre>

</div>



<p>Which are the <strong>User-5 and User-4</strong> respectively:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight plaintext""><code> id |  name
----+--------
  5 | User-5
  4 | User-4
(2 rows)
</code></pre>

</div>



<p>An illustrated example:</p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--WPGZL0VF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijac3114j1k0ot2ishrj.png""><img alt=""except"" height=""427"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--WPGZL0VF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijac3114j1k0ot2ishrj.png"" width=""880"" /></a></p>

<p>Once we understand <em>some SQL basics and how those relate to set theory in mathematics</em>, it's time to go beyond and explore a more sophisticated example.</p>




<h2>
  
  
  💡 A more sophisticated example
</h2>

<p>So far, we've been experimenting SQL operators with sets on the fly by using the <code>generate_series</code> PostgreSQL function.</p>

<p>Did you notice that <em>we haven't create any table</em>? That's a good alternative to experiment and learn ad hoc.</p>

<p>But for a more sophisticated example we'll start persisting data into pyshical tables.</p>

<h3>
  
  
  🔵 CREATE TABLE
</h3>

<p>Using <code>CREATE TABLE</code>, we can define a structure for a particular set of elements. </p>

<p>Such table structure is represented by a matrix of <strong>rows and columns</strong>, where rows are essentially a <strong>collection of values</strong> whereas columns define the <strong>type of values</strong>.</p>

<p>Let's create a table called <em>users</em>:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight sql""><code><span class=""k"">CREATE</span> <span class=""k"">TABLE</span> <span class=""n"">users</span> <span class=""p"">(</span><span class=""n"">id</span> <span class=""nb"">INTEGER</span><span class=""p"">,</span> <span class=""n"">name</span> <span class=""nb"">VARCHAR</span><span class=""p"">(</span><span class=""mi"">250</span><span class=""p"">));</span>
</code></pre>

</div>



<ul>
<li>
<strong>id</strong> is the name of the first column. It only allows values of type <em>integer</em>
</li>
<li>
<strong>name</strong> is the name of the second column. It only allows values of type ""character varying up to 250 bytes"" <code>(VARCHAR(250))</code>
</li>
</ul>

<p>Now, we can query the table using FROM and SELECT:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight sql""><code><span class=""k"">SELECT</span>
    <span class=""n"">id</span><span class=""p"">,</span>
    <span class=""n"">name</span>
<span class=""k"">FROM</span> 
    <span class=""n"">users</span><span class=""p"">;</span>
</code></pre>

</div>



<p>Output:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight plaintext""><code> id | name
----+------
(0 rows)
</code></pre>

</div>



<p>Of course, there's no <em>data inserted</em> into the table. <strong>Let's insert some data</strong>.</p>

<h3>
  
  
  🔵 INSERT INTO
</h3>

<p>The command <code>INSERT INTO</code> allows to insert a collection of values into an existing table.<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight sql""><code><span class=""k"">INSERT</span> <span class=""k"">INTO</span> <span class=""n"">users</span> <span class=""p"">(</span><span class=""n"">id</span><span class=""p"">,</span> <span class=""n"">name</span><span class=""p"">)</span> 
<span class=""k"">VALUES</span> <span class=""p"">(</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""s1"">'John'</span><span class=""p"">),</span> <span class=""p"">(</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""s1"">'Ana'</span><span class=""p"">),</span> <span class=""p"">(</span><span class=""mi"">3</span><span class=""p"">,</span> <span class=""s1"">'Kate'</span><span class=""p"">);</span>
</code></pre>

</div>



<p><em>Note that</em> the <code>VALUES</code> clause accepts a collection of tuples. Each tuple matches the columns <code>(id, name)</code> respectively.</p>

<p>Now, if we execute the query again, we get the output:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight plaintext""><code> id | name
----+------
  1 | John
  2 | Ana
  3 | Kate
</code></pre>

</div>



<p><strong>Yay!</strong> Our first table was created!</p>

<p>Now let's create another table called <strong>movies</strong>, which will contain <em>the same number of columns</em> as users, id and name respectively. </p>

<p>Afterwards, we follow inserting some data into the movies table.<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight sql""><code><span class=""k"">CREATE</span> <span class=""k"">TABLE</span> <span class=""n"">movies</span> <span class=""p"">(</span><span class=""n"">id</span> <span class=""nb"">INTEGER</span><span class=""p"">,</span> <span class=""n"">name</span> <span class=""nb"">VARCHAR</span><span class=""p"">(</span><span class=""mi"">250</span><span class=""p"">));</span>

<span class=""k"">INSERT</span> <span class=""k"">INTO</span> <span class=""n"">movies</span> <span class=""p"">(</span><span class=""n"">id</span><span class=""p"">,</span> <span class=""n"">name</span><span class=""p"">)</span> 
<span class=""k"">VALUES</span> <span class=""p"">(</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""s1"">'Star Wars'</span><span class=""p"">),</span> <span class=""p"">(</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""s1"">'Star Trek'</span><span class=""p"">);</span>
</code></pre>

</div>



<blockquote>
<p>💡 Tip<br />
If we want to SELECT <strong>all the columns</strong> from a table, we can use the symbol *<br />
</p>
</blockquote>

<div class=""highlight js-code-highlight"">
<pre class=""highlight sql""><code><span class=""k"">SELECT</span> <span class=""o"">*</span> <span class=""k"">FROM</span> <span class=""n"">movies</span><span class=""p"">;</span>

 <span class=""n"">id</span> <span class=""o"">|</span>   <span class=""n"">name</span>
<span class=""c1"">----+-----------</span>
  <span class=""mi"">1</span> <span class=""o"">|</span> <span class=""n"">Star</span> <span class=""n"">Wars</span>
  <span class=""mi"">2</span> <span class=""o"">|</span> <span class=""n"">Star</span> <span class=""n"">Trek</span>
<span class=""p"">(</span><span class=""mi"">2</span> <span class=""k"">rows</span><span class=""p"">)</span>
</code></pre>

</div>



<p>Until now, we learned some <strong>basic operations</strong> that are used to <em>combine data</em> between two simple sets:</p>

<ul>
<li>UNION</li>
<li>INTERSECT</li>
<li>EXCEPT</li>
</ul>

<p>Next, it's time to explore some <strong>other operations</strong> between <em>users and movies</em>.</p>




<h2>
  
  
  👉 A Cartesian Product
</h2>

<p>In <em>set theory</em>, a <a href=""https://en.wikipedia.org/wiki/Cartesian_product"">cartesian product</a> is a combination of every element from one set to every element of another set.</p>

<p>As for our example, it's like combining every pair <strong>user-movie</strong>:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight plaintext""><code>users = (John, Ana, Kate)
movies = (Star Wars, Star Trek)

### The cartesian product
(John, Star Wars)
(John, Star Trek)
(Ana, Star Wars)
(Ana, Star Trek)
(Kate, Star Wars)
(Kate, Star Trek)
</code></pre>

</div>



<p>In SQL, it's the operator <a href=""https://www.sqlshack.com/sql-cross-join-with-examples/"">CROSS JOIN</a>.</p>

<h3>
  
  
  🔵 CROSS JOIN
</h3>

<p>The SQL <strong>CROSS JOIN</strong> keyword is used to build a cartesian product, a.k.a the cartesian join.<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight sql""><code><span class=""k"">SELECT</span> <span class=""o"">*</span> <span class=""k"">FROM</span> <span class=""n"">users</span>
<span class=""k"">CROSS</span> <span class=""k"">JOIN</span> <span class=""n"">movies</span><span class=""p"">;</span>
</code></pre>

</div>



<p>It outputs every combination between the two tables:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight plaintext""><code> id | name | id |   name
----+------+----+-----------
  1 | John |  1 | Star Wars
  1 | John |  2 | Star Trek
  2 | Ana  |  1 | Star Wars
  2 | Ana  |  2 | Star Trek
  3 | Kate |  1 | Star Wars
  3 | Kate |  2 | Star Trek
(6 rows)
</code></pre>

</div>



<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--B8hcmmwX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w2y2ht6ikcglc2skzdw2.png""><img alt=""cartesian product"" height=""467"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--B8hcmmwX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w2y2ht6ikcglc2skzdw2.png"" width=""880"" /></a></p>

<p>🥁 <em>It's all good, man!</em> 🥁</p>




<h2>
  
  
  💡 An even more sophisticated example
</h2>

<p>Suppose that users can give a rating (not mandatory) for every movie they watch. </p>

<p>Let's create another table called <code>movies_ratings</code> that associates:</p>

<ul>
<li>a user</li>
<li>a movie</li>
<li>a rating</li>
</ul>

<p>In SQL, it's a good practice <strong>using relationships</strong>, thus avoiding redundancy and stale data.</p>

<p>Such relationships are defined using ID's as ""foreign keys"". So, in the <code>movies_rating</code> table, a <strong>user is represented by its ID</strong> and a <strong>movie is represented by its ID</strong>.<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight sql""><code><span class=""k"">CREATE</span> <span class=""k"">TABLE</span> <span class=""n"">movies_ratings</span> 
<span class=""p"">(</span><span class=""n"">user_id</span> <span class=""nb"">INTEGER</span><span class=""p"">,</span> <span class=""n"">movie_id</span> <span class=""nb"">INTEGER</span><span class=""p"">,</span> <span class=""n"">rating</span> <span class=""nb"">INTEGER</span><span class=""p"">);</span>
</code></pre>

</div>



<p>And insert some data into it:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight sql""><code><span class=""k"">INSERT</span> <span class=""k"">INTO</span>
    <span class=""n"">movies_ratings</span> <span class=""p"">(</span><span class=""n"">user_id</span><span class=""p"">,</span> <span class=""n"">movie_id</span><span class=""p"">,</span> <span class=""n"">rating</span><span class=""p"">)</span>
<span class=""k"">VALUES</span>
    <span class=""p"">(</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">7</span><span class=""p"">),</span>
    <span class=""p"">(</span><span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">8</span><span class=""p"">),</span>
    <span class=""p"">(</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">1</span><span class=""p"">,</span> <span class=""mi"">6</span><span class=""p"">),</span>
    <span class=""p"">(</span><span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">2</span><span class=""p"">,</span> <span class=""mi"">10</span><span class=""p"">);</span>
</code></pre>

</div>



<p>When we query this table, we get the following output:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight plaintext""><code> user_id | movie_id | rating
---------+----------+--------
       1 |        1 |      7
       1 |        2 |      8
       2 |        1 |      6
       2 |        2 |     10
(4 rows)
</code></pre>

</div>



<p>The schema should look like the following:</p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--mEDrRsED--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ypewkj49z9bsf5xpdwha.png""><img alt=""schema"" height=""455"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--mEDrRsED--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ypewkj49z9bsf5xpdwha.png"" width=""880"" /></a></p>

<p>For reporting, we'd like to combine the data of <code>movies_ratings</code> with users and movies so we can display their names, something like that:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight plaintext""><code> name |   movie    | rating
------+-----------+--------
 Ana  | Star Trek |     10
 John | Star Trek |      8
 John | Star Wars |      7
 Ana  | Star Wars |      6
(4 rows)
</code></pre>

</div>



<p>Once we got a third table into the game - the <code>movies_ratings</code> table -, and because its structure differs form the other two tables, we can no longer use basic set operators such as <em>UNION, INTERSECT or EXCEPT</em> to combine data between different tables.</p>

<p>We need something like a <em>cartesian product</em>, but not doing every combination, only under certain conditions, <strong>based on a related column</strong>.</p>

<p>That's what we're going to explore in the next section: a <strong>world of JOINs</strong>.</p>




<h2>
  
  
  🥁 JOIN to the world
</h2>

<p>With SQL <a href=""https://www.w3schools.com/sql/sql_join.asp"">JOIN</a>, we can combine rows across different tables but applying a specific condition.</p>

<p>The clause may have <strong>different types of JOIN</strong> depending on the situation.</p>

<p>In case we want to combine all data from the first table (left) with the second table (right), <strong>but discarding the rows that do not appear in both tables</strong>, we use <strong>INNER JOIN</strong>.</p>

<h3>
  
  
  🔵 INNER JOIN
</h3>

<p>Should we combine all the values from <code>users</code> with <code>movies_ratings</code>, discarding rows that don't appear in both tables:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight sql""><code><span class=""k"">SELECT</span> <span class=""o"">*</span> <span class=""k"">FROM</span> <span class=""n"">users</span>
<span class=""k"">INNER</span> <span class=""k"">JOIN</span> <span class=""n"">movies_ratings</span> <span class=""k"">ON</span> <span class=""n"">movies_ratings</span><span class=""p"">.</span><span class=""n"">user_id</span> <span class=""o"">=</span> <span class=""n"">users</span><span class=""p"">.</span><span class=""n"">id</span><span class=""p"">;</span>
</code></pre>

</div>



<p>Output:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight plaintext""><code> id | name | user_id | movie_id | rating
----+------+---------+----------+--------
  1 | John |       1 |        1 |      7
  1 | John |       1 |        2 |      8
  2 | Ana  |       2 |        1 |      6
  2 | Ana  |       2 |        2 |     10
(4 rows)
</code></pre>

</div>



<p>Note that:</p>

<ul>
<li>John voted two times</li>
<li>Ana too</li>
<li>Kate haven't registered any vote, so Kate was discarded in the <em>INNER JOIN</em>
</li>
</ul>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--LL03TO3m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0qhye55p7pdas7v1z2ui.png""><img alt=""inner join"" height=""547"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--LL03TO3m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0qhye55p7pdas7v1z2ui.png"" width=""880"" /></a></p>

<blockquote>
<p>💡 Note<br />
In PostgreSQL, we can use <code>INNER JOIN</code> or simply <code>JOIN</code>. By default, without specifying the JOIN type, PostgreSQL will perform an <strong>INNER JOIN</strong></p>
</blockquote>

<p>But what if we wanted to display even Kate in the JOIN but with <em>null values</em>? In other words, how to <strong>keep every row in both tables</strong> even if the condition wasn't satisfied?</p>

<h3>
  
  
  🔵 FULL OUTER JOIN
</h3>

<p>The SQL <strong>FULL OUTER JOIN</strong> will keep every row from both tables even if the condition wasn't satisfied.<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight sql""><code><span class=""k"">SELECT</span> <span class=""o"">*</span> <span class=""k"">FROM</span> <span class=""n"">users</span>
<span class=""k"">FULL</span> <span class=""k"">OUTER</span> <span class=""k"">JOIN</span> <span class=""n"">movies_ratings</span> <span class=""k"">ON</span> <span class=""n"">movies_ratings</span><span class=""p"">.</span><span class=""n"">user_id</span> <span class=""o"">=</span> <span class=""n"">users</span><span class=""p"">.</span><span class=""n"">id</span><span class=""p"">;</span>
</code></pre>

</div>



<p>Which produces the output:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight plaintext""><code> id | name | user_id | movie_id | rating
----+------+---------+----------+--------
  1 | John |       1 |        1 |      7
  1 | John |       1 |        2 |      8
  2 | Ana  |       2 |        1 |      6
  2 | Ana  |       2 |        2 |     10
  3 | Kate |         |          |
(5 rows)
</code></pre>

</div>



<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--o0ySar-X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ogwig30ggqg9u8xt413i.png""><img alt=""full join"" height=""569"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--o0ySar-X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ogwig30ggqg9u8xt413i.png"" width=""880"" /></a></p>

<blockquote>
<p>💡 Note<br />
In PostgreSQL, we can use <code>FULL OUTER JOIN</code> or simply <code>FULL JOIN</code></p>
</blockquote>

<p>Also, SQL provides another type of JOIN, which combines two tables (left and right) but <strong>keeps all rows from the left table only</strong>, even if they do not appear in the right table.</p>

<p>Yes, we are talking about the <strong>LEFT OUTER JOIN</strong>.</p>

<h3>
  
  
  🔵 LEFT OUTER JOIN
</h3>

<p>The SQL <strong>LEFT OUTER JOIN</strong> will <strong>keep every row from the left table</strong> even if they do not appear in the right table.<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight sql""><code><span class=""k"">SELECT</span> <span class=""o"">*</span> <span class=""k"">FROM</span> <span class=""n"">users</span>
<span class=""k"">LEFT</span> <span class=""k"">OUTER</span> <span class=""k"">JOIN</span> <span class=""n"">movies_ratings</span> <span class=""k"">ON</span> <span class=""n"">movies_ratings</span><span class=""p"">.</span><span class=""n"">user_id</span> <span class=""o"">=</span> <span class=""n"">users</span><span class=""p"">.</span><span class=""n"">id</span><span class=""p"">;</span>
</code></pre>

</div>



<p>Which produces the output:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight plaintext""><code> id | name | user_id | movie_id | rating
----+------+---------+----------+--------
  1 | John |       1 |        1 |      7
  1 | John |       1 |        2 |      8
  2 | Ana  |       2 |        1 |      6
  2 | Ana  |       2 |        2 |     10
  3 | Kate |         |          |
(5 rows)
</code></pre>

</div>



<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--bgyK7VjN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s4mt6we9y4w6t4u85tyc.png""><img alt=""left join"" height=""618"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--bgyK7VjN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s4mt6we9y4w6t4u85tyc.png"" width=""880"" /></a></p>

<blockquote>
<p>💡 Note<br />
In PostgreSQL, we can use <code>LEFT OUTER JOIN</code> or simply <code>LEFT JOIN</code></p>
</blockquote>

<p>On the other hand, there's also the opposite direction: <strong>RIGHT OUTER JOIN</strong>.</p>

<h3>
  
  
  🔵 RIGHT OUTER JOIN
</h3>

<p>The SQL <strong>RIGHT OUTER JOIN</strong> will <strong>keep every row from the right table</strong> even if they do not appear in the left table.</p>

<p>Please note that we'll invert the tables, <code>movies_ratings</code> will be the <strong>left table</strong> whereas <code>users</code> will be the <strong>right table</strong>:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight sql""><code><span class=""k"">SELECT</span> <span class=""o"">*</span> <span class=""k"">FROM</span> <span class=""n"">movies_ratings</span>
<span class=""k"">RIGHT</span> <span class=""k"">OUTER</span> <span class=""k"">JOIN</span> <span class=""n"">users</span> <span class=""k"">ON</span> <span class=""n"">movies_ratings</span><span class=""p"">.</span><span class=""n"">user_id</span> <span class=""o"">=</span> <span class=""n"">users</span><span class=""p"">.</span><span class=""n"">id</span><span class=""p"">;</span>
</code></pre>

</div>



<p>Which produces the output:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight plaintext""><code> user_id | movie_id | rating | id | name
---------+----------+--------+----+------
       1 |        1 |      7 |  1 | John
       1 |        2 |      8 |  1 | John
       2 |        1 |      6 |  2 | Ana
       2 |        2 |     10 |  2 | Ana
         |          |        |  3 | Kate
(5 rows)
</code></pre>

</div>



<p>With the tables inverted, in case we applied <code>LEFT JOIN</code>, Kate would be discarded. </p>

<p>But as we applied <code>RIGHT JOIN</code> (<em>users</em> are in the right-side), <strong>Kate was kept</strong> in the JOIN even not appearing in the left table <em>movies_ratings</em>.</p>

<blockquote>
<p>💡 Note<br />
In PostgreSQL, we can use <code>RIGHT OUTER JOIN</code> or simply <code>RIGHT JOIN</code></p>
</blockquote>




<h2>
  
  
  Putting all together
</h2>

<p>Now that we understand about different JOIN strategies in SQL, let's build a query where we display:</p>

<ul>
<li>the user name</li>
<li>the movie title</li>
<li>the rating</li>
</ul>

<p>...<strong>keeping users who didn't vote</strong>. </p>

<p><em>Let's write the query in baby steps</em>.</p>

<p>First, we project the fields in SELECT:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight sql""><code><span class=""k"">SELECT</span>
    <span class=""n"">users</span><span class=""p"">.</span><span class=""n"">name</span><span class=""p"">,</span>
    <span class=""n"">movies</span><span class=""p"">.</span><span class=""n"">name</span><span class=""p"">,</span>
    <span class=""n"">movies_ratings</span><span class=""p"">.</span><span class=""n"">rating</span>
<span class=""k"">FROM</span> <span class=""n"">users</span>
</code></pre>

</div>



<p>As such, we should JOIN <strong>movies</strong> and <strong>movies_ratings</strong> tables.</p>

<p>Next, we'll perform a <code>LEFT JOIN</code> with the movies_ratings, because we want to <strong>keep all users</strong> even those who didin't vote.<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight sql""><code><span class=""k"">SELECT</span>
    <span class=""n"">users</span><span class=""p"">.</span><span class=""n"">name</span><span class=""p"">,</span>
    <span class=""n"">movies</span><span class=""p"">.</span><span class=""n"">name</span><span class=""p"">,</span>
    <span class=""n"">movies_ratings</span><span class=""p"">.</span><span class=""n"">rating</span>
<span class=""k"">FROM</span> <span class=""n"">users</span>
<span class=""k"">LEFT</span> <span class=""k"">JOIN</span> <span class=""n"">movies_ratings</span> <span class=""k"">ON</span> <span class=""n"">users</span><span class=""p"">.</span><span class=""n"">id</span> <span class=""o"">=</span> <span class=""n"">movies_ratings</span><span class=""p"">.</span><span class=""n"">user_id</span>
</code></pre>

</div>



<p>The following step consists of joining the <strong>movies table</strong> as well. </p>

<p>But keep in mind that at this moment, the <strong>left table is the result of the first join</strong> and the <strong>right table will be the movies table</strong>.</p>

<p>So if we apply <code>JOIN</code>, Kate will be discarded as she doesn't appear in the movies table. We then should use <code>LEFT JOIN</code> as well:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight sql""><code><span class=""k"">SELECT</span>
    <span class=""n"">users</span><span class=""p"">.</span><span class=""n"">name</span><span class=""p"">,</span>
    <span class=""n"">movies</span><span class=""p"">.</span><span class=""n"">name</span><span class=""p"">,</span>
    <span class=""n"">movies_ratings</span><span class=""p"">.</span><span class=""n"">rating</span>
<span class=""k"">FROM</span> <span class=""n"">users</span>
<span class=""k"">LEFT</span> <span class=""k"">JOIN</span> <span class=""n"">movies_ratings</span> <span class=""k"">ON</span> <span class=""n"">users</span><span class=""p"">.</span><span class=""n"">id</span> <span class=""o"">=</span> <span class=""n"">movies_ratings</span><span class=""p"">.</span><span class=""n"">user_id</span>
<span class=""k"">LEFT</span> <span class=""k"">JOIN</span> <span class=""n"">movies</span> <span class=""k"">ON</span> <span class=""n"">movies</span><span class=""p"">.</span><span class=""n"">id</span> <span class=""o"">=</span> <span class=""n"">movies_ratings</span><span class=""p"">.</span><span class=""n"">movie_id</span>
</code></pre>

</div>



<p>Lastly, let's order the results by <em>rating</em> in <strong>descending order</strong>. </p>

<p>Also, in the <code>ORDER</code> clause, we'll perform the <code>NULLS LAST</code>, so Kate will appear at the bottom of the results, and not at the top:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight sql""><code><span class=""k"">SELECT</span>
    <span class=""n"">users</span><span class=""p"">.</span><span class=""n"">name</span> <span class=""k"">AS</span> <span class=""k"">user</span><span class=""p"">,</span>
    <span class=""n"">movies</span><span class=""p"">.</span><span class=""n"">name</span> <span class=""k"">AS</span> <span class=""n"">movie</span><span class=""p"">,</span>
    <span class=""n"">movies_ratings</span><span class=""p"">.</span><span class=""n"">rating</span>
<span class=""k"">FROM</span> <span class=""n"">users</span>
<span class=""k"">LEFT</span> <span class=""k"">JOIN</span> <span class=""n"">movies_ratings</span> <span class=""k"">ON</span> <span class=""n"">users</span><span class=""p"">.</span><span class=""n"">id</span> <span class=""o"">=</span> <span class=""n"">movies_ratings</span><span class=""p"">.</span><span class=""n"">user_id</span>
<span class=""k"">LEFT</span> <span class=""k"">JOIN</span> <span class=""n"">movies</span> <span class=""k"">ON</span> <span class=""n"">movies</span><span class=""p"">.</span><span class=""n"">id</span> <span class=""o"">=</span> <span class=""n"">movies_ratings</span><span class=""p"">.</span><span class=""n"">movie_id</span>
<span class=""k"">ORDER</span> <span class=""k"">BY</span> <span class=""n"">movies_ratings</span><span class=""p"">.</span><span class=""n"">rating</span> <span class=""k"">DESC</span> <span class=""n"">NULLS</span> <span class=""k"">LAST</span><span class=""p"">;</span>
</code></pre>

</div>



<p>Which outputs:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight plaintext""><code> user |   movie   | rating
------+-----------+--------
 Ana  | Star Trek |     10
 John | Star Trek |      8
 John | Star Wars |      7
 Ana  | Star Wars |      6
 Kate |           |
(5 rows)
</code></pre>

</div>



<p>Such a <strong>big Yay!</strong></p>

<blockquote>
<p>☢️ <em>Wait!</em><br />
What if I wanted to discard users who didn't vote in the results?</p>
</blockquote>

<p>No problem, you just need to perform an <strong>INNER JOIN</strong>, remember?<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight sql""><code><span class=""p"">...</span>
<span class=""k"">JOIN</span> <span class=""n"">movies_ratings</span> <span class=""k"">ON</span> <span class=""n"">users</span><span class=""p"">.</span><span class=""n"">id</span> <span class=""o"">=</span> <span class=""n"">movies_ratings</span><span class=""p"">.</span><span class=""n"">user_id</span>
<span class=""k"">JOIN</span> <span class=""n"">movies</span> <span class=""k"">ON</span> <span class=""n"">movies</span><span class=""p"">.</span><span class=""n"">id</span> <span class=""o"">=</span> <span class=""n"">movies_ratings</span><span class=""p"">.</span><span class=""n"">movie_id</span>
<span class=""p"">...</span>
</code></pre>

</div>



<h3>
  
  
  ➕ More
</h3>

<p>Moreover, we want to display a query which only brings the number of votes for each user. Then it should display as follows:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight plaintext""><code> user | votes
------+-------
 Ana  |     2
 John |     2
 Kate |     0
(3 rows)
</code></pre>

</div>



<p>First, we return all <strong>users</strong> <em>JOINed</em> with <strong>movies_ratings</strong>, projecting the <code>users.name</code> field:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight sql""><code><span class=""k"">SELECT</span>
    <span class=""n"">users</span><span class=""p"">.</span><span class=""n"">name</span>
<span class=""k"">FROM</span> <span class=""n"">users</span>
<span class=""k"">LEFT</span> <span class=""k"">JOIN</span> <span class=""n"">movies_ratings</span> <span class=""k"">ON</span> <span class=""n"">users</span><span class=""p"">.</span><span class=""n"">id</span> <span class=""o"">=</span> <span class=""n"">movies_ratings</span><span class=""p"">.</span><span class=""n"">user_id</span>

 <span class=""n"">name</span>
<span class=""c1"">------</span>
 <span class=""n"">John</span>
 <span class=""n"">John</span>
 <span class=""n"">Ana</span>
 <span class=""n"">Ana</span>
 <span class=""n"">Kate</span>
<span class=""p"">(</span><span class=""mi"">5</span> <span class=""k"">rows</span><span class=""p"">)</span>
</code></pre>

</div>



<p>Now, we want to group users by their names. In SQL, we can use the clause <strong>GROUP BY</strong>.<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight sql""><code><span class=""k"">SELECT</span>
    <span class=""n"">users</span><span class=""p"">.</span><span class=""n"">name</span>
<span class=""k"">FROM</span> <span class=""n"">users</span>
<span class=""k"">LEFT</span> <span class=""k"">JOIN</span> <span class=""n"">movies_ratings</span> <span class=""k"">ON</span> <span class=""n"">users</span><span class=""p"">.</span><span class=""n"">id</span> <span class=""o"">=</span> <span class=""n"">movies_ratings</span><span class=""p"">.</span><span class=""n"">user_id</span>
<span class=""k"">GROUP</span> <span class=""k"">BY</span> <span class=""n"">users</span><span class=""p"">.</span><span class=""n"">name</span>

 <span class=""n"">name</span>
<span class=""c1"">------</span>
 <span class=""n"">Kate</span>
 <span class=""n"">Ana</span>
 <span class=""n"">John</span>
<span class=""p"">(</span><span class=""mi"">3</span> <span class=""k"">rows</span><span class=""p"">)</span>
</code></pre>

</div>



<p>Next, we want to project another field in the SELECT, which are the <strong>count of votes of each user</strong>.</p>

<p>PostgreSQL provides a function called <strong>COUNT</strong>, which does the job: you can <em>count on an arbitrary field</em> that belongs to a selected projection.<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight sql""><code><span class=""k"">SELECT</span>
    <span class=""n"">users</span><span class=""p"">.</span><span class=""n"">name</span><span class=""p"">,</span>
    <span class=""k"">COUNT</span><span class=""p"">(</span><span class=""n"">movies_ratings</span><span class=""p"">.</span><span class=""n"">rating</span><span class=""p"">)</span> <span class=""k"">AS</span> <span class=""n"">votes</span>
<span class=""k"">FROM</span> <span class=""n"">users</span>
<span class=""k"">LEFT</span> <span class=""k"">JOIN</span> <span class=""n"">movies_ratings</span> <span class=""k"">ON</span> <span class=""n"">users</span><span class=""p"">.</span><span class=""n"">id</span> <span class=""o"">=</span> <span class=""n"">movies_ratings</span><span class=""p"">.</span><span class=""n"">user_id</span>
<span class=""k"">GROUP</span> <span class=""k"">BY</span> <span class=""n"">users</span><span class=""p"">.</span><span class=""n"">name</span>
</code></pre>

</div>



<p>Last but not least, let's order by the counter of votes, so Kate with 0 votes will appear at the bottom:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight sql""><code><span class=""k"">SELECT</span>
    <span class=""n"">users</span><span class=""p"">.</span><span class=""n"">name</span><span class=""p"">,</span>
    <span class=""k"">COUNT</span><span class=""p"">(</span><span class=""n"">movies_ratings</span><span class=""p"">.</span><span class=""n"">rating</span><span class=""p"">)</span> <span class=""k"">AS</span> <span class=""n"">votes</span>
<span class=""k"">FROM</span> <span class=""n"">users</span>
<span class=""k"">LEFT</span> <span class=""k"">JOIN</span> <span class=""n"">movies_ratings</span> <span class=""k"">ON</span> <span class=""n"">users</span><span class=""p"">.</span><span class=""n"">id</span> <span class=""o"">=</span> <span class=""n"">movies_ratings</span><span class=""p"">.</span><span class=""n"">user_id</span>
<span class=""k"">GROUP</span> <span class=""k"">BY</span> <span class=""n"">users</span><span class=""p"">.</span><span class=""n"">name</span>
<span class=""k"">ORDER</span> <span class=""k"">BY</span> <span class=""k"">COUNT</span><span class=""p"">(</span><span class=""n"">movies_ratings</span><span class=""p"">.</span><span class=""n"">rating</span><span class=""p"">)</span> <span class=""k"">DESC</span><span class=""p"">;</span>
</code></pre>

</div>



<p>And, <em>voilà</em>:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight plaintext""><code> name | votes
------+-------
 Ana  |     2
 John |     2
 Kate |     0
(3 rows)
</code></pre>

</div>






<h2>
  
  
  Wrapping Up
</h2>

<p>This post was a try to explain the basics of SQL and set theory, along with a practical example towards an explanation of different JOIN strategies.</p>

<p>I hope you could learn a bit more about SQL JOIN and SQL in general.</p>

<p>Cheers!</p>"'https://dev.to/leandronsp/sql-join-explained-53lc'https://res.cloudinary.com/practicaldev/image/fetch/s--xjY2jN0c--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijlu4docg232ilirpxms.png'"['https://res.cloudinary.com/practicaldev/image/fetch/s--JcX1-wOx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mfwgkyw2t82696clvkzl.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--KIoGwpW5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7qf1g4n1tjrx2eqnir93.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--o0ySar-X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ogwig30ggqg9u8xt413i.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--pcSkTMZL--/c_limit,f_auto,fl_progressive,q_80,w_190/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--B8hcmmwX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w2y2ht6ikcglc2skzdw2.png', 'https://dev.to/assets/sparkle-heart-5f9bee3767e18deb1bb725290cb151c25234768a0e9a2bd39370c382d02920cf.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--IAsJ1S24--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4212qqe8h1bxfn427a6.png', 'https://dev.to/assets/fire-f60e7a582391810302117f987b22a8ef04a2fe0df7e3258a5f49332df1cec71e.svg', 'https://dev.to/assets/multi-unicorn-b44d6f8c23cdd00964192bedc38af3e82463978aa611b4365bd33a0f1f4f3e97.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--LL03TO3m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0qhye55p7pdas7v1z2ui.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--WPGZL0VF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijac3114j1k0ot2ishrj.png', 'https://dev.to/assets/raised-hands-74b2099fd66a39f2d7eed9305ee0f4553df0eb7b4f11b01b6b1b499973048fe5.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--mEDrRsED--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ypewkj49z9bsf5xpdwha.png', 'https://dev-to-uploads.s3.amazonaws.com/uploads/logos/resized_logo_UQww2soKuUsjaOGNB38o.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--lMpcSi0m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2cltv1x43z7hhm2et20r.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--xjY2jN0c--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijlu4docg232ilirpxms.png', 'https://dev.to/assets/exploding-head-daceb38d627e6ae9b730f36a1e390fca556a4289d5a41abb2c35068ad3e2c4b5.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--6EBo5jIG--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/29160/69e4d694-c9ee-4008-b95b-5710be4d2df8.jpeg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--85w4BaiB--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/656372/8d004bb2-9311-4778-8275-997921063881.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--LcqPyJmr--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/29160/69e4d694-c9ee-4008-b95b-5710be4d2df8.jpeg', 'https://dev.to/assets/heart-plus-active-9ea3b22f2bc311281db911d416166c5f430636e76b15cd5df6b3b841d830eefa.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--8t-VGqgg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_775/https://dev-to-uploads.s3.amazonaws.com/i/7p7qe33hhlj5zdi3bj82.jpg', 'https://dev.to/assets/loading-ellipsis-b714cf681fd66c853ff6f03dd161b77aa3c80e03cdc06f478b695f42770421e9.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--RmY55OKL--/c_limit,f_auto,fl_progressive,q_auto,w_256/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--VM2XE7Qw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oekbrkrjcu7ewrq06csq.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--bgyK7VjN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s4mt6we9y4w6t4u85tyc.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--fir8DcuX--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijlu4docg232ilirpxms.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--pIpgOS6l--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/114176/c569c0db-9431-4319-ae0b-cb5aa7c7d0e3.png']"
3'LSBJ62D6P'RESTful: Boas práticas para design de API'"<p>Representational State Transfer (REST) é um estilo de arquitetura de software para sistemas distribuídos, amplamente utilizado na construção de APIs para a Web.</p>

<p>RESTful é um termo usado para descrever APIs da Web que aderem a esses princípios de design REST. Uma API da Web RESTful é baseada em recursos, que podem ser identificados por meio de URIs exclusivos. As ações que podem ser realizadas em um recurso são expressas por meio de métodos HTTP, como GET, POST, PUT e DELETE.</p>

<p>Esses princípios de design ajudam a tornar as APIs da Web mais simples, escaláveis, flexíveis e fáceis de entender e usar, permitindo a criação de sistemas mais robustos e interoperáveis.</p>

<h2>
  
  
  Por que o design de API é tão importante?
</h2>

<p>As pessoas fazem essa pergunta com bastante frequência e, para respondê-la:</p>

<p>As APIs REST são a face de qualquer serviço e, portanto, devem:</p>

<ol>
<li>Ser fáceis de entender, para que a integração seja simples</li>
<li>Ser bem documentadas, para que os comportamentos semânticos sejam entendidos (não apenas sintáticos)</li>
<li>Seguir padrões aceitos, como o HTTP</li>
</ol>




<h2>
  
  
  Projetando e desenvolvendo APIs REST altamente úteis
</h2>

<p>Existem várias convenções que seguimos na Hashmap ao projetar nossas APIs REST, para garantir que atendamos às expectativas listadas acima para o desenvolvimento de aceleradores e nossos projetos de consultoria.</p>

<p>Essas convenções são as seguintes:</p>

<h2>
  
  
  Use Substantivos na URI
</h2>

<p>As APIs REST devem ser projetadas para Recursos, que podem ser entidades ou serviços, etc., portanto, eles devem sempre ser substantivos. Por exemplo, em vez de <code>/createUsers</code>, use <code>/users</code>.</p>

<p>É importante considerar que os métodos HTTP precisam identificar suas rotas e ações de forma clara e entendível, vejamos os exemplos a seguir:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight plaintext""><code>GET /users
POST /users
PUT /users/{id}
GET /users/{id}
DELETE /users/{id}
</code></pre>

</div>



<p>Não use verbos:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight plaintext""><code>/getAllUsers
/createNewUsers 
/deleteAllRedUsers
</code></pre>

</div>






<h2>
  
  
  Plural ou Singular
</h2>

<p>Geralmente, preferimos usar plurais, mas não há uma regra rígida que impeça o uso do singular para o nome do recurso. A ideologia por trás do uso de plurais é:</p>

<p>Estamos operando em um recurso de uma coleção de recursos, então, para representar a coleção, usamos o plural.</p>

<p>Por exemplo, no caso de...<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight plaintext""><code>GET /users/123
</code></pre>

</div>



<p>o cliente está solicitando recuperar um recurso da coleção de um usuário com o id 123. Ao criar um recurso, queremos adicionar um recurso à coleção atual de recursos, então a API ficaria assim...<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight plaintext""><code>POST /users
</code></pre>

</div>



<p><em>Não misture substantivos singulares e plurais. Mantenha a simplicidade e use apenas substantivos no plural para todos os recursos.</em></p>




<h2>
  
  
  Deixe o Verbo HTTP Definir a Ação
</h2>

<p>De acordo com o ponto #1 acima, as APIs devem fornecer apenas substantivos para recursos e deixar os verbos HTTP (GET, POST, PUT, DELETE) definirem a ação a ser realizada em um recurso.</p>

<p><strong>POST:</strong>  É utilizado para criar um novo registro no banco de dados.<br />
<strong>GET:</strong> É utilizado para ler registros no banco de dados.<br />
<strong>PUT:</strong> É utilizado para atualizar um registro no banco de dados.<br />
<strong>PATCH:</strong> É utilizado para atualizar parte de um registro no banco de dados.<br />
<strong>DELETE:</strong> É utilizado para deletar um registro no banco de dados.</p>


<h2>
  
  
  Não use os métodos seguros de forma inadequada (idempotência)
</h2>

<p>Os métodos seguros são métodos HTTP que retornam a mesma representação de recursos independentemente do número de vezes que são chamados pelo cliente. GET, HEAD, OPTIONS e TRACE são definidos como seguros, o que significa que são apenas destinados a recuperar dados e não devem alterar o estado de um recurso em um servidor. Não use GET para excluir conteúdo, por exemplo...<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight plaintext""><code>GET /users/123/delete
</code></pre>

</div>



<p>Não é que isso não possa ser implementado, mas a especificação HTTP é violada neste caso.</p>

<p>Use os métodos HTTP de acordo com a ação que precisa ser executada.</p>




<h2>
  
  
  Represente Hierarquia de Recursos Através da URI
</h2>

<p>Se um recurso contiver sub-recursos, certifique-se de representá-lo na API para torná-lo mais explícito. Por exemplo, se um usuário possui itens e desejamos recuperar uma item específica por usuário, a API pode ser definida como GET <code>/users/123/posts/1</code>, o que recuperará o item com o ID 1 do usuário com o ID 123.</p>




<h2>
  
  
  Versione suas APIs
</h2>

<p>Versionar APIs sempre ajuda a garantir a compatibilidade retroativa de um serviço ao adicionar novos recursos ou atualizar funcionalidades existentes para novos clientes. Existem diferentes escolas de pensamento sobre como versionar sua API, mas a maioria delas se enquadra nas duas categorias abaixo:</p>

<p><strong>Headers:</strong></p>

<p>Existem 2 maneiras de especificar a versão nos headers:</p>

<p><strong>Header personalizado:</strong></p>

<p>Adicionar uma chave de header personalizado X-API-VERSION (ou qualquer outro header de escolha) pelo cliente pode ser usada por um serviço para rotear uma solicitação para o endpoint correto.</p>

<p><strong>Accept Header:</strong></p>

<p>Usando o header Accept para especificar sua versão, por exemplo:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight plaintext""><code>Accept: application/vnd.service.v2+json
</code></pre>

</div>



<p><strong>URL:</strong></p>

<p>Incorpore a versão na URL, como por exemplo:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight plaintext""><code>GET /v1/users
POST /v2/users
</code></pre>

</div>



<p>Embora ambos os métodos possam ser utilizados para versionar APIs, o método de URL oferece melhor descoberta de recursos ao olhar para a URL. É importante lembrar que a escolha do método de versionamento é uma decisão do desenvolvedor e ambas as abordagens têm suas vantagens e desvantagens.</p>




<h2>
  
  
  Retornar Representação
</h2>

<p>Os métodos POST, PUT ou PATCH, usados para criar um recurso ou atualizar campos em um recurso, devem sempre retornar uma representação atualizada do recurso como resposta, juntamente com um código de status apropriado, conforme descrito nos pontos a seguir.</p>

<p>Se o POST for bem-sucedido ao adicionar um novo recurso, ele deve retornar o código de status HTTP 201, juntamente com a URI do novo recurso criado no cabeçalho Location (conforme especificado na especificação HTTP). Por exemplo:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight json""><code><span class=""err"">POST</span><span class=""w""> </span><span class=""err"">/users</span><span class=""w"">

</span><span class=""err"">Request</span><span class=""w""> </span><span class=""err"">Body:</span><span class=""w"">
</span><span class=""p"">{</span><span class=""w"">
</span><span class=""nl"">""nome""</span><span class=""p"">:</span><span class=""w""> </span><span class=""s2"">""Novo usuário""</span><span class=""p"">,</span><span class=""w"">
</span><span class=""nl"">""idade""</span><span class=""p"">:</span><span class=""w""> </span><span class=""mi"">30</span><span class=""p"">,</span><span class=""w"">
</span><span class=""nl"">""email""</span><span class=""p"">:</span><span class=""w""> </span><span class=""s2"">""novo_usuario@email.com""</span><span class=""p"">,</span><span class=""w"">
</span><span class=""nl"">""cidade""</span><span class=""p"">:</span><span class=""w""> </span><span class=""s2"">""Rio de Janeiro""</span><span class=""w"">
</span><span class=""p"">}</span><span class=""w"">

</span><span class=""err"">Response:</span><span class=""w"">
</span><span class=""err"">Status</span><span class=""w""> </span><span class=""err"">Code:</span><span class=""w""> </span><span class=""mi"">201</span><span class=""w""> </span><span class=""err"">Created</span><span class=""w"">
</span><span class=""err"">Location:</span><span class=""w""> </span><span class=""err"">/users/</span><span class=""mi"">2</span><span class=""w"">
</span><span class=""p"">{</span><span class=""w"">
  </span><span class=""nl"">""id""</span><span class=""p"">:</span><span class=""w""> </span><span class=""mi"">2</span><span class=""p"">,</span><span class=""w"">
  </span><span class=""nl"">""nome""</span><span class=""p"">:</span><span class=""w""> </span><span class=""s2"">""Novo usuário""</span><span class=""p"">,</span><span class=""w"">
  </span><span class=""nl"">""idade""</span><span class=""p"">:</span><span class=""w""> </span><span class=""mi"">30</span><span class=""p"">,</span><span class=""w"">
  </span><span class=""nl"">""email""</span><span class=""p"">:</span><span class=""w""> </span><span class=""s2"">""novo_usuario@email.com""</span><span class=""p"">,</span><span class=""w"">
  </span><span class=""nl"">""cidade""</span><span class=""p"">:</span><span class=""w""> </span><span class=""s2"">""Rio de Janeiro""</span><span class=""w"">
</span><span class=""p"">}</span><span class=""w"">
</span></code></pre>

</div>



<p>Se o PUT ou PATCH for bem-sucedido ao atualizar um recurso existente, ele deve retornar o código de status HTTP 200 ou 204, juntamente com a representação atualizada do recurso. Por exemplo:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight json""><code><span class=""err"">PUT</span><span class=""w""> </span><span class=""err"">/users/</span><span class=""mi"">2</span><span class=""w"">

</span><span class=""err"">Request</span><span class=""w""> </span><span class=""err"">Body:</span><span class=""w"">
</span><span class=""p"">{</span><span class=""w"">
  </span><span class=""nl"">""nome""</span><span class=""p"">:</span><span class=""w""> </span><span class=""s2"">""Novo usuário update""</span><span class=""p"">,</span><span class=""w"">
  </span><span class=""nl"">""idade""</span><span class=""p"">:</span><span class=""w""> </span><span class=""mi"">35</span><span class=""p"">,</span><span class=""w"">
  </span><span class=""nl"">""email""</span><span class=""p"">:</span><span class=""w""> </span><span class=""s2"">""novo_usuario@email.com""</span><span class=""p"">,</span><span class=""w"">
  </span><span class=""nl"">""cidade""</span><span class=""p"">:</span><span class=""w""> </span><span class=""s2"">""Rio de Janeiro""</span><span class=""w"">
</span><span class=""p"">}</span><span class=""w"">

</span><span class=""err"">Response:</span><span class=""w"">
</span><span class=""err"">Status</span><span class=""w""> </span><span class=""err"">Code:</span><span class=""w""> </span><span class=""mi"">200</span><span class=""w""> </span><span class=""err"">OK</span><span class=""w"">
</span><span class=""p"">{</span><span class=""w"">
  </span><span class=""nl"">""id""</span><span class=""p"">:</span><span class=""w""> </span><span class=""mi"">2</span><span class=""p"">,</span><span class=""w"">
  </span><span class=""nl"">""nome""</span><span class=""p"">:</span><span class=""w""> </span><span class=""s2"">""Novo usuário update""</span><span class=""p"">,</span><span class=""w"">
  </span><span class=""nl"">""idade""</span><span class=""p"">:</span><span class=""w""> </span><span class=""mi"">35</span><span class=""p"">,</span><span class=""w"">
  </span><span class=""nl"">""email""</span><span class=""p"">:</span><span class=""w""> </span><span class=""s2"">""novo_usuario@email.com""</span><span class=""p"">,</span><span class=""w"">
  </span><span class=""nl"">""cidade""</span><span class=""p"">:</span><span class=""w""> </span><span class=""s2"">""Rio de Janeiro""</span><span class=""w"">
</span><span class=""p"">}</span><span class=""w"">
</span></code></pre>

</div>





<div class=""highlight js-code-highlight"">
<pre class=""highlight json""><code><span class=""err"">PATCH</span><span class=""w""> </span><span class=""err"">/users/</span><span class=""mi"">2</span><span class=""w"">
</span><span class=""err"">Request</span><span class=""w""> </span><span class=""err"">Body:</span><span class=""w"">
</span><span class=""p"">{</span><span class=""w"">
  </span><span class=""nl"">""name""</span><span class=""p"">:</span><span class=""w""> </span><span class=""s2"">""Novo usuário patch""</span><span class=""w"">
</span><span class=""p"">}</span><span class=""w"">

</span><span class=""err"">Response:</span><span class=""w"">
</span><span class=""err"">Status</span><span class=""w""> </span><span class=""err"">Code:</span><span class=""w""> </span><span class=""mi"">204</span><span class=""w""> </span><span class=""err"">No</span><span class=""w""> </span><span class=""err"">Content</span><span class=""w"">
</span></code></pre>

</div>



<p>Certifique-se de documentar claramente como suas respostas de API serão formatadas e quais códigos de status você usará em diferentes situações. Isso ajudará os clientes da sua API a entender como interagir com ela e a lidar com possíveis erros de forma eficaz.</p>




<h2>
  
  
  Filtro, busca e ordenação
</h2>

<p>Não crie URIs diferentes para buscar recursos com parâmetros de filtro, busca ou ordenação. Tente manter a URI simples e adicione parâmetros de consulta para representar parâmetros ou critérios para buscar um recurso (um único tipo de recurso).</p>

<p><strong>Filtragem:</strong></p>

<p>Use parâmetros de consulta definidos na URL para filtrar um recurso do servidor. Por exemplo, se quisermos buscar todos os posts publicados por um usuário, podemos projetar uma API como esta:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight plaintext""><code>GET /users/123/posts?state=published
</code></pre>

</div>



<p>No exemplo acima, state é o parâmetro de filtro.</p>

<p><strong>Busca:</strong></p>

<p>Para obter resultados com consultas de busca avançadas em vez de filtros básicos, pode-se usar vários parâmetros em uma URI para solicitar a busca de um recurso do servidor.<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight plaintext""><code>GET /users/123/posts?state=published&amp;ta=scala
</code></pre>

</div>



<p>A consulta acima busca por posts que são publicados com a tag Scala. Hoje em dia, é muito comum usar o Solr como ferramenta de busca, pois ele oferece capacidades avançadas para buscar um documento e você pode projetar sua API da seguinte forma:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight http""><code><span class=""err"">GET /users/123/posts?q=sometext&amp;fq=state:published,ta:scala
</span></code></pre>

</div>



<p>Isso buscará posts para texto livre ""sometext"" (q) e filtrará os resultados em fq state como publicado e tendo a tag Scala.</p>

<p><strong>Ordenação:</strong></p>

<p>Os parâmetros de ordenação ASC e DESC podem ser passados na URL, como por exemplo:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight plaintext""><code>GET /users/123/posts?sort=-updated_at
</code></pre>

</div>



<p>Retorna posts ordenados em ordem decrescente de data e hora de atualização.</p>




<h2>
  
  
  HATEOAS
</h2>

<p>HATEOAS (Hypermedia As The Engine Of Application State) é uma restrição da arquitetura REST que permite que um cliente navegue facilmente através de um recurso e suas ações disponíveis sem precisar conhecer como interagir com o aplicativo. Os metadados são incorporados nas respostas do servidor, o que torna a navegação mais fácil.<br />
Para entender melhor, vamos analisar a resposta abaixo de recuperação do usuário com o ID 123 do servidor:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight json""><code><span class=""p"">{</span><span class=""w"">
   </span><span class=""nl"">""name""</span><span class=""p"">:</span><span class=""w""> </span><span class=""s2"">""John Doe""</span><span class=""p"">,</span><span class=""w"">
   </span><span class=""nl"">""links""</span><span class=""p"">:</span><span class=""w""> </span><span class=""p"">[</span><span class=""w"">
       </span><span class=""p"">{</span><span class=""w"">
           </span><span class=""nl"">""rel""</span><span class=""p"">:</span><span class=""w""> </span><span class=""s2"">""self""</span><span class=""p"">,</span><span class=""w"">
           </span><span class=""nl"">""href""</span><span class=""p"">:</span><span class=""w""> </span><span class=""s2"">""http://localhost:8080/users/123""</span><span class=""w"">
       </span><span class=""p"">},</span><span class=""w"">
       </span><span class=""p"">{</span><span class=""w"">
           </span><span class=""nl"">""rel""</span><span class=""p"">:</span><span class=""w""> </span><span class=""s2"">""posts""</span><span class=""p"">,</span><span class=""w"">
           </span><span class=""nl"">""href""</span><span class=""p"">:</span><span class=""w""> </span><span class=""s2"">""http://localhost:8080/users/123/posts""</span><span class=""w"">
       </span><span class=""p"">},</span><span class=""w"">
       </span><span class=""p"">{</span><span class=""w"">
           </span><span class=""nl"">""rel""</span><span class=""p"">:</span><span class=""w""> </span><span class=""s2"">""address""</span><span class=""p"">,</span><span class=""w"">
           </span><span class=""nl"">""href""</span><span class=""p"">:</span><span class=""w""> </span><span class=""s2"">""http://localhost:8080/users/123/address""</span><span class=""w"">
       </span><span class=""p"">}</span><span class=""w"">
   </span><span class=""p"">]</span><span class=""w"">
</span><span class=""p"">}</span><span class=""w"">
</span></code></pre>

</div>



<p>Em alguns casos, pode ser mais simples omitir o formato de links e incluir os links como campos dentro de um recurso, como exemplificado abaixo:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight json""><code><span class=""p"">{</span><span class=""w"">
   </span><span class=""nl"">""name""</span><span class=""p"">:</span><span class=""w""> </span><span class=""s2"">""John Doe""</span><span class=""p"">,</span><span class=""w"">
   </span><span class=""nl"">""self""</span><span class=""p"">:</span><span class=""w""> </span><span class=""s2"">""http://localhost:8080/users/123""</span><span class=""p"">,</span><span class=""w"">
   </span><span class=""nl"">""posts""</span><span class=""p"">:</span><span class=""w""> </span><span class=""s2"">""http://localhost:8080/users/123""</span><span class=""p"">,</span><span class=""w"">
   </span><span class=""nl"">""address""</span><span class=""p"">:</span><span class=""w""> </span><span class=""s2"">""http://localhost:8080/users/123/address""</span><span class=""w"">
</span><span class=""p"">}</span><span class=""w"">
</span></code></pre>

</div>



<p>A decisão de especificar links como campos de um recurso ou usar o formato de links depende do tamanho e dos campos dos recursos, bem como das ações que podem ser executadas neles. Quando os recursos contêm muitos campos que o usuário pode não querer percorrer, é recomendável fornecer navegação para sub-recursos e implementar o HATEOAS.</p>




<h2>
  
  
  Autenticação e Autorização Sem Estado
</h2>

<p>A autenticação e autorização em APIs REST devem ser stateless. Cada solicitação deve ser auto-suficiente e atendida sem conhecimento da solicitação anterior. Isso é especialmente importante para autorizar ações de usuários.</p>

<p>Anteriormente, os desenvolvedores armazenavam as informações do usuário em sessões no lado do servidor, o que não é uma abordagem escalável. Por isso, cada solicitação deve conter todas as informações de um usuário (se for uma API segura), em vez de depender de solicitações anteriores.</p>

<p>Isso não limita as APIs a um usuário como uma pessoa autorizada, já que também permite a autorização de serviço para serviço. Para autorização de usuário, a combinação de JWT (JSON Web Token) com OAuth2 oferece uma maneira de alcançar isso. Além disso, para comunicação de serviço para serviço, tente passar a chave da API criptografada no cabeçalho.</p>




<h2>
  
  
  Swagger para Documentação
</h2>

<p><a href=""https://swagger.io/"">Swagger</a> é uma ferramenta popular para documentação de APIs REST, fornecendo uma maneira de explorar o uso de uma API específica e permitindo que os desenvolvedores entendam o comportamento semântico subjacente. Além disso, existem vários plugins disponíveis para diversas linguagens de programação que permitem gerar o Swagger automaticamente a partir do código-fonte. Esses plugins podem ser facilmente integrados às ferramentas de construção de software existentes, tornando a documentação da API uma parte fácil e automatizada do processo de desenvolvimento. Algumas opções populares incluem o swagger-jaxrs-doclet para Java, o Swashbuckle para .NET, o Flask-RESTPlus para Python e o SpringFox para Spring Framework. Com esses plugins, é possível gerar documentação de API atualizada e precisa com apenas algumas linhas de código.</p>




<h2>
  
  
  Códigos de Status HTTP
</h2>

<p>Use códigos de status HTTP para fornecer a resposta a um cliente. Pode ser uma resposta de sucesso ou falha, mas deve definir o que o sucesso ou falha respectivo significa do ponto de vista do servidor.</p>

<p>Abaixo estão as categorias de respostas por seus códigos de status:</p>

<p><strong>2xx Sucesso</strong></p>

<p>200 OK: Retornado por uma operação GET ou DELETE bem-sucedida. PUT ou POST também podem usar isso, se o serviço não quiser retornar um recurso de volta ao cliente após a criação ou modificação.</p>

<p>201 Created: Resposta para uma criação de recurso bem-sucedida por uma solicitação POST.</p>

<p><strong>3xx Redirecionamento</strong></p>

<p>304 Not Modified: Usado se o cabeçalho de cache HTTP for implementado.</p>

<p><strong>4xx Erros do cliente</strong></p>

<p>400 Bad Request: Quando o corpo da solicitação HTTP não pode ser analisado. Por exemplo, se uma API estiver esperando um corpo em formato JSON para uma solicitação POST, mas o corpo da solicitação estiver malformado.</p>

<p>401 Unauthorized: A autenticação não foi bem-sucedida (ou as credenciais não foram fornecidas) ao acessar a API.</p>

<p>403 Forbidden: Se um usuário não está autorizado a realizar uma ação, embora as informações de autenticação estejam corretas.</p>

<p>404 Not Found: Se o recurso solicitado não estiver disponível no servidor.</p>

<p>405 Method Not Allowed: Se o usuário estiver tentando violar um contrato de API, por exemplo, tentando atualizar um recurso usando um método POST.</p>

<p>409 Conflict: O servidor não pôde completar a solicitação devido a um conflito com o estado atual do recurso.</p>

<p>422 Unprocessable Entity: O servidor entende o tipo de conteúdo da solicitação, mas não pode processá-lo devido a erros semânticos.</p>

<p><strong>5xx Erros do servidor</strong></p>

<p>Esses erros ocorrem devido a falhas do servidor ou problemas com a infraestrutura subjacente.</p>

<p><em>É importante lembrar que esses são alguns dos status codes mais comuns e amplamente utilizados. Existem muitos outros códigos de status HTTP que podem ser usados para fornecer uma resposta mais precisa ao cliente. Para obter uma lista completa e detalhada de todos os códigos de status HTTP, você pode acessar a documentação oficial no seguinte link: <a href=""https://datatracker.ietf.org/doc/html/rfc7231"">https://datatracker.ietf.org/doc/html/rfc7231</a>.</em></p>




<h2>
  
  
  Conclusão
</h2>

<p>É importante lembrar que seguir as boas práticas de design de APIs RESTful não só torna a API mais fácil de usar, mas também melhora a segurança, escalabilidade e manutenção do serviço. Ao utilizar os padrões e princípios discutidos neste artigo, você poderá criar APIs mais confiáveis, flexíveis e fáceis de evoluir. Além disso, a maturidade das APIs pode ser facilmente documentada usando o <a href=""https://restfulapi.net/richardson-maturity-model/"">Modelo de Maturidade Richardson</a>.</p>"'https://dev.to/marcellorg/restful-boas-praticas-para-design-de-api-4j4p'https://res.cloudinary.com/practicaldev/image/fetch/s--Z76yK8ap--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ffnj6het5tz7k3im9519.jpg'"['https://dev.to/assets/raised-hands-74b2099fd66a39f2d7eed9305ee0f4553df0eb7b4f11b01b6b1b499973048fe5.svg', 'https://dev.to/assets/loading-ellipsis-b714cf681fd66c853ff6f03dd161b77aa3c80e03cdc06f478b695f42770421e9.svg', 'https://dev-to-uploads.s3.amazonaws.com/uploads/logos/resized_logo_UQww2soKuUsjaOGNB38o.png', 'https://dev.to/assets/fire-f60e7a582391810302117f987b22a8ef04a2fe0df7e3258a5f49332df1cec71e.svg', 'https://dev.to/assets/multi-unicorn-b44d6f8c23cdd00964192bedc38af3e82463978aa611b4365bd33a0f1f4f3e97.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--RmY55OKL--/c_limit,f_auto,fl_progressive,q_auto,w_256/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--E-aqBzGq--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1032484/8175520b-1b27-40db-8875-fcf3d0974727.jpeg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--Wc0m0e2h--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ffnj6het5tz7k3im9519.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--pcSkTMZL--/c_limit,f_auto,fl_progressive,q_80,w_190/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://dev.to/assets/exploding-head-daceb38d627e6ae9b730f36a1e390fca556a4289d5a41abb2c35068ad3e2c4b5.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--b0O8QGSF--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/136661/6eef6885-797e-458e-93eb-1f6d618adbe9.jpeg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--Z76yK8ap--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ffnj6het5tz7k3im9519.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--vdfHm5DC--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1032484/8175520b-1b27-40db-8875-fcf3d0974727.jpeg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--sdVM2heK--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/891339/53b23752-37b5-48b5-ba22-a934b54bb4ab.jpg', 'https://dev.to/assets/sparkle-heart-5f9bee3767e18deb1bb725290cb151c25234768a0e9a2bd39370c382d02920cf.svg', 'https://dev.to/assets/heart-plus-active-9ea3b22f2bc311281db911d416166c5f430636e76b15cd5df6b3b841d830eefa.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--esvUpwZQ--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/772506/b8acb44a-0d5d-47bb-aadf-4d31e951c369.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--_K96mZ8A--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/477686/20e9cb71-fe00-45a4-8972-427e08bc00be.png']"
4'50ZO8S7ZX'💥 Top 10 JavaScript Libraries and Frameworks to Watch in 2023 💥'"<p>JavaScript is a versatile programming language that powers most of the web applications we use today. With the increasing demand for dynamic and interactive web applications, JavaScript libraries and frameworks have become essential tools for developers. In this article, we will explore the 🔝 <strong>top 10</strong> JavaScript libraries and frameworks that are expected to gain popularity in 2023.</p>

<h2>
  
  
  1. React ⚛️
</h2>

<p>React is a popular front-end library for building dynamic user interfaces. It has a vast community and is widely used by big tech companies. React enables developers to create reusable UI components that can be used across multiple pages, making development more efficient.</p>

<h2>
  
  
  2. Vue.js 🖼️
</h2>

<p>Vue.js is another front-end framework that has gained popularity in recent years. It is a progressive framework that enables developers to build scalable and performant user interfaces. Vue.js is also known for its simplicity and easy-to-learn syntax, making it a popular choice for beginners.</p>

<h2>
  
  
  3. Angular 🅰️
</h2>

<p>Angular is a comprehensive front-end framework that enables developers to build complex web applications. It provides a robust set of features, including two-way data binding, dependency injection, and component-based architecture. Angular is widely used in enterprise-level applications and is backed by Google.</p>

<h2>
  
  
  4. React Native 📱
</h2>

<p>React Native is a cross-platform mobile development framework based on React. It enables developers to build native mobile applications using JavaScript, allowing them to reuse code across multiple platforms. React Native is widely used by mobile app developers, including Facebook, Instagram, and Airbnb.</p>

<h2>
  
  
  5. Express.js 🚀
</h2>

<p>Express.js is a popular back-end framework that enables developers to build scalable and robust web applications. It provides a simple and minimalist approach to web development, making it easy to create APIs and handle server-side logic.</p>

<h2>
  
  
  6. Next.js 🔜
</h2>

<p>Next.js is a front-end framework that enables developers to build server-side-rendered React applications. It provides an opinionated and easy-to-use approach to web development, making it a popular choice for building static sites and serverless applications.</p>

<h2>
  
  
  7. Redux 🔄
</h2>

<p>Redux is a popular state management library for React applications. It provides a predictable state container that enables developers to manage complex data flows in their applications. Redux is widely used in large-scale applications and is known for its simplicity and ease of use.</p>

<h2>
  
  
  8. GraphQL 🗂️
</h2>

<p>GraphQL is a query language for APIs that enables developers to retrieve data efficiently. It provides a flexible and powerful approach to data fetching, allowing developers to retrieve only the data they need. GraphQL is widely used in modern web applications and is supported by big tech companies like Facebook and GitHub.</p>

<h2>
  
  
  9. D3.js 📈
</h2>

<p>D3.js is a powerful data visualization library for JavaScript. It enables developers to create interactive and dynamic visualizations using a variety of data sources. D3.js is widely used in data-driven applications and is known for its flexibility and extensibility.</p>

<h2>
  
  
  10. Tensorflow.js 🤖
</h2>

<p>Tensorflow.js is a machine learning library for JavaScript that enables developers to build and train machine learning models in the browser. It provides a powerful and easy-to-use approach to machine learning, allowing developers to create intelligent applications with ease.</p>

<p>In conclusion, JavaScript libraries and frameworks are essential tools for modern web development. The 🔝 <strong>top 10</strong> JavaScript libraries and frameworks we have discussed in this article are expected to gain popularity in 2023 and beyond. Whether you are a beginner or an experienced developer, these tools can help you build robust and scalable web applications. 🚀</p>"'https://dev.to/megagon/top-10-javascript-libraries-and-frameworks-to-watch-in-2023-47dj'https://dev.to/social_previews/article/1403886.png'"['https://dev.to/assets/raised-hands-74b2099fd66a39f2d7eed9305ee0f4553df0eb7b4f11b01b6b1b499973048fe5.svg', 'https://dev.to/assets/loading-ellipsis-b714cf681fd66c853ff6f03dd161b77aa3c80e03cdc06f478b695f42770421e9.svg', 'https://dev-to-uploads.s3.amazonaws.com/uploads/logos/resized_logo_UQww2soKuUsjaOGNB38o.png', 'https://dev.to/assets/fire-f60e7a582391810302117f987b22a8ef04a2fe0df7e3258a5f49332df1cec71e.svg', 'https://dev.to/assets/multi-unicorn-b44d6f8c23cdd00964192bedc38af3e82463978aa611b4365bd33a0f1f4f3e97.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--RmY55OKL--/c_limit,f_auto,fl_progressive,q_auto,w_256/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--r96cfTOH--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/935210/c2cd9367-eca3-4460-876e-4ef3288f60e4.jpeg', 'https://dev.to/social_previews/article/1403886.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--GMizJmb5--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1046507/310d7082-fd15-49cd-99ab-e38a73858ad5.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--VO-USpu0--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/664822/fd20117b-2cde-491a-9d71-8b3f8d4b5e10.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--hBjymtBS--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1012079/fadf9680-4fbb-4782-a372-943b483ca335.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--pcSkTMZL--/c_limit,f_auto,fl_progressive,q_80,w_190/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://dev.to/assets/exploding-head-daceb38d627e6ae9b730f36a1e390fca556a4289d5a41abb2c35068ad3e2c4b5.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--8YeJaISQ--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/863112/c86654ef-e30a-4859-aa34-d4d15bc4dcdc.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--d-CmkIPq--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1012079/fadf9680-4fbb-4782-a372-943b483ca335.png', 'https://dev.to/assets/sparkle-heart-5f9bee3767e18deb1bb725290cb151c25234768a0e9a2bd39370c382d02920cf.svg', 'https://dev.to/assets/heart-plus-active-9ea3b22f2bc311281db911d416166c5f430636e76b15cd5df6b3b841d830eefa.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--OOwzaeSF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_775/https://res.cloudinary.com/practicaldev/image/fetch/s--XIICQ_e4--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2ja8tymo646or3emo07.gif']"
5'634K4CQMR'🚀 Ways to Title Case Strings with Javascript'"<p>As part of a recent fix I had to do during work, I needed to title case an input of a group of sentences that would later be used to validate other logic. The problem was that these sentences needed certain considerations when applying the title case.</p>

<p>So, even when this is a specific case for a specific need I saw this as a good opportunity to not only use this article to list a few ways to <em>title case sentences</em> but also to share the solution i ended up using and that could probably be of help to someone.</p>

<p>Let's begin!</p>

<h2>
  
  
  What Title Case means
</h2>

<p>This just means converting to uppercase the first letter of every word in a sentence while the other ones remain in lowercase. </p>

<h2>
  
  
  Examples
</h2>

<p>There are different ways you can find and use to <em>convert a sentence to title case in Javascript</em>, here are a few:</p>

<h3>
  
  
  1. Using replace method and regex
</h3>



<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""kd"">function</span> <span class=""nx"">convertToTitleCase</span><span class=""p"">(</span><span class=""nx"">str</span><span class=""p"">)</span> <span class=""p"">{</span>
  <span class=""k"">if</span> <span class=""p"">(</span><span class=""o"">!</span><span class=""nx"">str</span><span class=""p"">)</span> <span class=""p"">{</span>
      <span class=""k"">return</span> <span class=""dl"">""""</span>
  <span class=""p"">}</span>
  <span class=""k"">return</span> <span class=""nx"">str</span><span class=""p"">.</span><span class=""nx"">toLowerCase</span><span class=""p"">().</span><span class=""nx"">replace</span><span class=""p"">(</span><span class=""sr"">/</span><span class=""se"">\b\w</span><span class=""sr"">/g</span><span class=""p"">,</span> <span class=""nx"">s</span> <span class=""o"">=&gt;</span> <span class=""nx"">s</span><span class=""p"">.</span><span class=""nx"">toUpperCase</span><span class=""p"">());</span>
<span class=""p"">}</span>

<span class=""nx"">console</span><span class=""p"">.</span><span class=""nx"">log</span><span class=""p"">(</span><span class=""nx"">convertToTitleCase</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">welcome to my article</span><span class=""dl"">'</span><span class=""p"">));</span>
<span class=""nx"">console</span><span class=""p"">.</span><span class=""nx"">log</span><span class=""p"">(</span><span class=""nx"">convertToTitleCase</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">THE avengers</span><span class=""dl"">'</span><span class=""p"">));</span>
</code></pre>

</div>



<p>The shortest way to accomplish this, we use regex to match only the first letter of each word to then replace it as uppercase.</p>

<p><strong><em>Side note:</em></strong> <em>it's good to normalize the string by converting everything first to lowercase before actually converting to title case.</em></p>

<p><strong>Output:</strong></p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--5jCqhoiA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rnpolcbi1sw85yk984l9.png""><img alt=""Output example 1"" height=""143"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--5jCqhoiA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rnpolcbi1sw85yk984l9.png"" width=""848"" /></a></p>

<h3>
  
  
  2. Using the map() function
</h3>



<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""kd"">function</span> <span class=""nx"">convertToTitleCase</span><span class=""p"">(</span><span class=""nx"">str</span><span class=""p"">)</span> <span class=""p"">{</span>
  <span class=""k"">if</span> <span class=""p"">(</span><span class=""o"">!</span><span class=""nx"">str</span><span class=""p"">)</span> <span class=""p"">{</span>
      <span class=""k"">return</span> <span class=""dl"">""""</span>
  <span class=""p"">}</span>

  <span class=""k"">return</span> <span class=""nx"">str</span><span class=""p"">.</span><span class=""nx"">toLowerCase</span><span class=""p"">().</span><span class=""nx"">split</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1""> </span><span class=""dl"">'</span><span class=""p"">).</span><span class=""nx"">map</span><span class=""p"">(</span><span class=""kd"">function</span> <span class=""p"">(</span><span class=""nx"">word</span><span class=""p"">)</span> <span class=""p"">{</span>
     <span class=""k"">return</span> <span class=""nx"">word</span><span class=""p"">.</span><span class=""nx"">charAt</span><span class=""p"">(</span><span class=""mi"">0</span><span class=""p"">).</span><span class=""nx"">toUpperCase</span><span class=""p"">().</span><span class=""nx"">concat</span><span class=""p"">(</span><span class=""nx"">word</span><span class=""p"">.</span><span class=""nx"">substr</span><span class=""p"">(</span><span class=""mi"">1</span><span class=""p"">));</span>
  <span class=""p"">}).</span><span class=""nx"">join</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1""> </span><span class=""dl"">'</span><span class=""p"">);</span>
<span class=""p"">}</span>

<span class=""nx"">console</span><span class=""p"">.</span><span class=""nx"">log</span><span class=""p"">(</span><span class=""nx"">convertToTitleCase</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">welcome AGAIN to MY aRticle</span><span class=""dl"">'</span><span class=""p"">));</span>
<span class=""nx"">console</span><span class=""p"">.</span><span class=""nx"">log</span><span class=""p"">(</span><span class=""nx"">convertToTitleCase</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">THE avengers MOVIe</span><span class=""dl"">'</span><span class=""p"">));</span>
</code></pre>

</div>



<p>We first turn the sentence into an array with<br />
<br />
 <code>javascript str.toLowerCase().split(' ')</code><br />
<br />
 then, when using the <strong>map()</strong>, this will do a callback function for each element in the array where with<br />
<br />
 <code>javascript (word.charAt(0).toUpperCase() + word.substr(1))</code><br />
<br />
  we transform the element and build a new array from the results.</p>

<p><strong>Output:</strong><br />
<a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--SobN6bdC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o04i351cp9v4ndfkv53h.png""><img alt=""Using map()"" height=""135"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--SobN6bdC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o04i351cp9v4ndfkv53h.png"" width=""842"" /></a></p>
<h2>
  
  
  Applying title case with exceptions
</h2>

<p>There can be cases where not all words in the sentence would need to be converted, which was the case i run into, here was my solution, which is basically using the map() way but adding the condition to check if the current word was or not eligible for title case.<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""kd"">const</span> <span class=""nx"">exceptions</span> <span class=""o"">=</span> <span class=""p"">[</span><span class=""dl"">'</span><span class=""s1"">of</span><span class=""dl"">'</span><span class=""p"">,</span> <span class=""dl"">'</span><span class=""s1"">the</span><span class=""dl"">'</span><span class=""p"">,</span> <span class=""dl"">'</span><span class=""s1"">and</span><span class=""dl"">'</span><span class=""p"">];</span>

<span class=""kd"">function</span> <span class=""nx"">convertToTitleCase</span><span class=""p"">(</span><span class=""nx"">str</span><span class=""p"">)</span> <span class=""p"">{</span>
  <span class=""k"">if</span> <span class=""p"">(</span><span class=""o"">!</span><span class=""nx"">str</span><span class=""p"">)</span> <span class=""p"">{</span>
      <span class=""k"">return</span> <span class=""dl"">""""</span>
  <span class=""p"">}</span>

  <span class=""k"">return</span> <span class=""nx"">str</span><span class=""p"">.</span><span class=""nx"">toLowerCase</span><span class=""p"">().</span><span class=""nx"">split</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1""> </span><span class=""dl"">'</span><span class=""p"">).</span><span class=""nx"">map</span><span class=""p"">((</span><span class=""nx"">word</span><span class=""p"">,</span> <span class=""nx"">i</span><span class=""p"">)</span> <span class=""o"">=&gt;</span> <span class=""p"">{</span>
            <span class=""k"">return</span> <span class=""nx"">exceptions</span><span class=""p"">.</span><span class=""nx"">includes</span><span class=""p"">(</span><span class=""nx"">word</span><span class=""p"">)</span> <span class=""o"">&amp;&amp;</span> <span class=""nx"">i</span> <span class=""o"">!=</span> <span class=""mi"">0</span> <span class=""p"">?</span> <span class=""nx"">word</span> <span class=""p"">:</span> <span class=""nx"">word</span><span class=""p"">.</span><span class=""nx"">charAt</span><span class=""p"">(</span><span class=""mi"">0</span><span class=""p"">).</span><span class=""nx"">toUpperCase</span><span class=""p"">().</span><span class=""nx"">concat</span><span class=""p"">(</span><span class=""nx"">word</span><span class=""p"">.</span><span class=""nx"">substr</span><span class=""p"">(</span><span class=""mi"">1</span><span class=""p"">));</span>
        <span class=""p"">}).</span><span class=""nx"">join</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1""> </span><span class=""dl"">'</span><span class=""p"">);</span>
<span class=""p"">}</span> 

<span class=""nx"">console</span><span class=""p"">.</span><span class=""nx"">log</span><span class=""p"">(</span><span class=""nx"">convertToTitleCase</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">lord OF the rings</span><span class=""dl"">'</span><span class=""p"">));</span>   
<span class=""nx"">console</span><span class=""p"">.</span><span class=""nx"">log</span><span class=""p"">(</span><span class=""nx"">convertToTitleCase</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">people AND people</span><span class=""dl"">'</span><span class=""p"">));</span>   
<span class=""nx"">console</span><span class=""p"">.</span><span class=""nx"">log</span><span class=""p"">(</span><span class=""nx"">convertToTitleCase</span><span class=""p"">(</span><span class=""dl"">'</span><span class=""s1"">someTHING ABOUT THE article</span><span class=""dl"">'</span><span class=""p"">));</span>
</code></pre>

</div>



<p><strong>Output:</strong><br />
<a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--IJfE7RFz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8d0cddf66ikpl2uq0k8d.png""><img alt=""my case"" height=""168"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--IJfE7RFz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8d0cddf66ikpl2uq0k8d.png"" width=""842"" /></a></p>

<h2>
  
  
  Conclusion
</h2>

<p>There are many options out there we could use to convert sentences to title case, we just need to go with the one that works best for our needs.</p>

<p>Also, keep in mind that there could be edge cases where converting to title case can be used or adapted to, it will depend on what exactly needs to be accomplished with it and how it's going to be used since there can be scenarios where it will could probably be impossible to always be correct when the input has been transformed.</p>

<p><strong><em>Happy learning and thank you for reading!</em></strong></p>

<p><em>If this article was helpful to you, don't forget to hit that ❤️ button and support me with a follow, i will keep posting more content about tech, programming, career development and more! :)</em></p>"'https://dev.to/ypdev19/ways-to-title-case-strings-with-javascript-1dpe'https://res.cloudinary.com/practicaldev/image/fetch/s--aa7-dsB1--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wgiurio098ijpvpzudok.png'"['https://res.cloudinary.com/practicaldev/image/fetch/s--SobN6bdC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o04i351cp9v4ndfkv53h.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--cB6d_K8v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_775/https://dev-to-uploads.s3.amazonaws.com/i/hlhrtuspjyrstifubdhs.gif', 'https://res.cloudinary.com/practicaldev/image/fetch/s--aSBVaWUm--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1019215/3d7fb022-8dcc-4d78-a410-4fa03049b3bb.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--5jCqhoiA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rnpolcbi1sw85yk984l9.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--pcSkTMZL--/c_limit,f_auto,fl_progressive,q_80,w_190/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://dev.to/assets/sparkle-heart-5f9bee3767e18deb1bb725290cb151c25234768a0e9a2bd39370c382d02920cf.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--QToY3uNJ--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/337841/75deba0f-8d8a-476a-b62b-557c6de1bc8f.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--IJfE7RFz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8d0cddf66ikpl2uq0k8d.png', 'https://dev.to/assets/fire-f60e7a582391810302117f987b22a8ef04a2fe0df7e3258a5f49332df1cec71e.svg', 'https://dev.to/assets/multi-unicorn-b44d6f8c23cdd00964192bedc38af3e82463978aa611b4365bd33a0f1f4f3e97.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--wO--dfr7--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1019215/3d7fb022-8dcc-4d78-a410-4fa03049b3bb.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--lDJx69Bu--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/821386/13db4c04-bb62-4a53-a064-6fdc1aa361e2.jpeg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--mSzRgtjV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_350/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pinwifhk5e3m4kitgb9g.png', 'https://dev.to/assets/raised-hands-74b2099fd66a39f2d7eed9305ee0f4553df0eb7b4f11b01b6b1b499973048fe5.svg', 'https://dev-to-uploads.s3.amazonaws.com/uploads/logos/resized_logo_UQww2soKuUsjaOGNB38o.png', 'https://dev.to/assets/exploding-head-daceb38d627e6ae9b730f36a1e390fca556a4289d5a41abb2c35068ad3e2c4b5.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--xjeLqGJV--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wgiurio098ijpvpzudok.png', 'https://dev.to/assets/heart-plus-active-9ea3b22f2bc311281db911d416166c5f430636e76b15cd5df6b3b841d830eefa.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--HcfX-tZJ--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/518199/a7cd22aa-5539-4211-81f1-27a168eee8ab.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--aa7-dsB1--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wgiurio098ijpvpzudok.png', 'https://dev.to/assets/loading-ellipsis-b714cf681fd66c853ff6f03dd161b77aa3c80e03cdc06f478b695f42770421e9.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--RmY55OKL--/c_limit,f_auto,fl_progressive,q_auto,w_256/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--VxEyyVwN--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/725243/31e0f366-cec2-4153-829a-7eb021a5eab7.png']"
6'PL09F6KBF'Upgrading to Next.js 13: Migration Guide'"<p>Hey there! Are you ready to upgrade your Next.js application from version 12 to version 13 (stable)? Don't worry, I got you covered. This guide will help you upgrade features that work in both the pages and the app directories, and incrementally migrate your existing application from pages to app. Let's get started!</p>

<h2>
  
  
  Upgrading
</h2>

<h3>
  
  
  Node.js Version
</h3>

<p>First things first, the minimum Node.js version is now v16.8. Check the Node.js documentation for more details.</p>

<h3>
  
  
  Next.js Version
</h3>

<p>To update to Next.js version 13, just run this command using your favorite package manager:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight plaintext""><code>npm install next@latest react@latest react-dom@latest
</code></pre>

</div>



<h3>
  
  
  ESLint Version
</h3>

<p>If you're using ESLint, you'll need to upgrade your ESLint version:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight plaintext""><code>npm install -D eslint-config-next@latest
</code></pre>

</div>



<p>Note: You may need to restart the ESLint server in VS Code for the ESLint changes to take effect. Open the Command Palette (cmd+shift+p on Mac; ctrl+shift+p on Windows) and search for ESLint: Restart ESLint Server.</p>

<h2>
  
  
  Upgrading New Features
</h2>

<p>Next.js 13 introduced the new App Router with new features and conventions. The new Router is available in the app directory and co-exists with the pages directory.</p>

<p>Upgrading to Next.js 13 does not require using the new App Router. You can continue using pages with new features that work in both directories, such as the updated Image component, Link component, Script component, and Font optimization.</p>

<h3>
  
  
  &lt;Image/&gt; Component
</h3>

<p>Next.js 12 introduced new improvements to the Image Component with a temporary import: next/future/image. These improvements included less client-side JavaScript, easier ways to extend and style images, better accessibility, and native browser lazy loading.</p>

<p>In version 13, this new behavior is now the default for next/image.</p>

<h3>
  
  
  &lt;Link&gt; Component
</h3>

<p>The &lt;Link&gt; Component no longer requires manually adding an &lt;a&gt; tag as a child. This behavior was added as an experimental option in version 12.2 and is now the default. In Next.js 13, &lt;Link&gt; always renders &lt;a&gt; and allows you to forward props to the underlying tag.</p>

<h3>
  
  
  &lt;Script&gt; Component
</h3>

<p>The behavior of next/script has been updated to support both pages and app, but some changes need to be made to ensure a smooth migration.</p>

<h3>
  
  
  Font Optimization
</h3>

<p>Version 13 introduces the new next/font module (beta) which gives you the ability to customize your font loading experience while still ensuring great performance and privacy. next/font is supported in both the pages and app directories.</p>"'https://dev.to/iskurbanov/upgrading-to-nextjs-13-migration-guide-2m3f'https://res.cloudinary.com/practicaldev/image/fetch/s--y4z0R01x--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7e6hwphyeqku2p1qudr.png'"['https://res.cloudinary.com/practicaldev/image/fetch/s--y4z0R01x--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7e6hwphyeqku2p1qudr.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--J_bMoRdj--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/465403/25305d44-10cd-4090-86c0-ecfcb62fb949.jpeg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--pcSkTMZL--/c_limit,f_auto,fl_progressive,q_80,w_190/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--hSY74b40--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_775/https://res.cloudinary.com/practicaldev/image/fetch/s--UYyR8aE8--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://i.ibb.co/vPH0YMV/32-neumorphism.gif', 'https://res.cloudinary.com/practicaldev/image/fetch/s--7SKOHyNX--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/293331/ca9ef521-ad29-4684-a85b-1ae4fb617df2.jpg', 'https://dev.to/assets/sparkle-heart-5f9bee3767e18deb1bb725290cb151c25234768a0e9a2bd39370c382d02920cf.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--QToY3uNJ--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/337841/75deba0f-8d8a-476a-b62b-557c6de1bc8f.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--wQArRCK3--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7e6hwphyeqku2p1qudr.png', 'https://dev.to/assets/fire-f60e7a582391810302117f987b22a8ef04a2fe0df7e3258a5f49332df1cec71e.svg', 'https://dev.to/assets/multi-unicorn-b44d6f8c23cdd00964192bedc38af3e82463978aa611b4365bd33a0f1f4f3e97.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--IxrGprDT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_350/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fbsvcwqnj5mgkzuwy24r.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--dSfjlALA--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/697052/fb9688c6-24e5-4939-80e5-74a483097b36.jpeg', 'https://dev.to/assets/raised-hands-74b2099fd66a39f2d7eed9305ee0f4553df0eb7b4f11b01b6b1b499973048fe5.svg', 'https://dev-to-uploads.s3.amazonaws.com/uploads/logos/resized_logo_UQww2soKuUsjaOGNB38o.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--2hvwaLk5--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/174508/f06aa36d-92c5-4ce8-a2a7-e53ee09170e1.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--e4jO7Lk4--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/697052/fb9688c6-24e5-4939-80e5-74a483097b36.jpeg', 'https://dev.to/assets/exploding-head-daceb38d627e6ae9b730f36a1e390fca556a4289d5a41abb2c35068ad3e2c4b5.svg', 'https://dev.to/assets/heart-plus-active-9ea3b22f2bc311281db911d416166c5f430636e76b15cd5df6b3b841d830eefa.svg', 'https://dev.to/assets/loading-ellipsis-b714cf681fd66c853ff6f03dd161b77aa3c80e03cdc06f478b695f42770421e9.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--RmY55OKL--/c_limit,f_auto,fl_progressive,q_auto,w_256/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png']"
7'I5FX88TEP'Next.js 13 Image Cheatsheet'"<p>This cheat sheet is meant to provide an overview of the important features and usage of the Next.js Image Component, which helps to optimize and enhance your images.</p>

<h2>
  
  
  Basic Usage
</h2>



<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""k"">import</span> <span class=""nx"">Image</span> <span class=""k"">from</span> <span class=""dl"">'</span><span class=""s1"">next/image</span><span class=""dl"">'</span><span class=""p"">;</span>

<span class=""k"">export</span> <span class=""k"">default</span> <span class=""kd"">function</span> <span class=""nx"">Page</span><span class=""p"">()</span> <span class=""p"">{</span>
  <span class=""k"">return</span> <span class=""p"">(</span>
    <span class=""o"">&lt;</span><span class=""nx"">Image</span>
      <span class=""nx"">src</span><span class=""o"">=</span><span class=""dl"">""</span><span class=""s2"">/profile.png</span><span class=""dl"">""</span>
      <span class=""nx"">width</span><span class=""o"">=</span><span class=""p"">{</span><span class=""mi"">500</span><span class=""p"">}</span>
      <span class=""nx"">height</span><span class=""o"">=</span><span class=""p"">{</span><span class=""mi"">500</span><span class=""p"">}</span>
      <span class=""nx"">alt</span><span class=""o"">=</span><span class=""dl"">""</span><span class=""s2"">Picture of the author</span><span class=""dl"">""</span>
    <span class=""o"">/&gt;</span>
  <span class=""p"">);</span>
<span class=""p"">}</span>
</code></pre>

</div>



<h2>
  
  
  Required Props
</h2>

<ul>
<li>
<code>src</code>: The image source, can be an internal path or an external URL.</li>
<li>
<code>width</code>: The rendered width in pixels.</li>
<li>
<code>height</code>: The rendered height in pixels.</li>
<li>
<code>alt</code>: Description of the image for screen readers and search engines.</li>
</ul>

<h2>
  
  
  Optional Props
</h2>

<ul>
<li>
<code>loader</code>: A custom function used to resolve image URLs.</li>
<li>
<code>fill</code>: Boolean that causes the image to fill the parent element.</li>
<li>
<code>sizes</code>: A string that provides information about how wide the image will be at different breakpoints.</li>
<li>
<code>quality</code>: The quality of the optimized image, an integer between 1 and 100.</li>
<li>
<code>priority</code>: When true, the image will be considered high priority and preload.</li>
<li>
<code>placeholder</code>: A placeholder to use while the image is loading.</li>
<li>
<code>style</code>: Allows passing CSS styles to the underlying image element.</li>
<li>
<code>onLoadingComplete</code>: A callback function that is invoked once the image is completely loaded and the placeholder has been removed.</li>
<li>
<code>onLoad</code>: A callback function that is invoked when the image is loaded.</li>
<li>
<code>onError</code>: A callback function that is invoked if the image fails to load.</li>
<li>
<code>loading</code>: The loading behavior of the image. Defaults to lazy.</li>
<li>
<code>blurDataURL</code>: A Data URL to be used as a placeholder image before the src image successfully loads.</li>
<li>
<code>unoptimized</code>: When true, the source image will be served as-is instead of changing quality, size, or format.</li>
</ul>

<h2>
  
  
  Configuration Options
</h2>

<p>Configure the Image Component in <code>next.config.js</code>. The following options are available:</p>

<ul>
<li>
<code>remotePatterns</code>: Configuration required for using external images.</li>
<li>
<code>domains</code>: A list of allowed hostnames for external images.</li>
</ul>"'https://dev.to/iskurbanov/nextjs-13-image-cheatsheet-55fd'https://res.cloudinary.com/practicaldev/image/fetch/s--l5bUWF7n--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w02v3inxesohu28oi4pw.png'"['https://res.cloudinary.com/practicaldev/image/fetch/s--snFJN9hA--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w02v3inxesohu28oi4pw.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--l5bUWF7n--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w02v3inxesohu28oi4pw.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--pcSkTMZL--/c_limit,f_auto,fl_progressive,q_80,w_190/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://dev.to/assets/sparkle-heart-5f9bee3767e18deb1bb725290cb151c25234768a0e9a2bd39370c382d02920cf.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--QToY3uNJ--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/337841/75deba0f-8d8a-476a-b62b-557c6de1bc8f.jpg', 'https://dev.to/assets/fire-f60e7a582391810302117f987b22a8ef04a2fe0df7e3258a5f49332df1cec71e.svg', 'https://dev.to/assets/multi-unicorn-b44d6f8c23cdd00964192bedc38af3e82463978aa611b4365bd33a0f1f4f3e97.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--dSfjlALA--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/697052/fb9688c6-24e5-4939-80e5-74a483097b36.jpeg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--jjH099eD--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/609838/bc3ac0a6-8c2e-4c51-8fdd-83bd3d6ec159.jpeg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--bvXG16iY--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1029147/2afb1506-8d9d-45ba-997d-285a68af23a1.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--OOwzaeSF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_775/https://res.cloudinary.com/practicaldev/image/fetch/s--XIICQ_e4--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2ja8tymo646or3emo07.gif', 'https://dev.to/assets/raised-hands-74b2099fd66a39f2d7eed9305ee0f4553df0eb7b4f11b01b6b1b499973048fe5.svg', 'https://dev-to-uploads.s3.amazonaws.com/uploads/logos/resized_logo_UQww2soKuUsjaOGNB38o.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--RtC9xOke--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/664894/ad04d2cd-1503-4351-a014-0815c5ed2bf4.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--e4jO7Lk4--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/697052/fb9688c6-24e5-4939-80e5-74a483097b36.jpeg', 'https://dev.to/assets/exploding-head-daceb38d627e6ae9b730f36a1e390fca556a4289d5a41abb2c35068ad3e2c4b5.svg', 'https://dev.to/assets/heart-plus-active-9ea3b22f2bc311281db911d416166c5f430636e76b15cd5df6b3b841d830eefa.svg', 'https://dev.to/assets/loading-ellipsis-b714cf681fd66c853ff6f03dd161b77aa3c80e03cdc06f478b695f42770421e9.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--RmY55OKL--/c_limit,f_auto,fl_progressive,q_auto,w_256/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png']"
8'GTVY6YAEH'Account Abstraction in Web3'"<h2>
  
  
  Introduction
</h2>

<p>In this article, we will be learning about a recent paradigm in the Ethereum and web3 ecosystem called <strong>Account Abstraction</strong>. Account Abstraction changes how users use their account wallets in terms of blockchain interactions on the ethereum network. We will learn about the origin, implications, the pros and cons and what providers or products are already using it.</p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--zk_BzrFD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/31agauuco8ns8ptq1icp.jpg""><img alt=""Account Abstraction"" height=""350"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--zk_BzrFD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/31agauuco8ns8ptq1icp.jpg"" width=""700"" /></a></p>

<h2>
  
  
  Account Types
</h2>

<p>Accounts on the Ethereum blockchain can send transactions using their ether (ETH) balances. Depending on the deployment, these accounts are either user-controlled (human) or smart contracts (code-dependent). Therefore, there are two types of account that a user can use to interact with the blockchain.</p>

<ul>
<li>The Externally Owned Accounts (EOAs)</li>
<li>Smart Contract Accounts
### The Externally Owned Accounts</li>
</ul>

<p><a href=""https://ethereum.org/en/developers/docs/accounts/#externally-owned-accounts-and-key-pairs/"">The Externally Owned Accounts</a> are made up of a cryptographic pair of keys: public and private. They help prove that a transaction was actually signed by the sender and prevent forgeries. Your private key is what you use to sign transactions, so it grants you custody over the funds associated with your account. You never really hold cryptocurrency, you hold private keys – the funds are always on Ethereum's ledger. This prevents malicious actors from broadcasting fake transactions because you can always verify the sender of a transaction.</p>

<p>EOAs are much like normal bank accounts. They have an address (IBAN) and a balance (in Ether). Essentially, the EOAs owner possesses a public key pair, of which only he knows the private key. The matching public key is the EOAs <strong>""address""</strong> - the ""<strong>IBAN</strong>"". Now, only the EOAs owner can transfer Ether (ie ""withdraw or wire money"") from that account - by using the private key in the process. In summary, EOAs are ""<strong>directly owned and controlled</strong>"" by their respective owners.<br />
These types of account are usually provided by wallet providers llike Metamask, TrustWallet, SafePal etc. and they are the most in use type of accounts by blockchain products consumers.</p>

<h3>
  
  
  Contract Accounts
</h3>

<p><a href=""https://ethereum.org/en/developers/docs/accounts/#contract-accounts/"">Contract Accounts</a> are controlled by code executed by the Ethereum Virtual Machine. They are also referred to as a smart contracts. Contract accounts have associated code and data storage, but not private keys. They “<strong>control themselves</strong>”. These accounts do so in the way determined by their smart contract code.</p>

<p>A contract address hosts a collection of code on Ethereum that executes functions. The functions are executed when a transaction with associated input data (contract interaction) is made. Such addresses are created when a contract is deployed to the blockchain.</p>

<h2>
  
  
  Implications to the Ecosystem
</h2>

<p>In the attempt to spread the adoption of blockchain technologies and products, not just to the technically educated but also the non-technical folks, onboarding to these products and usage has been characterized with poor user experiences because blockchain technologies is associated with a lot of technicalities from setting up accounts, connecting to wallets, usind dApps, transactions and recovery of funds.</p>

<h3>
  
  
  Externally Owned Accounts Limitations
</h3>

<p>The use of EOAs does not help much with regards to an even near seamless experience as one can experience difficulties like:</p>

<ul>
<li>Not being able to do multi-transaction (eg: swap, send etc at the same time) leading to paying gas fees for every single transactions.</li>
<li>No guarantee for account recovery when one looses the private keys and thereby resulting to loss of accounts and funds as the private key is the only means to approve transaction.</li>
<li>Ultimately, there is little wiggle room for customization, as users can’t create custom logic to include more signers or authorize different keys to sign on to their accounts. This creates a very limiting scope for transactions.</li>
</ul>

<h3>
  
  
  How does Account Abstraction Improves the Users Experience?
</h3>

<p>With the advent of account abstraction and introduction of smart contract address, there are lots of benefits that will improve user experience in blockchain products. These benefits include and not limited to:</p>

<ul>
<li>Account abstraction unifies contract accounts and EOAs. It makes user accounts more <strong>""programmable""</strong>. You remove the logic of signing transactions from the account, and you <strong>“abstract”</strong> it out, hence account abstraction.</li>
<li>It unlocks much more flexibility, you could make batch transaction operations at the same time.</li>
<li>It also allows for enhanced security as you can code the conditions to be met before a transaction could be signed, set transfer limits and also perform multi-factor authentications.</li>
<li>Social recovery is one of the UX improvements account abstraction provides by avoiding the issue of a single point of failure with the private key.</li>
<li>It allows the non-custodial blockchain UX to scale.</li>
</ul>

<h2>
  
  
  The State of Account Abstraction
</h2>

<p>Smart contract wallets exist today but are challenging to implement because the ethereum virtual machine (EVM) does not support them. Instead, they rely on wrapping relatively complex code around standard Ethereum transactions. Ethereum can change this by allowing smart contracts to initiate transactions, handling the necessary logic in Ethereum smart contracts instead of off-chain. Putting logic into smart contracts also increases Ethereum's decentralization since it removes the need for <code>relayers</code> run by wallet developers to translate messages signed by the user to regular Ethereum transactions.</p>

<p>Currently there are two major proposals on implementing account abstraction to the ethereum network:</p>

<h3>
  
  
  EIP-4337
</h3>

<p><a href=""https://eips.ethereum.org/EIPS/eip-4337"">EIP-4337</a> is the first step towards native smart contract wallet support in a decentralized way <em>without requiring changes to the Ethereum protocol</em>. Instead of modifying the consensus layer to support smart contract wallets, a new system is added separately to the normal transaction gossip protocol. <br />
The way wallets work would also change under EIP-4337. Instead of each wallet re-implementing common but complex safety logic, those functions would be outsourced to a global wallet contract known as the <code>entry point</code>. This would handle operations such as paying fees and executing EVM code so that wallet developers can focus on providing excellent user experiences.<br />
Note that EIP-4337 entry point contract was deployed to Ethereum Mainnet on 1st March 2023.</p>

<h3>
  
  
  EIP-2938
</h3>

<p><a href=""https://eips.ethereum.org/EIPS/eip-2938"">EIP-2938</a> aims to update the Ethereum protocol by introducing a new transaction type, <code>AA_TX_TYPE</code> that includes three fields: <code>nonce</code>, <code>target</code> and <code>data</code>, where <code>nonce</code> is a transaction counter, <code>target</code> is the entry point contract address and <code>data</code> is EVM bytecode. To execute these transactions, two new instructions (known as opcodes) have to be added to the EVM: <code>NONCE</code> and <code>PAYGAS</code>. The <code>NONCE</code> opcode tracks the transaction sequence and <code>PAYGAS</code> calculates and withdraws the gas required to execute the transaction from the contract's balance. These new features allow Ethereum to support smart contract wallets natively as the necessary infrastructure is built in to Ethereum's protocol.<br />
Note that EIP-2938 is currently not active. The community is currently favoring EIP-4337 because it does not require changes to the protocol.</p>

<p>Smart contract wallets are already available, but more upgrades are required to make them as decentralized and permissionless as possible. EIP-4337 is a mature proposal that does not require any changes to Ethereum's protocol, so it is possible that this could be implemented quickly. However, upgrades that alter Ethereum's protocol are currently not in active development, so those changes may take much longer to ship. It is also possible that account abstraction is achieved well enough by EIP-4337 that no protocol changes are ever required.</p>

<h2>
  
  
  Conclusion
</h2>

<p>To onboard more blockchain users and provide a very seamless user experience to them, account abstraction has a major role to play in the way blockchain products are built and utilized. Blockchain technologies keep improving everyday and we will get to see more innovations around account abstraction not only in the Ethereum ecosystem, but also in other blockchain ecosystems as well. </p>

<h2>
  
  
  References
</h2>

<ul>
<li><a href=""https://ethereum.org/en/roadmap/account-abstraction/"">Account Abstraction - Ethereum.org</a></li>
<li><a href=""https://hackernoon.com/what-is-account-abstraction-and-why-is-everyone-talking-about-it"">What is Account Abstraction and Why is Everyone Talking About It?</a></li>
<li><a href=""https://info.etherscan.com/understanding-ethereum-accounts/"">Understanding Ethereum Accounts</a></li>
<li><a href=""https://ethereum.stackexchange.com/questions/5828/what-is-an-eoa-account"">What is an 'EOA' account?</a></li>
</ul>"'https://dev.to/desmondsanctity/account-abstraction-in-web3-mce'https://dev.to/social_previews/article/1403844.png'"['https://dev.to/assets/raised-hands-74b2099fd66a39f2d7eed9305ee0f4553df0eb7b4f11b01b6b1b499973048fe5.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--alOJiUo_--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/369612/c4a2ee97-1bda-46ce-8884-b4598cb20fd3.jpg', 'https://dev.to/assets/loading-ellipsis-b714cf681fd66c853ff6f03dd161b77aa3c80e03cdc06f478b695f42770421e9.svg', 'https://dev-to-uploads.s3.amazonaws.com/uploads/logos/resized_logo_UQww2soKuUsjaOGNB38o.png', 'https://dev.to/assets/fire-f60e7a582391810302117f987b22a8ef04a2fe0df7e3258a5f49332df1cec71e.svg', 'https://dev.to/assets/multi-unicorn-b44d6f8c23cdd00964192bedc38af3e82463978aa611b4365bd33a0f1f4f3e97.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--RmY55OKL--/c_limit,f_auto,fl_progressive,q_auto,w_256/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--HYlQ5G-4--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/444456/adf8ada8-d6e4-4743-8ca2-4670a00a75f3.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--eG-zwNWM--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/584582/70be12eb-0227-48f0-b401-7a01e86cf0e2.jpeg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--UPtNw1sj--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/844661/2128ef13-2e17-4ab5-b997-14298221742a.jpeg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--H8Nkz4Cj--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/369612/c4a2ee97-1bda-46ce-8884-b4598cb20fd3.jpg', 'https://dev.to/social_previews/article/1403844.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--pcSkTMZL--/c_limit,f_auto,fl_progressive,q_80,w_190/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://dev.to/assets/exploding-head-daceb38d627e6ae9b730f36a1e390fca556a4289d5a41abb2c35068ad3e2c4b5.svg', 'https://dev.to/assets/sparkle-heart-5f9bee3767e18deb1bb725290cb151c25234768a0e9a2bd39370c382d02920cf.svg', 'https://dev.to/assets/heart-plus-active-9ea3b22f2bc311281db911d416166c5f430636e76b15cd5df6b3b841d830eefa.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--1Mo91X7K--/c_imagga_scale,f_auto,fl_progressive,h_100,q_66,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/528762/cd4ce7bd-dd34-40fd-9be9-e22cccfd9e5b.gif', 'https://res.cloudinary.com/practicaldev/image/fetch/s--zk_BzrFD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/31agauuco8ns8ptq1icp.jpg']"
9'DI2EUHM8E'Developer Experience: It’s Time to Start Complaining'"<p>It's time to make noise. Developers need to take back their happiness and their productivity. But where should they start? </p>

<p>On this week's episode of Dev Interrupted, we're joined by Justin Reock, Field CTO and Chief Evangelist at Gradle. With a mission to mitigate the toil, friction, and frustration felt by so many developers, Justin has become a tireless advocate of Developer Productivity Engineering. </p>

<p>Listen as Justin explains DPE by exploring the connections between productivity, developer experience, and joy. </p>

<p>

</p>

<p>Episode Highlights:<br />
(3:50) What is Developer Productivity Engineering?<br />
(8:14) Creative vs destructive flow<br />
(16:21) Metrics and visibility<br />
(22:37) Open source supply chain security<br />
(24:01) Blockchain, AR &amp; VR</p>

<p><strong><em>While you’re here, check out this video from our <a href=""https://www.youtube.com/c/DevInterrupted?sub_confirmation=1"">YouTube channel</a>, and be sure to like and <a href=""https://www.youtube.com/c/DevInterrupted?sub_confirmation=1"">subscribe</a> when you do!</em></strong> </p>

<p>

</p>

<h3>
  
  
  Want to cut code-review time by up to 40%? Add estimated review time to pull requests automatically!
</h3>

<p><em>gitStream is the free dev tool from LinearB that eliminates the No. 1 bottleneck in your team’s workflow: pull requests and code reviews. After reviewing the work of 2,000 dev teams, LinearB’s engineers and data scientists found that pickup times and code review were lasting 4 to 5 days longer than they should be.</em> </p>

<p><em>The good news is that they found these delays could be eliminated largely by adding estimated review time to pull requests!</em></p>

<h3>
  
  
  Learn more about how gitStream is making coding better <a href=""https://linearb.io/blog/why-estimated-review-time-improves-pull-requests-and-reduces-cycle-time/?utm_source=Substack%2FMedium%2FDev.to&amp;utm_medium=referral&amp;utm_campaign=gitStream%20-%20Referral%20-%20Distribution%20Footers"">HERE</a>.
</h3>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--lm3vYrdg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xg1l6hxt134px501bf7d.png""><img alt=""Start using gitstream today!"" height=""462"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--lm3vYrdg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xg1l6hxt134px501bf7d.png"" width=""880"" /></a></p>"'https://dev.to/linearb/developer-experience-its-time-to-start-complaining-222g'https://res.cloudinary.com/practicaldev/image/fetch/s--6ch1SQb6--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5lrenzpw9is4jvttsqxo.png'"['https://res.cloudinary.com/practicaldev/image/fetch/s--Wc1u581o--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/964530/a5f89e84-78d9-40db-aa1f-0cffc766d88a.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--QvLoOfz8--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/916103/099b3c3c-b09b-4ab1-b4d5-4258de5340a0.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--lm3vYrdg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xg1l6hxt134px501bf7d.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--pcSkTMZL--/c_limit,f_auto,fl_progressive,q_80,w_190/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://dev.to/assets/sparkle-heart-5f9bee3767e18deb1bb725290cb151c25234768a0e9a2bd39370c382d02920cf.svg', 'https://dev.to/assets/fire-f60e7a582391810302117f987b22a8ef04a2fe0df7e3258a5f49332df1cec71e.svg', 'https://dev.to/assets/multi-unicorn-b44d6f8c23cdd00964192bedc38af3e82463978aa611b4365bd33a0f1f4f3e97.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--aU5n3hG3--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5lrenzpw9is4jvttsqxo.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--6ch1SQb6--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5lrenzpw9is4jvttsqxo.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--OOwzaeSF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_775/https://res.cloudinary.com/practicaldev/image/fetch/s--XIICQ_e4--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2ja8tymo646or3emo07.gif', 'https://dev.to/assets/raised-hands-74b2099fd66a39f2d7eed9305ee0f4553df0eb7b4f11b01b6b1b499973048fe5.svg', 'https://dev-to-uploads.s3.amazonaws.com/uploads/logos/resized_logo_UQww2soKuUsjaOGNB38o.png', 'https://dev.to/assets/exploding-head-daceb38d627e6ae9b730f36a1e390fca556a4289d5a41abb2c35068ad3e2c4b5.svg', 'https://dev.to/assets/heart-plus-active-9ea3b22f2bc311281db911d416166c5f430636e76b15cd5df6b3b841d830eefa.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--RSL_rpS5--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/4364/2c7eb340-27af-4302-a261-60dfbfdd60cc.jpg', 'https://dev.to/assets/loading-ellipsis-b714cf681fd66c853ff6f03dd161b77aa3c80e03cdc06f478b695f42770421e9.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--YcLsJDpa--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/4364/2c7eb340-27af-4302-a261-60dfbfdd60cc.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--RmY55OKL--/c_limit,f_auto,fl_progressive,q_auto,w_256/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--LOItbgBG--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/654631/416c2c20-4bc3-425c-8812-2d7ff262bada.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--cpKljumh--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/969224/be7bf718-9a66-4442-9add-cadcbc0eb0b6.jpeg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--YwFIyOmR--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/68703/6b2032e7-c028-4024-b132-260b569d1989.jpeg']"
10'E9Y8YL1JR'Create RDS Database Snapshots'"<p>In my previous article - <a href=""https://dev.to/aws-builders/create-a-mysql-rds-database-instance-with-terraform-3oab"">Create a MySQL RDS Database Instance with Terraform and connect with MySQL Workbench</a>, I have shown you how to create a MySQL RDS Database Instance with Terraform.</p>

<p>In this article, I am going to demonstrate on how you create a MySQL RDS Database Instance and RDS Database Snapshot.</p>

<p>Please visit my <strong><a href=""https://github.com/awsmine/RDS_projects"">GitHub Repository for RDS projects</a></strong> on various topics being updated on constant basis.</p>

<p><em><strong>Let’s get started!</strong></em></p>

<h1>
  
  
  Objectives:
</h1>

<p><strong>1.</strong> Signin to AWS Management Console</p>

<p><strong>2.</strong> Create RDS MySQL instance </p>

<p><strong>3.</strong> Create a snapshot</p>

<p><strong>4.</strong> Validate the creation of RDS snapshot</p>

<h1>
  
  
  Pre-requisites:
</h1>

<ul>
<li>AWS user account with admin access, not a root account.</li>
</ul>

<h1>
  
  
  Resources Used:
</h1>

<ul>
<li><a href=""https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Welcome.html"">What is Amazon Relational Database Service (Amazon RDS)?</a></li>
</ul>

<h1>
  
  
  Steps for implementation to this project:
</h1>

<h2>
  
  
  1. Signin to AWS Management Console
</h2>

<ul>
<li>SignIn to the AWS Management Console using username and password in the AWS Region as US East (N. Virginia) us-east-1</li>
</ul>

<h2>
  
  
  2. Create RDS MySQL instance
</h2>

<ul>
<li><p>On the Amazon RDS Console, Create database, Standard create, Engine type - <strong><em><code>MySQL</code></em></strong>, Templates - Free tier, Under Settings, DB instance identifier - <strong><em><code>myrdsinstance</code></em></strong>, Master username - <strong><em><code>admin</code></em></strong>, Master password - <strong><em><code>admin1234</code></em></strong>, Confirm master password - <strong><em><code>admin1234</code></em></strong>, DB instance class - <strong><em><code>db.t2.micro</code></em></strong>, Allocated storage - <strong><em><code>20 GB</code></em></strong>, Storage autoscaling - <strong><em><code>uncheck Enable storage autoscaling</code></em></strong>, Monitoring - <strong><em><code>Uncheck Enable Enhanced monitoring</code></em></strong>, Under Additional Configuration, Backup - <strong><em><code>Uncheck Enable automated backups</code></em></strong>, Maintenance - <strong><em><code>Uncheck Enable auto minor version upgrade</code></em></strong>, Deletion protection - <strong><em><code>Uncheck Enable deletion protection</code></em></strong>, Take all defaults</p></li>
<li><p>Create database</p></li>
<li><p>Wait for 5-6 minutes to see the database created.</p></li>
</ul>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--s5b5N4b9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5wrsgg0ho7qj7gyde10c.png""><img alt=""Image description"" height=""352"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--s5b5N4b9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5wrsgg0ho7qj7gyde10c.png"" width=""880"" /></a></p>

<h2>
  
  
  3. Create a snapshot
</h2>

<ul>
<li><p>On the RDS Console, in the left side panel click Snapshots, Take snapshot</p></li>
<li><p>Choose the DB Instance you created <strong><em><code>myrdsinstance</code></em></strong></p></li>
<li><p>Enter the snapshot name - <strong><em><code>myrdsinstancesnap</code></em></strong></p></li>
<li><p>Take Snapshot</p></li>
<li><p>Wait for 5-6 minutes to see the snapshot created.</p></li>
</ul>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--jAyyt2iR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6dbc0pc4drvcrvffket.png""><img alt=""Image description"" height=""347"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--jAyyt2iR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6dbc0pc4drvcrvffket.png"" width=""880"" /></a></p>

<h2>
  
  
  4. Validate the creation of RDS snapshot
</h2>

<ul>
<li>Check the snapshot details by clicking on the snapshot and viewing the details of your DB Instance</li>
</ul>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--YNpcd5KN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jqq0t9l3iilijpck5w45.png""><img alt=""Image description"" height=""349"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--YNpcd5KN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jqq0t9l3iilijpck5w45.png"" width=""880"" /></a></p>

<h1>
  
  
  Cleanup
</h1>

<ul>
<li><p>From the Amazon RDS Console, delete RDS database snapshot - <strong><em><code>myrdsinstancesnap</code></em></strong></p></li>
<li><p>delete RDS database - <strong><em><code>myrdsinstance</code></em></strong></p></li>
</ul>

<h1>
  
  
  What we have done so far
</h1>

<ul>
<li>We have successfully created a RDS MySQL instance, created and validated a RDS Database Snapshot.</li>
</ul>"'https://dev.to/aws-builders/create-rds-database-snapshots-4nba'https://dev.to/social_previews/article/1403286.png'"['https://res.cloudinary.com/practicaldev/image/fetch/s--LqgADxKo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_350/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jb3sc2966d2rvbcohxvq.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--3ocnhU-l--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/619592/5484df7c-49b9-4585-bc28-8d45790999e5.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--pcSkTMZL--/c_limit,f_auto,fl_progressive,q_80,w_190/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--jAyyt2iR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6dbc0pc4drvcrvffket.png', 'https://dev.to/assets/sparkle-heart-5f9bee3767e18deb1bb725290cb151c25234768a0e9a2bd39370c382d02920cf.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--vWmcJ-ty--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2794/88da75b6-aadd-4ea1-8083-ae2dfca8be94.png', 'https://dev.to/social_previews/article/1403286.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--3vA9CcCA--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2794/88da75b6-aadd-4ea1-8083-ae2dfca8be94.png', 'https://dev.to/assets/fire-f60e7a582391810302117f987b22a8ef04a2fe0df7e3258a5f49332df1cec71e.svg', 'https://dev.to/assets/multi-unicorn-b44d6f8c23cdd00964192bedc38af3e82463978aa611b4365bd33a0f1f4f3e97.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--cjTxbA24--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/721888/02955ba3-e67d-4e29-b481-18e8a3dca482.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--fCTffzgr--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/912586/76fb05c2-81bb-473d-a80b-d9cc98b0b676.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--s5b5N4b9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5wrsgg0ho7qj7gyde10c.png', 'https://dev.to/assets/raised-hands-74b2099fd66a39f2d7eed9305ee0f4553df0eb7b4f11b01b6b1b499973048fe5.svg', 'https://dev-to-uploads.s3.amazonaws.com/uploads/logos/resized_logo_UQww2soKuUsjaOGNB38o.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--gq-vBVHa--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/608370/b1cbac69-dd8a-4296-8b6d-a921541ff79a.png', 'https://dev.to/assets/exploding-head-daceb38d627e6ae9b730f36a1e390fca556a4289d5a41abb2c35068ad3e2c4b5.svg', 'https://dev.to/assets/heart-plus-active-9ea3b22f2bc311281db911d416166c5f430636e76b15cd5df6b3b841d830eefa.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--s9TO-USz--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1007766/2f53063e-d880-40a7-8f0f-0b1ab4f49691.jpeg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--8t-VGqgg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_775/https://dev-to-uploads.s3.amazonaws.com/i/7p7qe33hhlj5zdi3bj82.jpg', 'https://dev.to/assets/loading-ellipsis-b714cf681fd66c853ff6f03dd161b77aa3c80e03cdc06f478b695f42770421e9.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--RmY55OKL--/c_limit,f_auto,fl_progressive,q_auto,w_256/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--YNpcd5KN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jqq0t9l3iilijpck5w45.png']"
11'EI8E86GY3'React + Vite + GitHub Codespaces'"<p>In this article, I will show you how to create a React application with <a href=""https://vitejs.dev/"">Vite</a> and configure <a href=""https://code.visualstudio.com/docs/devcontainers/containers"">dev container</a> to run it in <a href=""https://docs.github.com/en/codespaces/overview"">GitHub Codespaces</a>.</p>

<p>According to the official <a href=""https://docs.github.com/en/codespaces/overview"">site</a>:</p>

<blockquote>
<p>A codespace is a development environment that's hosted in the cloud. You can customise your project for GitHub Codespaces by committing configuration files to your repository, which creates a repeatable codespace configuration for all users of your project.</p>
</blockquote>

<p>Currently GitHub Codespaces are available for everyone and you get up to 60 hours per month for free, which should be enough for experiments and pet projects.</p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--c_ChvhPg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nrnugfxu5gnjr6ip44vf.png""><img alt=""Codespaces - pricing"" height=""350"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--c_ChvhPg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nrnugfxu5gnjr6ip44vf.png"" width=""831"" /></a></p>

<h2>
  
  
  Building a React application with Vite.js
</h2>

<p>In this post, I'll be using React with Typescript, but the same would work for React with a raw javascript template.</p>

<h3>
  
  
  1. Build the application - run one of these commands
</h3>



<div class=""highlight js-code-highlight"">
<pre class=""highlight shell""><code><span class=""c""># npm 6.x</span>
npm create vite@latest devc-react-app <span class=""nt"">--template</span> react-ts

<span class=""c""># npm 7+, extra double-dash is needed:</span>
npm create vite@latest devc-react-app <span class=""nt"">--</span> <span class=""nt"">--template</span> react-ts

<span class=""c""># yarn</span>
yarn create vite devc-react-app <span class=""nt"">--template</span> react-ts
</code></pre>

</div>



<h3>
  
  
  2. Install &amp; run
</h3>



<div class=""highlight js-code-highlight"">
<pre class=""highlight plaintext""><code>cd devc-react-app

npm install
npm run dev
</code></pre>

</div>



<p>Your application should run on a random port.</p>

<h3>
  
  
  3. Change running port
</h3>

<p>Open <code>vite.config.ts</code> and change default export to this:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight javascript""><code><span class=""k"">export</span> <span class=""k"">default</span> <span class=""nx"">defineConfig</span><span class=""p"">({</span>
  <span class=""na"">plugins</span><span class=""p"">:</span> <span class=""p"">[</span><span class=""nx"">react</span><span class=""p"">()],</span>
  <span class=""na"">server</span><span class=""p"">:</span> <span class=""p"">{</span>
    <span class=""na"">port</span><span class=""p"">:</span> <span class=""mi"">3000</span>
  <span class=""p"">}</span>
<span class=""p"">})</span>
</code></pre>

</div>



<h3>
  
  
  4. Installing extensions
</h3>

<p>You need to open the project directory in VS Code and install the <a href=""https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers"">Dev Containers</a> extensions.</p>

<h3>
  
  
  5. Create Dev Container
</h3>

<p>Once installed, run the <code>Create Dev Container...</code> command and select the <code>universal</code> template</p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--cLrqmnkx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9n9tbkei2ses2wyiby3i.png""><img alt=""Create dev container command"" height=""85"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--cLrqmnkx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9n9tbkei2ses2wyiby3i.png"" width=""657"" /></a></p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--wcIMojMr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s5276ammzyv76pkf3mio.png""><img alt=""Create dev container - select configuration"" height=""129"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--wcIMojMr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s5276ammzyv76pkf3mio.png"" width=""659"" /></a></p>

<p>VS Code will add the dev container configuration file to your project: <code>.devcontainer/devcontainer.json</code>.</p>

<p>Once the file is added, you may be prompted by VS Code to open the folder in a dev container. </p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--18Z98DD_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g9oc93seza94smdiq2ar.png""><img alt=""Open in container notification"" height=""130"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--18Z98DD_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g9oc93seza94smdiq2ar.png"" width=""458"" /></a><br />
Let's skip this for now and focus on configuring the dev container first.</p>

<p>Detailed instructions can be found here: <a href=""https://code.visualstudio.com/docs/devcontainers/tutorial"">Get started with development Containers in Visual Studio Code</a> and here:<br />
<a href=""https://code.visualstudio.com/docs/devcontainers/containers"">Developing inside a Container using Visual Studio Code Remote Development</a></p>
<h3>
  
  
  6. Configuring the dev container
</h3>

<p>Now, open <code>.devcontainer/devcontainer.json</code> and configure a few things:</p>

<ul>
<li>
<code>forwardPorts</code> - the same as in step 3</li>
<li>
<code>portAttributes</code> - this is optional, but allows you to assign a name to the port</li>
<li>
<code>updateContentCommand</code> - install dependencies when container is created</li>
<li>
<code>postAttachCommand</code> - run application when container is ready</li>
</ul>

<p>You can also configure a file to open automatically in codespaces <code>customizations.codespaces.openFiles</code> or VS Code extensions to be installed in codespaces and dev container <code>customizations.vscode.extensions</code>.</p>

<p>There are many more configuration options, but I will not focus on them here.<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight json""><code><span class=""w"">  </span><span class=""nl"">""forwardPorts""</span><span class=""p"">:</span><span class=""w""> </span><span class=""p"">[</span><span class=""mi"">3000</span><span class=""p"">]</span><span class=""err"">,</span><span class=""w"">
  </span><span class=""nl"">""portsAttributes""</span><span class=""p"">:</span><span class=""w""> </span><span class=""p"">{</span><span class=""w"">
    </span><span class=""nl"">""3000""</span><span class=""p"">:</span><span class=""w""> </span><span class=""p"">{</span><span class=""w"">
      </span><span class=""nl"">""label""</span><span class=""p"">:</span><span class=""w""> </span><span class=""s2"">""React App""</span><span class=""p"">,</span><span class=""w"">
      </span><span class=""nl"">""onAutoForward""</span><span class=""p"">:</span><span class=""w""> </span><span class=""s2"">""openPreview""</span><span class=""w"">
    </span><span class=""p"">}</span><span class=""w"">
  </span><span class=""p"">}</span><span class=""err"">,</span><span class=""w"">
  </span><span class=""nl"">""updateContentCommand""</span><span class=""p"">:</span><span class=""w""> </span><span class=""s2"">""npm install""</span><span class=""err"">,</span><span class=""w"">
  </span><span class=""nl"">""postAttachCommand""</span><span class=""p"">:</span><span class=""w""> </span><span class=""s2"">""npm run dev""</span><span class=""err"">,</span><span class=""w"">

  </span><span class=""err"">//</span><span class=""w""> </span><span class=""err"">Configure</span><span class=""w""> </span><span class=""err"">tool-specific</span><span class=""w""> </span><span class=""err"">properties.</span><span class=""w"">
  </span><span class=""nl"">""customizations""</span><span class=""p"">:</span><span class=""w""> </span><span class=""p"">{</span><span class=""w"">
    </span><span class=""nl"">""codespaces""</span><span class=""p"">:</span><span class=""w""> </span><span class=""p"">{</span><span class=""w"">
      </span><span class=""nl"">""openFiles""</span><span class=""p"">:</span><span class=""w""> </span><span class=""p"">[</span><span class=""s2"">""src/App.tsx""</span><span class=""p"">]</span><span class=""w"">
    </span><span class=""p"">},</span><span class=""w"">
    </span><span class=""nl"">""vscode""</span><span class=""p"">:</span><span class=""w""> </span><span class=""p"">{</span><span class=""w"">
      </span><span class=""nl"">""extensions""</span><span class=""p"">:</span><span class=""w""> </span><span class=""p"">[</span><span class=""w"">
        </span><span class=""s2"">""dbaeumer.vscode-eslint""</span><span class=""p"">,</span><span class=""w"">
        </span><span class=""s2"">""esbenp.prettier-vscode""</span><span class=""p"">,</span><span class=""w"">
      </span><span class=""p"">]</span><span class=""w"">
    </span><span class=""p"">},</span><span class=""w"">
</span><span class=""err"">//...</span><span class=""w"">
</span></code></pre>

</div>



<p>Port attributes</p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--n5LSuf0x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3j8o6di5nelw5n9ojve0.png""><img alt=""Port attributes"" height=""484"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--n5LSuf0x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3j8o6di5nelw5n9ojve0.png"" width=""540"" /></a></p>

<h3>
  
  
  7. Configure start command
</h3>

<p>By default, Vite doesn't work in codespaces - even though the application is running, you can't see any page content in a browser.</p>

<p>To fix this, you need to modify <code>package.json</code> and change the <code>scripts.dev</code> by adding the <code>--host</code> parameter:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight json""><code><span class=""nl"">""scripts""</span><span class=""p"">:</span><span class=""w""> </span><span class=""p"">{</span><span class=""w"">
  </span><span class=""nl"">""dev""</span><span class=""p"">:</span><span class=""w""> </span><span class=""s2"">""vite --host""</span><span class=""w"">
</span><span class=""p"">}</span><span class=""w"">
</span></code></pre>

</div>



<p>This is the <em>trick</em> I couldn't find anywhere and spent a lot of time looking for.</p>

<p>Remainder: this is the command that the dev container runs as <code>""postAttachCommand"": ""npm run dev""</code> on startup.</p>

<h3>
  
  
  8. Push to GitHub
</h3>

<p>Now you can push the repository to GitHub and open it in Codespaces:</p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--xlLhg_i0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pwls1ey769yuop5hui0x.png""><img alt=""Open repository in codespaces"" height=""186"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--xlLhg_i0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pwls1ey769yuop5hui0x.png"" width=""421"" /></a></p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--SU8wgbwt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/crsdpznb4me6iu76jrd4.png""><img alt=""Running and application in codespaces"" height=""342"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--SU8wgbwt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/crsdpznb4me6iu76jrd4.png"" width=""880"" /></a><br />
You will see the green text 'codespaces' in the bottom left corner of your browser.</p>


<h2>
  
  
  Extras
</h2>
<h3>
  
  
  Open in local Dev Container
</h3>

<p>To open a project in a local dev container, you need to:</p>

<ol>
<li>Have Docker installed and running</li>
<li>Open the project folder in VS Code, then you will be asked if you want to open it in the dev container. You can open it or clone to the dev container

<ul>
<li>
<strong>Reopen in dev container</strong> - files stay where they are and you work on them directly from the linked Docker volume</li>
<li>
<strong>Clone in volume</strong> - preferred for Windows users with WSL2. It clones a copy of the project into a Docker container and volume. This option is much faster on Windows.</li>
</ul>
</li>
</ol>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--aUj6eRiA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gj39snfqejsnijivk4ij.png""><img alt=""Open in container notification - full view"" height=""435"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--aUj6eRiA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gj39snfqejsnijivk4ij.png"" width=""880"" /></a></p>

<p>Detailed instructions can be found here: <a href=""https://code.visualstudio.com/docs/devcontainers/tutorial"">Get started with development Containers in Visual Studio Code</a> and here:<br />
<a href=""https://code.visualstudio.com/docs/devcontainers/containers"">Developing inside a Container using Visual Studio Code Remote Development</a></p>

<p>If you don't have your repository locally and want to clone it directly from GitHub into a local dev container, you can do this from within VS Code: <br />
<code>&gt; Dev containers: Clone repository in Container Volume</code></p>

<p><a class=""article-body-image-wrapper"" href=""https://res.cloudinary.com/practicaldev/image/fetch/s--iBp86Teb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jnkby0gdgqvksx3niro1.png""><img alt=""Dev containers - clone repository"" height=""115"" src=""https://res.cloudinary.com/practicaldev/image/fetch/s--iBp86Teb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jnkby0gdgqvksx3niro1.png"" width=""622"" /></a></p>
<h2>
  
  
  Running CRA in Codespaces
</h2>

<p>To run a React application created with CRA (create-react-app) you need to change <code>start</code> command in <code>package.json</code>:<br />
</p>

<div class=""highlight js-code-highlight"">
<pre class=""highlight json""><code><span class=""w"">  </span><span class=""nl"">""scripts""</span><span class=""p"">:</span><span class=""w""> </span><span class=""p"">{</span><span class=""w"">
    </span><span class=""nl"">""start""</span><span class=""p"">:</span><span class=""w""> </span><span class=""s2"">""BROWSER=none WDS_SOCKET_PORT=0 react-scripts start""</span><span class=""w"">
    </span><span class=""err"">//...</span><span class=""w"">
  </span><span class=""p"">}</span><span class=""err"">,</span><span class=""w"">
</span></code></pre>

</div>



<p>This is needed to fix the hot reload after each change.</p>

<p>You can find the GitHub repository for this article <a href=""https://github.com/kkoziarski/devc-react-app"">here</a></p>"'https://dev.to/kkoziarski/react-vite-github-codespaces-5529'https://res.cloudinary.com/practicaldev/image/fetch/s--yFg95uCD--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s6e5khfdsi8phftx1809.png'"['https://res.cloudinary.com/practicaldev/image/fetch/s--jG6gou-U--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/921099/40a0f589-9863-4ad2-9e55-286802450d97.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--cLrqmnkx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9n9tbkei2ses2wyiby3i.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--yFg95uCD--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s6e5khfdsi8phftx1809.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--pcSkTMZL--/c_limit,f_auto,fl_progressive,q_80,w_190/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--aUj6eRiA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gj39snfqejsnijivk4ij.png', 'https://dev.to/assets/sparkle-heart-5f9bee3767e18deb1bb725290cb151c25234768a0e9a2bd39370c382d02920cf.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--9aTi5S3V--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/417922/d5a37d43-1157-4c3a-b4dd-8b5a111371ca.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--7U8_Gzhr--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/991668/141d6677-a68d-4174-aeda-0de9ed1a72e7.jpeg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--SU8wgbwt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/crsdpznb4me6iu76jrd4.png', 'https://dev.to/assets/fire-f60e7a582391810302117f987b22a8ef04a2fe0df7e3258a5f49332df1cec71e.svg', 'https://dev.to/assets/multi-unicorn-b44d6f8c23cdd00964192bedc38af3e82463978aa611b4365bd33a0f1f4f3e97.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--hXN8jf45--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/913401/1298d0ca-c86b-4053-ad2f-9561e404ede7.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--8YkeKaKy--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/569649/51184f74-b38d-4034-b41f-ea979364a39b.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--mSzRgtjV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_350/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pinwifhk5e3m4kitgb9g.png', 'https://dev.to/assets/raised-hands-74b2099fd66a39f2d7eed9305ee0f4553df0eb7b4f11b01b6b1b499973048fe5.svg', 'https://dev-to-uploads.s3.amazonaws.com/uploads/logos/resized_logo_UQww2soKuUsjaOGNB38o.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--18Z98DD_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g9oc93seza94smdiq2ar.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--n5LSuf0x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3j8o6di5nelw5n9ojve0.png', 'https://dev.to/assets/exploding-head-daceb38d627e6ae9b730f36a1e390fca556a4289d5a41abb2c35068ad3e2c4b5.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--eodniNq6--/c_imagga_scale,f_auto,fl_progressive,h_100,q_auto,w_100/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/363773/4fe6fb4e-d551-4335-935e-2ea06778b18d.jpg', 'https://dev.to/assets/heart-plus-active-9ea3b22f2bc311281db911d416166c5f430636e76b15cd5df6b3b841d830eefa.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--e_jGMgMI--/c_fill,f_auto,fl_progressive,h_50,q_auto,w_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/569649/51184f74-b38d-4034-b41f-ea979364a39b.png', 'https://dev.to/assets/loading-ellipsis-b714cf681fd66c853ff6f03dd161b77aa3c80e03cdc06f478b695f42770421e9.svg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--kj80zPkn--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s6e5khfdsi8phftx1809.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--iBp86Teb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jnkby0gdgqvksx3niro1.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--RmY55OKL--/c_limit,f_auto,fl_progressive,q_auto,w_256/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-512.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--zSHFnyyx--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/255514/f665fcf9-9b52-41e0-b62e-7ccf8f84ef1a.jpeg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--xlLhg_i0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pwls1ey769yuop5hui0x.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s--wcIMojMr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s5276ammzyv76pkf3mio.png', 'https://res.cloudinary.com/practicaldev/image/fetch/s---H7336Uk--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/38578/c785dfe1-aaa2-48fe-89b9-1563db95c85c.jpg', 'https://res.cloudinary.com/practicaldev/image/fetch/s--c_ChvhPg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nrnugfxu5gnjr6ip44vf.png']"
