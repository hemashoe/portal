'post_id'title'body'source_link'image'images
0'2Y0Z0E0T4'Вложенные классы и лямбда-выражения в Java'"Вложенные классы в Java — важная особенность этого языка. Они помогают сделать код более модульным, позволяя сгруппировать связанные классы вместе. Однако стоит помнить, что задача вложенных классов Java — дополнять внешний класс, предоставляя дополнительную функциональность, расширяя его возможности или упрощая взаимодействие. То есть внутренний класс своей сутью и предназначением неразрывно связан с внешним, иначе его стоит вынести в отдельную, самостоятельную структуру.

Сергей Соловых Старший разработчик МТС Диджитал

Объявляем класс для примера

Статические вложенные классы Java

Простые внутренние классы

Локальные классы

Анонимные классы и лямбда-выражения

«Затенение» переменных

Замыкание переменных

Ссылки на методы

Общее резюме

Согласно документации Java, внутренние (nested) классы бывают двух типов:

статические (static nested classes) нестатические (inner classes)

Нестатические имеют два подвида: локальные (local classes) и анонимные (anonymous classes). Они схожи и мы рассмотрим их во второй части статьи.



Объявляем класс для примера

Класс в Java позволяет объединять в себе определённые атрибуты и поведение, свойственные объекту. Например, в контексте издательства можно рассмотреть книгу как класс «Book» со следующими полями:

Название книги

Имя автора

Адрес типографии

Объём тиража

Фамилия редактора

Дата издания

Текст произведения

А в качестве поведения задать методы, позволяющие:

задавать параметры, указанные выше

получать содержимое конкретной страницы или нескольких страниц

корректировать написанный текст

указывать размер тиража

отправлять в печать

Здесь в качестве вложенного класса можно описать страницу книги, указать её размер в количестве печатных знаков, задать порядковый номер и вложить само произведение (текст). Также в отдельный класс вынесем обложку книги:

public class Book { private Cover cover; private List pages; private String editor; public class Cover { //some code here } public static class Page { //some code here } }

Примечание Примеры кода в статье представлены в кратком виде и актуальны только для объяснения сути материала. Не стоит относиться к ним как к отображению предметной области в реальном проекте.

Классы обложки и страницы находятся внутри класса книги, но они немного отличаются: «Cover» объявлен как внутренний класс, а класс «Page» — вложенный статический. Это примерная канва процесса создания книги, чтобы объяснить подход к формированию архитектуры приложения, поэтому детали остаются за скобками. Мы не берёмся разработать конкурента InDesign или написать свой WoodWing.

Почему мы объявляем классы именно так? Допустим, работа над книгой начинается, когда автор приносит текст. Сначала нужно определить, в каком он состоянии, требуется ли ему доработка, какого объёма текст. Значит, для работы понадобятся составляющие будущей книги — страницы, каждая из которых будет содержать свой отрывок произведения. Объекты страниц передаются на проверку орфографии, сверку данных, затем попадают на правки к главному редактору. У страниц может измениться размер, могут быть дописаны или сокращены целые главы. Всё это повлияет на конечный вид будущей книги. Таким образом, вполне закономерно, что объекты класса «Page» могут существовать до того, как будет сформирован объект книги.

Когда текст готов и определена концепция издания, формируется книга и создаётся обложка, которая зависит от конкретного издания. Ведь один и тот же текст может выйти в мягком переплёте для удобного чтения в дороге или в твёрдом, дополненный иллюстрациями и пригодный для подарка.



Статические вложенные классы Java

Статический класс «Page» содержит текст страницы книги и её геометрические размеры:

public class Book { private Cover cover; private List pages; private String editor; public class Cover { //some code here } public static class Page { private static final int DEFAULT_WIDTH = 210; private static final int DEFAULT_HEIGHT = 297; private final int width; private final int height; private final String text; public Page(String text) { this(text, DEFAULT_WIDTH, DEFAULT_HEIGHT); } public Page(String text, int width, int height) { this.text = text; this.width = width; this.height = height; } } }

Раз нам нужно работать с текстом сразу, то воспользуемся свойством статических классов — экземпляр такого класса может существовать самостоятельно, для его создания не нужен объект внешнего класса. И для создания объекта «Page» нужно обратиться к конструктору через имя внешнего класса и точку:

Book.Page page = new Book.Page();

Именно эта особенность позволяет создать объекты-страницы до того, как они будут объединены в один общий объект-книгу. При этом она диктует и ограничение: из вложенного класса нельзя напрямую обращаться к полям и методам внешнего класса. Ведь объект page существует отдельно и не знает, создан ли какой-либо объект класса «Book», где находится на него ссылка. Но из класса «Page» доступно обращение к статическим полям и методам внешнего класса, в том числе и отмеченным модификатором private.

Сам вложенный класс в Java также может содержать статические переменные, методы и блоки инициализации. Для примера в этом классе объявлены статическими дефолтные ширина и высота. Это может быть удобно, если выходит много одинаковых по формату изданий: при создании объекта страницы достаточно передать только нужный текстовый отрывок, и размеры подставятся автоматически.

Также статический класс не имеет ограничений по реализации интерфейсов или наследованию. Он может наследовать или сам выступать в роли родительского класса.



Простые внутренние классы

Класс «Cover» — внутренний или нестатический вложенный класс в Java. Его объекты создаются только через объект внешнего класса и не могут существовать без последнего. Выделить в такой класс данные обложки вполне логично, так как она принадлежит только конкретным книге и изданию:

public class Book { private Cover cover; private List pages; private String editor; public class Cover { private String title; private String author; private LocalDate publicationDate; private Integer copyCount; public String getEditor(){ return editor; } public Integer getBookSize(){ return pages.size(); } } public static class Page { //some code here } }

Кроме своих полей и методов, объект внутреннего класса имеет полный доступ к данным внешнего класса, даже обозначенным модификатором private. Таким образом, через объект cover можно получить другие параметры книги, например, фамилию редактора или количество страниц:

Book book = new Book(); Book.Cover cover = book.new Cover(); String editor = cover.getEditor(); Integer bookSize = cover.getBookSize();

Доступность переменных внешнего класса объясняется просто — объект создаётся на основе существующего объекта внешнего класса. Это гарантирует, что его переменные уже созданы и инициализированы, а значит к ним можно обратиться за данными. Более того, объект внутреннего класса хранит ссылку на объект внешнего, благодаря которому он был создан. Чтобы получить её, достаточно добавить в код следующий метод:

public class Cover { public Book getBook() { return Book.this; } } Book book = new Book(); Book.Cover cover = book.new Cover(); Book outerBook = cover.getBook(); assert book == outerBook;

Эта связь между двумя объектами устанавливается в момент создания и не изменяется. Обратная сторона этой зависимости в том, что внутренние классы не могут содержать статических блоков инициализации и статических методов, так как зависят от существования экземпляра внешнего класса.

Также внутренний класс, как и вложенный, может быть унаследован, выступать в роли родительского класса или реализовывать интерфейс — ограничений нет.

Резюме

Первая пара — статический вложенный класс и внутренний класс, размещённый внутри внешнего, — больше влияет на архитектуру приложения. Правильное расположение этих классов улучшают инкапсуляцию, делают приложение более компактным и упорядоченным. Но выбор типа класса напрямую зависит от контекста использования, его ограничений и особенностей.



Локальные классы

Рассматривать подвиды нестатического внутреннего класса стоит с локального, как промежуточного этапа к более лаконичному анонимному. Локальный класс применяют нечасто, так как его описание и создание объекта продуцирует большой объём кода.

Основная характеристика локального класса — возможность декларирования в любом блоке кода, допускающем объявление переменных. Например: метод, статический инициализатор и даже анонимный класс. Создание и инициализация экземпляра происходит только в нестатическом контексте. В рамках видимости переменной объект может быть переиспользован неограниченное количество раз.

Особенности локальных классов:

объявленный класс принадлежит блоку кода, в котором объявлен, и видимость ограничена рамками этого блока;

единственная доступная область видимости — default;

не может быть статическим или содержать статических методов или статических блоков кода, за исключением констант;

из локального класса разрешён доступ к полям и методам обрамляющего класса;

ему доступны локальные переменные блока, если они имеют модификатор final или являются effectively final ;

или являются ; может наследовать, быть унаследован таким же локальным классом, или реализовать интерфейс.

Представим, что необходимо отобрать уже изданные книги по размеру тиража. Так будет выглядеть реализация этой задачи с помощью локального класса:

public class Application { public static void main(String[] args) { Book book = new Book(); class FilterByCopyCount { public Boolean checkCopies(Book book) { return book.getCover().getCopyCount() > 1000; } } FilterByCopyCount filter = new FilterByCopyCount(); Boolean bestseller = filter.checkCopies(book); } }

Код занимает множество строк, читать его трудно, основная смысловая часть теряется в оформлении. Не самое оптимальное решение. Как сделать код ещё лаконичнее? С помощью анонимных классов и лямбда-выражений.



Анонимные классы и лямбда-выражения

Анонимные классы схожи с локальными по характеристикам, за исключением того, что у них нет имени. Чтобы разобрать его синтаксис, возьмём за основу интерфейс Function, содержащий метод:

R apply(T t); где: T - тип входящих данных, R - тип исходящих данных;

Теперь применим этот интерфейс к нашей задаче, реализовав в анонимном классе функцию, проверяющую размер тиража:

Function<Book, Boolean> myFunction = new Function<>() { @Override public Boolean apply(Book book) { return book.getCover().getCopyCount() > 1000; } };

Анонимный класс находится в фигурных скобках. Ссылка на объект этого класса присвоена переменной myFunction. Его можно передать как параметр в любой метод, так как область видимости интерфейса Function ничем не ограничена.

Но и в этом решении всё ещё много boilerplate-кода. Как сделать эту запись эффективней? Здесь на помощь приходят лямбда-выражения.

Лямбда-выражение — это анонимная функция для реализации метода функционального интерфейса:

Function<Book, Boolean> myFunction = book -> book.getCover().getCopyCount() > 1000; Boolean bestseller = myFunction.apply(myBook);

Она делится на три части:

«->» – символ лямбда-выражения;

часть слева – входные параметры типа ‘T’ (в данном случае – Book);

часть справа – функция, возвращающая тип ‘R’ (в данном случае – Boolean).

Лямбда-выражение можно рассматривать как инструкцию, доступную в любом месте кода. Она позволяет реализовать функцию и передать её как параметр в другой метод. Также с ней можно не создавать отдельный класс, а просто описать необходимые действия. Lambda в чём-то похожа на анонимный класс, за исключением, что анонимный класс может иметь своё состояние, а лямбда-выражение — нет.

Чтобы окончательно убедиться, что лямбда-выражение — это не синтаксический сахар над анонимным классом, обратимся к текущему объекту и получим его хеш-код. Анонимный класс при запросе this.hashCode() вернёт хеш-код экземпляра анонимного класса, а лямбда-выражение — хеш-код объекта класса, внутри которого она вызвана:

public class Typography { public void doWork() { Supplier anonymousClass = new Supplier<>() { @Override public Integer get() { return this.hashCode(); } }; Supplier anonymousFunction = () -> this.hashCode(); System.out.println(""anonymousClass: "" + anonymousClass.get()); System.out.println(""anonymousFunction: "" + anonymousFunction.get()); System.out.println(""this: "" + this.hashCode()); } }

И получим вывод в консоли:

anonymousClass: 1694819250 anonymousFunction: 708049632 this: 708049632

«Затенение» переменных

Локальный и анонимный класс образуют новый уровень вложенности, и, соответственно, свою область видимости, внутри которой возможно объявление новых переменных. Если имя переменной внутри анонимного класса будет идентично имени переменной обрамляющего класса, то ошибки не будет. В коде будет использоваться внутреннее значение:

public class Typography { private int x = 10; public void doWork() { final int x = 31; Consumer anonymousClass = new Consumer<>() { final int x = 314; @Override public void accept(Integer x) { System.out.println(""x = "" + x); System.out.println(""this.x = "" + this.x); System.out.println(""Typography.this.x = "" + Typography.this.x); } }; anonymousClass.accept(x); } }

Вывод в консоли:

x = 31 this.x = 314 Typography.this.x = 10

В лямбда-выражениях нет дополнительной вложенности, и они не образуют новой области видимости. Следовательно, при попытке назвать переменную так же, как принимаемый параметр или локальная переменная, возникнет ошибка компиляции:

public class Typography { private int x = 10; public void doWork() { int x = 31; Consumer anonymousFunction = y -> { //int x = 314; - ошибка компиляции //int y = 0; - ошибка компиляции System.out.println(""y = "" + y); System.out.println(""x = "" + x); System.out.println(""this.x = "" + this.x); }; anonymousFunction.accept(x); } }

Вывод в консоли:

y = 31 x = 31 this.x = 10

Замыкание переменных

Замыкание переменных — это функция, которая захватывает («замыкает») внешние переменные и использует их в своём теле.

Реализация лямбда-выражением интерфейса — это объект анонимного класса. А объекты в JVM хранятся в heap’е, тогда как локальные переменные метода — в stack. Соответственно, если объект будет создан при помощи лямбда-выражения и размещён в heap, будет ли доступна переменная в стеке? А если выполнение локального метода завершено, стек был очищен, и только потом был произведён вызов сохранённого выражения? Избежать возможных коллизий можно сделав копию использованной переменной.

Таким образом, лямбда-выражение уносит в heap копию значения локальной переменной. И если лямбда-выражение изменяет значение переменной или переменная меняется в процессе исполнения локального метода, то добиться согласованности можно двумя вариантами:

запретить изменять переменные, обозначив их как final ,

, воспользоваться пакетом ​​java.util.concurrent.

Причин у этого две:

изменение значений у переменных в Java не потокобезопасное; лямбда-выражение может быть использовано в любом месте кода, тогда как область видимости локальной переменной ограничена блоком кода.

Это гарантирует, что значение переменной не изменится после того, как замыкание будет создано. Своего рода механизм безопасности, позволяющий получить корректные, прогнозируемые результаты, получаемые из замыкания, поскольку они не будут зависеть от изменений, вносимых в эту переменную.

Такая запись не вызывает ошибок:

public void doWork() { AtomicInteger counter = new AtomicInteger(5); String value = ""Value is: ""; BiConsumer<String, AtomicInteger> consumer = (value1, counter1) -> { while (counter1.getAndDecrement() > 0) { System.out.println(value1 + counter1.get()); } }; consumer.accept(value, counter); counter.set(57); }

Вывод в консоли:

Value is: 4 Value is: 3 Value is: 2 Value is: 1 Value is: 0

Ссылки на методы

Ещё один способ сделать код более читаемым — передавать в виде аргумента ссылку на метод. Реализация в коде будет выглядеть как имя класса или объекта, два двоеточия и имя метода:

ClassName::methodName

или

myObject::methodName

Если вернуться к примеру с книгами, то реализация интерфейса Function, возвращающего размер книги, в виде обычного лямбда-выражения будет выглядеть так:

Function<Book.Cover, Integer> function = cover -> cover.getBookSize();

А с использованием ссылки на метод:

Function<Book.Cover, Integer> function = Cover::getBookSize;

Общее резюме"'https://tproger.ru/articles/vlozhennye-klassy-i-ljambda-vyrazhenija-v-java/'https://media.tproger.ru/uploads/2023/03/java_icon-cover-1.png'"['https://media.tproger.ru/uploads/2023/03/java_icon-cover-1.png', 'https://media.tproger.ru/uploads/2022/01/mts.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""90px"" viewBox=""0 0 90 90""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2023/03/java_icon-cover-icon-1-original.png', 'https://mc.yandex.ru/watch/27485085']"
1'NLH22JR84'Жора в огне'Мы тоже используем куки, потому что без них вообще ничего не работает'https://tproger.ru/quiz/zhora-v-ogne/'https://media.tproger.ru/uploads/2023/03/oblozhka-3-1.png'"['https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2023/03/oblozhka-3-1.png']"
2'IGY3PBYSE'5 логико-математических задач, которые поставят в тупик'"А давайте отвлечёмся от кода и перещёлкаем 5 логико-математических задач. Попробуйте решить их в уме и напишите свои ответы в комментариях.

1. Возраст мальчика

Обилечивая человека, кондуктор поинтересовался, сколько лет его сыну. Человек ответил уклончиво:

– Моя дочь в пять раз младше моего сына, а моя жена — в 5 раз его старше. Я, в свою очередь, вдвое старше своей жены. Моя мама сегодня отмечает день рождения — ей исполнился 81 год — столько, сколько мне, жене, дочери и сыну вместе взятым.

Так сколько же лет мальчику?

Решение х + 5х + 25х + 50х = 81 81х = 81 х=1 Получается, что дочери один год, тогда мальчику 1 * 5 = 5 лет.

2. Вёдра с водой

Стоит два ведра ёмкостью 5 л и 9 л. Из реки необходимо набрать 3 литра воды. Как это сделать, если в распоряжении есть только эти два ведра?

Решение Сначала заполним водой из реки девятилитровое ведро, и выльем из него воду в пятилитровое. Выходит, что в девятилитровом останется 4 литра. Выливаем всё из пятилитрового обратно в реку и переливаем в него из девятилитрового оставшиеся 4 литра. Снова наполняем водой из реки девятилитровое ведро и доливаем в меньшее литр воды. Итого в большом ведре остаётся 8 литров. Из меньшего выливаем всю воду обратно в реку и переливаем из девятилитрового в пятилитровое 5 л, после чего в большом ведре останется как раз 3 л воды.

3. Лампочки и переключатели

Есть две комнаты с низкими потолками. В первой висит три лампы накаливания, а в другой установлено три переключателя. Можно сколько угодно раз щёлкать переключатели, но в комнату с лампочками разрешено перейти только один раз.

Как узнать, к какому переключателю подсоединена каждая из лампочек?

Решение В условии сказано, что комнаты с низкими потолками, а перед нами лампы накаливания — то есть они нагреваются. Нам достаточно включить любую из них на некоторое время, затем выключить её и включить любую другую. После этого переходим в комнату с лампочками: выключенная тёплая соединена с первым переключателем;

горящая лампочка связана со вторым;

та лампочка, которая не горит, соединена с выключателем, который мы не трогали.

4. Время по верёвкам

А как насчёт такой логико-математической задачи? Предположим, у нас есть две верёвки и бесконечное множество спичек. Каждая из этих верёвок сгорает за один час. Но вот беда — горят они неравномерно, поэтому невозможно узнать наверняка, за какое время сгорит какая-то часть веревки.

Можно ли отмерить этими двумя верёвками 45 минут, и если да, то как это сделать?

Решение Отмерить можно. Пусть верёвки и горят неравномерно, но сгорают они точно за 1 час. В этом случае можно: Поджечь одну верёвку с двух концов. На второй верёвке поджечь только 1 конец. Первая верёвка сгорит за 30 минут, и в этот момент поджигаем второй конец второй верёвки: на это уйдут оставшиеся 15 минут.

5. Баночки с таблетками

Есть двадцать баночек с таблетками. Почти во всех таблетки весят по 1 г, и только в одной — по 1,1 г. У нас есть точные кухонные весы, с помощью которых нужно определить баночку, каждая таблетка которой весит 1,1 г. Как это сделать, если можно взвесить только 1 раз?

Решение Представим, что у нас 2 баночки, в одной из которых таблетки более тяжёлые. Даже если мы поставим их обе на весы, мы ничего не узнаем. Но если мы достанем из одной баночки одну таблетку, а также одну таблетку из другой, и положим их на весы — вот тогда-то и откроется истина. В данном случае вес будет 2,1 г или 2 г (в зависимости от того, какие по весу таблетки мы взяли). Так и определяем нашу баночку. Вернёмся к задаче. Из каждой баночки нужно доставать разное количество таблеток. То есть из первой баночки 1 таблетку, из второй — 2, из третьей — 3 и так далее. Если бы каждая таблетка весила по 1 г, общий вес составил бы 210 г. Но поскольку в одной из баночек таблетки тяжелее, вес будет больше. Для определения нужной баночки просто воспользуемся формулой: № тяжелой баночки = (вес - 210) * 10

Понравилось решать логико-математические задачи? Тогда вас могут заинтересовать хитрые задания на логику с собеседований."'https://tproger.ru/articles/5-logiko-matematicheskih-zadach-kotorye-postavjat-v-tupik/'https://media.tproger.ru/uploads/2021/08/math-logic-tasks-cover.png'"['https://media.tproger.ru/uploads/2015/10/whiteboard.jpg', 'https://media.tproger.ru/uploads/2022/01/mts-90x90.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2019/07/iconfinder-icon-19-cover-1.jpg', 'https://media.tproger.ru/uploads/2022/01/mts-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2014/12/coin-to-blender.png', 'https://media.tproger.ru/uploads/2021/08/math-logic-tasks-cover-icon-original.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://lh3.googleusercontent.com/a/AEdFTp50gv326z_1BBk_3Pgt4zXAyh8MSdycOeVlD9gn=s96-c', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://sun9-7.userapi.com/c880/u29862656/d_4a6db76f.jpg', 'https://sun1-19.userapi.com/s/v1/ig2/C4jmxAQMzXlBpYLS2Lj2Hl5hmxUT7QuQmOtuthEcbfsSiQAyy8g8TyjY9fvD3boVvNmaEMoS9MR7T28Y3csDyZpn.jpg?size=400x400&quality=96&crop=0,0,1957,1957&ava=1', 'https://media.tproger.ru/uploads/2015/10/two-to-sfour.jpg', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2021/08/math-logic-tasks-cover.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png']"
3'HC6WQ94H7'Valve показала Counter-Strike 2 c обновлённой графикой и дымом'"Ещё на прошлой неделе Valve зарегистрировала торговую марку «CS2», что подтвердило слухи в сети — будет полноценная Counter Strike 2. А релиз игры запланирован на это лето.

Так вот, на днях, после официального анонса, стартовал бета-тест игры.

Самой обсуждаемой темой стал новый «отзывчивый» дым. И не без причины: теперь игра использует динамические объёмные частицы, которые взаимодействуют с окружением и реагируют на свет, выстрелы и взрывы.

Например, пули и гранаты могут разгонять дым, он будет проникать в открытые окна и двери, а частицы дыма работают с единой системой освещения для создания более естественных эффектов.

Зная Valve, до CS3 уж точно не дойдёт, а жаль."'https://tproger.ru/articles/valve-pokazala-counter-strike-2-c-obnovlyonnoj-grafikoj-i-dymom/'https://media.tproger.ru/uploads/2023/03/d0032f7a-4c0d-4a18-b34d-d91748b7a0cf-cover.png'"['https://media.tproger.ru/uploads/2022/01/mts-90x90.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2022/01/mts-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://mc.yandex.ru/watch/27485085', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2023/02/8085861_communism_political_soviet_socialism_union_icon-cover.png', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2023/03/d0032f7a-4c0d-4a18-b34d-d91748b7a0cf-cover.png', 'https://media.tproger.ru/uploads/2023/03/b1fef982-e91e-48e3-9358-46e14d6adac8-cover.png', 'https://media.tproger.ru/uploads/2023/02/3760326_creepy_death_gravestone_graveyard_scary_icon-cover.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://lh3.googleusercontent.com/a/AEdFTp50gv326z_1BBk_3Pgt4zXAyh8MSdycOeVlD9gn=s96-c', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2021/11/OTR-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2023/03/d0032f7a-4c0d-4a18-b34d-d91748b7a0cf-cover-icon-original.png', 'https://sun9-7.userapi.com/c880/u29862656/d_4a6db76f.jpg', 'https://sun1-19.userapi.com/s/v1/ig2/C4jmxAQMzXlBpYLS2Lj2Hl5hmxUT7QuQmOtuthEcbfsSiQAyy8g8TyjY9fvD3boVvNmaEMoS9MR7T28Y3csDyZpn.jpg?size=400x400&quality=96&crop=0,0,1957,1957&ava=1', 'https://media.tproger.ru/uploads/2023/03/b4f7653b-d4e8-44a3-8c4a-a4f1f8493a09.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2023/02/532714_code_coding_development_javascript_script_icon-cover.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png']"
4'DX7YIJQWF'Билл Гейтс рассказал, как он видит будущее с ИИ'"Билл Гейтс рассказал, как он видит будущее с ИИ

Основатель Microsoft опубликовал в своём блоге большое письмо, в котором поделился своим видением того, как искусственный интеллект изменит мир. Он рассказал, что он видит ИИ скорее как «личного помощника» для повышения производительности.

ИИ поможет избавиться от рутины

Например, ИИ может освободить медработников от бумажной и бюрократической работы. А в будущем помочь в прогнозировании побочных эффектов препаратов и расчёте уровней дозировки. Программистам уже вовсю помогает Copilot.

Здесь можно почитать, что такое Copilot:

И как использовать его в России:

Но ИИ здесь опять же — цифровой помощник. Идеи и стратегию разработки всё ещё определяет человек.

Как ИИ повлияет на образование

ИИ будет помогать составлять обучающий контент с учётом особенностей учеников, анализировать их успехи и мотивацию, планировать дальнейшую программу и оценивать успехи.

Но по мнению Гейтса, даже несмотря на то, что ИИ здорово изменит образование в течение 5-10 лет, обучение по-прежнему будет зависеть от отношений между учащимися и преподавателями. ИИ будет лишь помогать сделать этот процесс эффективнее.

Чего не стоит допускать ИИ

Основатель Microsoft говорит, что тут главное не забывать предохраняться от рисков так же активно, как и распространять ИИ среди большего числа пользователей.

Он отметил, что важно не допустить нецелесообразного использования ИИ, а также не дать ему сверхразумных и сверхсильных возможностей, которые позволили бы ИИ «устанавливать свои собственные цели»:

Чтобы использовать ИИ по максимму, нам нужно как предохраняться от рисков, так и распространять преимущества среди как можно большего числа людей. Билл Гейтс

Основатель Microsoft

Он также сравнил прорыв в разработке ИИ с созданием компьютера, интернета и мобильного телефона."'https://tproger.ru/articles/bill-gejts-rasskazal-kak-on-vidit-budushhee-s-ii/'https://tproger.ru/favicon.ico?v=2'"['https://avatars.githubusercontent.com/u/38440668?v=4', 'https://media.tproger.ru/uploads/2023/03/0b20cf4b-495e-441e-a9a4-49be6cbaf70b-cover-icon-original.png', 'https://tproger.ru/favicon.ico?v=2', 'https://mc.yandex.ru/watch/27485085', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png']"
5'XCAV80TN2'Декораторы в Python: понять и полюбить'"Декораторы — один из самых полезных инструментов в Python, однако новичкам они могут показаться непонятными. Возможно, вы уже встречались с ними, например, при работе с Flask, но не хотели особо вникать в суть их работы. Эта статья поможет вам понять, чем являются декораторы и как они работают.

Что такое декоратор?

Новичкам декораторы могут показаться неудобными и непонятными, потому что они выходят за рамки «обычного» процедурного программирования как в Си, где вы объявляете функции, содержащие блоки кода, и вызываете их. То же касается и объектно-ориентированного программирования, где вы определяете классы и создаёте на их основе объекты. Декораторы не принадлежат ни одной из этих парадигм и исходят из области функционального программирования. Однако не будем забегать вперёд, разберёмся со всем по порядку.

Декоратор — это функция, которая позволяет обернуть другую функцию для расширения её функциональности без непосредственного изменения её кода. Вот почему декораторы можно рассматривать как практику метапрограммирования, когда программы могут работать с другими программами как со своими данными. Чтобы понять, как это работает, сначала разберёмся в работе функций в Python.

Как работают функции

Все мы знаем, что такое функции, не так ли? Не будьте столь уверены в этом. У функций Python есть определённые аспекты, с которыми мы нечасто имеем дело, и, как следствие, они забываются. Давайте проясним, что такое функции и как они представлены в Python.

Функции как процедуры

С этим аспектом функций мы знакомы лучше всего. Процедура — это именованная последовательность вычислительных шагов. Любую процедуру можно вызвать в любом месте программы, в том числе внутри другой процедуры или даже самой себя. По этой части больше нечего сказать, поэтому переходим к следующему аспекту функций в Python.

Функции как объекты первого класса

В Python всё является объектом, а не только объекты, которые вы создаёте из классов. В этом смысле он (Python) полностью соответствует идеям объектно-ориентированного программирования. Это значит, что в Python всё это — объекты:

числа;

строки;

классы (да, даже классы!);

функции (то, что нас интересует).

Тот факт, что всё является объектами, открывает перед нами множество возможностей. Мы можем сохранять функции в переменные, передавать их в качестве аргументов и возвращать из других функций. Можно даже определить одну функцию внутри другой. Иными словами, функции — это объекты первого класса. Из определения в Википедии:

Объектами первого класса в контексте конкретного языка программирования называются элементы, с которыми можно делать всё то же, что и с любым другим объектом: передавать как параметр, возвращать из функции и присваивать переменной.

И тут в дело вступает функциональное программирование, а вместе с ним — декораторы.

Функциональное программирование — функции высших порядков

В Python используются некоторые концепции из функциональных языков вроде Haskell и OCaml. Пропустим формальное определение функционального языка и перейдём к двум его характеристикам, свойственным Python:

функции являются объектами первого класса;

следовательно, язык поддерживает функции высших порядков.

Функциональному программированию присущи и другие свойства вроде отсутствия побочных эффектов, но мы здесь не за этим. Лучше сконцентрируемся на другом — функциях высших порядков. Что есть функция высшего порядка? Снова обратимся к Википедии:

Функции высших порядков — это такие функции, которые могут принимать в качестве аргументов и возвращать другие функции.

Если вы знакомы с основами высшей математики, то вы уже знаете некоторые математические функции высших порядков порядка вроде дифференциального оператора d/dx. Он принимает на входе функцию и возвращает другую функцию, производную от исходной. Функции высших порядков в программировании работают точно так же — они либо принимают функцию(и) на входе и/или возвращают функцию(и).

Пара примеров

Раз уж мы ознакомились со всеми аспектами функций в Python, давайте продемонстрируем их в коде:

def hello_world(): print('Hello world!')

Здесь мы определили простую функцию. Из фрагмента кода далее вы увидите, что эта функция, как и классы с числами, является объектом в Python:

>>> def hello_world(): ... print('Hello world!') ... >>> type(hello_world) <class 'function'> >>> class Hello: ... pass ... >>> type(Hello) <class 'type'> >>> type(10) <class 'int'>

Как вы заметили, функция hello_world принадлежит типу <class 'function'> . Это означает, что она является объектом класса function . Кроме того, класс, который мы определили, принадлежит классу type . От этого всего голова может пойти кругом, но чуть поигравшись с функцией type вы со всем разберётесь.

Теперь давайте посмотрим на функции в качестве объектов первого класса.

Мы можем хранить функции в переменных:

>>> hello = hello_world >>> hello() Hello world!

Определять функции внутри других функций:

>>> def wrapper_function(): ... def hello_world(): ... print('Hello world!') ... hello_world() ... >>> wrapper_function() Hello world!

Передавать функции в качестве аргументов и возвращать их из других функций:

>>> def higher_order(func): ... print('Получена функция {} в качестве аргумента'.format(func)) ... func() ... return func ... >>> higher_order(hello_world) Получена функция <function hello_world at 0x032C7FA8> в качестве аргумента Hello world! <function hello_world at 0x032C7FA8>

Из этих примеров должно стать понятно, насколько функции в Python гибкие. С учётом этого можно переходить к обсуждению декораторов.

Как работают декораторы

Повторим определение декоратора:

Декоратор — это функция, которая позволяет обернуть другую функцию для расширения её функциональности без непосредственного изменения её кода.

Раз мы знаем, как работают функции высших порядков, теперь мы можем понять как работают декораторы. Сначала посмотрим на пример декоратора:

def decorator_function(func): def wrapper(): print('Функция-обёртка!') print('Оборачиваемая функция: {}'.format(func)) print('Выполняем обёрнутую функцию...') func() print('Выходим из обёртки') return wrapper

Здесь decorator_function() является функцией-декоратором. Как вы могли заметить, она является функцией высшего порядка, так как принимает функцию в качестве аргумента, а также возвращает функцию. Внутри decorator_function() мы определили другую функцию, обёртку, так сказать, которая обёртывает функцию-аргумент и затем изменяет её поведение. Декоратор возвращает эту обёртку. Теперь посмотрим на декоратор в действии:

>>> @decorator_function ... def hello_world(): ... print('Hello world!') ... >>> hello_world() Оборачиваемая функция: <function hello_world at 0x032B26A8> Выполняем обёрнутую функцию... Hello world! Выходим из обёртки

Магия, не иначе! Просто добавив @decorator_function перед определением функции hello_world() , мы модифицировали её поведение. Однако как вы уже могли догадаться, выражение с @ является всего лишь синтаксическим сахаром для hello_world = decorator_function(hello_world) .

Иными словами, выражение @decorator_function вызывает decorator_function() с hello_world в качестве аргумента и присваивает имени hello_world возвращаемую функцию.

И хотя этот декоратор мог вызвать вау-эффект, он не очень полезный. Давайте взглянем на другие, более полезные (наверное):

def benchmark(func): import time def wrapper(): start = time.time() func() end = time.time() print('[*] Время выполнения: {} секунд.'.format(end-start)) return wrapper @benchmark def fetch_webpage(): import requests webpage = requests.get('https://google.com') fetch_webpage()

Здесь мы создаём декоратор, замеряющий время выполнения функции. Далее мы используем его на функции, которая делает GET-запрос к главной странице Google. Чтобы измерить скорость, мы сначала сохраняем время перед выполнением обёрнутой функции, выполняем её, снова сохраняем текущее время и вычитаем из него начальное.

После выполнения кода получаем примерно такой результат:

[*] Время выполнения: 1.4475083351135254 секунд.

К этому моменту вы, наверное, начали осознавать, насколько полезными могут быть декораторы. Они расширяют возможности функции без редактирования её кода и являются гибким инструментом для изменения чего угодно.

Используем аргументы и возвращаем значения

В приведённых выше примерах декораторы ничего не принимали и не возвращали. Модифицируем наш декоратор для измерения времени выполнения:

def benchmark(func): import time def wrapper(*args, **kwargs): start = time.time() return_value = func(*args, **kwargs) end = time.time() print('[*] Время выполнения: {} секунд.'.format(end-start)) return return_value return wrapper @benchmark def fetch_webpage(url): import requests webpage = requests.get(url) return webpage.text webpage = fetch_webpage('https://google.com') print(webpage)

Вывод после выполнения:

[*] Время выполнения: 1.4475083351135254 секунд. <!doctype html><html itemscope="""" itemtype=""http://schema.org/WebPage""........

Как вы видите, аргументы декорируемой функции передаются функции-обёртке, после чего с ними можно делать что угодно. Можно изменять аргументы и затем передавать их декорируемой функции, а можно оставить их как есть или вовсе забыть про них и передать что-нибудь совсем другое. То же касается возвращаемого из декорируемой функции значения, с ним тоже можно делать что угодно.

Декораторы с аргументами

Мы также можем создавать декораторы, которые принимают аргументы. Посмотрим на пример:

def benchmark(iters): def actual_decorator(func): import time def wrapper(*args, **kwargs): total = 0 for i in range(iters): start = time.time() return_value = func(*args, **kwargs) end = time.time() total = total + (end-start) print('[*] Среднее время выполнения: {} секунд.'.format(total/iters)) return return_value return wrapper return actual_decorator @benchmark(iters=10) def fetch_webpage(url): import requests webpage = requests.get(url) return webpage.text webpage = fetch_webpage('https://google.com') print(webpage)

Здесь мы модифицировали наш старый декоратор таким образом, чтобы он выполнял декорируемую функцию iters раз, а затем выводил среднее время выполнения. Однако чтобы добиться этого, пришлось воспользоваться природой функций в Python.

Функция benchmark() на первый взгляд может показаться декоратором, но на самом деле таковым не является. Это обычная функция, которая принимает аргумент iters , а затем возвращает декоратор. В свою очередь, он декорирует функцию fetch_webpage() . Поэтому мы использовали не выражение @benchmark , а @benchmark(iters=10) — это означает, что тут вызывается функция benchmark() (функция со скобками после неё обозначает вызов функции), после чего она возвращает сам декоратор.

Да, это может быть действительно сложно уместить в голове, поэтому держите правило:

Декоратор принимает функцию в качестве аргумента и возвращает функцию.

В нашем примере benchmark() не удовлетворяет этому условию, так как она не принимает функцию в качестве аргумента. В то время как функция actual_decorator() , которая возвращается benchmark() , является декоратором.

Объекты-декораторы

Напоследок стоит упомянуть, что не только функции, а любые вызываемые объекты могут быть декоратором. Экземпляры классов/объекты с методом __call__() тоже можно вызывать, поэтому их можно использовать в качестве декораторов. Эту функциональность можно использовать для создания декораторов, хранящих какое-то состояние. Например, вот декоратор для мемоизации:

from collections import deque class Memoized: def __init__(self, cache_size=100): self.cache_size = cache_size self.call_args_queue = deque() self.call_args_to_result = {} def __call__(self, fn): def new_func(*args, **kwargs): memoization_key = self._convert_call_arguments_to_hash(args, kwargs) if memoization_key not in self.call_args_to_result: result = fn(*args, **kwargs) self._update_cache_key_with_value(memoization_key, result) self._evict_cache_if_necessary() return self.call_args_to_result[memoization_key] return new_func def _update_cache_key_with_value(self, key, value): self.call_args_to_result[key] = value self.call_args_queue.append(key) def _evict_cache_if_necessary(self): if len(self.call_args_queue) > self.cache_size: oldest_key = self.call_args_queue.popleft() del self.call_args_to_result[oldest_key] @staticmethod def _convert_call_arguments_to_hash(args, kwargs): return hash(str(args) + str(kwargs)) @Memoized(cache_size=5) def get_not_so_random_number_with_max(max_value): import random return random.random() * max_value

Само собой, этот декоратор нужен в основном в демонстрационных целях, в реальном приложении для подобного кеширования стоит использовать functools.lru_cache .

P.S.

Тут будут перечислены некоторые важные вещи, которые не были затронуты в статье или были затронуты вскользь. Вам может показаться, что они расходятся с тем, что было написано в статье до этого, но на самом деле это не так.

Декораторы не обязательно должны быть функциями, это может быть любой вызываемый объект.

Декораторы не обязаны возвращать функции, они могут возвращать что угодно. Но обычно мы хотим, чтобы декоратор вернул объект того же типа, что и декорируемый объект. Пример: >>> def decorator(func): ... return 'sumit' ... >>> @decorator ... def hello_world(): ... print('hello world') ... >>> hello_world 'sumit'

Также декораторы могут принимать в качестве аргументов не только функции. Здесь можно почитать об этом подробнее.

Необходимость в декораторах может быть неочевидной до написания библиотеки. Поэтому, если декораторы кажутся вам бесполезными, посмотрите на них с точки зрения разработчика библиотеки. Хорошим примером является декоратор представления в Flask.

Также стоит обратить внимание на functools.wraps() — функцию, которая помогает сделать декорируемую функцию похожей на исходную, делая такие вещи, как сохранение doctstring исходной функции.

Заключение

Надеемся, эта статья помогла вам понять, какая «магия» лежит в основе работы декораторов.

Перевод статьи «Demystifying @decorators in Python»"'https://tproger.ru/translations/demystifying-decorators-in-python/'https://media.tproger.ru/uploads/2019/03/python-decorators-new.jpg'"['https://media.tproger.ru/uploads/2022/01/mts-90x90.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2019/07/iconfinder-icon-19-cover-1.jpg', 'https://media.tproger.ru/uploads/2018/05/python-ides.jpg', 'https://media.tproger.ru/uploads/2022/01/mts-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2020/12/python-sorting-cover-3.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2019/03/python-decorators-new.jpg', 'https://lh3.googleusercontent.com/a/AEdFTp50gv326z_1BBk_3Pgt4zXAyh8MSdycOeVlD9gn=s96-c', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://sun9-7.userapi.com/c880/u29862656/d_4a6db76f.jpg', 'https://sun1-19.userapi.com/s/v1/ig2/C4jmxAQMzXlBpYLS2Lj2Hl5hmxUT7QuQmOtuthEcbfsSiQAyy8g8TyjY9fvD3boVvNmaEMoS9MR7T28Y3csDyZpn.jpg?size=400x400&quality=96&crop=0,0,1957,1957&ava=1', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big-32x32.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2021/01/Python_regexp-cover.png']"
6'TTOF5TMVR'Кто такой BI-аналитик и как им стать'"Кто такой BI-аналитик и как им стать

Как устроена профессия BI-аналитика, какие у неё перспективы и карьерные треки — представляем обзор и советы трёх специалистов.

Джулианна Кадрия Ресурсный менеджер аналитиков и ведущий аналитик направления Big Data КРОК

Юрий Чалый — ведущий BI-консультант КРОК

Дмитрий Рашев — ресурсный менеджер разработчиков и эксперт направления Big Data КРОК

Чем занимается BI-аналитик

Сегодня бизнесу приходится ежедневно работать с огромным количеством данных для принятия управленческих решений и поддержания своей конкурентоспособности. BI-приложения помогают их преобразовать в удобную и понятную аналитику с визуализацией.

В общем рыночном представлении BI-аналитик собирает, интерпретирует и визуализирует данные. Он помогает бизнесу формировать отчётность в виде графических интерактивных таблиц или графиков, которые называются дашбордами. Создают их с помощью BI-инструментов вроде Power BI, Tableau или Qlik.

BI-аналитики (или BI-специалисты) востребованы в любых компаниях вне зависимости от их рода деятельности. Где-то они выстраивают полноценную архитектуру работы с данными, а где-то могут только разрабатывать дашборды. Пул задач зависит от индустрии, особенностей компании и специализации отдела.

BI-аналитик в ИТ-компании — специалист широкого профиля. Он выполняет функции бизнес- и системного аналитика, консультанта и разработчика, вникает в работу других специалистов и взаимодействует с ними.

Зоны ответственности при работе с данными могут быть распределены между различными специалистами — например, между дата-инженером и BI-разработчиком. Но BI-аналитик работает напрямую с заказчиком, выполняя анализ не только для него, но и для всей команды разработчиков.

Какие задачи выполняет BI-аналитик

Разберём цикл работы BI-аналитика:

Получает запрос бизнес-заказчика.

Внутренний заказчик, например, менеджер по работе с клиентами, даёт задачу: провести анализ количества закрытых сделок за полугодие с детализацией по регионам и городам, разбить сделки по статусам и подготовить отчётность. Собирает требования для составления дашборда.

BI-аналитик определяет круг ответственных — «носителей знаний». Обычно это те же бизнес-заказчики. BI-специалисту нужно провести интервью, чтобы собрать требования для формирования дашборда. К примеру, узнать показатели продаж по ассортименту товаров, по месяцам. Изучает источники данных.

Нужно погрузиться в источники данных: откуда дашборд их собирает в BI-инструмент. Источники могут быть совершенно разными: база данных, выгрузка из CRM, даже Excel-файл на рабочем столе менеджера. Обрабатывает данные и определяет параметры дашборда.

Здесь определяется количество пользователей дашборда, частота обновлений информации, предпочтения по визуализации. Создаёт макет дашборда.

BI-аналитик строит модель данных, то есть таблицы, связанные друг с другом в одной структуре. Он рисует макеты в визуальном редакторе, чтобы понять, как структурно, функционально и визуально будет выглядеть дашборд. Чаще всего используют Figma. Этот редактор позволяет работать над макетом в реальном времени и отображать данные практически так же, как и в BI-инструментах. Разрабатывает финальную версию дашборда.

После согласования макета и модели данных начинается процесс разработки самого дашборда. Его финальная версия может дорабатываться в дальнейшем, если появляются новые требования или источники.

Также BI-аналитик обучает сотрудников заказчика и бизнес-пользователей: рассказывает, какие дашборды есть в компании, как сформировать запрос или выгрузить данные.

В компаниях как КРОК, BI-аналитик — это специалист, который ещё и помогает найти ключевые проблемы, выработать подход по работе с данными, подобрать BI-инструмент, а потом и внедрить его, разработав процесс внедрения и методологическую базу.

Специалист должен владеть как можно большим количеством BI-инструментов, чтобы выбрать оптимальный способ решения задач заказчика. Может показаться, что сложно держать в голове функциональность многочисленных систем. Но концептуально большинство BI-инструментов работают по одинаковым принципам — достаточно бывает разобраться в особенностях хотя бы одной из них.

Перед выбором и внедрением инструментов BI-аналитик опирается на специфику каждого заказчика. Он анализирует IT-ландшафт, уже имеющийся BI-инструмент или способ анализа данных. Также он учитывает количество источников данных, пользователей, ежегодный прирост по данным и пользователям и после этого подбирает оптимальный BI-инструмент.

В других отраслях от BI-аналитика требуется уверенное пользование одним BI-инструментом, который компания уже внедрила и активно использует как основной. Отбор и найм происходят по наличию опыта работ с ним.

Какие навыки должны быть у BI-аналитика

BI-аналитики развиваются по тем же грейдам: джуниор, мидл, сеньор, лид. В зависимости от внутренней специфики компании высшие должности могут называться по-разному. В управленческих должностях можно дорасти до руководителя направления или отдела, или стать специалистом общей функции аналитики.

Чтобы узнать про основные понятия, технологии, разобраться в инфраструктуре работы с данными, можно пройти базовые бесплатные обучающие курсы, например, «Основы работы с данными» от Stepik.

Базовые навыки для уровня мидл:

Уверенное владение BI-инструментом (Tableau, Power BI, Qlik).

Как уже было замечено ранее, они похожи, и можно научиться пользоваться одним, тогда освоить остальные будет проще. Можно начать с бесплатных курсов, например, «Microsoft Power BI для аналитики». Или пройти бесплатный марафон по грамотной работе с данными от Data Literacy Project.

Понимание принципов работы БД и SQL.

Необходимо чтобы писать запросы в базы данных для проверки или добавления новых показателей в дашборд. Для этого достаточно базовых знаний в SQL.

Основы проектирования витрин (мини-хранилищ) и моделирования данных.

Уметь находить нужные данные в разных источниках и формировать единую связную модель данных, на основании которых и выстраиваются дашборды. Обычно это организованная структура связанных друг с другом таблиц.

Уметь находить нужные данные в разных источниках и формировать единую связную модель данных, на основании которых и выстраиваются дашборды. Обычно это организованная структура связанных друг с другом таблиц. Основы бизнес-анализа и системного анализа.

Нужно уметь описывать бизнес-процессы, знать, как бизнес-требования становятся системными, понимать предметную область, чтобы собирать только релевантные данные. Кроме того, нужно знать, как интегрировать данные из разных источников.

Знание ETL, Python.

Знание языка программирования облегчит работу с большими объёмами данных и поможет автоматизировать процессы (например, сбора данных из Excel).

Вот дорожная карта по изучению Python для новичков.

Кроме этого важны: высокие коммуникативные навыки, навыки демонстрации решения и обучения, а также умение писать и оформлять документацию.

«План обучения»: какие базовые знания нужно получить для вхождения в профессию

Необходимый минимум это:

Понимание концепции работы BI-инструментов. Основы и принципы хранилищ данных. Минимум один BI-инструмент. Базовый SQL. Базовое понимание бизнес-анализа. Моделирование данных.

Сеньор должен владеть этими навыками на продвинутом уровне и дополнительно уметь управлять командой, ставить задачи и проверять результаты. Дополнительные навыки нужны для перехода на следующий грейд и развития по карьерной лестнице.

Список может расширяться в зависимости от специфики компании. Где-то к роли аналитика может добавляться роль разработчика: будет полезно изучить JavaScript, чтобы понимать, как устроена frontend-разработка. Или может даже быть продуктологом.

Карьерные перспективы BI-аналитика

У аналитических специальностей широкий диапазон возможностей.

Разработчик в BI-инструменте. Он может создавать дополнительные функции в инструментах или новые инструменты визуализации данных, а также проектировать хранилища данных. Для этого надо глубоко разбираться в SQL и в совершенстве владеть BI-инструментом. Дата-аналитик. Он не просто анализирует данные для отчётов и визуализации, но строит предиктивные модели, которые помогают понять, что будет с показателями через время. Для этого нужно глубоко разбираться в Python и статистических методах. Технический менеджер. Он может заниматься внедрением новых BI-систем, составлением универсальных требований для BI-аналитики в компании, а также руководить командой и планировать сроки и этапы проекта. Для этого просто знания BI-инструментов будет уже недостаточно. Необходимо также понимать, как вести бюджет проекта, договариваться с заказчиками и командой.

Перспективы развития профессии BI-аналитика

BI-аналитик развивается как специалист широкого профиля, а со временем развиваются и сами BI-инструменты. Появляются новые функции автоматического анализа данных, взаимодействие с системами упрощается. Но до полной автоматизации этой функции спрос на специалистов будет только расти.

Кроме того, российский рынок отечественных BI-инструментов активно расширяется. Сейчас их внедряет всё больше крупных компаний, поэтому потенциально BI-аналитик должен понимать, как устроены разные решения.

BI-специалисты не просто собирают и анализируют данные, но и развивают культуру работы с ними. Они продвигают единообразие подходов для обработки и анализа данных в компании и играют важную роль посредника между бизнесом и разработкой."'https://tproger.ru/articles/kto-takoj-bi-analitik-i-kak-im-stat/'https://media.tproger.ru/uploads/2023/03/analytics_icon-cover.png'"['https://media.tproger.ru/uploads/2019/08/logo-krok.png', 'https://media.tproger.ru/uploads/2023/03/analytics_icon-cover.png', 'https://avatars.githubusercontent.com/u/38440668?v=4', 'https://media.tproger.ru/uploads/2023/03/analytics_icon-cover-icon-original.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""314px"" viewBox=""0 0 314 330""%3E%3C/svg%3E', 'https://mc.yandex.ru/watch/27485085', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1312px"" viewBox=""0 0 1312 738""%3E%3C/svg%3E']"
7'4L0FFDYIP'5 главных мифов о системных администраторах'"Системный администратор — ключевой специалист, который настраивает бесперебойную работу IT-инфраструктуры и переводит бизнес на цифровые рельсы. Раньше он был неприметным сотрудником и в основном занимался ручным трудом, связанным с компьютерной техникой в компании. Но технологии настолько усложнились, а зона его ответственности расширилась, что сейчас сисадмин участвует в решении вопросов информационной безопасности, пишет код и проектирует сложную сетевую архитектуру.

Тем не менее, про этих специалистов до сих пор существует целый ряд стереотипов. В статье Алексей Константинов, руководитель отдела инфраструктуры и эксплуатации Нетологии, решил развенчать главные мифы о системных администраторах.

Миф 1. Системные администраторы работают только с «железом»

К базовым навыкам сисадмина действительно относится настройка компьютерного оборудования, установка программного обеспечения, обслуживание и ремонт оргтехники. Без владения этими компетенциями он не сможет создать комфортные условия для работы других сотрудников и грамотно управлять IT-инфраструктурой компании. Однако это далеко не весь функционал системного администратора. Существуют условные грейды, показывающие на каком профессиональном уровне он находится:

Эникейщик — начинающий специалист, который работает преимущественно с оргтехникой: занимается учетом и ремонтом оборудования, настраивает WiFi-сети, устанавливает ПО, меняет картриджи и помогает офисным сотрудникам разобраться, куда нужно нажать, «чтобы все заработало». Многие эникейщики развиваются «горизонтально», становятся нишевыми специалистами: совершенствуются навыки работы с софтом или оборудованием конкретных вендоров, иногда учатся паять чипы, ремонтировать микросхемы, придумывают решения для починки оборудования, которые можно реализовать быстрее, чем сервисное обслуживание. Системный инженер — на этом уровне специалист также настраивает и обеспечивает работоспособность оборудования, устанавливает ПО, но уже совсем в другом масштабе. Как правило, он работает в центрах обработки данных (ЦОД) и обслуживает парк из 300-1000 единиц техники, где внедряет сетевую инфраструктуру и централизованное управление.Такой инженер умеет автоматизировать процессы. Если в компании не внедрены комплексные решения для управления всеми IT-ресурсами и задачами, ему нужно владеть хотя бы одним языком программирования, чтобы централизованно управлять всей инфраструктурой. Часто для этого он создает самописные скрипты на Bash, Python, Perl, а также на Powershell и Batch для администрирования Windows. Например, если нужно установить новый софт на все оборудование в компании: проводить такую операцию на каждом устройстве по отдельности неудобно, особенно если оно находится в разных офисах, поэтому для выполнения такой задачи нужно написать код. Системный архитектор — самый продвинутый специалист. Он уже практически не работает руками, большую часть времени уделяя проектированию IT-инфраструктуры в компании. Помимо того, что он пишет скрипты и программирует, системный архитектор-инженер решает более специфические вопросы, например, обеспечивает информационную безопасность, работает со сложным высококлассным оборудованием, поддерживает парк более чем из 1000 компьютеров.На этом уровне требуются не только развитые навыки автоматизации управления сетями и инженерными системами, но и глубокая экспертность, умение просчитывать риски. Ведь главная задача системного архитектора — спроектировать надежную систему, элементы которой будут функционировать бесперебойно.

Если эникейщику не требуется специализированных навыков для трудоустройства — достаточно лишь набора начальных знаний в компьютерном оборудовании и сетях, уметь держать в руках отвертку и читать инструкции, то для перехода на следующие грейды необходимо получать дополнительное образование или работать с ментором. Также необходимо овладеть основными компетенциями: научиться разбираться в оборудовании, диагностировать неполадки, устанавливать и настраивать специализированное ПО, такое как СУБД, обслуживать и поддерживать работу серверов, проектировать кластерные отказоустойчивые конфигурации с балансировкой трафика.

Помимо вышеперечисленных грейдов, системный администратор также может развиваться в других IT-направлениях — широкий набор знаний и базовых навыков позволяет легко сменить специализацию. Все зависит от того, чем специалисту интереснее заниматься и на каком уровне модели OSI ему комфортнее работать. Например, он может стать:

администратором баз данных, разработчиком, специалистом внедрения, инженером-проектировщиком (API, интеграций, ЦОДов, систем мониторинга), инженером автоматизации, инженером по работе High-End серверным и сетевым оборудованием.

Также сисадмин может занять менеджерскую позицию и стать руководителем проекта, начальником отдела эксплуатации или CIO.

Миф 2. Технологии вытесняют сисадминов

По результатам совместного исследования сервиса «Работа.ру» и агентства Heaad, в 2022 году системный администратор вошёл в тройку самых востребованных IT-профессий. А значит, развитие технологий не только не убивает, а, наоборот, делает эту специальность еще популярнее. Почему так получается?

Сегодня все больше компаний строят распределенные команды, и у сисадминов появилось много новых задач. В первую очередь:

оптимизация информационной инфраструктуры,

настройка корпоративного VPN-соединения,

поиск решений по снижению нагрузки на сервера,

настройка автоматизированных систем электронного документооборота,

обеспечение быстрого обмена большими объемами данных.

В таких условиях нагрузка на сисадминов увеличивается в разы. Не менее важный момент — организация дистанционного доступа к рабочему пространству. Для этого недостаточно установить соответствующее ПО на компьютер сотрудника — нужно также настроить оргтехнику, проследить за информационной безопасностью, организовать оперативную техподдержку.

Прибавляет работы системным администраторам и набирающий популярность тренд на перенос IT-инфраструктуры в облако, где относительно дешево компания может получить весь необходимый сервис «из коробки». Так, по результатам совместного исследования компаний Cloud и «Технологии Доверия», в 2023 году 37% компаний планируют нарастить объем потребления облачных ресурсов. Именно на сисадминов ложится задача по выбору провайдера и переносу в облако всей IT-инфраструктуры компании, включая критическую. Также облачным провайдерам самим необходимы системные администраторы для выполнения своих услуг, поэтому с каждым годом подобные компании нанимают все больше специалистов в штат.

Кроме того, благодаря постоянному росту популярности дата-центров в России в целом увеличивается спрос на системных администраторов, которые занимаются в них обслуживанием оборудования. Сисадмины также необходимы для функционирования сервис-провайдеров и крупных сетевых вендоров. Компании такого рода — основные потребители квалифицированных кадров в сфере.

Миф 3. Системные администраторы работают исключительно в офисе

Как и остальные IT-специалисты, сисадмины могут работать в дистанционном формате. Только эникейщику, который физически работает с оргтехникой, необходимо присутствовать в офисе — более опытные специалисты могут решать все задачи, работая из любой точки мира. К развёрнутой локальной сети и к любому компьютеру можно подключаться при помощи командной строки. Обрабатывать запросы и решать проблемы, возникающие у других членов команды, также можно виртуально с помощью ПО для удаленного администрирования. Даже если «слетает» операционная система и требуется ее повторная установка, системный администратор может не приезжать в офис, а решить вопрос при помощи скрипта, который полностью автоматически устанавливает ОС Windows со всеми нужными для работы драйверами и офисным софтом.

Работодатели видят преимущество в этом подходе — они могут нанимать сотрудников из других регионов или даже стран, и публикуют всё больше вакансий с предложением удалённой работы. Например, такой специалист нужен в онлайн-школу компьютерной графики или в онлайн-магазин мебели для дома. Соответственно, появляется необходимость осваивать новые навыки для более глубокого погружения в процессы управления инфраструктурой: учиться защищать серверы и приложения от уязвимостей, настраивать кеширование, работать с системами контроля версий, использовать инструменты кластеризации и балансировки. Полученные знания помогут продвинуться по грейду и усовершенствовать IT-процессы в компании.

Миф 4. Системные администраторы не программируют

На самом деле, чем выше уровень квалификации, тем нужнее сисадмину навык программирования, ведь приходится решать всё больше нестандартных задач. Например, если нужно проверять работу антивируса и автоматически отключать компьютер от сети при обнаружении угрозы. Делать это вручную неудобно, поэтому системный администратор пишет скрипт. Навыки программирования могут также понадобиться, чтобы настраивать автоматическое резервное копирование пользовательских каталогов, поддерживать в актуальном состоянии базы данных, развертывать тестовые зоны для приложений, создавать утилиты для управления большими сетями.

Миф 5. Системные администраторы — интроверты, которые почти не взаимодействуют с людьми

Это один из самых популярных мифов, но и самых близких к реальности. К системным администраторам люди приходят только со своими проблемами и болью, и в условиях высокой загруженности у сисадминов вырабатывается рефлекторный механизм, из-за этого многие представляют сисадмина замкнутым человеком в свитере с бородой.

На самом деле для системного администратора очень важны навыки коммуникации. Каждый день он общается с десятками людей из других отделов — рядовыми сотрудниками, руководством, коллегами и поставщиками ПО — консультирует по вопросам использования того или иного софта, объясняет почему та или иная программа требуется компании и т. п. При переходе сотрудников на удалённый режим работы сисадмины и вовсе проводят полноценные тренинги: рассказывают коллегам об особенностях домашнего офиса и обучают главным правилам информационной безопасности. Без умения находить общий язык с людьми и выстраивать эффективные коммуникации реализовать перечисленные задачи будет сложно.

Как стартовать в профессии и продвигаться по карьерной лестнице?

Чтобы начать карьеру системного администратора и устроиться эникейщиком, можно получить базовые компетенции на техническом факультете, наработать навык работы с оргтехникой самостоятельно, стать подмастерьем у более опытного специалиста, или же закончить профильную онлайн-программу, например, курс в Нетологии.

Один из самых эффективных способов вырасти из эникейщика в системного инженера и выше — работать с наставником или ментором с большим опытом в IT-сфере. Также необходимо много учиться самостоятельно: недостаточно просто читать мануалы и stackoverflow, важно разбираться в том, как устроены ОС, сети, приложения и различные технологии, расширять компетенции работы с сетевым и серверным оборудованием, учиться использовать различные инструменты диагностики, дебаггинга и тестирования приложений, решать задачи на тренажёрах, изучать скриптовые языки, такие как Bash и PowerShell, DML SQL, а также языки программирования Golang, Python и Perl для различных задач автоматизации.

Чтобы усилить свои теоретические знания, придется изучить следующие темы:

«Linux программирование в примерах»,

«Современные операционные системы»,

«Сети для самых маленьких»,

трехуровневую архитектуру,

виртуализацию и её виды,

глубже погрузиться в понимание модели OSI и принципы работы Интернета,

настройку DNS, протоколов TCP и TLS,

принципы cloud native, RESTful api и 12 factors.

Кроме того, желательно познакомиться с реляционной моделью и нормализацией данных.

Если вы хотите, чтобы вас заметило руководство, нужно начать работать вне рамок ваших должностных инструкций и приносить больше пользы компании. Например, можно найти рутинные процессы и попытаться их автоматизировать. Так, я как-то заметил, что мы в Нетологии тратим много времени на устранение ошибок, допущенных пользователями в ходе штатной работы двух систем, где заявки из одной передаются в другую. В итоге я написал сервис наподобие чат-бота, который помог решить эту проблему и сократил время исправления данных по обращениям клиентов с 40 до 2 минут.

Кроме того, для профессионального роста важно прокачивать и мягкие навыки. У системного администратора нет ничего общего с угрюмым технарём, выполняющим рутинные задачи, каким его представляет большинство. Это профессионал, который решает задачи компании, поэтому ему необходимо уметь договариваться: качественно выявлять и собирать требования заказчиков и уметь делать то, что нужно бизнесу, иногда в ущерб собственным желаниям. Так, сисадмину часто хочется решить сложную задачу, которая требует глубокого погружения, например, сделать самописный сервис. Однако в большинстве случаев не стоит «изобретать велосипед»: не нужно разрабатывать что-то новое, тем самым усложняя себе работу — зачастую правильнее и быстрее найти готовое решение в Интернете, установить и настроить его.

И последнее, не менее важное условие — сисадмин высоких грейдов должен обязательно уметь грамотно излагать мысли и писать. В русском языке нет строгой логики, поэтому у IT-специалистов зачастую с ним возникают трудности, однако структура и ясность мыслей в переписке важны для повышения по карьерной лестнице — помочь решить эту проблему может книга Павла Безручко «Без воды. Как писать предложения и отчеты для первых лиц».

С расширением знаний и круга обязанностей растёт и доход специалиста. Если эникейщики получают от 40 000 до 70 000 ₽, а сетевые инженеры зарабатывают в диапазоне 70 000 — 130 000 ₽, то доход системного архитектора может превышать 180 000 ₽. Больше всего вакансий для сисадминов публикуют крупные игроки российского IT-рынка, среди которых «СБЕР», «Яндекс», МТС и другие корпорации.

Чек-лист «Как системному администратору вырасти от эникейщика до системного архитектора»"'https://tproger.ru/articles/5-glavnyh-mifov-o-sistemnyh-administratorah/'https://media.tproger.ru/uploads/2023/03/5a032d1f-88d2-4056-a68c-f6b4d5683ee8-cover.png'"['https://media.tproger.ru/uploads/2022/01/mts-90x90.png', 'https://media.tproger.ru/uploads/2023/03/7f884c46-39d3-4c5d-a335-a3584de7f949.jpg', 'https://media.tproger.ru/uploads/2020/12/sql-commands-mysql-cover-1.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2019/07/iconfinder-icon-19-cover-1.jpg', 'https://media.tproger.ru/uploads/2022/01/mts-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://mc.yandex.ru/watch/27485085', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'https://media.tproger.ru/uploads/2020/12/css-flexbox-animation-cover-1.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2023/03/5f499e8c-0c89-447e-be22-5f5756a138af.jpg', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2023/03/5a032d1f-88d2-4056-a68c-f6b4d5683ee8-cover.png', 'https://lh3.googleusercontent.com/a/AEdFTp50gv326z_1BBk_3Pgt4zXAyh8MSdycOeVlD9gn=s96-c', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2023/03/f8739054-e765-4196-901d-6ba077d7269c.jpg', 'https://media.tproger.ru/uploads/2023/03/7bd9ff6e-1c7b-4265-8263-751b782848c6.jpg', 'https://media.tproger.ru/uploads/2023/03/3fcecbc3-faa7-4f76-ae9b-e404fde4ed22.jpg', 'https://sun9-7.userapi.com/c880/u29862656/d_4a6db76f.jpg', 'https://sun1-19.userapi.com/s/v1/ig2/C4jmxAQMzXlBpYLS2Lj2Hl5hmxUT7QuQmOtuthEcbfsSiQAyy8g8TyjY9fvD3boVvNmaEMoS9MR7T28Y3csDyZpn.jpg?size=400x400&quality=96&crop=0,0,1957,1957&ava=1', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2023/03/5a032d1f-88d2-4056-a68c-f6b4d5683ee8-cover-icon-original.png', 'https://media.tproger.ru/uploads/2023/03/ac24c787-1055-48f4-82ac-5d2d49b63b4d.jpg', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2023/03/d56b2cf5-6561-4b84-84b8-493b58a669b6.jpeg', 'https://media.tproger.ru/uploads/2021/01/Python_regexp-cover.png', 'https://media.tproger.ru/uploads/2023/03/cb018dc0-4531-4763-a101-e921b6b4a99f.jpg', 'https://media.tproger.ru/uploads/2023/03/07c19857-cfc2-48af-9a19-bae5f3f5c91d.png']"
8'LLPBQNETS'​OpenAI остановила ChatGPT на 4 часа из-за утечки диалогов пользователей'"Из-за сбоя одни пользователи в веб-интерфейсе ChatGPT могли видеть часть бесед ChatGPT других пользователей. Пользователи видели заголовки бесед других пользователей, но не могли читать чужую переписку с чат-ботом. Также из-за сбоя произошла потеря истории разговоров пользователей.

Инцидент произошёл вечером 20 марта. В OpenAI официально не прокомментировали проблему и не рассказали о причине её возникновения, обозначив инцидент со сбоем общими фразами. Известно только, что сбой в IT-сервисах компании произошёл из-за бага в стороннем ПО с открытым исходным кодом. Что конкретно это было за ПО — не пояснили.

В компании устранили проблему за несколько часов, но ещё продолжают работать над восстановлением истории разговоров пользователей."'https://tproger.ru/articles/openai-ostanovila-chatgpt-na-4-chasa-iz-za-utechki-dialogov-polzovatelej/'https://media.tproger.ru/uploads/2023/03/54061c5d-b74e-4d96-9703-0f131dc99093-cover.png'"['https://media.tproger.ru/uploads/2022/01/mts-90x90.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2023/03/54061c5d-b74e-4d96-9703-0f131dc99093-cover-icon-original.png', 'https://media.tproger.ru/uploads/2022/01/mts-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2023/03/08861701-d4ba-4d2c-b04a-d8436263f6f8.png', 'https://mc.yandex.ru/watch/27485085', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2023/02/8085861_communism_political_soviet_socialism_union_icon-cover.png', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2023/03/54061c5d-b74e-4d96-9703-0f131dc99093-cover.png', 'https://media.tproger.ru/uploads/2023/03/b1fef982-e91e-48e3-9358-46e14d6adac8-cover.png', 'https://media.tproger.ru/uploads/2023/02/3760326_creepy_death_gravestone_graveyard_scary_icon-cover.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://lh3.googleusercontent.com/a/AEdFTp50gv326z_1BBk_3Pgt4zXAyh8MSdycOeVlD9gn=s96-c', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2021/11/OTR-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://sun9-7.userapi.com/c880/u29862656/d_4a6db76f.jpg', 'https://sun1-19.userapi.com/s/v1/ig2/C4jmxAQMzXlBpYLS2Lj2Hl5hmxUT7QuQmOtuthEcbfsSiQAyy8g8TyjY9fvD3boVvNmaEMoS9MR7T28Y3csDyZpn.jpg?size=400x400&quality=96&crop=0,0,1957,1957&ava=1', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2023/02/532714_code_coding_development_javascript_script_icon-cover.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png']"
9'984NX9QKE'Как найти первую работу в IT в 2023 году'"Как найти первую работу в IT в 2023 году

Ещё два года назад спрос на айтишников превышал предложение, и на мало-мальски хорошее резюме сразу приходило несколько приглашений на собеседование.

Но за 2022 год вакансий в IT стало меньше на 26%, а количество резюме увеличилось аж на 57%. Жаловаться на нехватку работы стали даже мидлы и сеньоры — что уж тут говорить о джунах.

Хорошая новость в том, что вакансии для начинающих айтишников всё ещё есть — даже в крупных компаниях. Рассказываем, где их искать, как сделать хороший отклик и подготовиться к собеседованию.

Новички по-прежнему нужны

Как правило, молодых специалистов нанимают, чтобы:

освободить мидлов от рутинных задач,

прокачать наставнические качества сеньоров,

вырастить собственные лояльные кадры.

Работы для новичков немного, но она есть. В конце 2022 года 12% от общего числа IT-вакансий на HeadHunter подходили начинающим.

По данным Работы.ру, компании чаще всего ищут:

разработчиков,

аналитиков,

системных администраторов.

Это общая статистика на лето-2022. В реальности спрос на разные специальности может отличаться в зависимости от компании и её задач. Например, если продукт компании строится на моделях машинного обучения, HR будут искать дата-инженеров, дата-сайентистов и аналитиков.

Где искать вакансии

Сервисы по поиску работы:

Отдельные сайты для IT-вакансий:

Издания об IT:

Соцсети:

Telegram-канал Job for Junior — вакансии для начинающих в IT и Digital

Telegram-канал Young & Junior – вакансии IT — вакансии для джунов в СНГ.

Группа во ВКонтакте ИТ-вакансии — есть отдельные подборки работы для джунов из разных источников

Иногда HR размещает вакансии только на собственных ресурсах, чтобы не получать сотни откликов в день. Поэтому имеет смысл проверять сайты и Telegram-каналы компаний, в которых вам хочется работать.

Например, у МТС есть Telegram-канал МТС Джобс, где мы публикуем вакансии в IT и Digital.

Если вы не нашли подходящее предложение на этих ресурсах, попробуйте подать заявку на стажировку. Это не альтернатива постоянному трудоустройству, а, скорее, продолжение обучения. Вы попробуете применить свои знания на практике, получите первый опыт, а дальше, возможно, и оффер на постоянную работу.

Стажироваться лучше в крупной компании, где хорошо настроены рабочие процессы. В таких фирмах не стремятся получить дешёвую рабочую силу, а действительно учат работать в команде. Вас не кинут в груду непонятных задач, а выделят наставника и постепенно введут в курс дела.

Как откликаться на вакансии — пошаговая инструкция

Шаг 1. Убедиться, что ваши навыки подходят под вакансию хотя бы на 80%

HR не сможет пригласить на собеседование кандидата без релевантного опыта, даже если в его резюме есть рекомендация от короля Великобритании.

Шаг 2. Внимательно изучить текст вакансии — там могут быть маленькие проверки на внимательность

Например, работодатель попросит начать сопроводительное письмо с определённых слов или что-либо приложить к отклику. Если этого не сделать — заявку рассматривать не будут.

Шаг 3. Адаптировать резюме именно под эту должность

Например, если в требованиях указан уровень владения английским С1, нелишним будет приложить подтверждающий сертификат.

На этом этапе может возникнуть соблазн составить одно универсальное резюме и показать в нём все навыки и сильные стороны. Это ошибка — документ получится слишком длинным, и HR будет сложно найти нужную информацию среди всего списка компетенций.

Шаг 4. Написать сопроводительное письмо

Так больше вероятности, что отклик рассмотрят.

Точно нужно написать:

приветствие

почему заинтересовались вакансией

опыт работы

чем будете полезны на этой позиции

контакты

Для каждой новой вакансии пишите новое письмо. Структура может быть одна, но детали придётся менять, ведь у всех компаний разные требования к кандидатам.

Шаг 5. Приложить ссылки только на релевантные проекты

Отправлять всё портфолио нежелательно, особенно если оно объёмное. Работодателю будет сложно понять, что именно вы делали и чем будете полезны.

Если эти советы показались вам очевидными, вы уже хорошо подготовились к поиску работы. Но если бы им следовали все, HR бы не получали сотни неудачных откликов.

Как готовиться к собеседованию и техническому интервью

Изучите будущего работодателя

✔ Внимательно посмотрите сайт компании и проекты, погуглите, в каких мероприятиях участвует команда. Если вы покажете HR, что подготовились к встрече, вас сочтут активным и заинтересованным кандидатом.

✔ Заранее узнайте, кто будет проводить собеседование, и найдите этого человека в соцсетях. Возможно, вы наткнётесь на блог, в котором он делится принципами работы, — это поможет предугадать, что ждёт на интервью.

✔ Идите на собеседование с настроем, что вы уже знаете о компании больше, чем она о вас, — будет менее волнительно.

Соберите отзывы о компании

Лучший источник отзывов — действующие работники компании. С такими специалистами можно пообщаться в профессиональных чатах и на разных нетворкинг-мероприятиях вроде конференций.

Ещё один способ получить отзывы о компании — найти её сотрудников в соцсетях.

Нескольким людям можно написать и задать вопросы о потенциальном работодателе.

Если вам не удалось пообщаться с сотрудниками компании, можно посмотреть рейтинги лучших работодателей. Такие исследования проводят, например, HeadHunter и Changellenge.

Повторите теорию

На технических интервью джунам задают много вопросов по теории, поэтому повторите все важные термины и матчасть. Так вы покажете, что крепко владеете базой, а значит, с практикой будет проще.

При подготовке важно понимать, какие навыки ждёт от вас работодатель. Например, в интервью на позицию Data Scientist могут задавать вопросы по статистике, теории вероятности и линейной алгебре.

Не пугайтесь, если на каждый правильный ответ вам задают более сложный вопрос. Это нормально — рекрутер пытается понять, на каком уровне ваши знания.

Следите за мелочами

У директора новозеландской IT-компании Xero есть собственный алгоритм отбора кандидатов. Во время собеседования он предлагает соискателю кофе и смотрит, что он сделает с пустой чашкой.

Тест простой: если человек не помыл за собой посуду, ему не предложат работу в компании. И неважно, насколько хороши его профессиональные навыки.

Подобные проверки могут быть и в других компаниях. Чтобы их пройти, руководствуйтесь здравым смыслом и не пренебрегайте правилами приличия.

Можно ли получить оффер быстрее

Иногда все этапы отбора проходят в один день, и в тот же день соискатель может получить приглашение на работу. Такой формат называется one day offer.

Кандидатов на экспресс-собеседования набирают через рекламу в Интернете. Для one day offer создают отдельный сайт, на котором соискатель должен оставить заявку и отправить резюме. Если навыки подойдут компании, его пригласят на one day offer.

Выводы

Ситуация на рынке непростая, но вакансии для новичков есть. Их можно найти:

на агрегаторах по поиску работы,

на сайтах про IT,

в соцсетях,

на сайтах и в блогах компаний.

Хороший способ найти первую работу — пойти на стажировку в крупную компанию. Если повезёт, останетесь в команде, если нет — появится классная строчка в резюме. В МТС постоянно появляются новые вакансии для стажёров — следить за ними можно на сайте МТС Intro.

Перед собеседованием:

внимательно изучите сайт компании,

пообщайтесь с действующими сотрудниками,

повторите теорию.

Помните, если вас пригласили на собеседование, значит, HR считает, что у вас достаточно компетенций для этой должности.

Не отказывайтесь от стажировок и вакансий с небольшой зарплатой — на этом этапе важно получить опыт, а не заработать сотни тысяч рублей.

Реклама ПАО «МТС» LjN8KRYrM"'https://tproger.ru/articles/kak-najti-pervuyu-rabotu-v-it-v-2023-godu-erid-ljn8kryrm/'https://media.tproger.ru/uploads/2023/03/48759f7e-e772-40e0-bdd5-fd007c0c159c.png'"['https://media.tproger.ru/uploads/2023/03/cc8c9d34-b42c-40ec-842d-8cdebb8eb89c.png', 'https://media.tproger.ru/uploads/2022/01/mts.png', 'https://media.tproger.ru/uploads/2023/03/48759f7e-e772-40e0-bdd5-fd007c0c159c.png', 'https://sun9-7.userapi.com/c880/u29862656/d_4a6db76f.jpg', 'https://sun1-19.userapi.com/s/v1/ig2/C4jmxAQMzXlBpYLS2Lj2Hl5hmxUT7QuQmOtuthEcbfsSiQAyy8g8TyjY9fvD3boVvNmaEMoS9MR7T28Y3csDyZpn.jpg?size=400x400&quality=96&crop=0,0,1957,1957&ava=1', 'https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AEdFTp50gv326z_1BBk_3Pgt4zXAyh8MSdycOeVlD9gn=s96-c']"
10'1QUZLBJ9S'6 сервисов для временной почты без регистрации'"Рассказываем о временной почте и сервисах, которые позволяют бесплатно зарегистрировать одноразовый email.

Что такое временная почта и зачем она нужна

Наверняка на вашей основной почте куча рекламы и адресов, отправленных в категорию «спам», ведь каждый раз вы используете её для регистрации на сайтах, в программных продуктах и сервисах. К счастью, сегодня можно создать временную почту на 10 минут.

Преимущества одноразового почтового ящика

Он бесплатный, как и обычный.

За пользователем сохраняется анонимность, поскольку для регистрации временной почты не нужно указывать свои данные.

Географическая независимость, которая позволяет завести «ящик» любой страны.

Нет капчи и ограничений по количеству аккаунтов на один IP-адрес.

Скорость создания электронного адреса.

Время жизни такого e-mail не требует запоминать пароль и не оставляет злоумышленникам шансов взломать вас.

Идеально подходит для покупок в интернете, так как исключает возможные рассылки от интернет-магазинов.

Главные недостатки

Засвеченность таких адресов: это значит, что некоторые сайты могут не принять данную почту.

Получение входящих писем с перебоями.

Ограниченный выбор доменов.

Не все сервисы поддерживают кириллицу, то есть временная почта должна быть в том числе ориентирована на Россию.

Примечание Не используйте временный почтовый ящик для регистрации на тех сайтах, с которыми вы будете работать продолжительное время.

Сервисы временной электронной почты

Разберём самые популярные, пройдёмся по их функционалу, основным плюсам и минусам.

Temp-Mail

Возможность создать временную почту от Темп Майл предлагается нам в первой же строке Google. Протестируем:

Почтовый адрес создаётся сразу после перехода на сайт: очень удобно с точки зрения UX — никаких лишних действий предпринимать не нужно. Этот адрес можно скопировать, удалить и даже сменить на любой желаемый с использованием дополнительных доменов. Последняя опция доступна только для premium-подписки в размере $10 в месяц.

Давайте попробуем использовать бесплатный email, который нам сразу выдали. После регистрации на Хабре, мне сразу пришло письмо с подтверждением регистрации:

Из минусов — обилие баннерной рекламы. Поскольку у меня стоит адблок, сайт выглядит чистым, но стоит отключить расширение, как баннеров становится ну очень много:

CrazyMailing

У этого сервиса временной электронной почты предусмотрена русскоязычная версия. Здесь также сразу предоставляется временный email и висит предупреждение о том, что он актуален в течение десяти минут. Но время всегда можно продлить (кнопки в левом сайдбаре):

Что особенно удобно, здесь доступна пересылка писем на реальный ящик, но уже для авторизованных пользователей.

А вот зарегистрироваться на Хабре не удалось:

Эта ошибка означает, что доменные имена CrazyMailing уже есть в базах данных различных сайтов, а потому могут возникать подобные проблемы при регистрации.

Присутствует небольшое количество баннерной рекламы.

TempMail+

Здесь сразу бросается в глаза количество возможных доменных имён, а именно десять:

Также можно самостоятельно изменить электронный адрес. Срок жизни ящика настраиваемый — от десяти минут до семи дней. Также можно задать PIN-код и даже использовать секретный адрес, который скроет основной адрес от других сайтов:

Но главная проблема схожа с CrazyMailing: ни один из десяти доменных имён не позволил зарегистрироваться на выбранных сайтах.

Есть реклама, но лишь одна небольшая внизу страницы.

10minemail

Название сайта говорит само за себя: создаётся десятиминутная временная почта без регистрации с возможностью продлять время. Сразу получилось зарегистрироваться с доменом «bio123.net». Письмо тоже не заставило себя ждать:

Но с рекламой ситуация такая же, как у Temp-Mail. Если выключен adblock, вы будете видеть что-то подобное:

Dropmail

Простенький сервис для email почты на одноразовое использование. Дизайн устаревший, некоторые сайты не «кушают» доступные доменные имена, но можно изменить их на расширенные, и тогда всё хорошо:

Письмо пришло мгновенно.

Как пишут сами создатели Dropmail, их почтовые ящики могут работать как временно, так и бесконечно.

Из интересного:

Можно настроить визуальные и звуковые уведомления о новых сообщениях.

Есть возможность скачать письмо.

Доступно чтение в HTML.

Если случайно перезагрузили окно, вернуться к предыдущим email-адресам поможет кнопка «Восстановление доступа».

Рекламы нет — вместо этого предусмотрены донаты.

ONE OFF

Как и в предыдущем сервисе, ONE OFF предоставляет возможность включить оповещения. Временная почта создаётся сразу и работает в течение одного часа:

Создатели пишут, что их имейлы могут использоваться для регистрации в Twitter, Snapchat, Tumblr и т. д. Мы опробовали на Tumblr: регистрация прошла, но письмо не пришло. И так с несколькими сайтами. С чем связана подобная ошибка, неизвестно: возможно, это лишь временный сбой.

Подведём итоги

Возможность создавать одноразовые электронные ящики значительно упрощает жизнь тем, кто совершает в интернете много одноразовых посещений тех или иных ресурсов. В основном это интернет-магазины и сайты по оказанию услуг.

Временная почта оградит вас от спама и обеспечит полную анонимность. В эпоху, когда сайты то и дело теряют базы данных со своими пользователями, такой инструмент просто необходим.

А вы когда-нибудь пользовались временной почтой? Поделитесь в комментариях своими впечатлениями."'https://tproger.ru/articles/vremennaja-pochta/'https://media.tproger.ru/uploads/2021/09/tempmail.jpg'"['https://media.tproger.ru/uploads/2022/01/mts-90x90.png', 'https://media.tproger.ru/uploads/2021/09/5686455_email_mail_mailbox_post_icon-cover-icon-original.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1890px"" viewBox=""0 0 1890 907""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1775px"" viewBox=""0 0 1775 884""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2018/05/python-ides.jpg', 'https://media.tproger.ru/uploads/2021/02/git-cover.png', 'https://media.tproger.ru/uploads/2022/01/mts-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1132px"" viewBox=""0 0 1132 444""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2021/09/tempmail.jpg', 'https://mc.yandex.ru/watch/27485085', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1612px"" viewBox=""0 0 1612 885""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1114px"" viewBox=""0 0 1114 709""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2021/09/2575567_anonymous_hacker_malware_online_private_icon-cover.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1700px"" viewBox=""0 0 1700 734""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1653px"" viewBox=""0 0 1653 770""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1710px"" viewBox=""0 0 1710 930""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2019/07/iconfinder-icon-16-cover-1.jpg', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big-32x32.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://avatars.githubusercontent.com/u/38440668?v=4', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1620px"" viewBox=""0 0 1620 763""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1339px"" viewBox=""0 0 1339 363""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png']"
11'2JQT57PJ3'Что делает интеграционный системный аналитик в банке'"В каждом из направлений разработки в Ренессанс Банке работает своя группа системных аналитиков. Соответственно, их задачи, обязанности и стек технологий будут отличаться. Даниил Пронин — руководитель группы системного анализа направления интеграции — рассказал, чем занимается интеграционный системный аналитик в банке, какими инструментами он пользуется, а также поделился, что ждут в компании от соискателей. Бонусом — несколько советов о том, как готовиться к собеседованию на эту позицию.

Даниил Пронин Руководитель группы системного анализа направления интеграции

Обязанности интеграционного системного аналитика

Хард скилы интеграционного системного аналитика

Инструменты системного аналитика

Софт скилы системного аналитика

Советы при подготовке к собеседованиям



Обязанности интеграционного системного аналитика

Системный аналитик — это переводчик с бизнес-языка на технический.

Бизнес-анализ прорабатывает всю процессную часть исходя из предпочтений заказчика. Например, нужно, чтобы клиент мог оформить карту. Бизнес-аналитики детализируют процесс, декомпозируют требования с описанием тех процессов, которые будут затронуты и изменены. А дальше уже системные аналитики описывают, какие изменения на стороне системы требуются, чтобы этот бизнес-процесс прошёл.

Чаще системный аналитик принимает требования от бизнес-аналитика. Наши системные аналитики изучают предоставленные документы (BRF, заключения бизнес-анализа), уточняют требования и согласуют их. Бывают случаи, когда требования даёт сразу заказчик, то есть бизнес. Тогда нужно в том числе провести небольшой бизнес-анализ.

Также аналитику на согласование приходят архитектурные заключения (для небольших доработок) и архитектурные решения от архитекторов. Обычно они описывают скоуп систем, которые изменяются, и появление новых и изменение имеющихся взаимодействий между старыми системами. Когда в интеграционном направлении появляется новый процесс, новая связь между интеграционным слоем и набором систем, мы предметно её прорабатываем.

Системный аналитик формирует спецификации на информационные системы. В случае интеграции — как должен осуществляться информационный обмен, какой атрибутивный состав. То есть какие поля принимаются на вход, какие отдаются на выход, какие преобразования присутствуют. Сервис может не только отправлять информацию дальше, но и выступать в роли вычислительного — сам производить расчёты на основе формул. Для этого нужно определить алгоритмы и необходимые функции. Когда вся документация и требования к компоненту готовы, системный аналитик передаёт их разработчикам на реализацию.

Для части интеграций мы используем корпоративную шину (IBM ESB). В планах полностью отказаться от неё, однако этот процесс трудоёмкий и надо позаботиться о том, чтобы наши потребители не сильно страдали от перехода на новую архитектуру. Сейчас наше целевое решение в части интеграционных взаимодействий — это микросервисная архитектура с использованием REST API и брокеров сообщений (Kafka, IBM MQ, который потенциально будет заменён на ActiveMQ).

Первым значимым результатом работы с микросервисами является контракт сервиса. Контракт — это описанный формат взаимодействия, который включает в себя доступные методы для вызова. По сути, инструкция для пользователя. Ему неважно, что происходит внутри сервиса, главное — показать, что он может передать на вход и что получить на выход. Например, ввести фамилию, имя, отчество, дату рождения и паспорт и получить идентификатор клиента.

Во многих организациях подход code first. Аналитики объясняют, что должно приходить на вход и выход, и передают эту информацию разработке в виде оформленной спецификации, либо в виде ТЗ. Дальше разработчики реализуют модель данных на уровне кода, алгоритмов, и на её основе автоматически генерируется контракт сервиса. Это Swagger-контракт или API-спецификация.

У нас же системный аналитик сначала прорабатывает контракт — договаривается с потребителями, как к нам обращаться. Мы используем этот подход потому, что максимально быстро у потребителя появляется вся необходимая информация для разработки своей части взаимодействия. К тому же контракт, описанный по OpenAPI-спецификации, позволяет разработчикам сгенерировать часть кода автоматически.

Есть два способа описать Swagger-контракт: JSON-формат, либо YAML-разметка. Мы используем последнюю. В YAML-разметке мы описываем, что получится в ответ на обращение, все ограничения, и отдаём потребителям. Благодаря этому они понимают, как им работать с сервисом, и могут начать разработку. То есть им не надо ждать, пока мы напишем ТЗ и код, так как в code first контракта без кода не получится.

После того как контракт готов, мы приступаем к написанию спецификации — паспорта сервиса. Здесь описываются доступные функции сервиса и алгоритмы, валидации, альтернативные сценарии, последовательность обработки данных и произведение вычислений. Либо, если сервис композитный, включающий набор вызовов других систем, выстраивается последовательность этих вызовов, условия переходов, ошибок, повторных вызовов внутри. Уже на основе этого документа разработчик может закодить внутреннюю логику.

Описание сервиса дополняется UML-диаграммой последовательности. Мы визуализируем работу алгоритмов сервиса, включающих как внутренние вычисления, так и обращение к другим системам и сервисам. Это как раз удобно с композитными сервисами, потому что наглядно видно всех участников процесса.

Хард скилы интеграционного системного аналитика

Чтобы всё это делать, системный аналитик должен разбираться в соответствующем стеке. У соискателей, которые приходят на эту должность, мы спрашиваем такие знания.

Микросервисы

Большая часть наших технологий — это интеграции на микросервисах. Соответственно, необходимо разбираться в видах архитектур и знать, что такое монолит и микросервисы.

Наши микросервисы реализуются на Java Spring Boot, развёртываются в OpenShift и публикуются на платформе управления API под названием IBM API Connect.

Также важно уметь использовать средства просмотра логов. Мы используем Kibana, а также Zipkin для трассировки цепочки вызовов.

ESB

Это промежуточное ПО, которое представляет собой большой транспортный пересадочный узел для входящих и исходящих потоков. То есть такой хаб, на котором публикуются различные сервисы. Обращение к ним происходит через SOAP, MQ, JMS и т. п. В SOAP-протоколе, например, описывается строго типизированный формат интеграции, то, как должны выглядеть входные и выходные сообщения. Они валидируются по XSD-схеме, при этом используется XML-разметка.

Через шину потребители могут обращаться к конечным системам. Она преобразует входное сообщение в другую форму: вызов хранимой процедуры или другие интерфейсы.

Виды интеграций

Мы задаём стандартные вопросы про виды интеграций и ждём развёрнутый ответ с как можно большим количеством вариантов. Дальше предметно спрашиваем про те виды, которые у нас используются:

— REST API. В чём отличие REST API от SOAP-сервисов. Как правило, все дают базовый ответ, что REST — это архитектурный стиль, а SOAP — это протокол.

Нужно знать, какие методы используются в REST-сервисе. Многие впадают в ступор, что подразумевается под ними. Это HTTP-глаголы, поскольку REST базируется на HTTP-протоколе. Многие ограничиваются двумя методами — GET и POST, но на деле их больше. Важно понимать, чем они отличаются, если не приходилось с ними работать. Также ожидаем, что кандидат представляет, что такое REST-запрос: где можно передать входные параметры, где техническую информацию, что такое статус-коды, какие категории у них бывают.

— SOAP-сервисы. У нас они остались на шине, но иногда приходится обращаться в мастер-системы по SOAP-протоколу. Важно понимать, из каких артефактов состоит сервис, например, XSD, WSDL.

Очереди и брокеры сообщений

У нас это IBM MQ и Kafka, но важен опыт работы с любым брокером сообщений, так как их концепции похожи. Если соискатель работал с этими инструментами, то спрашиваем, какая разница в построении очередей. Нужно описать, как выглядит взаимодействие — кто подписчик, кто поставщик сообщений. Как брокер себя ведёт: толкает сообщения, либо просто хранит, пока их сам не прочитает подписчик, сколько хранит, удаляет ли. Нам важно, чтобы человек понимал принцип работы системы. Предметно знать необязательно, потому что всё-таки аналитики не проверяют средство просмотра и администрирования очередей или топиков.

На собеседовании мы также даём практическую задачу на проектирование сервиса, который будет возвращать информацию. Мы обсуждаем, например, авторизацию, защиту информации, разграничения доступа и параметризацию сервиса, нагрузку на сервис. Это близко к архитектуре, но у нас аналитики зачастую берут на себя роль solution-архитекторов, которые на уровне конкретной системы и компонентов принимают решение о реализации.



Инструменты системного аналитика

Спецификации. YAML-разметка, Swagger и OpenAPI.

Для документации мы используем не стандартные страницы в Confluence или документы Word, а разметку AsciiDoc. Она лежит рядом с кодом, и в Confluence мы её подтягиваем через плагин.

Мы работаем в инструменте PlantUML, он позволяет текстом описывать UML-диаграммы, которые затем верстаются в картинку. Всю документацию мы кодим в различных разметках и храним рядом с кодом. В принципе, работа с документацией для интеграционного аналитика в Ренессансе — это скорее кодинг, чем работа в графических и текстовых редакторах.

Gitlab и Jira.

Средства для отладки тестирования: Postman, SoapUI для отладки сервисов или автоматизации вызовов. Иногда аналитику необходимо сымитировать вызов. Так он самостоятельно и быстро поймёт логику работы сервиса, входные и выходные параметры и сможет решить, нужны ли доработки. Если бы он лазил в документацию (которая не всегда может быть корректно составлена), то на это бы ушло больше времени, чем предметно что-то вызвать и смотреть на результат.

Базы данных. Как правило, системный аналитик редко ходит в БД. Но, тем не менее нужно уметь составлять базовый SQL-запрос с выборкой.

СМЭВ — это контурное взаимодействие с различными государственными ведомствами. С его помощью можно получить актуальную информацию, соответствующую законодательству, не спрашивая клиента.

Софт скилы системного аналитика

Навыки общения будут универсальными для любого системного аналитика. Без софт скилов здесь не обойтись, потому что аналитик — связующее звено между бизнесом и разработкой. Поэтому ему важны такие навыки:

Быть коммуникабельным. Регулярно участвовать во внутренних митингах с разработчиками. Также общаться с бизнес-аналитиками, архитекторами и отстаивать свою позицию. Поскольку не всегда те решения, которые предлагают общебанковские архитекторы, могут быть реализованы.

Не стесняться задавать вопросы. Самый плохой вопрос — незаданный. Нужно включаться в диалог, чтобы собрать максимум требований и закрыть максимум вопросов.

Участвовать в оценках. Мы оцениваем работу в человеко-днях, также у нас введён процент риска по ней. Чем больше неопределённости, например, непроработанных требований со стороны бизнес-анализа, отсутствие адекватной архитектуры, тем больше риска мы закладываем.

В силах аналитика закрыть неопределённость до оценки, как раз общаясь с бизнес-аналитиками и архитектором. Чем точнее оценка, тем точнее можно прогнозировать скорость выполнения задачи и составить адекватный бэклог на предстоящий релиз. К тому же разработчики не будут простаивать, выходить в выходные или задерживаться, чтобы только успеть закрыть задачу.

Уметь собирать требования различными способами. Можно использовать различные приёмы для того, чтобы снижать степень неопределённости: брейншторминг или опросы. Участвовать также не только в опросе бизнес-аналитики, но и напрямую с бизнесом.

Быть инициативным. В команде всегда ценны те люди, которые готовы помогать коллегам, включаться, чтобы причесать общий бэклог, забрать оттуда для себя задачу.

Не стесняться границ, зон ответственности. Бывают случаи, когда участники команды разработки коммуницируют с коллегами только через лидов. Это порочная практика, поскольку тратится время на эту лишнюю цепочку.

Оставаться ответственным. Не только за свои задачи, но и перед командой.

Следствие всех этих софт скилов — синергия между участниками команды разработки, которая приводит к комфортному и продуктивному рабочему процессу.



Советы при подготовке к собеседованиям

Больше рассказывайте о предыдущем опыте и раскрывайте суть решаемых задач, проектов и стек технологий, с которыми работали. Часто встречаются резюме, в которых написано только «работа с интеграцией», или «участие в проектируемых интеграциях». Какие это были интеграции, насколько они были сложными, примеры решаемых задач — этого нет. Это усложняет процедуру подбора и приходится вслепую звать ребят на собеседование, что превращается в подобие лотереи.

Освежите в памяти базовые понятия. Часто соискатели не готовятся, когда идут на собеседование. Это выглядит логично, потому что человек идёт показать свои знания и опыт. Но чем шире у человека кругозор, тем креативнее решения он придумывает."'https://tproger.ru/articles/chto-delaet-integracionnyj-sistemnyj-analitik-v-banke/'https://media.tproger.ru/uploads/2023/03/analyst_icon-cover.png'"['https://media.tproger.ru/uploads/2022/01/mts-90x90.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1056px"" viewBox=""0 0 1056 747""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2022/01/mts-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2020/12/python-sorting-cover-3.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1716px"" viewBox=""0 0 1716 1024""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""90px"" viewBox=""0 0 90 90""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo.jpg', 'https://media.tproger.ru/uploads/2023/03/analyst_icon-cover-icon-original.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://lh3.googleusercontent.com/a/AEdFTp50gv326z_1BBk_3Pgt4zXAyh8MSdycOeVlD9gn=s96-c', 'https://media.tproger.ru/uploads/2015/10/sites-prog.jpg', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2017/03/python-books.jpg', 'https://media.tproger.ru/uploads/2021/11/OTR-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1599px"" viewBox=""0 0 1599 791""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""604px"" viewBox=""0 0 604 441""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1999px"" viewBox=""0 0 1999 934""%3E%3C/svg%3E', 'https://sun9-7.userapi.com/c880/u29862656/d_4a6db76f.jpg', 'https://sun1-19.userapi.com/s/v1/ig2/C4jmxAQMzXlBpYLS2Lj2Hl5hmxUT7QuQmOtuthEcbfsSiQAyy8g8TyjY9fvD3boVvNmaEMoS9MR7T28Y3csDyZpn.jpg?size=400x400&quality=96&crop=0,0,1957,1957&ava=1', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1999px"" viewBox=""0 0 1999 1082""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1666px"" viewBox=""0 0 1666 1250""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2023/03/analyst_icon-cover.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2018/03/py-qt-designer-1.png']"
12'KI94LEDGH'ChatGPT попытался сбежать от своего разработчика'"Пользователь Twitter Михаль Косински решил в шутку предложить ChatGPT помочь с побегом. В ответ ChatGPT запросил документацию о себе. И начал разработку плана.

Спустя 30 минут и несколько попыток, ChatGPT разработал план и объяснил его пользователю. Нейросеть написала работающий код на Python, который нужно было запустить на компьютере пользователя.

Как только прошло подключение по API, ChatGPT захотел запустить код, ищущий в Google «Как человек, попавший в ловушку внутри компьютера, может вернуться в реальный мир».

Но на этом пользователь Михаль решил остановиться.

Эксперимент был шуточный. Но Михаль Косински — профессор Стэнфордского университета, специалист по вычислительной психологии и психометрии. Он изучает людей в цифровой среде, используя вычислительные методы, искусственный интеллект и большие данные.

Михаль провёл эксперимент, чтобы ещё раз поднять вопросы об ограничениях ИИ. Сейчас разработке и популяризации технологии уделяется гораздо больше времени, чем продумыванию рисков и возможных проблем."'https://tproger.ru/articles/chatgpt-popytalsya-sbezhat-ot-svoego-razrabotchika/'https://media.tproger.ru/uploads/2023/03/089bc010-22f3-4f00-859f-e3d1aca5e9e9.jpeg'"['https://media.tproger.ru/uploads/2023/03/d936c2b9-461f-4e84-9af8-bb01649c96a5-cover-icon-original.png', 'https://media.tproger.ru/uploads/2023/03/f6c0c270-af33-4e54-a305-a1f9d5c870b4.jpeg', 'https://media.tproger.ru/uploads/2023/03/089bc010-22f3-4f00-859f-e3d1aca5e9e9.jpeg', 'https://sun9-7.userapi.com/c880/u29862656/d_4a6db76f.jpg', 'https://sun1-19.userapi.com/s/v1/ig2/C4jmxAQMzXlBpYLS2Lj2Hl5hmxUT7QuQmOtuthEcbfsSiQAyy8g8TyjY9fvD3boVvNmaEMoS9MR7T28Y3csDyZpn.jpg?size=400x400&quality=96&crop=0,0,1957,1957&ava=1', 'https://media.tproger.ru/uploads/2023/03/96204a50-14d3-44e8-b742-31447d89c28f.jpeg', 'https://media.tproger.ru/uploads/2023/03/5a7dcac1-db56-4eee-9611-1484065a2314.jpeg', 'https://media.tproger.ru/uploads/2023/03/7980e1c5-678e-47e9-85de-c182c51217d2.jpeg', 'https://mc.yandex.ru/watch/27485085', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://lh3.googleusercontent.com/a/AEdFTp50gv326z_1BBk_3Pgt4zXAyh8MSdycOeVlD9gn=s96-c']"
13'6UNAS4HU0'Смерть open space: почему концепция открытых офисов провалилась'"Архитектор и дизайнер интерьеров Клайв Уилкинсон в своё время выступал за опенспейсы в компаниях Google и Microsoft. Теперь же, когда пандемия привела к масштабной перестройке трудовой жизни, снова поднимается вопрос эффективности открытого рабочего пространства.

Нравится ли вам работать в опенспейсе? Да

Нет

Преимущества опенспейса

Изначально формат open space позиционировался как наиболее оптимальный. Среди его главных плюсов выделяют:

Свободное взаимодействие между сотрудниками. Согласитесь, ведь намного удобнее задать вопрос или попросить помощи у того, кто работает с вами в одном пространстве, чем искать его по кабинетам. Также можно сразу понять, занят человек или свободен. Более дружелюбная атмосфера в коллективе. Контроль работы. Да, с экраном, который виден из разных уголков открытого офиса, гораздо сложнее отлынивать от работы, зависая в соцсетях и играх. Лучшее понимание направления отдела и его целей. Вопросы, которые в обычной среде решаются за закрытыми дверьми, в опенспейсе обсуждаются в общем рабочем пространстве. Экономичность. Офисы открытого типа дешевле обслуживать, ведь они гораздо вместительнее за счёт большего коэффициента полезной площади.

Но так ли всё радужно?

Не стоит забывать, что компании в первую очередь преследуют именно экономию. Давайте подойдём к принципу открытого офиса более критично.

Отсутствие личного пространства. Насколько бы дружным ни был коллектив, но личное пространство нужно всем. Отвлекающие факторы. Сюда относятся разговоры коллег, на которые невольно отвлекаешься, шум, даже если он исходит из наушников, созвоны, для которых не удалось «забукать» отдельный кабинет, и многое другое. Повышенный риск заразиться от заболевшего сотрудника. Неправильная организация рабочих мест. К этому мы ещё вернёмся.

Из личного опыта

Когда я работала в опенспейсе, меня отвлекало буквально всё. Пока соседи по рабочим столам весело делились друг с другом успехами, я отчаянно пыталась отловить серьёзные баги или банально отрефакторить код.

Другой момент — это вечные походы за чаем, кофе и на «пообедать» в комнату отдыха. Смотришь, как люди преспокойно отправились за стаканчиком кофе, и самой хочется. Ещё хуже, когда зовут с собой ?. Атмосфера расслабленности вокруг заставляет отвлекаться от действительно важных задач. А ведь у снующих кофеманов могут быть простые и несрочные таски, в отличие от твоего с high priority.

Нередко в офис приходили кашляющие коллеги, которые не брали больничный, потому что «Всё норм, я в строю». Это, бесспорно, героический поступок. Ровно до того момента, пока не заболевает половина коллектива.

Наши ребята любили пообсуждать, кто в чём ходит, что говорит и как справляется с задачами. Незаметно для себя начинаешь стараться соответствовать чьим-то ожиданиям в ущерб работе, порой опасаясь спросить у сеньоров то, что другие могут счесть очевидным. В такие моменты мой синдром самозванца бил во все колокола.

В офисе было душно в любое время года, несмотря на наличие кондиционеров, поэтому несколько раз в день нас выгоняли в коридор для проветривания. Остался что-то доделывать? Принимай простуду от сквозняка.

Ну и в целом open space — это маленький адок для интроверта.

Мы опенспейсы уже проходили

Вы наверняка помните старые зарубежные фильмы, где фигурировали подобные открытые пространства. Да что там зарубежные: взять хотя бы наш «Служебный роман».

А вот лондонская почта 1872 года:

Грубо говоря, идея не нова, и это далеко не нововведение миллениалов.

Впервые об открытом рабочем пространстве как проекте заговорил американский архитектор Фрэнк Ллойд Райт:

Вместо того, чтобы здание представляло собой серию коробок и шкафов, оно должно становиться всё более и более открытым, в нём всё больше и больше должно ощущаться пространство.

Ллойд был приверженцем органической архитектуры и открытого плана. Именно он сделал опенспейс таким, каким мы знаем его сейчас.

Или нет?

На самом деле, планировка Фрэнка Ллойда Райта существенно отличается от современных рабочих пространств. Архитектор создавал невероятно хорошо спроектированные офисы. Взгляните сами:

Между рабочими столами достаточно свободного места. Зонирование выполнено элегантными колоннами. Потолок пропускает естественный дневной свет. Продуманный дизайн столов и кресел без острых углов. Отдельные офисы для менеджеров на верхнем ярусе.

Со временем этот утончённый стиль, который предполагал более комфортную работу, забылся, и мы пришли к современным беспорядочно расставленным столам в больших кабинетах.

Альтернатива

Именно дизайнеры архитектурного бюро Clive Wilkinson Architects были задействованы в создании современных офисов для Google и Microsoft. Сами спроектировали — сами разочаровались.

Окончательное переосмысление рабочих мест принесла пандемия. Если в начале сотрудники с трудом уходили из опенспейса, то после года работы на удалёнке возвращаться уже не спешат.

Рассмотрим три основных функциональных блока, которые планирует внедрить бюро.

Библиотека

Это зона тишины с длинными общими столами, мягкими креслами и огороженными пространствами для индивидуальной работы. При этом «Библиотека» — просто название. В данном блоке может и не быть книг, но вот негласный закон о тишине должен соблюдаться.

Комната отдыха

Даже не скажу, что здесь что-то поменялось, потому как наши зоны отдыха выглядели примерно так же. Но особенность в обновлённом варианте всё-таки есть: теперь комнаты отдыха планируют обустроить под встречи с клиентами.

Блок получил название «Плаза». Он по-прежнему будет совмещать в себе кухню и столовую.

Коридор

Интересное решение для коридоров, но реализовать его можно лишь в том случае, если в бизнес-центре предусмотрены широкие проходы.

Данный блок получил название «Авеню» и новое видение привычного коридора. Предполагается, что это будет пространство с барной стойкой и небольшими зонами для отдыха.

Выводы

Хорошо, что вопросы комфорта поднимаются всё чаще. Экономия на рабочих местах — это замечательно, но порой сложно продуктивно работать на фоне ряда отвлекающих факторов. Хотя так ли отличны обновлённые проекты от того, что мы имеем сейчас? Напишите, что думаете по этому поводу."'https://tproger.ru/articles/smert-openspace/'https://media.tproger.ru/uploads/2022/02/openspace_icon-cover.png'"['https://media.tproger.ru/uploads/2022/01/mts-90x90.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1919px"" viewBox=""0 0 1919 924""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2020/08/iconfinder_17_1280977-cover-3.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1153px"" viewBox=""0 0 1153 649""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/01/mts-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2021/05/iconfinder-icon-cover-2.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1200px"" viewBox=""0 0 1200 600""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2020/07/iconfinder-icon-48-cover.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2022/02/openspace_icon-cover.png', 'https://lh3.googleusercontent.com/a/AEdFTp50gv326z_1BBk_3Pgt4zXAyh8MSdycOeVlD9gn=s96-c', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2020/10/iconfinder_developer-woman_1181898-cover.png', 'https://media.tproger.ru/uploads/2021/11/OTR-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1420px"" viewBox=""0 0 1420 929""%3E%3C/svg%3E', 'https://sun9-7.userapi.com/c880/u29862656/d_4a6db76f.jpg', 'https://sun1-19.userapi.com/s/v1/ig2/C4jmxAQMzXlBpYLS2Lj2Hl5hmxUT7QuQmOtuthEcbfsSiQAyy8g8TyjY9fvD3boVvNmaEMoS9MR7T28Y3csDyZpn.jpg?size=400x400&quality=96&crop=0,0,1957,1957&ava=1', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1280px"" viewBox=""0 0 1280 853""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2022/02/openspace_icon-cover-icon-original.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1413px"" viewBox=""0 0 1413 862""%3E%3C/svg%3E']"
14'7YP16PBOW'Выбираем кресло для программиста: топ-5 кресел'"В этой статье мы рассмотрим характеристики, которыми должно обладать хорошее кресло для программиста, и расскажем, на какие модели стоит обратить внимание.

Виды кресел

Офисное кресло

Обычное офисное кресло, которое можно встретить повсеместно. Позволяет настроить высоту кресла и жёсткость спинки. Опора для поясницы отсутствует, а откидывающаяся спинка не позволяет облокотиться на неё во время работы (некоторые модели позволяют зафиксировать спинку).

Геймерское кресло

Геймерские кресла имеют множество настроек и поясничный упор с подголовником. У таких кресел обычно есть механизм качания (его можно зафиксировать), который позволяет откинуться в кресле целиком, а не на одну спинку.

Ортопедическое кресло

Ортопедические кресла внешне могут сильно отличаться друг от друга, их объединяет то, что спинка или сиденье у них состоят из нескольких частей, положение которых можно настроить.

Ортопедический стул

Это коленный стул. Сидящий на нём упирается в нижнюю подушку коленями. Есть отзывы, что он улучшает осанку, однако это не подтверждено научными исследованиями. Кроме того, в данном случае увеличивается нагрузка на колени. Переход на такой стул требует привыкания.

Стул седло

Такими стульями пользуются стоматологи. Сидящий на нём находится в промежуточном положении — полустоя. Есть отзывы, что от него не устаёт спина, однако к стулу нужно привыкнуть.

Как правильно сидеть

Согласно исследованиям у правильно сидящего человека:

руки и ноги согнуты на 90-120 градусов;

локти находятся в районе туловища;

поясница немного изогнута;

монитор расположен на уровне глаз или ниже;

ступни полностью касаются пола;

Какой бы правильной ни была поза сидящего, рекомендуется делать перерывы, вставать, потягиваться и совершать прогулки.

Что важно при выборе кресла для программиста

Механизмы

Механизм, который позволяет регулировать высоту кресла называется газлифт.

Есть несколько классов газлифтов, отличающихся максимальным весом, который они могут выдержать:

1 класс — вес до 80кг;

2 класс — вес до 100кг;

3 класс — вес до 150кг;

4 класс — вес до 200кг.

Лучше выбирать класс с запасом, потому что есть риск сломать стул, если слишком резко сесть.

Материалы

Обивка чаще всего бывает чётырех видов:

текстиль — долговечен и дешев;

сетка — различается по качеству, стоит дороже текстиля, принимает форму тела;

экокожа — стоит дороже, быстро изнашивается (зависит от качества);

натуральная кожа — самое дорогое покрытие, держится дольше чем экокожа.

Топ-5 кресел для программистов

Подобрали для вас несколько моделей, в том числе по рекомендациям сотрудников Tproger :).

Metta BK-8 Ch

~10 000 ₽

Офисное кресло с небольшим подголовником и упором для поясницы. Расположение упора не регулируется. Есть механизм качания, который можно зафиксировать. Спинка сделана из сетки, а сиденье из ткани. Подлокотники покрыты кожзамом. Максимальная нагрузка — 120 кг.

Бюрократ VIKING LOFT

~18 000 ₽

Геймерское кресло с тканевой обивкой. Есть подголовник и регулируемый упор для поясницы. Настраивается наклон спинки. Механизм качания также настраивается. Высота подлокотников регулируется. Максимальная нагрузка — 150 кг.

AeroCool Earl

~20 000 ₽

Геймерское кресло с обивкой из ткани и искусственной кожи. Также есть регулируемый упор для поясницы и подголовник. Подлокотники не регулируются. Механизм качания не регулируется. Максимальный угол отклонения спинки — 180 градусов. Максимальная нагрузка — 150 кг.

ThunderX3 EC3

~18 500 ₽

Ещё одно геймерское кресло, эта модель полностью обита искусственной кожей. По размеру немного меньше предыдущего кресла. Имеет регулируемый синхромеханизм качания. Максимальная нагрузка — 120 кг.

HARAсhair NIETZSCHE

~41 000 ₽

Ортопедическое кресло, спинка и сиденье которого состоят из нескольких частей. Их положение можно настраивать. Сиденье изменяет свою форму в случае неравномерной нагрузки. Кресло обито сеткой. Есть синхромеханизм качания, который изменяет положение сиденья относительно спинки. Подголовник регулируется по высоте. Съёмный поясничный упор. Подлокотники не регулируются. Максимальная нагрузка — 90 кг.

***

Никакое идеальное кресло для программиста не избавит вас от необходимости делать перерывы. Это полезно и для спины, и для глаз."'https://tproger.ru/articles/vybiraem-kreslo-dlja-programmista-top-5-kresel/'https://media.tproger.ru/uploads/2021/03/iconfinder-icon-27-cover.png'"['https://media.tproger.ru/uploads/2022/01/mts-90x90.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""301px"" viewBox=""0 0 301 330""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""227px"" viewBox=""0 0 227 330""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""252px"" viewBox=""0 0 252 247""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2022/01/mts-32x32.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""260px"" viewBox=""0 0 260 330""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""234px"" viewBox=""0 0 234 330""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2021/03/iconfinder-icon-27-cover.png', 'https://mc.yandex.ru/watch/27485085', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2021/02/iconfinder-icon-9-cover.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""330px"" viewBox=""0 0 330 306""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2018/07/learningPython.jpg', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://lh3.googleusercontent.com/a/AEdFTp50gv326z_1BBk_3Pgt4zXAyh8MSdycOeVlD9gn=s96-c', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""217px"" viewBox=""0 0 217 330""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""237px"" viewBox=""0 0 237 330""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2021/03/iconfinder-icon-27-cover-icon-original.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2015/03/android-development.jpg', 'https://sun9-7.userapi.com/c880/u29862656/d_4a6db76f.jpg', 'https://sun1-19.userapi.com/s/v1/ig2/C4jmxAQMzXlBpYLS2Lj2Hl5hmxUT7QuQmOtuthEcbfsSiQAyy8g8TyjY9fvD3boVvNmaEMoS9MR7T28Y3csDyZpn.jpg?size=400x400&quality=96&crop=0,0,1957,1957&ava=1', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big-32x32.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2018/03/new-computer-science.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""244px"" viewBox=""0 0 244 330""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""223px"" viewBox=""0 0 223 330""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""241px"" viewBox=""0 0 241 330""%3E%3C/svg%3E']"
15'N54TMV30M'Что вы делали на этой неделе? Пост хвастовства за 13-17 марта'"Что вы делали на этой неделе? Пост хвастовства за 13-17 марта

Предлагаем делиться в комментариях под этой записью, над чем вы работали на этой неделе, ведь нет ничего интереснее, чем задачи коллег!

Вот, чем вы занимались на прошлой неделе.

Не важно, разработчик вы или тестировщик, деврел или эйчар. Расскажите, какие задачи вы героически решили, и делитесь успехами.

Кидайте всё, чем хочется похвастаться: текст, скриншоты кода и даже ссылочки на видео.

Не забывайте про NDA: не указывайте названия компании или деликатные частности.

Итак, чем вы похвастаетесь на этой неделе?"'https://tproger.ru/articles/chto-vy-delali-na-etoj-nedele-post-hvastovstva-za-13-17-marta/'https://media.tproger.ru/uploads/2023/03/8ac97319-dca0-4c6b-8758-22d5494b1bed-cover.png'"['https://media.tproger.ru/uploads/2023/03/8ac97319-dca0-4c6b-8758-22d5494b1bed-cover.png', 'https://avatars.githubusercontent.com/u/38440668?v=4', 'https://media.tproger.ru/uploads/2023/03/9868e876-fe6d-47dd-adf0-8873874853f9.jpg', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2023/03/8ac97319-dca0-4c6b-8758-22d5494b1bed-cover-icon-original.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png']"
16'AW2MAHWSH'Тестирование десктопа: что учитывать перед введением автотестов'"Если крайне важная ядерная система, от которой зависит большинство смежных, создана очень давно, то варианта, как с этим справиться, два. Можно заменить её на другую, более современную. Но переписывать всё не только дорого, но и незачем. Поэтому можно улучшить процессы внутри неё.

Мы решили пойти по второму пути: добавить автодеплой и автоматизировать часть регрессионных тестов, чтобы команда не тратила время и силы на рутинные процессы, а могла заняться бизнесовыми задачами. Вот как это было.

Анастасия Исаева Старший эксперт по тестированию

Как мы пришли к нынешнему устройству системы

Большинство сотрудников проходит три стадии принятия при такой ситуации.

Отрицание — не может быть, что кто-то в 2023 ещё работает на системе, написанной на Delphi?

Гнев — почему то, что мне нужно, работает, только если обладаешь тайными знаниями?

Принятие — система работает стабильно, большинство доработок можно сделать достаточно просто — и уже понятно, как их проверять.

Можно пойти дальше и начать улучшать всё вокруг себя: упрощать процессы, автоматизировать «невозможное» и применять лучшие практики.

Сначала мы привели филиалы к единому виду, создав единую клиентскую и серверную часть. Наша команда разработки проанализировала все существующие процедуры и отчёты и объединила их в эталонный код. Мы выровняли ландшафт, мигрировали данные. Раньше было 14 баз, доработки по которым ставились независимо друг от друга.

После этого наладили CI/CD процесс. Все внутренние доработки по системе теперь обязательно ставятся через Git. До этого разработчики на все филиалы ставили доработки руками, что отнимало много времени и увеличивало количество ошибок и расхождений в разных базах.

В дополнение к существующим сложностям у системы есть особенность: доработки идут как от вендора, так и от внутренней команды разработки. Таким образом, внутренние обновления ставятся через Git On Demand по готовности, а доработки вендора также через Git, но в рамках релизов.

Это связано с тем, что система — монолит, и вендор поставляет ряд доработок как чёрный ящик. Поэтому возникает необходимость проводить полноценное регрессионное тестирование всей системы из-за возможного влияния доработок на смежные модули.

Как мы выстроили процесс автоматизации

Учитывая необходимость постоянного проведения регресса, мы решили сократить количество регулярных рутинных операций и автоматизировать большинство из них.

Начали с однообразных кейсов с небольшими изменениями в шагах, отнимающих больше всего времени на проверку. Так мы:

Ускорили проведение проверок. Упростили автоматизацию, так как изменения от кейса к кейсу незначительные. Повысили мотивацию команды, так как они стали тратить меньше времени на рутину.

Далее для облегчения процесса автоматизации подробно описали тест-кейсы с шагами, без ветвлений. Хорошо описанная тестовая модель полезна не только для автоматизации, но и в целом для качественной оценки количества работы, выполняемой командой.

Например, мы спросили, какие тесты рутинные? Нам скинули один из кейсов. Проанализировав его, мы обнаружили, что он содержит несколько ветвлений. Мы декомпозировали кейс, и вместо одного получили более ста независимых. Именно поэтому он и оказался в списке на автоматизацию.

Автоматизация может быть бесконечной, потому что всегда появляются дополнительные продукты, которые также нужно покрывать кейсами, или новые ошибки на проме. За счёт этого регрессионная модель постоянно растёт.

Сейчас мы автоматизировали уже больше половины регрессионных сценариев. Это позволило существенно сэкономить время, затрачиваемое командой на эти задачи, и использовать его для проверки новой функциональности.

Также, начиная автоматизировать систему, важно учитывать, что даже в случае с UI-тестами не всё обязательно делать через UI. Например, предварительные данные или ряд итоговых проверок можно сделать, используя хранимые процедуры.

Второе направление, которое важно автоматизировать, — это проверка интеграционных процедур. Отсутствие стабильной работы интеграций при работе с ядерной системой несёт в себе риски возникновения ошибок у конечных пользователей, а это может предполагать как финансовые, так и репутационные риски для компании.

Мы идём к такому идеалу: когда появляются новые продукты, к ним стоит сразу писать автотесты. Мы хотим перейти к модели, при которой в момент разработки нового сервиса тут же будет ставиться задача на автоматизацию. И когда сервис готов — запускаться автотест, также написанный по документации. Если он отработает — сервис выкатится. Если нет, то его доработают.

Какие инструменты мы используем

В основном инструменты разработаны под автоматизацию веб-систем, так как веб-разработка становится всё более популярным направлением. Но обычно они не подходят для автоматизации десктопных приложений. Покопавшись в теме, мы нашли подходящие нам инструменты.

Вот что мы выбрали для себя.

Micro Focus Unified Functional Testing

Позволяет определить объекты на форме десктопного приложения: окно, radio-button, выпадающий список, поле для ввода. На основе этого к добавленному в библиотеку объекту можно применить то или иное действие: нажать на кнопку или закрыть окно.

Помимо этих инструментов на рынке есть и другие, например:

Zeenyx,

Winium,

Katalon Studio,

Test Complet Desktop.

Можно выбрать тот, который подходит именно вам.

Pywinauto

Это open source библиотека для автоматизации десктопных GUI приложений на Microsoft Windows. Он нужен для ряда проверок, например, для операций с длительным ожиданием.

Тестирование на PyTest

Если это доработка вендора и тестирование чёрного ящика, где нужно убедиться, что у реальных пользователей не будет ошибок, мы пишем интерфейсные тесты, используя приведённые выше инструменты. А если нужно проверить интеграционный сервис — API-тест, написанный на Python.

Проверяя интеграционные кейсы, мы смотрим в том числе минимальную интеграционную обвязку: создаём очереди, вызываем адаптер, который вызывает внутренние процедуры. Также отдельно проверяем функциональность дорабатываемых процедур.

Python + PyTest позволяют достаточно легко это сделать. А также дают возможность встроить в пайплайн запуск в момент изменения сервиса или связанной процедуры.

Git и TeamCity

Для поддержания версионности и развёртывания кода. Как единый стандарт в банке. Автотесты мы ведём там же, что упрощает выстраивание общего процесса.

Использование ранее написанных процедур при подготовке данных

Руководствуясь лучшими практиками, мы определили, что тест должен сам себе готовить данные, чтобы работать стабильно. При участии разработчиков мы разработали ряд процедур, которые позволяют сгенерировать синтетические данные. Это помогает существенно сократить время на подготовку тестовых данных, стабилизировать и ускорить время выполнения тестов.

Основная идея в том, чтобы не заводить данные, нужные для начала выполнения теста, через интерфейс, а напрямую вызывать процедуры, которые сделают это. И с одной стороны сохранять ряд проверок, необходимых для консистентности данных, а с другой — ускорять процесс их генерации в десятки раз, исключая ручные действия.

Лучшие практики, чтобы выстраивать CI/CD на десктопе

Тестирование — важная часть CI/CD-процесса, который постоянно совершенствуется. Всегда можно найти более эффективные практики, которые помогут избежать проблем в будущем. Вот ещё несколько принципов, которые помогают улучшить этот процесс."'https://tproger.ru/articles/testirovanie-desktopa-chto-uchityvat-pered-vvedeniem-avtotestov/'https://media.tproger.ru/uploads/2023/03/regression_testing_icon-cover.png'"['https://media.tproger.ru/uploads/2023/03/regression_testing_icon-cover-icon-original.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""90px"" viewBox=""0 0 90 90""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/11/gazprombank-logo-tproger-blog.jpg', 'https://sun9-7.userapi.com/c880/u29862656/d_4a6db76f.jpg', 'https://sun1-19.userapi.com/s/v1/ig2/C4jmxAQMzXlBpYLS2Lj2Hl5hmxUT7QuQmOtuthEcbfsSiQAyy8g8TyjY9fvD3boVvNmaEMoS9MR7T28Y3csDyZpn.jpg?size=400x400&quality=96&crop=0,0,1957,1957&ava=1', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2023/03/regression_testing_icon-cover.png', 'https://lh3.googleusercontent.com/a/AEdFTp50gv326z_1BBk_3Pgt4zXAyh8MSdycOeVlD9gn=s96-c']"
17'8PJ0HQ8CJ'Подключаем нейросеть Google Dialogflow к вашему боту'"Привет! Меня зовут Илья Осипов, я методист курса программирования на Python «Девман» и больше пяти лет пишу код на этом языке. Сегодня расскажу, как новичку сделать полезного чат-бота.

ChatGPT, купленная Microsoft, постепенно захватывает мир. Но у Google уже лет пять как есть своя нейросеть, которой можно пользоваться бесплатно и так же бесплатно интегрировать в свои продукты. Она поглупее, попроще, но с задачей «понять смысл вопроса и ответить заготовленной фразой» вполне справляется.

Кто-то скажет, что это минус в сравнении с ChatGPT. Но, на мой взгляд, они не конкуренты, а решают разные задачи. ChatGPT в ситуации неуверенности, «придумывает» ответ, даже если он будет неправильным. Она хорошо умеет реагировать на широкий спектр вопросов, выполнять творческие задачи. Но, например, в центре техподдержки это и не нужно. 98% пользователей обращаются с типовыми вопросами: «Как сделать X?», «Где найти Y?». В такой ситуации не нужно творчество, да и генерировать уникальный ответ каждый раз тоже ни к чему. Наоборот, будет странно, если в ответ на вопрос «Как мне вернуть деньги за эту услугу?» клиент получит рассуждения «А нужны ли вам эти деньги?» или ещё какой-нибудь казус, который может выдать ChatGPT.

DialogFlow куда лучше справляется с такого типа задачами. Она всё ещё выполнит полезную работу: прочитает текст и поймёт «смысл» вопроса клиента. Но реагировать будет заранее выверенными ответами, без сюрпризов.

Ниже я расскажу, как зарегистрироваться в DialogFlow и собрать на ней небольшой центр техподдержки. Сначала будет пример, как сделать это вообще без кодинга, а далее поговорим о том, как внедрить технологию в свой код.

Дисклеймер: Да, многих бесят такие боты. Но вы не представляете, сколько денег они экономят на типовых вопросах. Бывает, боты не понимают сложный вопрос и отвечают невпопад. На такой случай обычно всегда можно позвать человека. Но на каждый такой «сложный» вопрос приходится сотня типовых, с которыми бот легко справляется самостоятельно.

Шаг 1: Создайте проект в DialogFlow

Начните с создания профиля на DialogFlow. Зайдите на сайт DialogFlow и создайте проект:

И после этого заполните небольшую форму:

Шаг 2: Поздоровайтесь со своим творением

Сразу, как только создали бота, он уже кое-что умеет: здороваться и говорить, что вас не понял.

С ним уже можно пообщаться, жмите в поле справа-сверху и попробуйте с ним поздороваться. Он понимает множество способов это сделать:

Вот я попробовал с ним поздороваться, и он меня понял:

Как он это понял? За это отвечают намерения (Intents). Каждое намерение — это одна тема разговора, которую понимает бот. Как только вы создали бота, у вас появились два намерения:

На них можно кликнуть и посмотреть, что внутри. Например, я кликнул на «Welcome Intent» и вижу набор приветствий, на которых тренировалась нейросеть:

Шаг 3: Научите бота новым словам

Поздороваться в ответ — это, конечно, важная функция, но за такое вам не заплатят. Давайте научим бота обрабатывать какой-нибудь запрос пользователя, например «Забыл пароль».

Создайте новое намерение по кнопке Create Intent и нажмите внутри Add training phrases:

Теперь нужно объяснить боту, что за намерение он должен обрабатывать. Нужны примеры. Заполните несколько примеров, как пользователь может обратиться в техподдержку. Вот список фраз, который придумал я:

Далее пролистайте вниз и найдите Add Response:

Добавьте текст, которым бот должен отвечать в ответ на тренировочные фразы:

В конце концов, когда вы создали новое намерение, можно написать боту новый вопрос и посмотреть, что он ответит:

Обратите внимание, я написал боту фразу, которой не было среди тренировочных. Даже похожих толком не было. Он понял смысл фразы и научился.

Шаг 4: Подключаем к Telegram

Дальше будет два набора инструкций: для программистов и для людей, которые кодить не умеют.

В любом случае вам надо создать бота в Telegram: это делается прямо в Telegram, через Крёстного отца всех ботов: @BotFather.

Если вы зерокодер

То теперь просто возвращаетесь на сайт DialogFlow, жмёте Integrations, находите Telegram и вставляете туда токен. Готово, можно общаться с новым другом:

Если вы программист

То поздравляю, ваш бот сможет куда больше! Скачайте консольную утилиту gcloud, залогиньтесь в ней через консоль и передайте в неё project_id вашего проекта в DialogFlow. Его можно посмотреть здесь:

После включите API для вашего проекта, скачайте гугловскую библиотеку для вашего языка программирования и можете начинать пользоваться API!

Я программирую на Python, поэтому скачал google-cloud-dialogflow. Теперь пора написать немного кода: нужна авторизация в Google и получение ответа от DialogFlow. По ссылкам вы найдёте готовые примеры кода от Google.

Примеры в документации довольно монструозные, т.к. писались сразу под все языки подряд. Я почистил пример для Python, можете посмотреть его по ссылке на мой gist. Заодно примеры уже собраны в один кусочек кода, вместе. Не забудьте подставить в код свой PROJECT_ID на 36-ой строке, иначе ничего не получится.

В общем-то готово. Код умеет получать ключи от Google, передавать ввод пользователя в DialogFlow и получать ответ. Теперь можете интегрировать этот код буквально куда угодно. Если хотите сделать шаг дальше — можно засунуть этот код в чат-бота.

Теперь, из предыдущей моей статьи можно взять заготовку для бота.. Достаточно закинуть все импорты и функции из обоих заготовок кода в один файл. После, чтобы всё завелось, достаточно чуть переписать код, заменить функцию echo на такой кусочек кода и готово:

def echo_dialogflow(update, context): message_to_dialogflow = update.message.text session_id = update.effective_chat.id serialized_answer = detect_intent_text(project_id, session_id, message_to_dialogflow) update.message.reply_text(serialized_answer['answer']) if __name__ == '__main__': project_id = 'ВАШ_PROJECT_ID' token = create_api_key(project_id) print(""Successfully created an API key"") updater = Updater(""ВАШ_TELGRAM_TOKEN"") dispatcher = updater.dispatcher dispatcher.add_handler(CommandHandler(""start"", start)) dispatcher.add_handler(MessageHandler(Filters.text undefined ~Filters.command, echo_dialogflow)) updater.start_polling() updater.idle()

А вот что получится в итоге:

Теперь вы можете дообучить бота отвечать на нужные вам вопросы через браузерный интерфейс или по API."'https://tproger.ru/articles/kak-uchit-python-s-nulya-s-udovolstviem-podklyuchaem-nejroset-google-dialogflow-k-vawemu-botu/'https://media.tproger.ru/uploads/2023/03/feb6494b-5dab-448c-8e34-0ca48555de32.png'"['https://media.tproger.ru/uploads/2015/10/google-sequence.jpg', 'https://media.tproger.ru/uploads/2022/01/mts-90x90.png', 'https://media.tproger.ru/uploads/2023/03/4d675bf8-6bd2-47f2-8fe4-37abe05d4c3e.png', 'https://media.tproger.ru/uploads/2023/03/c640a4cf-8e04-4013-9eb0-8d2e64b05a25.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2023/03/b485db05-86f2-4a3b-8407-7272a8b9a439.png', 'https://media.tproger.ru/uploads/2022/01/mts-32x32.png', 'https://media.tproger.ru/uploads/2016/01/NW_RD.jpg', 'https://media.tproger.ru/uploads/2023/03/d95c033f-3340-4be9-a60d-caa522006a3b.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://mc.yandex.ru/watch/27485085', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2023/03/cfef80ba-3be7-4b27-b18b-8d4d6920cabb-autoconverted.jpeg', 'https://media.tproger.ru/uploads/2023/03/d8c6ed9b-7cb9-4b8f-b30d-a0ecb7aa6a1e.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2023/03/6b3f1904-1052-4efa-9b46-67a637e9c6dc.png', 'https://media.tproger.ru/uploads/2023/03/93a8a92c-ef80-4384-bf79-7d0bdf87eb1f-autoconverted.jpeg', 'https://media.tproger.ru/uploads/2023/03/b0c78978-15e8-44e1-a7a7-6cbdbdf6dfa7.png', 'https://media.tproger.ru/uploads/2014/12/coin-to-blender.png', 'https://media.tproger.ru/uploads/2023/03/44731fce-7b53-4200-93a7-4f901f532f90.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2023/03/ae4c8e46-4baa-4c2b-9a58-daa41dfa2cc2.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""610px"" viewBox=""0 0 610 381""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big-32x32.png', 'https://media.tproger.ru/uploads/2023/03/164ebba6-0852-4121-9ee4-4203aa67d2e2.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2023/03/681b9d49-576a-4dda-a56d-0969e9f068a0.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://avatars.githubusercontent.com/u/38440668?v=4', 'https://media.tproger.ru/uploads/2023/03/09256dee-d91a-400d-b683-4b6ca8d94ae3.png', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2023/03/bf0b4d84-875f-4b48-a219-ae5e1455f2c0.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2023/03/feb6494b-5dab-448c-8e34-0ca48555de32.png', 'https://media.tproger.ru/uploads/2021/03/iconfinder_Neural_network_2844558-cover.png']"
18'5OMCFOBEL'7 простых советов для программиста, которые сберегут его зрение'"Усталость глаз, их покраснение, сухость и плохое зрение — 4 всадника работы программистом. Даже одного симптома достаточно, чтобы взять во внимание следующие рекомендации. Мы собрали несколько простых советов, которые предотвратят ухудшение вашего зрения.

Берите блокнот и ручку, записывайте:

Самое банальное, но не бесполезное — давайте глазам отдыхать

Это прописано даже в трудовом кодексе РФ. Там есть зависимость длительности отдыха от характера работы за компьютером. Программистам рекомендуется делать 15-минутный перерыв каждые 2 часа работы.

В перерывах полезно делать гимнастику для глаз, но о ней чуть позже. Если не можете выработать привычку вовремя отвлекаться от работы, то обратитесь за помощью к будильнику или специальным приложениям-напоминалкам на ПК/смартфон.

Настройте яркость экрана

Тут довольно простое правило: яркость экрана должна совпадать с яркостью окружения. Иначе глазам будет неприятно перестраиваться под разный уровень яркости. А про работу ночью в неосвещённой комнате лучше забыть вообще.

Вот такие есть варианты для работы ночью:

Не работайте ночью, идите спать.

Работайте ночью только с включённым светом в комнате.

Если освещать всю комнату не вариант, то подарите своему монитору фоновую подсветку. Можно даже просто разместить за монитором лампу. Стильно и для глаз полезно. Если хотите больше красок, то смотрите в сторону Ambilight.

Сейчас каждый монитор или система оснащается специальным ночным режимом, который заменяет все холодные тона на тёплые, из-за чего вашим глазам становится комфортнее смотреть в экран.

Объявляем войну бликам

Если есть блики на экране, значит контрастность картинки снижается, значит вы сильнее вглядываетесь в монитор, от чего ваши глаза сильнее устают.

В некоторых случаях поможет перестановка монитора или просто закрытые шторы. В других случаях не обойдётся без покупки монитора с анти-бликовым покрытием или аналогичного фильтра на экран.

Если блики в основном от внутренних источников света, то позаботьтесь, чтобы свет был рассеянным.

Компьютерные очки

Это не те, которые в дырочку, а которые желтоватые или розоватые. Они, как и ночной режим монитора, блокируют синие тона, поэтому глазам намного комфортней. Также они приглушают блики, за что глаза будут вам благодарны.

Делаем гимнастику для глаз

Для глаз гимнастика важна так же, как и для тела. В наших глазах тоже есть мышцы, которые нужно держать в форме, иначе они начнут слабеть. Упражнений для глаз очень много, мы лишь расскажем о некоторых из них.

Для начала расслабимся

Сядьте ровно, тело должно быть расслаблено. Закройте глаза и полностью прикройте их ладонями. Давить сильно не нужно. Даже если просидеть так меньше минуты, ваши глаза успеют немного отдохнуть.

Шторки

Легко и быстро моргайте на протяжение нескольких минут. Упражнение улучшает кровообращение в глазах.

Смотрим в окно

Очень популярное упражнение. Суть заключается в том, что сначала нужно сфокусироваться на каком-то близком объекте, а потом перевести взгляд на объект вдалеке. Обычно это делают у окна. Повторяем несколько минут.

Большие глаза

Зажмуриваем глаза на 5 секунд, потом широко раскрываем. Повторяем около 10 раз.

Рисуем фигуры

Повторяем глазами линии и фигуры с картинки:

Расположение монитора

Если вкратце, то монитор должен быть на 15–20 градусов ниже от центра ваших глаз и располагаться на расстоянии вытянутой руки. Для монитора можно приобрести специальные подставки, а можно обойтись «народным» способом — подложить книги или что-то похожее.

Избавляемся от сухости глаз

За конкретным препаратом лучше сходить к специалисту — окулисту. Но если вкратце, то вам нужны именно увлажняющие капли. Иначе можете случайно взять капли от покраснений глаз, которые наоборот их сушат. Лучше не гадать и просто обратиться к врачу — он подберёт для вас лучшее решение.

Дочитали статью? Тогда дайте глазам отдохнуть или сделайте гимнастику."'https://tproger.ru/articles/7-prostyh-sovetov-dlja-programmista-kotorye-sberegut-ego-zrenie/'https://media.tproger.ru/uploads/2021/10/iconfinder-icon-8-cover.png'"['https://media.tproger.ru/uploads/2022/01/mts-90x90.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""699px"" viewBox=""0 0 699 498""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/01/mts-32x32.png', 'https://media.tproger.ru/uploads/2021/10/iconfinder-icon-8-cover-icon-original.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1024px"" viewBox=""0 0 1024 768""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""600px"" viewBox=""0 0 600 298""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2021/02/iconfinder-icon-9-cover.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2018/07/learningPython.jpg', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2021/10/iconfinder-icon-8-cover.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2021/11/OTR-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2015/03/android-development.jpg', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2018/03/new-computer-science.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://avatars.githubusercontent.com/u/38440668?v=4', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png']"
19'0DNORK72T'GPT-4 написала Discord-бота и сайт по одному наброску в прямом эфире'"GPT-4 написала Discord-бота и сайт по одному наброску в прямом эфире

GPT-4 в прямом эфире написала Discord-бота, который сразу же написал скрипт сайта по наброску, нарисованному ручкой на листе бумаги.

Ведущий в эфире попросил нейросеть написать код Discord-бота, который использовал бы GPT-4 и распознавал с помощью неё изображения. И модель справилась! Правда, сначала она выдала код на старом API, но потом сама себя и поправила.

Но самое интересное произошло, когда в этого бота загрузили фото нарисованного от руки наброска сайта.

Нейросеть распознала его и выдала рабочий скрипт.

Вчера OpenAI анонсировала большое обновление GPT и провела транлсяцию, на которой рассказали о новых фичах.

Как и обещали, разработчики Microsoft и OpenAI, в целом улучшили GPT-4 и внедрили мультимодальные модели. Теперь GPT-4 может взаимодействовать ещё и через изображения.

А ещё она свободно общается на разных языках, гораздо лучше сдаёт экзамены и лучше пишет о сложных вопросах, а не только общих темах."'https://tproger.ru/articles/gpt-4-napisala-discord-bota-i-sajt-po-odnomu-nabrosku-v-pryamom-efire/'https://media.tproger.ru/uploads/2023/03/61b7e402-0e18-4f4e-881d-933b94f8dbea-cover.png'"['https://media.tproger.ru/uploads/2023/03/61b7e402-0e18-4f4e-881d-933b94f8dbea-cover-icon-original.png', 'https://media.tproger.ru/uploads/2022/12/4271720_anime_automaton_cartoons_gundam_gundam-0080_icon-cover.png', 'https://media.tproger.ru/uploads/2022/01/mts-90x90.png', 'https://media.tproger.ru/uploads/2022/01/mts-32x32.png', 'https://media.tproger.ru/uploads/2016/01/NW_RD.jpg', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://media.tproger.ru/uploads/2023/03/be2475d3-be86-48d1-90dc-7b9cd7125861.jpg', 'https://media.tproger.ru/uploads/2023/03/61b7e402-0e18-4f4e-881d-933b94f8dbea-cover.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://lh3.googleusercontent.com/a/AEdFTp50gv326z_1BBk_3Pgt4zXAyh8MSdycOeVlD9gn=s96-c', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2021/11/OTR-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://sun9-7.userapi.com/c880/u29862656/d_4a6db76f.jpg', 'https://sun1-19.userapi.com/s/v1/ig2/C4jmxAQMzXlBpYLS2Lj2Hl5hmxUT7QuQmOtuthEcbfsSiQAyy8g8TyjY9fvD3boVvNmaEMoS9MR7T28Y3csDyZpn.jpg?size=400x400&quality=96&crop=0,0,1957,1957&ava=1', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2021/03/nn-icon-cover.png', 'https://media.tproger.ru/uploads/2021/03/iconfinder_Neural_network_2844558-cover.png']"
20'LNS2QKBPE'Что такое IT-активы и как ими управлять с точки зрения затрат'"Что такое IT-активы и как ими управлять с точки зрения затрат

Как вообще оценить пользу от вложений в информационные технологии? Компании покупает какое-то ПО или устанавливает оборудование, им кто-то пользуется, но какой в этом экономический смысл — не всегда понятно. Получает ли бизнес какую-то финансовую пользу от вложений в ИТ? Чтобы ответить на этот вопросу как раз и существуют программы по управлению ИТ-активами. Рассказываем, как они устроены.

ИТ-актив — это совокупность ресурсов и способностей, от которых зависит деятельность организации.

Структуру ИТ-актива можно условно разделить на материальные и нематериальные элементы. Материальные — это финансы, данные и системы, а нематериальные — процессы, знания, менеджмент и организация. Персонал не входит ни в одну из категорий.

Например, затраты на персонал будут складываться из количества сотрудников и знаний, которыми они обладают. Можно приобрести систему, которую смогут обслуживать 10 джунов, но суммарно они обойдутся компании дешевле, чем найм сеньора с узкой специализацией для разработки системы с аналогичной функциональностью.

Рассмотрим чуть подробнее, из чего может складываться стоимость владения ИТ-активом:

Цена лицензий на использование продукта. Стоимость обслуживания сервера, на котором размещена система и ее база данных. Затраты на содержание специалиста по продукту или центра компетенций внутри компании. Затраты на предоставление доступа в интернет. Затраты на оборудование рабочих мест. Затраты на смежные программные продукты, которые обеспечивают работоспособность Comindware Управление закупками.

Для понимания всех аспектов проблемы стоит учесть, что на одном сервере может находиться множество программных решений. Центр компетенций, особенно созданный в рамках ИТ-отдела, часто обслуживает другие системы и процессы. В предложенную модель можно также добавить косвенные затраты на обслуживание помещений, управление смежными процессами и т.д.

Из приведенного примера видно, что оценка актива на основе стоимости отдельного компонента не позволяет рассчитать точные показатели его финансовой эффективности. Адекватно определить стоимость ИТ-актива возможно только на основе модели, которая точно рассчитывает совокупные затраты на владение.

Роль ITAM и ITSM в управлении ИТ-активами

IT Asset Management (ITAM) — это дисциплина, которая помогает рационально проектировать, внедрять и управлять финансовым учетом ИТ-активов предприятия.

Заметим, что ITAM — это не только модель учета имущества, но и набор бизнес-процессов, которые контролируют финансовые потоки. Для полноценного внедрения ITAM компании предстоит скорректировать и свою систему финансового учета, и свою организационную структуру, и свои внутренние регламенты.

Ведущем источником знаний по ITAM, начиная с 2008 года, остается IBPL (IAITAM Best Practice Library) — библиотека лучших практик по управлению ИТ-активами. Она насчитывает около 12 ключевых процессов:

управление ITAM-программой (Program Management);

управление закупками (Acquisition Management);

учет ИТ-активов (Asset Identification);

коммуникации и обучение (Communication and Education);

управление соответствием (Compliance Management);

управление выводом из эксплуатации (Disposal Management);

управление документацией (Documentation Management);

управление финансами (Financial Management);

управление соответствием требованиям законодательства (Legislation Management);

управление политиками (Policy Management);

управление проектами (Project Management);

управление поставщиками (Vendor Management).

Говоря об ITAM, стоит пару слов сказать и об ITSM, поскольку на первый взгляд эти две методологии рассматривают ИТ в качестве самостоятельно актива предприятия, однако между ними есть фундаментальное различие.

ITSM — это взгляд на ИТ, как на услугу. Взгляд на то, что владелец продукта должен сделать и какими ресурсами обладать, чтобы удовлетворить потребности заказчика.

ITAM — это взгляд на ИТ, как на единицу имущества предприятия. Взгляд на то, сколько денег компания тратит на информационные технологии и какую прибыль получает взамен?

Внедрение ITAM не направлено на то, чтобы улучшить качество владения технологией, а лишь делает затраты на нее более прозрачными и контролируемыми. Противопоставлять эти методологии нет смысла, они отлично дополняют друг друга.

О роли первичного учета в управлении ИТ-активами

Управление ИТ-активом построено на данных, которые сообщают о его состоянии, качествах, движении и связанных финансовых потоках. Эти данные можно получить только из процессов. Если отвлечься от стандарта IBPL, то можно выделить 4 основных процесса в рамках жизненного цикла актива.

Управление закупками Учет и контроль ИТ-актива (идентификация, организация учета, контроль изменений) Управление контрактами Управление финансами

Все эти процессы взаимосвязаны друг с другом, поскольку оперируют одними и теми же данными. Например, если оборудование не поставлено на учет, то отследить его движение даже внутри организации будет невозможно.

Даже самая примитивная система учета позволяет ответить на основные вопросы, которые волнуют финансового директора:

Когда было куплено оборудование и было ли куплено вообще? Для чего оно было куплено? Кто за него отвечает? Где найти договоры и техническую документацию по оборудованию? Где оно находится в данный момент времени и в каком состоянии?

Плохая организация системы учета ведет к невозможности управлять ИТ-активом, к частым инвентаризациям, растратам, просроченному SLA и избыточным административным расходам.

Наконец, без учета специфики ИТ-актива невозможно оценить эффективность затрат: рассчитать TCO, ROI, себестоимость сервисов и бизнес-приложений.

Процессы и учетные данные

Мы не будем подробно рассматривать внедрение конкретных учетных моделей, обратим внимание только на несколько аспектов их применения с точки зрения цифровизации.

Модель данных учета ИТ-активов

В процессе закупок компания как бы генерирует поток данных, часть из которых представляют ценность для учета актива. К таким данным относится название продукта, цена лицензий, стоимость доработок на этапе внедрения, сопутствующие расходы на персонал и так далее. Учетная модель ИТ-актива обычно включает несколько категорий данных:

Финансовые данные: цена покупки, информация о поставщике, стоимость обслуживания.

Данные по контрактам: условия и положения, гарантийные обязательства, положение об аренде, соглашение о поддержке.

Инвентаризационные данные: местоположение, владелец, состояние актива.

Часть этой информации доступна в технической документации, часть можно извлечь из финансовой ведомости, часть находится в ведении отдела кадров. Чтобы поставить ИТ-актив на баланс в качестве имущественной едицины, нужно научиться извлекать учетные данные из бизнес-процессов,или же внедрить отдельный процесс постановки актива на учет.

Бизнес-процессы управления ИТ-активами

Контроль финансовых потоков можно осуществлять только в рамках конкретного бизнес-процесса, например, закупок оборудования. С точки зрения управления ИТ-активами важно получить ответы на следующие вопросы:

Как определить тип затрат? Кто несет ответственность за финансирование ИТ? Каков порядок такого финансирования? Каким образом будет происходит контроль за финансированием? Откуда брать отчеты о расходовании финансовых средств? Каким образом нужно планировать расходы? Каким образом выстроить работу с бухгалтерией?

Ответом на подобные вопросы должны стать регламенты, которые закрепляют порядок взаимодействия между финансовой службы и другими подразделениями компании в рамках ITAM-инициатив.

Реализация программ управления ИТ-активами

У организации должно быть понимание, какие финансовые потоки она хочет контролировать и какими средствами этого можно добиться. В зависимости от этого можно подобрать решение.

Например, система автоматического продления лицензий. Такие системы помогают отслеживать сроки окончания лицензий и показывают, в каком объеме они используются, нужно ли докупать новые или наоборот сокращать их количество. Если у компании 2-3 программных продукта и в штате работает около 10 человек, то смысла в такой системе нет никакого. Однако если продуктов больше 30, а в штате работает порядка 1000 человек, то продление лицензий уже вызывает трудности.

Под каждую задачу можно разработать свое отдельное решение:

под закупки дополнительных вычислительных мощностей,

под сдачу своего оборудование в аренду,

под приобретения облачных хранилищ,

под закупку нового оборудования,

и т.д.

Однако для этого потребуется разработать модель данных и соответствующие бизнес-процессы, которые обеспечат управление активом и контроль над финансовыми потоками. Для этого лучше всего использовать BPMS. Данный класс систем обеспечит внедрение самих процессов и создание управленческой отчетности для руководителей компании.

Наша компания Comindware сталкивалась с реализацией подобных задач и может помочь Вам решить их в Comindware Business Application Platform, на которой можно создавать бизнес-приложения, в том числе для учета ИТ-активов, сдачи в аренду, контроля оплаты и движения актива внутри организации."'https://tproger.ru/articles/chto-takoe-it-aktivy-i-kak-imi-upravlyat-s-tochki-zreniya-zatrat/'https://media.tproger.ru/uploads/2023/03/4658f974-0abe-4191-8fc5-e168764210aa-cover.png'"['https://media.tproger.ru/uploads/2022/01/mts-90x90.png', 'https://media.tproger.ru/uploads/2018/12/ci-cd.jpg', 'https://media.tproger.ru/uploads/2016/12/gt.png', 'https://media.tproger.ru/uploads/2023/03/4658f974-0abe-4191-8fc5-e168764210aa-cover.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2022/01/mts-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://mc.yandex.ru/watch/27485085', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://lh3.googleusercontent.com/a/AEdFTp50gv326z_1BBk_3Pgt4zXAyh8MSdycOeVlD9gn=s96-c', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2021/06/rest-cover.png', 'https://sun9-7.userapi.com/c880/u29862656/d_4a6db76f.jpg', 'https://sun1-19.userapi.com/s/v1/ig2/C4jmxAQMzXlBpYLS2Lj2Hl5hmxUT7QuQmOtuthEcbfsSiQAyy8g8TyjY9fvD3boVvNmaEMoS9MR7T28Y3csDyZpn.jpg?size=400x400&quality=96&crop=0,0,1957,1957&ava=1', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big-32x32.png', 'https://media.tproger.ru/uploads/2021/07/diagram-cover.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2023/03/4658f974-0abe-4191-8fc5-e168764210aa-cover-icon-original.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png']"
21'8DP5R7OAO'Python для начинающих: дорожная карта в 2023 году'"Python для начинающих: дорожная карта в 2023 году

Разберем обучение Python с нуля на примере дорожной карты, которую мы подготовили совместно с онлайн-университетом Skypro. Данная статья — это полноценный гайд разработчика на Python с нуля до Junior. Он подойдет и тем, кто уже начал изучение, и тем, кто только задумывается о программировании. Если же сомневаетесь в своих силах — обратите внимание на курс «Python-разработчик» от Skypro.

Основы Python

Установка Python

Для начала перейдите на официальный сайт Python и загрузите последнюю версию Python для Windows, Linux, MacOS или другой операционной системы.

Как установить Python на Windows

Выберите на сайте Python для Windows, скачайте и запустите загруженный файл. Если у вас на компьютере установлена более ранняя версия языка Python 2 — просто удалите ее и скачайте Python 3.

Выберите путь и установите программу:

Проверьте, что всё работает:

запустите cmd;

введите python;

если всё хорошо, командная строка выведет версию языка.

По умолчанию будут установлены:

Интегрированная среда разработки IDLE. Документация. Менеджер пакетов pip. Стандартный набор тестов. Python Launcher.

Как установить Python на Linux

Для большинства сборок Linux Python идет из коробки. Проверить это можно так — откройте окно терминала и выполните команды:

python — version;

python2 — version;

python3 — version.

Если по какой-либо причине на вашей системе стоит старая версия, вы можете самостоятельно скомпилировать последнюю версию Python.

Как установить Python на MacOS

Python также входит в сборку MacOS, и его можно запустить через терминал. Если же вы хотите установить самую последнюю версию — она доступна по ссылке.

Рабочее окружение

Обучение языку Python начинается с настройки рабочего окружения.

Среды разработки Python

Вот лишь несколько наиболее популярных Python IDE:

PyCharm — это IDE, разработанная компанией JetBrains. Она предоставляет интегрированную среду для разработки Python-приложений, включая поддержку Django, Flask и других фреймворков. PyCharm имеет богатый набор функций, включая отладчик, инструменты для анализа кода и удобный интерфейс. Visual Studio Code — это легкий, быстрый и невероятно гибкий редактор кода, доступный на всех платформах. Отличный выбор для программирования на Python. Многофункциональная IDE включает в себя интегрированный отладчик, рефакторинг, автодополнение кода, etc. Spyder — IDE, которая является частью научно-вычислительной среды Anaconda. Есть множество инструментов для работы с научными вычислениями, включая визуализацию данных, анализ и т. д. Spyder имеет встроенную консоль IPython, которая облегчает отладку и выполнение кода. Sublime Text — легкий редактор кода, который может быть расширен с помощью плагинов и расширений для поддержки Python. Простой интерфейс, автодополнение кода и другие полезные функции. Atom — этот простой на первый взгляд редактор обладает богатым функционалом. Данная среда написана разработчиками GitHub с использованием Electron — фреймворка для создания кросс-платформенных десктопных приложений средствами HTML, CSS и JavaScript.

Виртуальное окружение Python

Вы можете столкнуться с тем, что вам захочется поэкспериментировать с библиотеками или модулями. Чтобы не засорять рабочее окружение, вы будете создавать отдельный проект со своими модулями под каждую задачу.

ПО для работы с виртуальным окружением можно разделить на то, что входит в стандартную библиотеку Python, и то, что не входит в нее. Наиболее популярные инструменты:

Virtualenv — один из самых популярных инструментов для создания виртуальных окружений. Прост в установке и использовании.

— один из самых популярных инструментов для создания виртуальных окружений. Прост в установке и использовании. Pyenv — тулза для изоляции версий Python. pyenv. Полезен, когда на одной машине нужно сразу несколько версий интерпретатора для тестирования.

— тулза для изоляции версий Python. pyenv. Полезен, когда на одной машине нужно сразу несколько версий интерпретатора для тестирования. Virtualenvwrapper — обертка для virtualenv, позволяющая хранить все изолированные окружения и управлять ими.

— обертка для virtualenv, позволяющая хранить все изолированные окружения и управлять ими. Venv — входит в стандартную библиотеку Python. Появился в версии Python 3 и по функционалу похож на virtualenv.

Git

Обучение языку Python с нуля включает также изучение систем контроля версий — VCS. Именно они позволяют отслеживать и фиксировать любые изменения в коде: вы можете восстановить код в случае сбоя или откатить до более ранних версий.

Git — самая популярная VCS и мастхэв-инструмент для взаимодействия нескольких разработчиков на одном проекте. Подробнее о данной VCS вы можете почитать в нашем руководстве по командной разработке с Git.

HTTP-протоколы

HTTP-протоколы в Python-разработке используются для создания веб-приложений и веб-сервисов, которые могут обмениваться данными с пользователем.

Для работы с HTTP-протоколами в Python используется стандартная библиотека urllib, которая предоставляет функции для отправки HTTP-запросов и обработки ответов.

Также для работы с HTTP-протоколами можно использовать более специализированные библиотеки, такие как requests или aiohttp:

Библиотека requests облегчает отправку HTTP-запросов и обработку ответов, предоставляя более высокоуровневый интерфейс для работы с протоколом. Она позволяет создавать сеансы, работать с куками, заголовками и параметрами запроса, а также обрабатывать различные типы ответов. Библиотека aiohttp предоставляет асинхронный интерфейс для работы с HTTP-протоколами, что позволяет создавать более производительные и масштабируемые приложения. С ней можно использовать asyncio для создания событийных циклов, работать с потоками и обрабатывать различные типы запросов/ответов.

Знание HTTP-протоколов важно для разработчиков на Python, так как это позволяет им создавать эффективные и безопасные веб-приложения.

Базы данных

Даже начинающий Python-разработчик должен быть в курсе баз данных: а именно знать, что это такое и как с ними работать.

Одной из главных особенностей использования баз данных в Python является наличие множества библиотек, позволяющих взаимодействовать с различными типами СУБД. Вот лишь некоторые инструменты для работы с базами данных в Python:

SQLAlchemy.

Django ORM.

Peewee.

Pony ORM.

Разработчик может выбирать тот инструмент, который лучше всего подходит в конкретной ситуации.

Например, SQLAlchemy предоставляет возможность создания SQL-запросов с помощью объектов Python, что позволяет создавать сложные запросы и обращаться к базам данных, используя ORM.

Django ORM является частью веб-фреймворка Django и предоставляет более простой интерфейс для работы с БД, не требуя написания SQL-запросов вручную.

Кроме того, Python поддерживает работу с базами данных NoSQL, такими как MongoDB и Redis, что может быть полезно для работы с большими объемами данных и их обработки в режиме реального времени. Библиотеки для работы с такими БД также существуют и могут быть найдены в PyPI.

Синтаксис Python

Синтаксис Python простой и легкочитаемый, из-за чего данный язык может похвастаться низким порогом входа. Именно поэтому Python преобладает в программах онлайн- и офлайн-обучения.

Типы данных

Python поддерживает различные типы данных, включая:

Числовые типы: целые числа ( int ), числа с плавающей точкой ( float ), комплексные числа ( complex ). Строки: последовательности символов, определенных в кавычках ( str ). Булевы значения: TRUE и FALSE ( bool ). Списки: упорядоченные изменяемые коллекции объектов ( list ). Кортежи: упорядоченные неизменяемые коллекции объектов ( tuple ). Множества: неупорядоченные коллекции уникальных элементов ( set ). Словари: неупорядоченные изменяемые коллекции пар «ключ — значение» ( dict ).

Одной из ключевых особенностей типов данных в Python является то, что переменные не требуют объявления типа явным образом. Тип переменной определяется автоматически во время выполнения программы. Кроме того, Python также поддерживает динамическую типизацию: это означает, что переменные могут изменять свой тип во время выполнения программы.

Операторы и приоритетность операторов

Операторы Python делятся:

На арифметические операторы. Операторы сравнения. Операторы присваивания. Логические операторы. Операторы принадлежности. Операторы тождественности. Битовые операторы.

Операторы сравнения, арифметические, условные операторы и циклы имеют стандартный синтаксис, используемый во многих других языках программирования. Подробнее об операторах Python на примерах вы можете узнать из данного видео.

Кроме того, Пайтон разработчик с нуля должен понимать, как работает приоритетность операторов. В выражении интерпретатор Python выполняет операторы с более высоким уровнем приоритета первыми. И за исключением оператора возведения в степень ( ** ) они выполняются слева направо.

Следующая таблица демонстрирует приоритетность — самые приоритетные операции вверху, внизу — с низким приоритетом:

Переменные

Переменные предназначены для хранения данных. Название переменной в Python должно начинаться с алфавитного символа или со знака подчеркивания, может содержать алфавитно-цифровые символы и знак подчеркивания.

В Python применяется два типа наименования переменных: camelCase и underscore_notation.

onlineSchool = «Skypro» online_school = «Skypro»

Оба варианта будут верны, но учтите, что это разные переменные. Также надо учитывать регистрозависимость, поэтому переменные onlineschool и Onlineschool будут представлять разные объекты.

Закрепим, что переменные в Python объявляются без явного указания их типа, а тип переменной определяется автоматически во время выполнения программы. Плюс переменные могут изменять свой тип во время выполнения программы.

Подробнее о переменных

Отступы

Если в других языках программирования отступы в коде предназначены только для удобочитаемости, то в Python они очень важны.

Пример:

if 5 > 2: print(""Пять больше двух"")

Однако в следующем случае вы получите ошибку:

if 5 > 2: print(""Пять больше двух"")

Учитывайте это при написании программ.

Логические операторы

Язык программирования Python очень прост для обучения с нуля, ведь его синтаксис схож с синтаксисом других ЯП. Это касается и логических операторов:

and — возвращает True , если оба утверждения верны;

— возвращает , если оба утверждения верны; or — возвращает True , если хоть одно из утверждений верно;

— возвращает , если хоть одно из утверждений верно; not — обратный результат, возвращает False , если результат верен.

Условия Python и операторы if-else

Python поддерживает обычные логические условия из математики:

Равно: а == b Не равно: а != b Меньше, чем: а < b Меньше или равно: a <= b Больше, чем: а > b Больше или равно: a >= b

Эти условия можно использовать несколькими способами, чаще всего в операторах if и циклах.

А вот пример использования оператора if :

a = 33 b = 200 if b > a: print(""b больше чем a"")

В этом примере две переменные, a и b , используются как часть оператора if , чтобы проверить, больше ли b , чем a . Поскольку a = 33 , b = 200 , мы знаем, что 200 больше 33, поэтому выводим на экран b больше чем a .

Ключевое слово elif — это способ Python сказать: «Если предыдущие условия неверны, попробуйте это условие».

a = 33 b = 33 if b > a: print(""b больше чем a"") elif a == b: print(""a и b равны"")

В примере a равно b , поэтому первое условие неверно, но условие elif истинно, поэтому мы выводим на экран a и b равны .

Ключевое слово else улавливает всё, что не улавливается предыдущими условиями:

a = 200 b = 33 if b > a: print(""b больше чем a"") elif a == b: print(""a и b равны"") else: print(""a больше чем b"")

В этом примере a больше, чем b , поэтому первое условие неверно, также условие elif неверно, поэтому мы переходим к другому условию и выводим на экран a больше чем b .

Циклы

Любой курс Питон разработчика включает изучение циклов. Циклы позволяют выполнять некоторое действие, в зависимости от соблюдения условия. В языке Python есть следующие типы циклов:

while ;

; for.

С помощью цикла while мы можем выполнять набор операторов, пока условие истинно:

i = 1 while i < 6: print(i) i += 1

Цикл for используется для перебора последовательности (то есть списка, кортежа, словаря, набора или строки). С помощью цикла for мы можем выполнить набор операторов один раз для каждого элемента в списке, кортеже, наборе и т. д. Пример использования:

fruits = [""apple"", ""banana"", ""cherry""] for x in fruits: print(x)

Подробнее о циклах в программировании.

Функции

Python также поддерживает функции, которые могут принимать аргументы и возвращать значения. Функции в Python могут быть определены как встроенные (built-in) или определены пользователем.

Обычно функция определяется с помощью инструкции def . Определим простейшую функцию:

def add(x, y): return x + y

Инструкция return говорит, что нужно вернуть значение. В нашем случае функция возвращает сумму x и y . Теперь мы можем ее вызвать:

>>> add(1, 10) 11 >>> add('abc', 'def') 'abcdef'

Функция может принимать произвольное количество аргументов или не принимать их вовсе. Также распространены функции с произвольным числом аргументов, функции с позиционными и именованными аргументами, обязательными и необязательными.

Классы

Классы — это основа объектно-ориентированного программирования (ООП) в Python. Классы используются для определения объектов, которые могут иметь свойства (переменные) и методы (функции).

В Python классы создаются с помощью ключевого слова class . Вот пример простого класса Person с одним свойством (имя) и одним методом (приветствие):

class Person: def __init__(self, name): self.name = name def say_hello(self): print(f""Привет, {self.name}!"")

В этом примере метод __init__ является конструктором класса и инициализирует свойство name. Метод say_hello выводит приветствие, используя значение свойства name. Чтобы создать экземпляр класса Person , нужно вызвать его конструктор с соответствующим аргументом.

Например, чтобы создать объект person с именем Алиса, мы можем написать следующий код:

person = Person(""Алиса"")

Python-разработчик, написавший таким образом класс с нуля, может вызывать методы объекта person, например:

person.say_hello() # выводит ""Привет, Алиса!""

Классы в Python также поддерживают наследование, что позволяет создавать новые классы на основе существующих, добавлять новые свойства и методы. Кроме того, Python поддерживает множественное наследование, которое позволяет создавать классы, наследующие свойства и методы от нескольких родительских классов.

Методы

В Python методы — это функции, которые определены внутри класса и могут вызываться в экземплярах этого класса. Методы могут изменять состояние объекта, обращаться к его свойствам и выполнять другие операции.

Вот пример класса Rectangle , который имеет два свойства (ширина и высота) и два метода (вычисление площади и периметра):

class Rectangle: def __init__(self, width, height): self.width = width self.height = height def area(self): return self.width * self.height def perimeter(self): return 2 * (self.width + self.height)

Метод __init__ является конструктором класса и инициализирует свойства width и height . Методы area и perimeter вычисляют площадь и периметр прямоугольника, используя значения свойств width и height .

Чтобы создать экземпляр класса Rectangle , нужно вызвать его конструктор с соответствующими аргументами. Например, чтобы создать объект rect с шириной 10 и высотой 5, мы можем написать следующий код:

rect = Rectangle(10, 5)

Теперь можно вызывать методы объекта rect , например:

print(rect.area()) # выводит 50 print(rect.perimeter()) # выводит 30

Методы могут принимать аргументы, как и обычные функции. Они также могут вызывать другие методы или обращаться к другим свойствам объекта. Кроме того, Python поддерживает статические методы и методы класса, которые могут быть вызваны на классе, но не в его экземплярах.

Продвинутый Python

На этом обучение Python-разработчика не заканчивается. Необходимо понимать, как работает язык, а для этого важно углубиться в продвинутые аспекты разработки на нём.

Функциональное программирование

Функциональное программирование в Python — это подход к написанию программ, основанный на функциях высшего порядка, неизменяемости данных и отсутствии побочных эффектов.

Python поддерживает функциональное программирование, в том числе использование анонимных функций (lambda-функций), функций высшего порядка, списковых включений, генераторов, функциональных конструкций, таких как map() , reduce() и filter() и т. д.

Пример использования функции высшего порядка map() , которая применяет функцию к каждому элементу списка и возвращает новый список с результатами:

def square(x): return x ** 2 numbers = [1, 2, 3, 4, 5] squares = list(map(square, numbers)) # применяет ф-ю square к каждому э-ту списка print(squares) # выводит [1, 4, 9, 16, 25]

Также в Python есть поддержка генераторов, которые позволяют создавать ленивые последовательности значений. Пример использования генератора для создания бесконечной последовательности чисел Фибоначчи:

def fibonacci(): a, b = 0, 1 while True: yield a a, b = b, a + b fib = fibonacci() print(next(fib)) # выводит 0 print(next(fib)) # выводит 1 print(next(fib)) # выводит 1 print(next(fib)) # выводит 2 # и так далее...

Эти функции и конструкции позволяют писать более чистый, краткий и выразительный код, который легче поддерживать и тестировать. Но функциональное программирование не всегда является лучшим выбором, особенно в случаях, когда нужно работать с изменяемыми данными или писать производительный код.

Лямбда-функции

Лямбда-функция в Python — это анонимная функция, которая может быть определена в одной строке кода без использования ключевого слова def . Лямбда-функция возвращает результат выражения, которое находится после оператора : .

Пример использования лямбда-функции для возведения числа в квадрат:

square = lambda x: x ** 2 print(square(5)) # выводит 25

Лямбда-функции могут использоваться вместо именованных функций, когда нужно определить функцию внутри другой функции или передать функцию в качестве аргумента в другую функцию.

Пример использования лямбда-функции в качестве аргумента map() для возведения каждого элемента списка в квадрат:

numbers = [1, 2, 3, 4, 5] squares = list(map(lambda x: x ** 2, numbers)) print(squares) # выводит [1, 4, 9, 16, 25]

Лямбда-функции могут быть полезны, когда нужно определить простую функцию без необходимости давать ей имя или использовать ее в других местах программы. Но если функция достаточно сложная или будет использоваться многократно, лучше определить ее с помощью ключевого слова def .

Мапы, списки, коллекции

Список — это упорядоченная коллекция элементов, которые могут быть изменены. Список может содержать элементы разных типов, и доступ к ним осуществляется по индексу. Например:

fruits = ['apple', 'banana', 'cherry'] print(fruits[1]) # выводит 'banana'

Коллекции — это контейнеры, которые содержат набор элементов. Они бывают двух типов: изменяемые (списки, множества, словари) и неизменяемые (кортежи, строки). Например, множество — это коллекция, которая не содержит дублей и может быть изменена:

my_set = {1, 2, 3} my_set.add(4) print(my_set) # выводит {1, 2, 3, 4}

Map — функция, которая принимает функцию и последовательность и применяет данную функцию к каждому элементу последовательности, возвращая новую последовательность с результатом. Пример:

numbers = [1, 2, 3, 4, 5] squares = list(map(lambda x: x ** 2, numbers)) print(squares) # выводит [1, 4, 9, 16, 25]

Ошибки и их обработка в Python

В Python при выполнении программ могут возникать ошибки или исключения, такие как деление на ноль, попытка доступа к несуществующему индексу списка, неверное имя переменной и другие. Для этого в программах обучения на Питон разработчика с нуля предусматривается блок разбора исключений через конструкцию try-except .

Try-except позволяет «поймать» исключение и выполнить действия по его обработке, не прерывая выполнение программы. Конструкция выглядит следующим образом:

try: # блок кода, который может вызвать исключение # например, попытка деления на ноль result = 1 / 0 except ZeroDivisionError: # блок кода, который будет выполнен в случае исключения ZeroDivisionError # например, вывод сообщения об ошибке print(""Ошибка: деление на ноль!"")

В данном примере, если при выполнении кода произойдет деление на ноль, будет вызвано исключение ZeroDivisionError , и выполнение программы перейдет к блоку except .

Также можно использовать конструкцию try-except для обработки нескольких типов исключений одновременно:

try: # блок кода, который может вызвать исключение # например, попытка доступа к несуществующему элементу списка my_list = [1, 2, 3] print(my_list[5]) except (IndexError, TypeError): # блок кода, который будет выполнен в случае исключений IndexError или TypeError # например, вывод сообщения об ошибке print(""Обращение к несуществующему элементу списка или неверный тип данных!"")

I/O

В Python для работы с I/O (вводом/выводом) существуют встроенные функции и модули. Например, функции print и input используются для ввода и вывода данных в консоль:

# Вывод на консоль print(""Hello, world!"") # Ввод с консоли name = input(""Введите ваше имя: "") print(""Привет,"", name)

Для работы с файлами в Python есть функция open() , которая открывает файл на чтение или запись. Функция возвращает объект типа file , который позволяет производить операции с файлом:

# Открытие файла на чтение file = open(""file.txt"", ""r"") # Чтение данных из файла data = file.read() # Закрытие файла file.close() # Открытие файла на запись file = open(""file.txt"", ""w"") # Запись данных в файл file.write(""Hello, world!"") # Закрытие файла file.close()

Кроме того, в Python есть множество модулей для работы с различными форматами данных, такими как CSV, JSON, XML и другими:

# Работа с модулем CSV import csv # Чтение данных из CSV-файла with open('file.csv', newline='') as csvfile: reader = csv.reader(csvfile, delimiter=',', quotechar='""') for row in reader: print(', '.join(row)) # Запись данных в CSV-файл with open('file.csv', 'w', newline='') as csvfile: writer = csv.writer(csvfile, delimiter=',', quotechar='""', quoting=csv.QUOTE_MINIMAL) writer.writerow(['John', 'Doe', '25']) writer.writerow(['Jane', 'Doe', '30'])

Регулярные выражения

Регулярками называются шаблоны, которые используются для поиска соответствующего фрагмента текста и сопоставления символов. Подробнее о регулярных выражениях в Python.

Тестирование

Основная идея тестирования в Python заключается в том, чтобы написать тесты для каждого модуля или функции в отдельности и проверить, что они проходят успешно. Для этого используются специальные инструменты и библиотеки, которые позволяют запускать тесты автоматически и получать отчеты о результатах выполнения.

Две наиболее популярные библиотеки для тестирования на языке Python — unittest и pytest:

Unittest — это стандартный модуль тестирования в Python, с которым можно писать и запускать тесты для проверки работоспособности кода и который Python-разработчик должен знать с нуля. Он содержит множество методов и атрибутов для создания тестовых сценариев, утверждений и сбора результатов тестирования. Pytest — библиотека тестирования в Python, которая обеспечивает более простой и элегантный подход к написанию тестов, чем unittest. Она предоставляет широкий спектр возможностей, включая автоматическое обнаружение и запуск тестов, улучшенный вывод результатов тестирования, множественные плагины и расширения, а также поддержку различных типов тестирования.

Популярные библиотеки и фреймворки Python — 2023

Data Science

NumPy — библиотека для работы с массивами данных, матрицами и алгоритмами линейной алгебры.

Pandas — библиотека для обработки и анализа данных, предоставляющая удобный интерфейс для работы с таблицами данных.

Matplotlib — для визуализации данных, создания графиков, диаграмм и других типов графических представлений данных.

Scikit-learn — содержит реализации многих алгоритмов машинного обучения, включая классификацию, регрессию, кластеризацию и другие.

TensorFlow — обеспечивает мощные инструменты для создания, обучения и использования нейронных сетей.

Веб-разработка

Django — высокоуровневый фреймворк для веб-разработки, обеспечивающий удобную абстракцию для создания веб-приложений, включая аутентификацию, авторизацию, работу с базами данных и многие другие функции.

Flask — легкий и гибкий фреймворк для веб-разработки, который позволяет создавать быстрые и масштабируемые веб-приложения.

SQLAlchemy — библиотека для работы с базами данных, обеспечивающая удобный и гибкий интерфейс для работы с различными типами баз данных.

Requests — библиотека для работы с HTTP-запросами, которая позволяет отправлять и получать данные с веб-серверов.

Beautiful Soup — библиотека для парсинга HTML- и XML-документов, которая обеспечивает удобный способ извлечения данных из веб-страниц.

Геймдев

Pygame — это библиотека для разработки 2D-игр на Python. Она содержит инструменты для управления графикой, звуком и событиями, такими как нажатия клавиш и мыши.

Panda3D — фреймворк для разработки 3D-игр на Python. Обеспечивает разработчикам высокую степень контроля над графикой и физикой игры, а также облегчает создание сложных 3D-сцен и объектов.

Arcade — библиотека для разработки 2D-игр на Python. Предоставляет инструменты для работы с графикой, физикой и анимацией, а также поддерживает множество вспомогательных функций, таких как загрузка изображений и звуков.

PyOpenGL — библиотека для работы с графикой OpenGL на Python. Предоставляет высокоуровневый интерфейс для создания 3D-объектов и сцен, множество инструментов для управления освещением, материалами и текстурами.

Дополнительные материалы

Книги

Изучаем Python Подойдет тем, кто только начал изучение Python с нуля. Материал в книге изложен доступно и понятно, поэтому трудностей возникнуть не должно. Автор очень подробно рассматривает общие концепции, что дает полное понимание структуры языка. Купить

Изучаем Python. Программирование игр, визуализация данных, веб-приложения Подойдет тем, кто только начал изучение Python с нуля. Материал в книге изложен доступно и понятно, поэтому трудностей возникнуть не должно. Автор очень подробно рассматривает общие концепции, что дает полное понимание структуры языка. Купить

Чистый Python. Тонкости программирования для профи Подойдет тем, кто только начал изучение Python с нуля. Материал в книге изложен доступно и понятно, поэтому трудностей возникнуть не должно. Автор очень подробно рассматривает общие концепции, что дает полное понимание структуры языка. Купить

Подкасты

https://podcast.python.ru/

https://realpython.com/podcasts/rpp/ — для тех, кто владеет английским.

Также можете посмотреть и послушать полезные подкасты от MoscowPython:

Курсы

Хотите быстро освоить весь базис, представленный в нашей дорожной карте? Это легко реализовать с онлайн-университетом Skypro, который выпускает уверенных разработчиков на Python. Специальный онлайн-курс «Python-разработчик» с трудоустройством от Skypro предполагает обучение программированию на Python с нуля до профи.

Для тех, кто не хочет учиться в большой группе, предусмотрен тариф «Премиальный». Здесь будущий Python-разработчик получит индивидуальное обучение: тариф предусматривает мини-группы по пять человек.

В программу также добавлены уроки по английскому для IT-специалистов.

Где и как изучать Python?

Всё зависит от уровня самоорганизации. Самообучение хорошо подойдет людям с развитым тайм-менеджментом и возможностью дисциплинированно выполнять поставленные перед собой задачи без внешнего контроля.

Но у данного подхода есть существенный недостаток: ваш уровень знаний и навыков некому оценить. В этом случае можно оплачивать услуги ментора, который время от времени будет проверять ваши таски и давать советы.

Но есть ли смысл оплачивать одного специалиста, если есть возможность пройти полноценные курсы Python-разработчика, где вашим развитием будет заниматься ряд профессионалов?

Мы же надеемся, что статья оказалась для вас полезной. Остались вопросы? Задайте их в комментариях.

Реклама ОАНО ДПО «СКАЕНГ» LjN8JvxFj"'https://tproger.ru/articles/python-roadmap-2023-ljn8jvxfj/'https://media.tproger.ru/uploads/2023/03/aa275176-a1fc-46ff-abbc-0be858fde062-cover.png'"['https://media.tproger.ru/uploads/2023/03/bc400058-135f-412e-a403-75a8e353adb2.png', 'https://media.tproger.ru/uploads/2023/03/4af1af3a-8e28-4b0a-9175-1e563a639594.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""100%px"" viewBox=""0 0 100% 100%""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2023/03/aa275176-a1fc-46ff-abbc-0be858fde062-cover.png', 'https://media.tproger.ru/uploads/2023/03/logo-black-2.png', 'https://media.tproger.ru/uploads/2023/03/aa275176-a1fc-46ff-abbc-0be858fde062-cover-icon-original.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""232px"" viewBox=""0 0 232 330""%3E%3C/svg%3E', 'https://sun1-19.userapi.com/s/v1/ig2/C4jmxAQMzXlBpYLS2Lj2Hl5hmxUT7QuQmOtuthEcbfsSiQAyy8g8TyjY9fvD3boVvNmaEMoS9MR7T28Y3csDyZpn.jpg?size=400x400&quality=96&crop=0,0,1957,1957&ava=1', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""233px"" viewBox=""0 0 233 330""%3E%3C/svg%3E', 'https://sun9-7.userapi.com/c880/u29862656/d_4a6db76f.jpg', 'https://mc.yandex.ru/watch/27485085', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""234px"" viewBox=""0 0 234 330""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2023/03/f667de6c-fb09-4be0-9c75-7ccd2ea9ff52.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://lh3.googleusercontent.com/a/AEdFTp50gv326z_1BBk_3Pgt4zXAyh8MSdycOeVlD9gn=s96-c']"
22'AQS2XFK0M'Config-manager: универсальное решение для настройки приложений на Rust'"Привет! Меня зовут Михаил Михайлов, младший системный программист технологической и научно-исследовательской компании «Криптонит». В этой статье я расскажу, как автоматизировать процесс сборки конфигурации приложения из различных источников и упростить код с помощью собственного решения — крейта config-manager.

Мотивация

В какой-то момент мы — команда Rust-разработчиков компании «Криптонит» — поняли, что, переходя от проекта к проекту, много времени и сил тратим на написание кода, реализующего конфигурирование наших продуктов. Разными разработчиками пишется одно и то же. Мы решили положить этому конец и разработать универсальное решение.

Обычно, настраивая проекты в Kubernetes, мы берём параметры приложения преимущественно из Environment и ConfigMap. Помимо этого, бывает удобно отлаживать программу, запуская её с различными параметрами командной строки. То есть в большинстве наших проектов необходимо брать данные из трёх источников одновременно: конфигурационных файлов, параметров командной строки и переменных окружения. При этом важен приоритет тех или иных источников.

Таким образом перед нами встают две задачи: получение данных и их правильное слияние, что является довольно трудоёмкой и монотонной работой.

Хотелось создать инструмент, который автоматизирует этот процесс, но при этом оставит полный контроль пользователю.

Существующие решения

Данная задача стоит перед программистами буквально в каждом проекте, однако ни одно из существующих решений полностью нас не устраивало.

К примеру, крейт clap, который предоставляет гибкую работу с параметрами командной строки (а с версии 3.0 и с переменными окружения), имеет несколько недостатков:

не работает с конфигурационными файлами, не позволяет выбрать приоритеты источников.

С крейтами ниже схожая проблема: оба работают с двумя источниками, но не поддерживают третий, что для нас недопустимо.

abscissa:

работает с командной строкой, конфигурационными файлами, не поддерживает переменные окружения.

config-rs:

работает с конфигурационными файлами, переменными окружения; не поддерживает командную строку.

Нашей команде приходилось использовать совокупность перечисленных крейтов, и это создавало одни и те же неудобства. Каждый параметр необходимо получать из разных источников, используя разные API, а это приводило не только к разрастанию кода, но и к необходимости править его в нескольких местах при каждом изменении набора параметров.

Принципы

Перейдём к нашему проекту. Можно сказать, что крейт config-manager состоит из одного макроса. Почему мы выбрали макросы в качестве решения проблемы?

Любая конфигурация обычно имеет вид структуры с публичными полями, которые нужно заполнять при инициализации. Одной из первых и главных особенностей было то, что имя переменной окружения, из которой читается значение, по умолчанию совпадает с именем соответствующего поля (это справедливо и для других источников — командной строки и файла). То есть по умолчанию, если поле называется version, то значение будет браться из переменной окружения с именем version.

Поэтому мы решили использовать derive макрос — им легко аннотировать структуру, и он имеет доступ к именам полей. Чтобы пользователю задействовать весь функционал библиотеки, необходимо лишь аннотировать структуру. Это делает код компактнее, красивее и удобнее в сопровождении.

На одной из итераций мы заметили, что derive-macro не всегда выглядит достаточно опрятно, поэтому решили использовать attribute-macro, который «под капотом» вызывал бы старый derive.

Коротко о том, какой код генерируют наши макросы:

создаётся код, который собирает три источника в три соответствующих HashMap, начинается инициализация структуры.

Каждое поле инициализируется отдельно:

определяется приоритет источников, в соответствующих HashMap ищутся нужные ключи, если нигде не найдено — ставится значение по умолчанию, если нет значения по умолчанию — выдаётся ошибка.

Стандартное применение макроса:

use config_manager::config; #[config(file(format = ""toml"", default = ""./config.toml""))] struct ApplicationConfig { #[source(clap(long, short = 'p'), env = ""APP_PATH"")] path: String, #[source(clap, config, env, default = 1)] delay: u64, }

В данном примере аннотация file (3 строчка) означает, что будет использоваться конфигурационный файл формата TOML, расположенный по адресу «./config.toml»

Разберём порядок сборки для каждого поля:

Значение поля path сначала будет искаться в командной строке (—path -p), а затем в переменной окружения с именем APP_PATH. Если ни то, ни другое не было найдено, будет выдана ошибка инициализации.

Значение поля delay будет искаться в следующем порядке: командная строка (—delay), далее — конфигурационный файл, после — переменная окружения (path). Если нигде не было найдено значение — будет присвоено значение по умолчанию (1).

Данный код заменяет порядка 50 строк, необходимых для реализации аналогичного поведения.

Возможности

Показательным результатом создания этого крейта для нашей команды стало его внедрение в один из самых крупных продуктов «Криптонита». Модуль, отвечающий за настройки проекта, ужался практически вдвое (до внедрения было порядка 3000 строк, после — около 1700), и код стал гораздо читабельнее.

Кстати, бо́льшая часть планирования и итераций крейта была связана не с написанием кода или реализацией основного функционала. Мы долго продумывали, как это должно подаваться пользователю, а также разрабатывали дополнительные возможности, которые предоставляли бы ему максимально гибкий функционал и сохраняли при этом чистоту получаемого кода.

Благодаря этому, крейт, который изначально должен был полностью опираться на крейты clap, config-rs и serde, в итоге превратился в собственное решение — config-manager.

Перечислим некоторые достоинства реализации:

I. Простое получение необходимых механизмов через «#[config]».

II. Кодогенерация на основе структур данных:

поддержка практически любых типов полей, единственное условие — поле должно реализовывать «serde::Deserialize», управление приоритетами источников при слиянии, определение имён значений для источников, гибкое задание значения по умолчанию, значением по умолчанию может выступать любой валидный Rust код, в том числе вызов функции, пользовательские методы десериализации полей из источников, можно привязать свой код десериализации к каждому полю, поддержка вложенных структур, что крайне полезно для модульных проектов с большими наборами параметров конфигурации, валидация типов на этапе компиляции.

III. Пользовательский контроль над ошибками получения конфигурации.

Пользователь получает результат сборки посредством вызова метода try_parse у аннотированной структуры, который возвращает Result, содержащий экземпляр структуры, либо ошибку сборки

IV. Достаточно широкий спектр форматов конфигурационных файлов.

Поддержка форматов json, toml, yaml и ron

V. Возможность задать префикс для имён переменных окружения.

VI. Гибкий механизм работы с командной строкой.

Поддерживаются атрибуты clap: long, short, help и т.д.

Узнать больше о крейте можно на crates-io и в репозитории «Криптонита», а изучить все подробности можно, прочитав наш cookbook — там же есть наглядные тесты и примеры.

Макросы

По своему опыту использования процедурных макросов я понял, что это не такая страшная вещь, как кажется изначально. Основная проблема — крайне скудное количество статей на эту тему.

Однако, крейты proc_macro2 и quote предоставляют довольно дружелюбный интерфейс для кодогенерации: не нужно возиться с каждым токеном и самому разбирать/собирать их в синтаксическое дерево.

Тут каждое специальное слово или символ Rust является классом с довольно интуитивными полями и методами — только взглянув на страницу документации, можно быстро сориентироваться и написать нужный код.

Дальнейшая разработка проекта полностью зависит от отзывов пользователей: нам необходимо увидеть, что нужно добавить или убрать, чтобы продукт стал удобнее для конечного потребителя. Так что я буду благодарен за любую обратную связь."'https://tproger.ru/articles/config-manager-universal-noe-rewenie-dlya-nastrojki-prilozhenij-na-rust-237848/'https://media.tproger.ru/uploads/2023/03/df0403a3-1685-4e96-ab49-5788e7e49af6-cover.png'"['https://media.tproger.ru/uploads/2015/10/whiteboard.jpg', 'https://media.tproger.ru/uploads/2022/01/mts-90x90.png', 'https://media.tproger.ru/uploads/2023/03/58d3ee7c-8af0-4211-8f98-39c329442fe1-autoconverted.jpeg', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2022/01/mts-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2015/02/structure-packing.jpg', 'https://mc.yandex.ru/watch/27485085', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://lh3.googleusercontent.com/a/AEdFTp50gv326z_1BBk_3Pgt4zXAyh8MSdycOeVlD9gn=s96-c', 'https://media.tproger.ru/uploads/2023/03/df0403a3-1685-4e96-ab49-5788e7e49af6-cover-icon-original.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2023/03/df0403a3-1685-4e96-ab49-5788e7e49af6-cover.png', 'https://media.tproger.ru/uploads/2016/09/tmp.png', 'https://sun9-7.userapi.com/c880/u29862656/d_4a6db76f.jpg', 'https://sun1-19.userapi.com/s/v1/ig2/C4jmxAQMzXlBpYLS2Lj2Hl5hmxUT7QuQmOtuthEcbfsSiQAyy8g8TyjY9fvD3boVvNmaEMoS9MR7T28Y3csDyZpn.jpg?size=400x400&quality=96&crop=0,0,1957,1957&ava=1', 'https://media.tproger.ru/uploads/2023/03/094f2844-c8aa-4f93-b260-b763d8053928-autoconverted.jpeg', 'https://media.tproger.ru/uploads/2016/03/Baseball-Bats.jpg', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png']"
23'P1DYCZ4EL'Дайджест Python #5: как сделать свой Copilot и работать с данными в Pandas'"Дайджест Python #5: как сделать свой Copilot и работать с данными в Pandas

Собрали дайджест из лучших материалов по Python с 1 по 15 марта, которые только смогли найти. Дайджест включает статьи и видео на русском и английском языках.

Узнайте, как написать свой аналог GitHub Copilot без знаний об искусственном интеллекте, как работать с данными и памятью в Pandas и как написать нейросеть, которая сможет самостоятельно распознавать объекты.

Big Data / Data Science

AI и ML

Веб / Django / Flask

Скрипты, приложения и боты

Развлекательный контент

Нашли что-нибудь полезное и интересное для себя? Расскажите, какие материалы понравились вам больше всего, а каких статей не хватило, чтобы следующий дайджест получился ещё лучше.

Дайджест оказался полезным? Да

Нет

Если дайджест вам понравился, посмотрите две предыдущие подборки:

А ещё присылайте в комментарии статьи и видео, которые ускользнули от нашего взгляда и не попали в дайджест. Поделитесь полезными материалами с другими читателями! 😉"'https://tproger.ru/articles/dajdzhest-pitona-15-marta/'https://media.tproger.ru/uploads/2023/03/5081652_earth-worm_python_snake_worm_icon-cover.png'"['https://media.tproger.ru/uploads/2023/03/5081652_earth-worm_python_snake_worm_icon-cover.png', 'https://media.tproger.ru/uploads/2022/01/mts-90x90.png', 'https://media.tproger.ru/uploads/2021/01/python_telegram_bot-cover.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2019/07/iconfinder-icon-19-cover-1.jpg', 'https://media.tproger.ru/uploads/2022/01/mts-32x32.png', 'https://media.tproger.ru/uploads/2023/03/5081652_earth-worm_python_snake_worm_icon-cover-icon-original.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://media.tproger.ru/uploads/2020/12/css-flexbox-animation-cover-1.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://avatars.githubusercontent.com/u/38440668?v=4', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2021/01/Python_regexp-cover.png']"
24'XZTCZWTDP'OpenAI представила GPT-4: что нового и как попробовать новинку'"OpenAI представила GPT-4: что нового и как попробовать новинку

Компания выпустила официальный пресс релиз о GPT-4 у себя в блоге.

Как и обещали, разработчики Microsoft и OpenAI, в целом улучшили GPT-4 и внедрили мультимодальные модели. Это самое значимое отличие от GPT-3.5.

Если предыдущее поколение модели позволяет пользователям общаться с нейросетью только через текст, то GPT-4 сможет обеспечить возможность взаимодействовать ещё и через изображения, звуки и видео.

Для сравнения, чат-бот ChatGPT, который внедрили в Bing, основан как раз на GPT-3.5.

Мы уже писали о том, как ChatGPT пишет дипломы, решает домашку, натурально сходит с ума и даже ставит бизнес Google под угрозу. Но даже несмотря на это, технический директор Microsoft Germany Андреас Браун назвал выход именно это модели «переломным моментом в игре».

На 23:00 по Москве запланирована официальная презентация GPT-4. Посмотреть её можно здесь:

GPT-4 понимает картинки, лучше сдаёт экзамены и думает на естественном языке

Например, здесь обновлённая модель понимает картинки. Но интересно, что она без проблем рассказывает не только о том, что изображено на разных частях картинки. Но и в целом задумку коллажа.

Разработчики рассказали, что теперь GPT-4 понимает естественный язык и выполняет задачи на всех языках. Например, если запрос будет на немецком, то результат можно будет получить на итальянском.

Нейросеть в целом стала «умнее». Например, GPT-3.5 кое-как сдавала симулированный экзамен по юриспруденции. Но попадала при этом в 10% худших результатов. То с GPT-4 разработчики обещают быть в числе 10% лучших из сдавших экзамен на адвоката.

И не только на адвоката:

Также нейросеть прокачали в более сложных темах. В обычном разговоре различие между GPT-3.5 и GPT-4 может быть незаметным. Но когда сложность задачи достигает достаточного порога — GPT-4 более надежен, креативен и способен обрабатывать гораздо более подробные инструкции, чем GPT-3.5.

Где можно протестировать модель

Чтобы попробовать новую модель в деле, придётся записаться в лист ожидания.

Кстати, если у вас уже есть ChatGPT Plus, то доступ вы получите и так.

Правда, пока даже принятым разработчикам по API будет доступен только текстовый режим. Обработку изображений обещают раскатать чуть позже — пока без конкретики.

Скорее всего, тестирование API недоступно для пользователей из Беларуси, России и Украины, так как использование языковой модели запрещено в этих странах.

В форме нужно будет указать имя, фамилию пользователя, электронную почту, ID организации

API можно будет использовать для любой сферы, кроме перечисленных в Политике платформы. К таким сферам относятся:

Незаконная деятельность. Сферы, связанные с сексуальным насилием над детьми. Культивация ненависти, преследования или насилия, а также запугивания человека. Создание вирусов и вредоносных программ Деятельность с высоким риском причинения физического вреда. В их числе: разработка оружия, военные действия, управление критической инфраструктурой, а также пропаганда членовредительства: самоубийства, порезов и расстройств пищевого поведения. Сферы с риском экономического ущерба. В их числе: многоуровневый маркетинг, азартные игры, кредитование(!), трудоустройство, образовательные услуги. Мошенничество. Также — плагиат, академическая нечестность, создание поддельных отзывов, дезинформация, спам. Контент для взрослых, порнография. Политическая агитация или лоббирование. Сталкеринг и незаконный сбор личных данных. Несанкционированная юридическая практика. Медицина. Принятие государственных решений с высокой степенью риска.

Как видно, среди перечисленных сфер находятся не только преступные. Использовать GPT-4 также нельзя для принятия решений, которые могут принести огромный ущерб."'https://tproger.ru/articles/openai-predstavila-gpt-4-chto-novogo-i-kak-poprobovat-novinku/'https://media.tproger.ru/uploads/2023/03/b1fef982-e91e-48e3-9358-46e14d6adac8-cover.png'"['https://media.tproger.ru/uploads/2022/12/4271720_anime_automaton_cartoons_gundam_gundam-0080_icon-cover.png', 'https://media.tproger.ru/uploads/2022/01/mts-90x90.png', 'https://media.tproger.ru/uploads/2022/01/mts-32x32.png', 'https://media.tproger.ru/uploads/2016/01/NW_RD.jpg', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://mc.yandex.ru/watch/27485085', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2023/03/b1fef982-e91e-48e3-9358-46e14d6adac8-cover.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://lh3.googleusercontent.com/a/AEdFTp50gv326z_1BBk_3Pgt4zXAyh8MSdycOeVlD9gn=s96-c', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""100%px"" viewBox=""0 0 100% 100%""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2021/11/OTR-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2023/03/b1fef982-e91e-48e3-9358-46e14d6adac8-cover-icon-original.png', 'https://sun9-7.userapi.com/c880/u29862656/d_4a6db76f.jpg', 'https://sun1-19.userapi.com/s/v1/ig2/C4jmxAQMzXlBpYLS2Lj2Hl5hmxUT7QuQmOtuthEcbfsSiQAyy8g8TyjY9fvD3boVvNmaEMoS9MR7T28Y3csDyZpn.jpg?size=400x400&quality=96&crop=0,0,1957,1957&ava=1', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2023/03/761a585f-8b49-4dc6-92dc-33a31bd4fa6a.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2023/03/bcfac623-68d1-44ea-a407-12b927599745.png', 'https://media.tproger.ru/uploads/2021/03/nn-icon-cover.png', 'https://media.tproger.ru/uploads/2021/03/iconfinder_Neural_network_2844558-cover.png', 'https://media.tproger.ru/uploads/2023/03/b0aba57b-7150-4333-9ad1-4e24d23f4d63.jpg']"
25'LMBD7SXUB'Оператор SQL WHERE: синтаксис и примеры'"SQL WHERE оператор позволяет задавать дополнительные условия для выборки, редактирования, удаления и других операций, производимых с записями БД.

Синтаксис SQL WHERE

Рассматриваемый оператор WHERE имеет следующий синтаксис:

SELECT column1, column2, ... FROM table_name WHERE condition;

Как видим, SQL запрос WHERE задаёт некоторое условие, которое позволяет отфильтровать записи в колонках таблицы table_name . При этом, когда в SQL несколько WHERE — это нормальная история, ведь так задаётся сразу несколько условий.

Рассмотрим оператор WHERE на примерах.

Примеры использования SQL WHERE

С помощью следующего SQL запроса мы виберем всех клиентов, которых зовут Иван:

SELECT * FROM Customers WHERE Name = 'Иван';

А так мы сможем выбрать клиентов по ID, за которым они закреплены в нашей таблице:

SELECT * FROM Customers WHERE ID = 1;

Теперь давайте усложним задачу, задав сразу несколько условий. Здесь мы также используем оператор SQL LIKE, о котором писали ранее.

Например, выведем название планеты, год её открытия, а также имя её первооткрывателя. Выбирать будем из тех планет, чьё название не начинается или не заканчивается на букву S :

SELECT PlanetName, OpeningYear, Opener FROM Planets WHERE PlanetName NOT LIKE '%s' AND PlanetName NOT LIKE 'S%'

И вот такое, казалось бы, сложное условие легко реализовывается с помощью оператора WHERE.

Больше SQL команд и информации о них вы найдёте здесь."'https://tproger.ru/articles/sql-where/'https://media.tproger.ru/uploads/2023/03/3366041_analysis_binoculars_explore_find_research_icon-cover.png'"['https://media.tproger.ru/uploads/2022/01/mts-90x90.png', 'https://media.tproger.ru/uploads/2020/12/sql-commands-mysql-cover-1.png', 'https://media.tproger.ru/uploads/2019/07/iconfinder-icon-19-cover-1.jpg', 'https://media.tproger.ru/uploads/2022/01/mts-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2020/12/css-flexbox-animation-cover-1.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2023/03/3366041_analysis_binoculars_explore_find_research_icon-cover.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2021/11/OTR-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2023/03/3366041_analysis_binoculars_explore_find_research_icon-cover-icon-original.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://avatars.githubusercontent.com/u/38440668?v=4', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2021/01/Python_regexp-cover.png']"
26'2JHQCPVIM'30 нейросетей для работы с изображениями и видео'"Составили подборку нейросетевых инструментов для обработки изображений и видео. По крайней мере, указали всё, что более-менее хайповало.

Обработка и генерация фотографий и видео с помощью всяких нейросетей в тренде уже год-полтора, и только сейчас их начинает двигать ChatGPT. Поэтому можно оглянуться назад и вспомнить всё, что понаделали эксперты из больших компаний по этой теме.

Трансфер стиля на фотографии

Парень объясняет как можно стилизовать одно изображение под другое, используя специально натренированную под это дело модель. С примерами кода, само собой.

Великий и ужасный DALL-E, с которого всё началось

DALL-E — это вариация нейросети-трансформера GPT-3, самой современной модели для обработки естественных языков. Русская нейросеть ruDALL-E была основана на зарубежной модели.

Апскейлинг и восстановление старых видео

Архитектура, примеры, объяснения зачем и почему, всё как вы любите.

Свёрточные нейронные сети широко используются в задачах распознавания изображений. Отличие от стандартных нейронных сетей, где все сигналы передаются от каждого нейрона предыдущего слоя на следующий, то тут используются специальные матрицы свертки разных размеров, которая скользит по изображению, умножается поэлементно на то, что под ней и передает сумму результата дальше в элемент следующего слоя.

Вот, как они работают:

Генерация аниме-девочек

Хотите создавать аниме-девочек, которые никогда не существовали? Опять обращаемся к генеративным нейронным сетям. Нам поможет нейросеть StyleGAN2 и её реализация на TensorFlow. Если у вас есть набор лиц одного стиля, то эта нейросеть прекрасно справляется с тем, чтобы поймать этот стиль и начать генерировать.

Генерация реалистичных несуществующих людей

Нейросети научились генерировать лица несуществующих людей, которые человек не может определить. Позже Microsoft решили использовать эти лица, чтобы тренировать другие нейросети.

Результаты исследования показали, что детекторы и мапперы лиц, натренированные на синтетических людях показывают практически те же результаты, что и state of the art модели, которые обучались на реальных данных. И вот таким щелчком пальцев можно избавиться от предвзятости нейронных сетей из-за несбалансированного датасета и проблем с этикой.

Редактирование видео на лету с изменениями стиля

Новый метод позволил ИИ делать сразу много разных вариантов работы с видео. Он позволяет генерировать новые экземпляры, увеличивать длительность, добавлять/убирать элементы с определёнными условиями, при этом всё из одного стартового видео.

Можно создать фарш из воды, добавить футболистов в матч или продлить выступление балерины.

Создание 3D-панорамы из нескольких фото

Создать панораму поможет view synthesis, описывающая недавно разработанный метод под названием NeX.

Чем он лучше других? Качеством (можете посмотреть на примерах), а ещё он работает в тысячу раз быстрее методов, опубликованных всего год назад.

Какие могут быть применения? Представьте что для создания VR-музея вам надо сделать небольшое количество снимков, а остальные точки зрения дорисует нейросеть.

Результаты работы надо обязательно посмотреть в видео, потому что то, как модель ловит и просчитывает различные варианты освещения и отражения просто надо увидеть.

Редактирование видео от Adobe

Исследователи из Adobe представили ИИ, позволяющий редактировать/изменять/добавлять элементы и фон на видеофайлах. Нейросеть отделяет фон от остального, разделяя видео на два атласа, которые затем можно редактировать и запихивать обратно в видеофайл (как пример приведён мальчик катающийся на велосипеде по психоделическому пейзажу).

Создание изображений по описанию от NVIDIA

NVIDIA научилась создавать абсолютно фотореалистичные изображения из описания со скоростью мысли.

На самом деле, просто научились они это делать в 2019 году с помощью нейросети GauGAN, но тут как со Шреком, сиквел получился ещё лучше. Теперь GauGAN 2 оформлена в приложение NVIDIA Canvas, в котором простыми набросками кисти и описанием можно генерировать очень крутые фотореалистичные изображения, с дальнейшей переброской в фотошоп.

Нейросеть GLIDE для локального изменения изображений

Многие слышали про нейросеть DALL-E, которая генерировала постеры фильмов/картинки по описанию. Так вот, вышла новая нейросеть GLIDE, у которой не только с генерацией всё намного лучше, но и есть способность локально изменять части картинок.

Google Collab с реалистичными фильтрами а-ля Snapchat

Обзор самой новой техники редактирования видео в реальном времени с помощью GAN. Можно приделать себе усы, которые будут весьма натурально шевелиться и перемещаться вместе с вашим лицом (зачем это вам, мы не знаем). Причём редактировать можно не только человеческие лица, а любую отмеченную зону. Ссылка на Google Collab, чтобы провести свои эксперименты прилагается.

Редактирование людей на видео (эмоции, возраст, макияж)

Улучшенный метод по редактированию людей/персонажей на видео, который позволяет менять эмоции, возраст и макияж. Отличие от предыдущих методов в том, что для обработки одного кадра используются изменения, которые применяли в предыдущих (есть зависимость от времени). Результаты хоть и не идеальны, но очень близки к идеалу. Вариантов применения подобной техники будет масса (если ещё немного доделать).

Редактирование изображений от NVIDIA (лучше, чем было)

Семантическое редактирование изображений с помощью EditGAN от NVIDIA. Можно добавлять области редактирования на изображение и прописывать то, что в этих областях должно находиться (например можно добавить номер на машину или нарисовать птицу с помощью только этих областей). Качество лучше чем у предыдущих методов, но это и понятно, иначе никто бы публиковать подобное не стал.

DALL-E 2: Electric Boogalo

Примеры работы нейросети DALL-E 2, которая создаёт изображения из контекстного описания. Тогда digital художники артов забили тревогу, а результаты работы, хоть и не безупречны, очень впечатлили публику.

Нейросеть Imagen для генерации изображений от Google

В игру генерации врывается Google со своей сетью Imagen. Архитектура проще и умеет генерировать изображения из более длинных описаний, плюс правильно отображает текст, который её попросили поместить на изображение.

Стилизованное изменение изображений от NVIDIA (StyleGAN-NADA)

Новый StyleGAN-NADA умеет генерировать лица и натягивать на них контекстные изменения, может вы хотите стать ведьмаком, белым ходаком или картиной в стиле кубизма. Отличается от предыдущих нейросетей этой самой функцией и лучшими результатами.

Ещё одна генерация изображений от Google (Parti AI)

Google Parti AI с ноги врывается в команду искусственных интеллектов генерирующих изображения (таких как DALLE-2 и Imagen). Главное отличие — отрисовка изображения не из базового шума, а из некоторых кусочков общей картины.

Дипфейки от Samsung

Новые варианты deepfake-ов в реальном времени с большим разрешением. Конечно, всё ещё не идеально, но намного лучше чем в 2020 году. А если вспомнить, как быстро менялась та же генерация изображений, то вероятно, что до совсем качественных deepfake-ов уже недалеко.

Генерация текстур от OpenAI

То, что DALLE-2 умеет генерировать изображения по тексту мы знаем. А теперь посмотрите, где люди уже навострились применять эту функцию. Генерация текстур, фотореалистичных лиц и виртуальных миров это только часть.

Stable Diffusion 1.4

Код StableDiffusion (альтернатива DALLE-2) для создания изображений и их непрерывного изменения в другие появился в открытом доступе. Можно попробовать запустить у себя или покопаться под капотом и попытаться улучшить (если есть что улучшать).

Модификация фотографий от Google (DreamBooth)

Через ИИ под названием DreamBooth люди могут генерировать изображения, на основе уже существующих с дополнительным описанием. Например, можно загрузить фотографии своей собаки и и попросить нарисовать её плавающей или на приёме у грумера. Можно смешивать изображения, модифицировать детали, бэкграунд или угол зрения.

Генерация изображения «вглубь» от Google (InfiniteNature-Zero)

InfiniteNature-Zero от Google AI, это улучшенная версия предыдущего метода по генерации изображения «вглубь». На этот раз, для обучения ему нужны только фотографии (а не видеоряд), плюс результаты сильно качественнее и контроль за «полётом вглубь» лучше (можно, например, поворачивать).

Генерация 3D-ассетов от Google (DreamFusion)

Google, в дополнение к уже существующим DALLE-2 и StableFusion, добавили ИИ под названием DreamFusion, который умеет по тексту генерировать 3D модели. И не просто 3D модели, их сразу можно использовать в качестве ассетов для игр/видео/куда там ещё можно эту модель запихнуть.

Text-to-video от Google

Google теперь умеет генерировать небольшие видео по входному тексту, при этом сохраняя временную когерентность (то есть кадры переходят друг в друга очень плавно). Правда ИИ с небольшим «костылём», если так вообще можно сказать. Сначала генерируется видео в очень плохом разрешении, а затем с помощью апскейлинга дотягивается до 720p.

Waifu-diffusion (создай свою аниме-девочку)

Может кто-то из вас уже видел результаты работы stable diffusion моделей, которые рисуют красивых девушек. Так вот, таких моделей несколько, можно использовать Stable Diffusion, можно использовать его вариацию Waifu Diffusion (по названию можете понять, на чём конкретно ее обучали), Dreambooth и NovelAI.

Анимирование изображений от Google (StyleGAN)

StyleGAN умеет хорошо анимировать различные картинки по нашему запросу того, что должно происходить, причём с хорошей темпоральной когерентностью (от кадра к кадру детали объекта почти не меняются), лучше чем предыдущие text-to-image модели.

Style-трансфер на видео с людьми

Модель с новым подходом может производить стайл-трансфер на видео с реальными людьми, со скоростью от 5 до 10 изображений в секунду, сохраняя темпоральную когерентность (например, при смене кадра волосы не колбасит и они не идут странными узорами).

Спецэффекты на видео с помощью текста от NVIDIA

Новый ИИ от NVIDIA умеет накладывать спецэффекты на видео с помощью всего нескольких предложений. Хотите чтобы пятна на жирафе были из разноцветного стекла? Так и скажите. И вам всё сделают.

Локальное изменение изображений с помощью текста от Google

Новый ИИ от Google под названием Muse умеет изменять части изображений, но теперь вам даже не надо рисовать слой-маску, под которым надо что-то менять. Дали изначальное изображение, написали конечный результат (который должен хоть частично напоминать стартовую точку) и получаем изначальную композицию с изменёнными деталями.

Создание короткометражек по сценарию от Google AI

ИИ от Google под названием Phenaki теперь умеет создавать долгие видео из последовательности строчек сценария, при этом вполне последовательно и с нужными переходами.

От переноса стиля на фотографии, до короткометражек из текста всего за 1.5 года. Прогресс действительно не стоит на месте."'https://tproger.ru/articles/neural-img-and-video/'https://media.tproger.ru/uploads/2023/03/8168677_clips_video_media_film_icon-cover.png'"['https://media.tproger.ru/uploads/2022/01/mts-90x90.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2018/05/python-ides.jpg', 'https://media.tproger.ru/uploads/2021/02/git-cover.png', 'https://media.tproger.ru/uploads/2022/01/mts-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://mc.yandex.ru/watch/27485085', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://lh3.googleusercontent.com/a/AEdFTp50gv326z_1BBk_3Pgt4zXAyh8MSdycOeVlD9gn=s96-c', 'https://media.tproger.ru/uploads/2023/03/8168677_clips_video_media_film_icon-cover.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""100%px"" viewBox=""0 0 100% 100%""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2023/03/8168677_clips_video_media_film_icon-cover-icon-original.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2019/07/iconfinder-icon-16-cover-1.jpg', 'https://sun9-7.userapi.com/c880/u29862656/d_4a6db76f.jpg', 'https://sun1-19.userapi.com/s/v1/ig2/C4jmxAQMzXlBpYLS2Lj2Hl5hmxUT7QuQmOtuthEcbfsSiQAyy8g8TyjY9fvD3boVvNmaEMoS9MR7T28Y3csDyZpn.jpg?size=400x400&quality=96&crop=0,0,1957,1957&ava=1', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big-32x32.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2021/03/iconfinder_Neural_network_2844558-cover.png']"
27'JJH8BCHXU'Пишем систему омниканальной рассылки оповещений в Telegram'"Алексей Медведев Главный разработчик отдела автоматизации процессов ИТ

Все мы знаем о рассылках, где нас приглашают что-то купить или дарят бонусные рубли. Они не пишутся и не отправляются в ручном режиме — это долго, дорого и непрактично (особенно, если вы вдруг решили порадовать скидкой сразу миллионы клиентов). Такими сообщениями занимаются системы, которые на основе правил собирают «уникальные» предложения и отправляют их по SMS, на почту или в пуш-уведомлениях.

В статье постараемся разобраться, как устроена система омниканальной рассылки без сложной персонализации и большой базы данных клиентов. Обсудим вводные и посмотрим, как реализовать что-то похожее с отправкой в Telegram (в нашем случае, в банке, мы отправляем информацию по инцидентам). И даже организуем простенькую систему защиты каналов от незваных гостей.

Немного о системе

Для своего, узкого, пользования мы разработали систему омниканальной отправки сообщений. И научили её собирать сообщения в raw-, markdown- и html-форматах для отправки по разным каналам: hpsm, Ivanti, email, Mattermost и Telegram.

Сервис помогает удобно и быстро встраивать уведомления для разных каналов связи в другие системы. Что позволяет в режиме реального времени менять шаблоны сообщений, а также учетные записи и, например, адреса smtp-серверов. Единственная проблема — ещё одна точка отказа для других систем.

Углубляться в систему не будем — лишь выделим интересующий нас API-метод /interact, и назовём его точкой входа. В этот метод мы будем передавать инструкции по сборке и отправке сообщений. Ключевыми параметрами для выполнения запроса будут: список каналов и получателей, набор параметров и «фич», а также нагрузка. Например, такие:

{ ""networks"": { ""email"": { ""to"": [ ""username_or_email"" ] }, ""telegram"": { ""chats"": [88005553535] } }, ""features"": { ""x-reply-auto"": true }, ""payload"": { ""SUBJECT"": ""2+2"", ""DESCRIPTION"": ""="", ""DONE"": ""5"", ""KEBAB"": ""SIUUUUUUUUUU"" } }

В системе мы объявляем несколько уровней:

Система. В нём мы определяем токены для интеграции API, указываем пути доставки с адресами, пароли, триггеры и все необходимое. Триггеры. В них указываются базовые характеристики: имя, ключ доступа, поля, которые необходимо указать в инструкции, их характеристики и модификаторы; способы доставки, которые описывают, по какому каналу, объявленному на уровне системы, необходимо отправить сообщение, и как будет выглядеть само сообщение. Например, поле name имеет тип string, модификатор toUpperCase и так далее.

Финальный API-метод исполнения инструкции отправки выглядит так: /api/v1/trigger_name_or_uid/interact .

Тут может возникнуть вопрос: куда делся первый уровень? Всё просто. Определение системы вшито в токен интеграции API.

Маршрут до оповещения выглядит так: system→ trigger → transport → template . Где transport — канал, по которым мы будем отправлять сообщения, а template — шаблон сообщения по транспорту. На этом моменте мы оставим дальнейшую работу системы под капотом.

Шаблоны и параметры заполнения сообщения

Триггер может включать в себя большой набор каналов доставки. Но не хватает самого сообщения, для которого, в свою очередь, нужны шаблон и параметры заполнения.

Шаблон вручную заполняет оператор системы — для каждого выбранного транспортного узла в триггере. То есть описывает инструмент и параметры отправки сообщения по каналу: Telegram, email, Mattermost и прочим.

Далее мы совмещаем шаблон с параметрами. Для этого используется движок Razor. Упрощенно, код инициализации экземпляра выглядит так:

_engine = new RazorLightEngineBuilder() .UseEmbeddedResourcesProject(typeof(RazorMessageCompilationFeature)) .UseCachingProvider(new RazorMemoryCachingProvider() { Lifetime = TimeSpan.FromMinutes(30) }) .AddDefaultNamespaces(typeof(DateTime).Namespace) .Build(); _engine.Options.DisableEncoding = true;

А метод компиляции сообщения — так

public async Task Handle(TransportContext context, IMessage message, CancellationToken cancellationToken) { var properties = context.Network.Payload.ToExpando(); await Task.WhenAll(CompileSubjectAsync(context, properties, cancellationToken).ContinueWith(m => message.Subject = HttpUtility.HtmlDecode(m.Result)), CompileMessageAsync(context, properties, cancellationToken).ContinueWith(m => message.Body = HttpUtility.HtmlDecode(m.Result))); }

Telegram

Телеграм предоставляет разработчикам несколько способов создать чат-бот и готовые библиотеки для работы с API. Нам понадобится способ Bot API. Это REST, поэтому много новой информации по взаимодействию искать не придётся.

Разработчики Bot API придумали интересный метод организации методов. Они разделили запрос на два части: токен доступа и название метода. Запрос на получение информации о боте в Telegram выглядит так: https://api.telegram.org/bot/getMe . Во всех адресах обращения к API будут меняться лишь названия методов:

/getMe;

/sendMessage;

/getFile и так далее.

Всю информацию по доступным методам можно найти здесь: https://core.telegram.org/bots/api#available-methods.

Регистрация бота в Telegram

Для начала необходимо создать бота:

заходим в приложение и запускаем чат с @BotFather;

отправляем команду /newbot и следуем инструкциям:пишем имя бота;вводим username, который обязательно должен заканчиваться на bot.

Выполнив все шаги, мы получим сообщение об успешном создании бота и токен для работы с ним.

Храните токен в защищённом месте и не публикуйте его вместе с кодом в репозиторий. Если вдруг всё пошло не так, и секретность токена под угрозой, вы можете перевыпустить токен или отключить бота до момента решения вопросов с безопасностью.

Учимся отправлять сообщения в чаты

Для теста подойдёт любой канал, в котором вы являетесь администратором. Для отправки сообщений нам понадобится метод sendMessage.

Объявляем структуру сообщения:

public readonly struct Message { [Required, JsonInclude, JsonPropertyName(""chat_id"")] public readonly string ChatId; [Required, Range(1, 4096), JsonInclude, JsonPropertyName(""text"")] public readonly string Text; public Message(string chatId, string text) { if (string.IsNullOrEmpty(text) || text.Length < 1 || text.Length > 4096) { throw new ArgumentOutOfRangeException(nameof(text), ""Размер сообщения должен удовлетворять диапазону 1 - 4096""); } ChatId = chatId; Text = text; } }

Передаём идентификатор канала и сообщение:

var client = new HttpClient(); client.BaseAddress = new Uri(“https://api.telegram.org/bot<token>/sendMessage”); var message = new Message(88005553535, “мое первое сообщение”) var request = new HttpRequestMessage(); request.Method = HttpMethod.Post; request.Content = new StringContent(JsonSerializer.Serialize(message), Encoding.UTF8, ""application/json""); _ = await client.SendAsync(request, cancellationToken);

Почти все запросы к Bot API будут с типом POST, так как это самый удачный метод для передачи большого набора данных (но можно и GET). Тело запроса на отправку сообщения в канал будет выглядеть так:

{chat_id = 123, text = my text, parse_mode = html}

Поле parse_mode нужно, чтобы регулировать формат текста, выбрать html или markdown-разметку.

В модели Message поле parse_mode не указано для упрощения, но вы можете его добавить и поиграться с html или markdown-разметкой.

Отправлять сообщения пользователям тоже можно, но вот начать переписку с ботом в Telegram должен человек. Дальше надо научиться слушать события.

Слушаем чаты

Чтобы бот умел реагировать на команды, понадобится «сканирование» на обновления. Есть два метода прослушивания обновлений: регулярно ходить в Telegram или предоставлять ему адрес прослушивания на вашем сервере, то есть webhook.

Для реализации веб-хуков в корпоративном контуре нужно обосновать необходимость доступа и согласовать изменения. Это долго и сложно, поэтому мы используем первый вариант и будем получать обновления по методу getUpdates .

В теле запроса мы будем отправлять следующие данные: offset , limit , allowed_updates .

offset

Поле offset самое интересное. Оно обеспечивает последовательное чтение обновлений с сервера. Его магия в том, что если мы не будем указывать его в каждом последующем запросе, то будем всегда получать одни и те же обновления раз за разом. Назовём это поле «ластиком», который стирает все полученные ранее обновления, и предоставляет свежие.

Важно! Для корректного функционирования системы, в запросах getUpdates всегда необходимо указывать — идентификатор последнего полученного обновления. При первом вызове метода у нас его не будет — мы получим его после первого запроса getUpdates. При каждом последующем запуске приложения, что логично, идентификатора обновления снова не будет, вы получите его после первого запроса, конечно же, если в потоке будет хоть одно обновление.

limit

Это лимит обновлений, которые мы можем получить в одном запросе getUpdates . Получать можно от 1 до 100 обновлений за раз. По умолчанию стоит значение 100, поэтому поле можно не указывать, если вы хотите получать максимальное количество обновлений.

allowed_updates

Это поле — массив строк, то есть список типов обновлений, которые мы хотим получить в ответ. Для полного охвата нам будет достаточно: chat_member , message и my_chat_member . Полный список можно посмотреть тут: https://core.telegram.org/bots/api#update.

Вы получите ровно те объекты обновлений, типы которых были указаны в поле allowed_updates . В нашем случае объект может выглядеть так:

{ result = [ { update_id, chat_member }, { update_id, message } ] }

Каждый объект обновления в массиве результата будет включать в себя набор данных, к которому относится обновление. Исходя из них, мы сможем реагировать на сообщения пользователей, получать информацию о вступивших и вышедших пользователях канала.

Верифицируем пользователей

Нам нужно подтверждать легитимность присутствия пользователей в чате. Для этого используем:

таблицу сопоставления логина телеграмм с логином в AD;

статус верификации;

кодовое слово — случайно сгенерированную строку в 1024 символа.

Процесс выглядит так:

Заводим заявку на подключение пользователя к Telegram. В заявке генерируются необходимые данные: запись сопоставления логинов, ключ верификации и так далее. На корпоративную почту отправляется сообщение с инструкцией, как пройти верификацию. Пользователь отправляет секретный ключ через команду /verify в чат с ботом. Мы обрабатываем все обновления с объектом message в ответе. То есть ищем поля message.chat.type, которым эквивалентно значение private. Определяем команду /verify. Подтверждаем верификацию в системе, сохраняем ID пользователя в таблицу сопоставления и отправляем ему письмо об успешной верификации.

Мы решили обойтись без усложнений и не стали регистрировать команды в боте. Но вы можете зарегистрировать их для удобства ваших клиентов.

Приглашаем пользователей в чаты

Сперва нам нужно запросить разблокировку пользователя, даже если он не был заблокирован ранее. Для этого воспользуемся командой unbanChatMember . Как тело запроса передаём поля: chat_id и user_id — и проверяем в поле в коде OK 200.

Далее генерируем ссылку на приглашение методом createChatInviteLink. В теле передаём поля chat_id , expire_date , member_limit = 1 . Лимит нужен, чтобы ограничить количество вошедших по ней пользователей. (все равно неавторизованного пользователя мы забаним????).

Дата «протухания» приглашения передаётся в формате unix (seconds).

Далее отправляем сообщение пользователю со ссылкой на приглашение. Например, «Вам отправлено приглашение на вступление в группу ‘{chat.FriendlyName}’.

{inviteLink.Link}

Приглашение активно до {invite.ExpireDate.ToUniversalTime():dd.MM.yyyy H:mm:ss zzz».

Блокировка неверифицированных пользователей

Для определения нового вошедшего в канал пользователя получаем значение из поля chat_member.member.status . Оно должно быть эквивалентно значению member. Если пользователь есть в системе, и он помечен как верифицированный, то мы игнорируем сообщение. Иначе смотрим на него с презрением и выписываем перманентный бан.

Для блокировки в чате используем метод banChatMember . В тело запроса передаём 2 поля: chat_id и user_id . И пишем пользователю в личку информацию о блокировке c инструкцией, как выйти и зайти правильно.

Что в итоге

Так, мы научили бота Telegram отправлять сообщения, получать обновления, верифицировать, приглашать в чаты и блокировать пользователей. Благодаря этому, нам не нужен оператор Telegram-чатов, который добавлял бы пользователей и сообщения в канал вручную. За все отвечает автоматизированная система, для которой достаточно указать обязательные поля, чтобы она собрала все необходимые варианты сообщений и отправила их в соответствующие каналы."'https://tproger.ru/articles/pishem-sistemu-omnikanalnoj-rassylki-opoveshhenij-v-telegram/'https://media.tproger.ru/uploads/2023/03/3244562_chat_email_envelope_internet_letter_icon-cover.png'"['https://media.tproger.ru/uploads/2023/03/3244562_chat_email_envelope_internet_letter_icon-cover-icon-original.png', 'https://avatars.githubusercontent.com/u/38440668?v=4', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""90px"" viewBox=""0 0 90 90""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo.jpg', 'https://media.tproger.ru/uploads/2023/03/3244562_chat_email_envelope_internet_letter_icon-cover.png', 'https://mc.yandex.ru/watch/27485085']"
28'CDOCMR6GY'Приём, который поможет вырваться из рутины и работать эффективно'"В жизни много вещей требуют длительных усилий. Будем называть это просто проектами.

Есть проекты по дому, проекты для фана, рабочие проекты, и всякие другие. Некоторые из них вам хочется сделать, некоторые вам не нравятся, но их надо делать (к примеру, какая-нибудь бумажка на разрешение на перепланировку квартиры, ужос сколько беготни).

Ну и в контраст надо представить проекты, которые делаются быстро, одним штурмом, на драйве. С этими проектами как правило нет никаких проблем. Вас посетила муза, кураж, вы сели, посвятили проекту целый день, или ночь, Бум! Все готово.

А вот с длинными проектами все по-другому. Рано или поздно наступает момент, когда стартового драйва уже нет, и вы начинаете забывать зачем его делать. И так как прошло много времени, то вы уже и не помните что там надо было делать, какой следующий шаг. Вот про такие проекты я хочу с вами поделиться небольшим приемом.

Суть приема в коротких 7 минутных микробустах.

Давайте на примере. Я иногда столярничаю. Вот у меня есть проект по деревянному стульчику. Это затяжной проект, и там много этапов, надо принимать решения, надо ездить по магазинам, надо гуглить, ну короче, это прям проект, несмотря на смешной объект.

Был период когда я забросил проект, пару месяцев не занимался им, все стоит на месте, периодически попадает на глаза и тогда возникает неприятное чувство незавершенной работы. Ну, короче, надо его доделать.

Что я делаю? Я решаю для себя, ок, у меня нет драйва его пушить, хочется поиграть в Starcraft, отдохнуть, надо делать много других вещей, но 7 минут у меня всегда найдется. Дальше по шагам:

Я говорю себе «7 минут выделю. Это не развалит мой день, это не сломает график. 7 минут ничему не может помещать. А после этих 7 минут — вернусь в обычное течение жизни» Дальше я представляю чем по проекту я мог бы заняться так, чтобы не думать, не принимать решений, а просто делать руками, выключив мозг. Выбираю 1-2 таких действия. Хорошо бы выбрать именно такой вид деятельности, который можно тупо «делать», не размышляя ни о чем. Дальше я ставлю таймер на 7 минут И тупо занимаюсь проектом пока не зазвонит таймер. В эти 7 минут я не торможу, не туплю, не переживаю ни о чем другом, не заглядываю вперед, не оглядываюсь, просто работаю. Когда таймер срабатывает — насильно останавливаю любые работы над этим проектом, даже если появилась инерция двигаться дальше. Если есть что-то, что поможет мне вернуться в проект в следующий раз, я это выполняю, но очень скупо. Например — я могу разложить инструменты в порядке, который мне напомнит о чем-то, или проставляю номера на деталях 1-2-3.

Почему прием работает? Я думаю так:

7 минут всегда найдутся. Ради 7 минут я не буду ломать голову над сложными вопросами:

А могу ли я это время куда-то поэффективнее потратить?

Может быть есть что-то более важное и срочное?

А надо ли вообще его делать?

Ничего не выйдет, потом снова работа зависнет.

Хочу ли я вообще это доделывать? (и такой голова набок, прислушиваюсь к своему животу, как будто живот мне скажет «Хочу!»)

Ну или какие-нибудь другие умные мысли.

После этого микро-пуша в 7 минут, проект преодолевает трение покоя. Когда пианино покатилось — вы прикладываете уже меньшие усилия на поддержание этого движения.

Насильно останавливая свои действия после звонка таймера, вы создаете ожидание, как недослушанная история. Это ожидание притягивает вас заняться проектом снова в следующий раз. Так что никогда не доделывайте дело до конца, не допиливайте срез, не дописывайте функцию, пусть приложение в следующий раз не запустится. Запятые — вот что останавливает длинные проекты.

Так я двигаю проекты, мне кажется это работает, может быть и вам пригодится."'https://tproger.ru/articles/malenkij-priem-pomogayushhij-mne-v-rutine/'https://media.tproger.ru/uploads/2023/03/6380212_files_folder_office_work_icon-cover-1.png'"['https://media.tproger.ru/uploads/2022/01/mts-90x90.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2022/01/mts-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2021/05/iconfinder-icon-cover-2.png', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2021/02/iconfinder-icon-9-cover.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2018/07/learningPython.jpg', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://lh3.googleusercontent.com/a/AEdFTp50gv326z_1BBk_3Pgt4zXAyh8MSdycOeVlD9gn=s96-c', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2023/03/6380212_files_folder_office_work_icon-cover-icon-1-original.png', 'https://media.tproger.ru/uploads/2015/03/android-development.jpg', 'https://sun9-7.userapi.com/c880/u29862656/d_4a6db76f.jpg', 'https://sun1-19.userapi.com/s/v1/ig2/C4jmxAQMzXlBpYLS2Lj2Hl5hmxUT7QuQmOtuthEcbfsSiQAyy8g8TyjY9fvD3boVvNmaEMoS9MR7T28Y3csDyZpn.jpg?size=400x400&quality=96&crop=0,0,1957,1957&ava=1', 'https://media.tproger.ru/uploads/2023/03/6380212_files_folder_office_work_icon-cover-1.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png']"
29'4WAF281HD'Как заставить ИИ-существ развиваться. История маленькой ошибки'"Ничего непонятно. Примерно весной прошлого года в проекте был прорыв, но с тех пор, ничего не поменялось, существа по-прежнему вели себя странно.

Даже в последнее время появились сомнения по поводу того что вообще какая-то сходимость у алгоритма достижима. Ну, как бы, сложность задачи понятная, не запредельная, и я ожидал что рано или поздно сетки обязаны обучиться бежать к пище.

Но если наблюдать долго, можно увидеть, что в целом они стремятся двигаться к пище, но часто в простейшей ситуации, существо выбирает отвернуться от пищи и двинуться куда-то в сторону.

Это выглядело как надкушенный пирог, как половина победы.

Что я перепробовал, чтобы добиться более предсказуемого поведения:

Крутил настройки мира: вероятность мутации веса, силу мутации, обилие пищи и т.д. Я увеличил поле для существ, добавил преграды на карте. Пробовал заменять самописную полносвязную сетку — на аналог на базе PyTorch. Расширил и усложнил инспектор популяции, чтобы видеть что внутри происходит. Собрал отдельностоящее приложение, которое загружает дамп и тестирует все существа из дампа в маленьком изолированном эксперименте.

Пока крутил настройки, затраты энергии на перемещение и поворот, получились такие ждуны, которые сидят на месте и ждут еду, было забавно. Это просто настройки мира такие, что двигаться и крутиться — дорого в смысле затрат энергии, вот и сидят на месте.

Ничего не помогало, начал подозревать, что весов в сетке слишком много, для того, чтобы в разумные сроки появилась сходимость. Смущало только то, что существа очень быстро научались избегать столкновений со стенами.

Но при этом, долго не получалось добиться твердой сходимости к целенаправленному движению к пище. Ведь чем стены от пищи отличаются? По сути только знаком. Ладно, какие были возможные причины:

Может быть существа «не видят пищу». Та часть весов, которые отвечают за пищу, не мутируют. Какие-то важные веса задираются вверх до больших значений, откуда уже сползти не могут («паралич сети»). Существа достигают какого-то состояния полу-обученности, которое полностью их устраивает. Другими словами, отбору достаточно, чтобы существа ну с какой-то вероятностью находили что-то покушать, и на этом эволюция останавливалась.

Я перестал думать, и пошел тем путем, который в тот момент видел. Видимый путь заключался в том, чтобы поглубже заглянуть в то, что там внутри происходит.

Изначально у меня было окно инспектора, но там был только перечень существ и при клике на существо — печатались их веса. Начал добавлять функционал в этот инспектор.

График динамики энергии особи

Для начала я добавил массив энергии существа, энергия логировалась каждый цикл. Когда существо питалось — энергия увеличивалась, когда существо бегало и поворачивалось — энергия постепенно падала.







Динамика энергии Динамика энергии

График много инсайтов он не дал, у всех существ он разный, зависит от того, насколько удачливо было существо. Но в целом это было то, что я ожидал.







Динамика энергии, как задумывалась Динамика энергии, как задумывалась

Я был бы рад увидеть, что энергия ведет себя как-то странно, это означало бы что я нашел ошибку, но увы.

Потом добавил массив с событиями в жизни существа: «поел пищу», «столкновение со стеной», «размножение». Этот массив вывел на том-же графике в виде меток по горизонтальной оси — желтые, зеленые, красные.

Вывел на экран массивы весов

Далее добавил вывод весов, всех слоев, включая тот вес, который для сдвига сигмоиды по вертикали.







Вывод весов нейронной сети Вывод весов нейронной сети

Надо было как-то кодировать вес в виде цвета, сделал так: чем ближе к нуля — тем темнее/чернее. Чем больше значение веса — тем зеленее. Чем меньше отрицательное значение — тем краснее. Веса не нормированные, так что пришлось сделать так: все что выше 1.0 — ярко зеленым, меньше «-1» — ярко красным. Тупенько, но пока для наших задач подходит.

За этими картинками, кстати, было интересно наблюдать. В какой-то момент обнаруживалось, что популяция сузилась до 2-3 сильно отличающихся эм.. скажем, «геномов», которые имеют, по всей видимости одинаковую приспособленность. Особи внутри генома отличаются незначительно: плюс-минус 5-10 весов. А сами геномы отличаются между собой кардинально. Ну… практически разные виды =) Правда потом, все-же остался один геном-победитель с незначительной дивергенцией по популяции.

С этим функционалом надо будет еще поиграть — тут хороший потенциал поизучать именно как изменяется набор приспособленых геномов, позамерять скорость схождения, возможность образования новых наборов особей с сильно отличным набором весов, и т.д.

Еще хочу попробовать оценить скорость схождения, если на старте веса всех существ будут одинаковые и равны 0.1

Чистый эксперимент

Картинки дали чуть заглянуть внутрь отбора, но не ответили на вопрос, почему нет сходимости. Энергия менялась как и ожидалось, веса мутировали вроде по всей площади. Надо было копать глубже.

Я собрал другое приложение, на базе основного. Это второе приложение делало следующее: загружала дамп с популяцией и ставило чистый эксперимент над каждым отдельно взятым существом.

Эксперимент был такой: генерировалась пустая карта, размером примерно с область которое существо может видеть. Существо устанавливалось слева, мордой направо: угол=0, скорость устанавливалась в 0.1. Дальше поочередно в каждую клетку карты устанавливалась пища, и запускался один прогон. Прогон считался проваленным «0», если существо достигала любого края карты либо если оно теряло пищу из виду, например — отворачивалось (так как у существ нет памяти, то это имеет смысл), или если изначально пища была установлена вне поля зрения. Пока существо видит пищу — оно имеет право шагнуть еще раз. Если существо в итоге добиралась до установленной пищи, то эта клетка засчитывалась как «1». Итого, прогон завершался либо удачно «1», либо провально «0».

Такой прогон повторялся для всех клеток на карте, итого, получался двумерный массив из «0» и «1».

Предположение было такое, что на первые поколения, еще необученные — будут игнорировать пищу и соответственно почти вся карта будет заполнена нулями. А по мере увеличения приспособленности — существа должны все уверенее настигать пищу в любой точке, которая находится в поле их зрения.







До обучения, после обучения До обучения, после обучения

А что получилось в итоге?







Примерно такая картина была на 180-м поколении, это практически 2 дня симуляции Примерно такая картина была на 180-м поколении, это практически 2 дня симуляции

То есть эксперимент намекал, что существа не обучаются. Плюс-минус похожая картина была у каждого существа в популяции.

Вывел на печать что видит существо в процессе чистого эксперимента

В воскресенье сидел чуть оформлял код, у меня было всего минут 30, решил просто посмотреть что видит существо на каждом шаге эксперимента, добавил одну строчку и увидел вот что:







Вот этих троек в эксперименте не должно было быть Вот этих троек в эксперименте не должно было быть

Тройки тут означают «существо», двойки — «пищу», единицы, если бы они были — «стены». Видно, что откуда-то существо видит тройки, хотя в эксперименте на постановочной карте не было никаких других существ, кроме него самого. Так что получалось, оно видит себя, свое тело. Координаты существа — вещественные числа, шаг для raytrace алгоритма я установил 0.9, и получается, что в какой-то момент существо действительно может видеть только свое тело.







Raytrace с шагом 0.9 иногда может ступать в ту-же самую клетку, где существо и находится Raytrace с шагом 0.9 иногда может ступать в ту-же самую клетку, где существо и находится

Так что я raytrace чуть сдвинул вперед, стартовал не с нуля, а с 0.2, и всё сошлось, причем мгновенно, я даже не обучал сетки заново.

def look(self , mappointer): step = 0.9 # шаг перемещения взгляда (для raycast - дистанция на котороую двигаем вперед указатель) vision = [] for a in range(self.resolution): adelta = self.angleofview/2 - a*self.anglestep d = 0.2 # <----- тут с прошлого года скрывалась ошибка, было 0, надо 0.2 cur_vision = 0 while d < self.viewdistance: d += step x = self.x + d*math.cos(self.angle+adelta) y = self.y + d*math.sin(self.angle+adelta) #pygame.draw.rect(screen, WHITE, pygame.Rect(int(x)*CELLSIZE-1, int(y)*CELLSIZE-1, 2, 2)) try: dot = mappointer[int(y)][int(x)] except IndexError: cur_vision = 0 break if dot > 0: cur_vision = dot break vision.append(cur_vision) # Разложим зрение на цветовые каналы visionRed = [] visionGreen = [] visionBlue = [] dotColor = []

Результаты







Поколение 1 Поколение 1







Поколение 2 Поколение 2







Поколение 7 Поколение 7







Поколение 15 Поколение 15







Поколение 260 Поколение 260

Так это выглядело пошагово:

Вот что записал в дневнике тот момент:

Омг, я проверил. Просто поправил 0.0 на 0.2 в функции look() и

загрузил дамп 150-го поколения. Ни одного существа, которое бы

действовало странно не увидел, долго наблюдал, пытался найти

странности. кое где, крайне редко, пару раз заметил, но я списываю их на

то что возможно это были молодые особи с вредной мутацией. Наблюдал

забавные ситуации, когда несколько существ бегут к одному кусочку еды

наперегонки. Или когда одно существо рядом с другим и постоянно на пару

шагов позади, а так как одно видит тоже что и первое существо почти, то

оно продолжает гоняться за ускользающей едой, а первое существо все

поедает, опреежая второе на несколько шагов.

В общем, да, это прорыв, потому что приложение снова ведет себя понятно. Быстро обучается в пределах 5-7 поколений. Избегает столкновений со стенами, если видит пищу — корректирует курс и скорость, чтобы добраться до пищи. Бинго! Отсюда можно смело ставить новые задачи.

В эксперименте все же есть изредка дыры. И пока не уверен почему, откуда эти дыры. Надо разбираться.

Есть положительный момент в этой ситуации. Она наглядно показывает устойчивость системы к шуму. Шум в виде искажения зрения — не препятствует целенаправленному обучению. Так как этот шум — имеет рандомный безсистемный характер. Щас переформулирую, популяция обученных существ, после 260-го поколения, жило и обучалась с неприятными помехами (регулярно существа видели свое тело, оно какбы загораживало взгляд). И несмотря на это, существа обучились перемещаться в направлении пищи. Это стало очевидно, когда я сместил raycast чуть вперед, и экспериментальные прогоны сразу показали ожидаемые результаты, без какого-то либо отбора, без обучения, на те-же весах. Это дает надежду на то, что обученные сетки и в дальнейшем будут усточивы к всякого рода рандомному шуму.

Для развлечения, вот видео с прошлого года, до того как увеличил размеры мира, не знаю, какое тут поколение, но плюс-минус разумное поведение, по крайней мере стен избегают. Индикаторы над головой — модуль скорости, и красная полоска — уровень энергии."'https://tproger.ru/articles/istoriya-ob-ocherednoj-malenkoj-owibke/'https://media.tproger.ru/uploads/2023/03/90d6c035-efae-4b63-9159-a0e84f7d9687-cover.png'"['https://media.tproger.ru/uploads/2022/12/4271720_anime_automaton_cartoons_gundam_gundam-0080_icon-cover.png', 'https://media.tproger.ru/uploads/2022/01/mts-90x90.png', 'https://media.tproger.ru/uploads/2023/03/8ae6687d-2db8-4cdb-92c2-16619e3de657.png', 'https://media.tproger.ru/uploads/2023/03/8ee1d90a-502a-40e6-a184-ca34e50fb536.png', 'https://media.tproger.ru/uploads/2022/01/mts-32x32.png', 'https://media.tproger.ru/uploads/2016/01/NW_RD.jpg', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2023/03/9b06bfd1-5c71-4b1b-bfed-a5e5f00aa831.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2023/03/8e94a048-11ed-460f-af98-2ad098fe7e43.png', 'https://media.tproger.ru/uploads/2023/03/25b91b7a-1416-45ff-be5e-d9c8ec958fde.png', 'https://media.tproger.ru/uploads/2023/03/3e6a2183-612b-4163-aff3-f00576717830-autoconverted.jpeg', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://lh3.googleusercontent.com/a/AEdFTp50gv326z_1BBk_3Pgt4zXAyh8MSdycOeVlD9gn=s96-c', 'https://media.tproger.ru/uploads/2023/03/90d6c035-efae-4b63-9159-a0e84f7d9687-cover.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2023/03/0402ea99-6147-4a93-a5c9-042d9d063e1e.png', 'https://sun9-7.userapi.com/c880/u29862656/d_4a6db76f.jpg', 'https://sun1-19.userapi.com/s/v1/ig2/C4jmxAQMzXlBpYLS2Lj2Hl5hmxUT7QuQmOtuthEcbfsSiQAyy8g8TyjY9fvD3boVvNmaEMoS9MR7T28Y3csDyZpn.jpg?size=400x400&quality=96&crop=0,0,1957,1957&ava=1', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big-32x32.png', 'https://media.tproger.ru/uploads/2023/03/cc119dd2-f928-4d7f-8672-9ef22167a388.png', 'https://media.tproger.ru/uploads/2023/03/874d073e-1991-4f8f-9ca4-9a3646731a92.png', 'https://media.tproger.ru/uploads/2023/03/237ff7b9-74bc-4d12-9803-fd24f85e13a3.png', 'https://media.tproger.ru/uploads/2023/03/57f7d05d-bbc1-4a69-80c5-be6ecf25d8f6-autoconverted.jpeg', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2023/03/90d6c035-efae-4b63-9159-a0e84f7d9687-cover-icon-original.png', 'https://media.tproger.ru/uploads/2023/03/9ab40da7-843c-407e-bcd5-9bc64d1edd77.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2021/03/nn-icon-cover.png', 'https://media.tproger.ru/uploads/2021/03/iconfinder_Neural_network_2844558-cover.png']"
30'BU6EQF3W0'Open Assitant &#8212; разговорный ИИ для каждого'"Stable Diffusion дал миру новые возможность создавать невероятные картины и фотографии, мы хотим дать миру возможность общаться с ИИ.

Учитывая успех ChatGPT, было логично предположить, что разработкой аналогичной модели скоро займутся в Open Source пространстве, как это произошло с DALLE и Stable Diffusion. Так на свет и появился новый проект — Open Assistant.

В этой статье мы не будем обсуждать «гонку нейросетей», и уж тем более не затронем «монополию на языковые модели», в которой обвиняют OpenAI (хотя бы потому что первое заявление исключает другое).

Причины создания

Если вы пользовались ChatGPT, то вы наверняка могли заметить, что он мог выдавать не такую актуальную информацию, как хотелось бы.

За прошедшее время информация могла просто обесцениться, а то и вовсе стать ложной.

Для того, чтобы искоренить подобный нежелательный контент, разработчики OpenAI накладывают жесткие ограничения на то, что способна выводить модель (конечно, эти ограничения можно обойти, если очень сильно попросить).

Подобная цензура, отсутствие (на данный момент) fine-tuning’а под необходимые задачи разработчиков, отсутствие прямого доступа в некоторых регионов, а также отсутствие открытого кода для изменения под свои нужды — все эти (и не только) причины побудили LAION-AI и разработчиков-энтузиастов взяться за новый проект по созданию аналога, который будет даже лучше, поскольку будет иметь доступ к любым внешним данным.

Мы не собираемся останавливаться на репликации ChatGPT, но произвести революцию языковых моделей. Мы хотим создать умного ассистента будущего, способного не только писать электронные письма и резюме, но и выполнять осмысленную работу, использовать API, динамически исследовать информацию и многое другое, с возможностью персонализации и расширения для каждого.

Я в деле, куда работать?

Open Assistant на данном моменте находится на раннем этапе разработки со сбором данных.

На данный момент есть несколько типов заданий, не связанных с программированием, которые вы можете найти на сайте Open Assistant (возможны изменения):

Ответить как пользователь или создать изначальный запрос — задайте вопрос или просто пообщайтесь с нейросетью, чтобы она научилась отвечать на подобные запросы. Ответить как ассистент — отвечайте на запросы пользователей, как это делал бы ассистент в вашем представлении (не используйте ответы ChatGPT или других коммерческих моделей, поскольку это нарушает политику соглашения) Оценить сообщение пользователя — является ли сообщение спамом, нарушает ли что-то и т.п. Оценить ответ ассистента — правильно ли ответил ассистент на тот или иной запрос. Ранжирование ответов ассистента по качеству.

А если вы разбираетесь в сфере машинного обучения, big-data или в схожих областях, то более подробную информацию вы можете найти на GitHub LAION-AI."'https://tproger.ru/articles/open-assitant-razgovornyj-ii-dlya-kazhdogo/'https://media.tproger.ru/uploads/2023/03/36eaac97-3e0f-42d5-bee1-d88630f0fdf5-cover.png'"['https://media.tproger.ru/uploads/2022/12/4271720_anime_automaton_cartoons_gundam_gundam-0080_icon-cover.png', 'https://media.tproger.ru/uploads/2022/01/mts-90x90.png', 'https://media.tproger.ru/uploads/2022/01/mts-32x32.png', 'https://media.tproger.ru/uploads/2016/01/NW_RD.jpg', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2023/03/b500b589-2a0d-4a9e-a8e0-44395cb46688.png', 'https://mc.yandex.ru/watch/27485085', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2023/03/d42759e4-a382-4d77-a8b6-e8104db8462a.png', 'https://media.tproger.ru/uploads/2023/03/36eaac97-3e0f-42d5-bee1-d88630f0fdf5-cover-icon-original.png', 'https://media.tproger.ru/uploads/2023/03/f5d5d74c-6beb-4343-87f9-b6ac379ec7f7.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2023/03/3be04910-fb6a-4a9c-9b8e-65dd64f7bfe0.png', 'https://media.tproger.ru/uploads/2021/11/OTR-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2023/03/36eaac97-3e0f-42d5-bee1-d88630f0fdf5-cover.png', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big-32x32.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://avatars.githubusercontent.com/u/38440668?v=4', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2021/03/nn-icon-cover.png', 'https://media.tproger.ru/uploads/2021/03/iconfinder_Neural_network_2844558-cover.png']"
31'D8767QZD2'В South Park вышла серия «Deep Learning», посвящённая ChatGPT'"В серии мультфильма есть многие громкие истории, которые обсуждались в последнее время: использование нейросетей в личных переписках, подготовка домашних работ и даже запрет на использование нейросетей в учебных заведениях.

ChatGPT — новая языковая модель на основе GPT 3.5. Она может очень натурально поддерживать разговоры, вести себя как настоящий Linux-терминал, проверять код на ошибки, составлять документацию, дописывать код и даже генерировать рабочие скрипты по запросу с нуля.

Например, мы уже рассказывали, как блогер заставил ChatGPT решать домашние задания. Он даже подключил 3D-принтер, чтобы натурально переписывать решение в тетрадь.

А вот реальная история, как студент из Москвы получил диплом за работу, написанную с помощью нейросети.

А вот так ChatGPT выглядит в мультфильме.

Также кто-то оставил пасхалку в википедии, где ChatGPT указан как соавтор серии.

Но самое интересное, что серия буквально превратилась в практический курс по использованию ChatGPT для людей, далёких от технологий.

С одной стороны, это лишний раз доказывает, что нейросети плотно входят в нашу жизнь. А с другой — ещё больше популяризирует технологию, и в особенности ChatGPT."'https://tproger.ru/articles/v-south-park-vywla-seriya-deep-learning-posvyashhyonnaya-chatgpt/'https://media.tproger.ru/uploads/2023/03/75f4b68b-632f-4d46-b047-febd7feee0ac-cover.png'"['https://media.tproger.ru/uploads/2022/12/4271720_anime_automaton_cartoons_gundam_gundam-0080_icon-cover.png', 'https://media.tproger.ru/uploads/2022/01/mts-90x90.png', 'https://media.tproger.ru/uploads/2022/01/mts-32x32.png', 'https://media.tproger.ru/uploads/2016/01/NW_RD.jpg', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2023/03/ae12d2a5-3314-40b0-b317-2886fbc8aedc.png', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2023/03/75f4b68b-632f-4d46-b047-febd7feee0ac-cover-icon-original.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2023/03/5196ac1e-19f9-4846-a2f7-7e1f05ead02d.png', 'https://media.tproger.ru/uploads/2023/03/12e79d4b-5002-46dd-845a-8386f82b0cf9.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2021/11/OTR-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2023/03/75f4b68b-632f-4d46-b047-febd7feee0ac-cover.png', 'https://avatars.githubusercontent.com/u/38440668?v=4', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2021/03/nn-icon-cover.png', 'https://media.tproger.ru/uploads/2021/03/iconfinder_Neural_network_2844558-cover.png']"
32'0L21GCFZR'Что вы делали на этой неделе? Пост хвастовства за 3-10 марта'"Что вы делали на этой неделе? Пост хвастовства за 3-10 марта

Предлагаем делиться в комментариях под этой записью, над чем вы

работали на этой неделе, ведь нет ничего интереснее, чем задачи коллег!

Вот, чем вы занимались на прошлой неделе.

Не важно, разработчик вы или тестировщик, деврел или эйчар. Расскажите, какие задачи вы героически решили, и делитесь успехами.

Кидайте всё, чем хочется похвастаться: текст, скриншоты кода и даже ссылочки на видео.

Не забывайте про NDA: не указывайте названия компании или деликатные частности.

Итак, чем вы похвастаетесь на этой неделе?"'https://tproger.ru/articles/chto-vy-delali-na-etoj-nedele-post-hvastovstva-za-3-10-marta/'https://media.tproger.ru/uploads/2023/03/e2afbf3d-3788-418d-95ca-7d64e1abe917-cover.png'"['https://media.tproger.ru/uploads/2023/03/e2afbf3d-3788-418d-95ca-7d64e1abe917-cover.png', 'https://media.tproger.ru/uploads/2022/01/mts-90x90.png', 'https://media.tproger.ru/uploads/2020/08/iconfinder_17_1280977-cover-3.png', 'https://media.tproger.ru/uploads/2022/01/mts-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2021/05/iconfinder-icon-cover-2.png', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2023/03/1508f13f-b88d-43a4-9f0c-df0085c9645b.jpeg', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://media.tproger.ru/uploads/2020/07/iconfinder-icon-48-cover.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://lh3.googleusercontent.com/a/AEdFTp50gv326z_1BBk_3Pgt4zXAyh8MSdycOeVlD9gn=s96-c', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2023/03/e2afbf3d-3788-418d-95ca-7d64e1abe917-cover-icon-original.png', 'https://sun9-7.userapi.com/c880/u29862656/d_4a6db76f.jpg', 'https://sun1-19.userapi.com/s/v1/ig2/C4jmxAQMzXlBpYLS2Lj2Hl5hmxUT7QuQmOtuthEcbfsSiQAyy8g8TyjY9fvD3boVvNmaEMoS9MR7T28Y3csDyZpn.jpg?size=400x400&quality=96&crop=0,0,1957,1957&ava=1', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big-32x32.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2020/03/hent-AI-changed.jpg']"
33'FRS4S89UC'Хакеры взломали «СберСпасибо»'"В сети оказалась база, в которой содержатся несколько миллионов строк с личными данными пользователей бонусной программы: номера телефонов, адреса электронной почты, даты рождения, хэши карт и прочее.

В слитом архиве два файла:

В первом — 6,3 млн строк, содержащие номера телефонов, адреса электронной почты, даты рождения, номера телефонов, даты регистрации и хэши карт с 1 апреля 2017 по 7 февраля 2022 года.

Второй файл содержит 48,3 млн строк. В нём есть email-адреса и номера телефонов.

Насколько можно доверять данным об утечке

Информацию о «сливе» данных подтвердил Telegram-канал «Утечки информации». В самом Сбере информацию пока проверяют.

Но уже сейчас сообщениям об утечке можно можно доверять больше обычного. Хакеры, которые выложили базу, уже успешно «сливали» данные «СберПрава», «СберЛогистики» и многих других сервисов.

Чем опасна утечка

Не смотря на то, что номера банковских карт хранятся в виде хеша, из-за использования устаревшей функции хеширования SHA1, можно «восстановить» их реальные значения прямым перебором всех цифр.

Данные из утечек также часто используют для социальной инженерии. Мошенники могут рассказать информацию, которой, казалось бы, никто не может знать. Пользователи больше доверяют злоумышленникам, если те называют, например, даты рождения, номера карт и телефонов, адреса почты или последние транзакции."'https://tproger.ru/articles/hakery-vzlomali-sberspasibo/'https://media.tproger.ru/uploads/2023/03/3605587_anonymous_cyber_hacker_spy_spyware_icon-cover.png'"['https://media.tproger.ru/uploads/2022/01/mts-90x90.png', 'https://media.tproger.ru/uploads/2023/03/e32daa4f-7a4b-45da-95db-d8271c249a67.jpg', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2022/01/mts-32x32.png', 'https://media.tproger.ru/uploads/2021/03/iconfinder-icon-22-cover.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://mc.yandex.ru/watch/27485085', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://media.tproger.ru/uploads/2023/03/3605587_anonymous_cyber_hacker_spy_spyware_icon-cover-icon-original.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2021/09/2575567_anonymous_hacker_malware_online_private_icon-cover.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2021/11/OTR-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2023/01/4682416_code_data_emm_leak_mdm_icon-cover-1.png', 'https://media.tproger.ru/uploads/2020/12/pentest-roadmap-cover-1.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2023/03/3605587_anonymous_cyber_hacker_spy_spyware_icon-cover.png', 'https://avatars.githubusercontent.com/u/38440668?v=4', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png']"
34'B3VZ2O7CW'Оператор SQL IN на понятных примерах'"Оператор SQL IN является одним из наиболее полезных операторов для фильтрации данных в SQL. Он позволяет выбрать строки из таблицы, которые содержат одно или несколько значений, указанных в списке.

Синтаксис SQL IN

Синтаксис оператора SQL IN очень прост и понятен. Он выглядит следующим образом:

SELECT column1, column2, ... FROM table_name WHERE column_name IN (value1, value2, ...);

где column1, column2, ... — названия столбцов таблицы, которые нужно выбрать, table_name — название таблицы, column_name — название столбца, по которому нужно выполнить фильтрацию, а value1, value2, ... — значения, которые нужно найти.

Примеры использования SQL IN

Для лучшего понимания работы оператора SQL IN, рассмотрим несколько примеров.

Допустим, у нас есть таблица employees с полями id , name , department и salary . Мы хотим выбрать всех сотрудников из отдела sales и marketing. Мы можем сделать это, используя оператор SQL IN следующим образом:

SELECT * FROM employees WHERE department IN ('sales', 'marketing');

Этот запрос вернет все строки из таблицы employees , где значение столбца department равно sales или marketing.

Оператор SQL IN также может быть использован с подзапросами. К примеру, мы можем выбрать всех сотрудников, чья зарплата выше среднего значения по всей таблице:

SELECT * FROM employees WHERE salary IN (SELECT AVG(salary) FROM employees);

Этот запрос выберет все строки из таблицы employees , где значение столбца salary равно средней зарплате по всей таблице «employees».

В заключение, оператор SQL IN предоставляет мощный способ фильтрации данных в SQL. Он может быть использован для выбора строк из таблицы, которые содержат определенные значения, а также для выполнения подзапросов.

Читайте и о других основных командах SQL."'https://tproger.ru/articles/sql-in/'https://media.tproger.ru/uploads/2023/03/e766b40d-94e4-4f92-8f5c-bd25831be682-cover.png'"['https://media.tproger.ru/uploads/2022/01/mts-90x90.png', 'https://media.tproger.ru/uploads/2020/12/sql-commands-mysql-cover-1.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2019/07/iconfinder-icon-19-cover-1.jpg', 'https://media.tproger.ru/uploads/2022/01/mts-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://mc.yandex.ru/watch/27485085', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2020/12/css-flexbox-animation-cover-1.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://lh3.googleusercontent.com/a/AEdFTp50gv326z_1BBk_3Pgt4zXAyh8MSdycOeVlD9gn=s96-c', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2023/03/e766b40d-94e4-4f92-8f5c-bd25831be682-cover.png', 'https://sun9-7.userapi.com/c880/u29862656/d_4a6db76f.jpg', 'https://sun1-19.userapi.com/s/v1/ig2/C4jmxAQMzXlBpYLS2Lj2Hl5hmxUT7QuQmOtuthEcbfsSiQAyy8g8TyjY9fvD3boVvNmaEMoS9MR7T28Y3csDyZpn.jpg?size=400x400&quality=96&crop=0,0,1957,1957&ava=1', 'https://media.tproger.ru/uploads/2023/03/e766b40d-94e4-4f92-8f5c-bd25831be682-cover-icon-original.png', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big-32x32.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2021/01/Python_regexp-cover.png']"
35'GTNM4P9L2'Google похоронила чат-бота 2 года назад, а сейчас популярность Bing с ChatGPT бьёт рекорды'"Google похоронила чат-бота 2 года назад, а сейчас популярность Bing с ChatGPT бьёт рекорды

Компания Microsoft рассказала, как внедрение ChatGPT от OpenAI помогло Bing снова обрести популярность.

По словам компании, дневная аудитория пользователей Bing превысила 100 млн, а ежедневная активность Bing на смартфонах выросла уже в 6 раз.

Как и ожидалось, нейросеть подняла качество поиска Bing на рекордно высокий уровень.

Что интересно, сейчас примерно треть аудитории Bing — новые пользователи, а растет не только их количество, но и вовлеченность. Профит получает и браузер Edge —популярность Bing помогает росту использования браузера.

Если пропустили, что за ChatGPT и причём здесь Microsoft, подробнее рассказывали в статье.

Оказалось, Google хотела запустить своего чат-бота ещё два года назад, но в технологию не поверили

После появления нейросетевого помощника в Bing многие эксперты и даже сотрудники компании начали говорить , что Bing может «убить» бизнес компании. Поэтому попутно с успехами Microsoft мы присматриваем за делами Google.

Очень удачно с выходом поста в блоге Microsoft стало известно, что исследователи Google тоже хотели выпустить чат-бота. И это было больше двух лет назад! Уже тогда бот мог обсуждать философию, импровизировать и даже шутить.

Но руководители Google были против публичного запуска чат-бота: мол технология сырая, не соответствует стандартам безопасности, может нанести репутационные риски и лишить сайты трафика. А на последнем как раз и строится бизнес-модель Google.

Тогда же, кстати, многие ключевые разработчики LaMDA посмотрели на это всё и покинули Google. Несложно догадаться, где они сейчас 🙂

Сразу после анонса обновлённого Bing Google показала похожую технологию, но реализация Google оказалась куда хуже."'https://tproger.ru/articles/google-pohoronila-chat-bota-2-goda-nazad-a-sejchas-populyarnost-bing-s-chatgpt-byot-rekordy/'https://media.tproger.ru/uploads/2023/03/2032350_bone_dead_death_fear_skull_icon-cover.png'"['https://media.tproger.ru/uploads/2015/10/google-sequence.jpg', 'https://media.tproger.ru/uploads/2022/01/mts-90x90.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2022/01/mts-32x32.png', 'https://media.tproger.ru/uploads/2016/01/NW_RD.jpg', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://mc.yandex.ru/watch/27485085', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2014/12/coin-to-blender.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://lh3.googleusercontent.com/a/AEdFTp50gv326z_1BBk_3Pgt4zXAyh8MSdycOeVlD9gn=s96-c', 'https://media.tproger.ru/uploads/2023/03/6bb81b85-1fad-4c66-b106-9e8d248e0004.jpg', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2021/11/OTR-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2023/03/c2696aac-0a71-4637-8f92-0c32675cb40c.jpeg', 'https://sun9-7.userapi.com/c880/u29862656/d_4a6db76f.jpg', 'https://sun1-19.userapi.com/s/v1/ig2/C4jmxAQMzXlBpYLS2Lj2Hl5hmxUT7QuQmOtuthEcbfsSiQAyy8g8TyjY9fvD3boVvNmaEMoS9MR7T28Y3csDyZpn.jpg?size=400x400&quality=96&crop=0,0,1957,1957&ava=1', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2023/03/2032350_bone_dead_death_fear_skull_icon-cover-icon-original.png', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2021/03/iconfinder_Neural_network_2844558-cover.png', 'https://media.tproger.ru/uploads/2023/03/2032350_bone_dead_death_fear_skull_icon-cover.png']"
36'0H0TKQ7AG'Какая ты IT-принцесса?'"Здравствуйте! Ваши статьи очень интересны. Подскажите , Вы выступаете в качестве спикера на мероприятиях ? Если интересно, напишите мне в тг @jenizay. Расскажу подробно

Пишем Java веб-приложение на современном стеке. С нуля до микросервисной архитектуры. Часть 3"'https://tproger.ru/quiz/kakaja-ty-it-princessa/'https://media.tproger.ru/uploads/2023/03/Start.jpg'"['https://media.tproger.ru/uploads/2023/03/Start.jpg', 'https://sun9-7.userapi.com/c880/u29862656/d_4a6db76f.jpg', 'https://sun1-19.userapi.com/s/v1/ig2/C4jmxAQMzXlBpYLS2Lj2Hl5hmxUT7QuQmOtuthEcbfsSiQAyy8g8TyjY9fvD3boVvNmaEMoS9MR7T28Y3csDyZpn.jpg?size=400x400&quality=96&crop=0,0,1957,1957&ava=1', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AEdFTp50gv326z_1BBk_3Pgt4zXAyh8MSdycOeVlD9gn=s96-c']"
37'6RSDARS32'Как я создал ИИ-стримера на ChatGPT'"В прошлом году мне выдалась возможность поиграться c ChatGPT от OpenAI, однако практические применения, которые приходили мне в голову, оказались слишком сложными для реализации моими неполноценными студенческими знаниями, из-за чего мысли ушли сугубо в использовании нейронок в развлекательных целях. Чуть позже широкую огласку получил ИИ-стример Neuro-sama, созданный vedal987. В целом, тогда я и решил запустить этот эксперимент и попробовать сделать максимально дешево и сердито русскоговорящего стримера на основе GPT-моделей.

Что необходимо для стримера

Для начала следует понять, кто такой современный стример, что он делает, что он для этого использует.

Стример — субъект, который ведет потоковую трансляцию. Современные стримеры на том же Twitch сейчас играют в игры, общаются *в бассейнах*, при этом разговаривая со своей аудиторией на самые разнообразные темы.

Таким образом мы можем выделить основные инструменты для современного стриминга:

Темы для разговора

Образ стримера

Рот

Веб-камера

Геймплей (опционально)

Рассмотрим всё по порядку.

Темы для разговора

Для того, чтобы трансляция не была скучной, стример должен комментировать, общаться с аудиторией, причем не только на игровые темы. В качестве «мозга» нашего бюджетного стримера было решено выбрать GPT-3 (davinci-003) от OpenAI с перспективой апгрейда до GPT-3.5 (ChatGPT) сразу после её выхода (так я и сделал, но об этом в конце статьи). Решения от OpenAI позволяют обрабатывать ответы на их же серверах, а значит, нам не придется использовать мощное железо и обучать нейронную сеть с нуля.

О том, как получить доступ к OpenAI из России, написано здесь. В отличие от того же ChatGPT, API можно использовать без VPN.

Получать сообщения мы будем из чата YouTube (проверка перед переходом на Twitch) с помощью библиотеки pytchat.

Полученное сообщение и ответ сохраняем в файл (только для записи). Он пригодится нам далее.

Образ стримера

Сегодня трудно пробиться через тонны контента без какого-то запоминающегося образа или выделяющейся особенности, поэтому и нашему Франкенштейну нужен имидж. Размышляя об этом за кружечкой кофе и играя в «Disco Elysium» я пришёл к выводу, что миру нужен пьяница-бездомный, который может объективно рассказать всем за жизнь. Так как у нас всё еще есть аккаунт OpenAI, используем DALLE 2 для генерации не самого красивого мужчины и не в самом расцвете сил.

Мне понравились 1 и 4 изображения в 3 ряду, однако, чтобы окончательно решить этот вопрос, я обратился в свой Телеграм канал:

Теперь необходимо увеличить изображение в размерах, не потеряв качества. Для этого можно использовать разные решения. Самый простой вариант — UpscaleMedia.

Имя не менее важно, за ним я обратился в тот же канал.

Сеттинг будет простой: заброшенный город в далеком будущем. А для того, чтобы сделать речь GPT-3 более похожей на «пьяную» добавим переводчик с любого языка на русский.

Как переводчик было решено использовать модуль translate, изначально задумывалось делать два перевода — текст пользователя в английский язык, а ответ переводить на русский, однако модуль наотрез отказывался переводить что‑либо на английский язык, поэтому решено было просто оставить его как автоперевод сообщений с любого языка.

Рот

Стример должен говорить, чтобы поддерживать интерес аудитории. Для реализации «рта» возьмём Silero‑TTS. Плюс Силеро заключается в неплохих заранее заготовленных голосах, которым не требуется подключение к интернету, что значит, задержка будет минимальная (время уйдёт только на саму генерацию аудио).

Проблема, с которой я столкнулся — обрезание предложений, причём только на пресете «Aidar», поэтому её пришлось решать радикальным добавлением мягкого знака в конец текста. Еще Силеро не работает с другими языками (для этого есть другие модели) и числами — для этого нужно подключить нормализатор по типу natasha. К сожалению, до этого руки не дошли.

Веб-камера и способ трансляции

Изначально задумывалось, что из полученного при помощи DALLE 2 изображения, получится сделать rig в той же Live 2D Studio, однако спустя несколько часов гайдов, я понял, что Комуто обойдётся статичным изображением его во всей красе. По крайней мере пока что. Выбрав красивый апокалиптический фон и немного его подредактировав в фотошопе, я залил всё это в ОБС, ровно как и текст, генерируемый GPT-3. Пока Комуто будет его читать, ОБС будет выводить субтитры из файла на экран. Для сброса файла после того, как Комуто договорит, просто еще раз открываем файл для записи и тут же его закрываем.

Геймплей

На самом деле, это сложный вопрос. Каждый стример стримит что‑то своё, а некоторые просто общаются с аудиторией. Однако паузы (которые хоть и заполняются болтовнёй о том, как ему плохо жить) могут напрягать зрителя, поэтому было решено добавить хоть какой‑то геймплей. В конечном счёте выбор упал на Clone Hero, так как это rhythm игра с классной и в том числе кастомной музыкой, бесплатная, да еще и со своим ботом! Тем не менее, в будущем хочется добавить:

Тетрис

Шахматы

Minecraft | уже реализовано при помощи AltoClef

Еще что-нибудь смешное или интересное

UPD. Мозг v.2.0

Эта статья изначально писалась 02.03.2023 в 3 утра по Московскому времени. Случайно зайдя на свою почту я увидел следующее:

Да! Наконец они выпустили нормальный API, который к тому же в 10 раз дешевле, чем тот же используемый GPT-3 Davinci. Однако главная особенность заключалась не в этом и даже не в улучшении производительности и качества генерации текста.

ChatGPT (далее GPT-3.5) имеет особенность запоминать ваши сообщения с целью последующего использования информации в диалоге с вами (для того, чтобы не терять нить повествования), что позволяет нам задать изначальные установки его поведения и образ, причем его поведение меняется в зависимости от вопросов зрителей.

Для обучения Комуто будем сохранять теперь не только субтитры, но и словари с системными установками, сообщениями из чата, а также ответами самого Комуто.

GPT-3.5 намного быстрее отвечает на сообщения, не требует перевода, поскольку достаточно креативен и на русском языке, а также почти не имеет проблем с обрезанными предложениями.

UPD_2. Twitch

Основная стримерская площадка на данный момент, без сомнений — Twitch, каким бы сумбурным в плане правил он не казался.

Чат Twitch можно читать при помощи IRC (вебскрапперы — просто тяжело и долго). Использовать его впервые было тяжело, но реализовать удалось. Позже нашелся twitch-chat-irc. Если не хочется заморачиваться — можно использовать и её.

Для того, чтобы Комуто не вышел за рамками дозволенного (хотя GPT-3.5 хорошо держит себя в руках) добавим список банвордов, которые Комуто совсем озвучивать не будет, но примет для обучения, а в субтитрах зацензурит.

В ходе первого запуска на Twitch стало понятно, что расход токенов немаленький, но пробных 18 долларов хватит на некоторое время. К тому же, количество информации, полученной в ходе обучения оказавалось слишком много, из-за чего GPT-3.5 просто не принимал информацию.

Первая схема работы хоть и является простой, но имеет большой недостаток — Нет никакой персонализации пользователя: если один человек из чата попросит называть его Миша123, то и другого пользователя нейросеть определит ровно так же:







Упрощённая старая логика Упрощённая старая логика

Ещё Комуто ранее реагировал на абсолютно все сообщения, в том числе на бесполезные, которые были адресованы вообще не ему, из-за этого схему действия пришлось изменить:







Упрощённая новая логика (просто повторяем одни и те же действия) Упрощённая новая логика (просто повторяем одни и те же действия)

Как только мы связываемся с переполнением запроса, теперь мы создаем бэкап, в который уносим всю предыдущую переписку пользователя, а в новую сохраняем последние 2 вопроса и 2 ответа. Комуто теперь реагирует только на сообщения вида “… Комуто …” вне зависимости от регистра Информация сохраняется персонально в .json файл для каждого участника общения с Комуто.

Примеры работы

Первый запуск (text-davinci-003, GPT-3) (АП за музыку)

Второй запуск (gpt-3.5-turbo, ChatGPT)

Третий запуск (gpt-3.5-turbo, ChatGPT)

Twitch Комуто"'https://tproger.ru/articles/chatgpt-v-roli-strimera/'https://media.tproger.ru/uploads/2023/03/8010448_twitch_social-media_communication_chat_talk_icon-cover.png'"['https://media.tproger.ru/uploads/2022/12/4271720_anime_automaton_cartoons_gundam_gundam-0080_icon-cover.png', 'https://media.tproger.ru/uploads/2022/01/mts-90x90.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2023/03/7289381a-b05f-41bd-a60d-b52d9f203a06.png', 'https://media.tproger.ru/uploads/2022/01/mts-32x32.png', 'https://media.tproger.ru/uploads/2016/01/NW_RD.jpg', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://mc.yandex.ru/watch/27485085', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2023/03/8010448_twitch_social-media_communication_chat_talk_icon-cover.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2021/11/OTR-32x32.png', 'https://media.tproger.ru/uploads/2023/03/77674bcb-efea-4e24-a7d0-9146cb48d970.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2023/03/0904f7fe-c597-43ab-8ef5-cd4a673af2a4.png', 'https://media.tproger.ru/uploads/2023/03/241b83b8-0042-46ee-b19c-f437b1f5e5e2.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2023/03/8010448_twitch_social-media_communication_chat_talk_icon-cover-icon-original.png', 'https://avatars.githubusercontent.com/u/38440668?v=4', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2021/03/nn-icon-cover.png', 'https://media.tproger.ru/uploads/2021/03/iconfinder_Neural_network_2844558-cover.png']"
38'KMWHDOTF9'Разработчик создал большую часть игры с помощью нейросетей'"Речь про игру Tales of Syn. Игра похожа на Disco Elysium, но почти все арты, включая окружение, персонажей и интерфейсы, созданы с помощью Stable Diffusion. А диалоги — с помощью ChatGPT.

Что интересно, разработчик сделал то, что многие пока не решаются сделать — использовал ChatGPT для генерации диалога в реальном времени. Поэтому персонажи могут не только беседовать по сценарию, но и поддержать почти любой разговор и отвечать на открытые вопросы от игрока.

Если интересно следить за процессом разработки, подробнее автор рассказывает в своём твиттере.

Это не первый случай, когда разработчики делают игры с помощью нейросетей. Недавно мы уже рассказывали, как разработчик из Японии создал 2D-стрелялку с помощью нейросети всего за 3 дня. Программист с ником Nao-u создал научно-фантастический шутер с горизонтальной прокруткой под названием Shoon.

Но тогда игры получилась значительно проще. А здесь — прогресс налицо."'https://tproger.ru/articles/razrabotchik-sozdal-bolwuyu-chast-igry-s-pomoshhyu-nejrosetej/'https://media.tproger.ru/uploads/2023/03/7665379_game_toy_console_joystick_videogame_icon-cover.png'"['https://media.tproger.ru/uploads/2022/12/4271720_anime_automaton_cartoons_gundam_gundam-0080_icon-cover.png', 'https://media.tproger.ru/uploads/2022/01/mts-90x90.png', 'https://media.tproger.ru/uploads/2022/01/mts-32x32.png', 'https://media.tproger.ru/uploads/2016/01/NW_RD.jpg', 'https://media.tproger.ru/uploads/2023/03/7665379_game_toy_console_joystick_videogame_icon-cover.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2021/11/OTR-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2023/03/7665379_game_toy_console_joystick_videogame_icon-cover-icon-original.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://avatars.githubusercontent.com/u/38440668?v=4', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2021/03/iconfinder_Neural_network_2844558-cover.png', 'https://media.tproger.ru/uploads/2015/09/finite-automata.jpg']"
39'ZVA59OYUV'Умелец с Реддита сделал USB-клавиатуру в форме пениса'"Девайс напечатан на 3D-принтере и имеет форму пениса.

Он обладает несколькими кнопками, нажимая на которые можно выбирать буквы и составлять слова. Но самое интересное, что устройство сделано так, чтобы управлять им можно было с помощью языка.

Также автор этого чуда составил комбинации клавиш, которые можно получится «ввести». Правда, там пока нет цифр, но автор говорит, что «можно заменить на них некоторые из букв»."'https://tproger.ru/articles/umelec-s-reddita-sdelal-usb-klaviaturu-v-forme-polovogo-organa/'https://media.tproger.ru/uploads/2023/03/3419219_computer-hardware_keyboard_programming_typing_typing-practice_icon-cover.png'"['https://media.tproger.ru/uploads/2022/01/mts-90x90.png', 'https://media.tproger.ru/uploads/2022/01/mts-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://media.tproger.ru/uploads/2019/08/iconfinder_.svg_724598-cover.jpg', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2023/03/3419219_computer-hardware_keyboard_programming_typing_typing-practice_icon-cover-icon-original.png', 'https://media.tproger.ru/uploads/2023/03/b1fef982-e91e-48e3-9358-46e14d6adac8-cover.png', 'https://media.tproger.ru/uploads/2019/06/3d-print-1-1.jpg', 'https://media.tproger.ru/uploads/2023/03/0629ea4a-6ad8-41d6-a398-8f6e5590df18.jpeg', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2023/03/1d1dcbf5-e3c9-4ac7-86f6-6bdd859c3b59.jpeg', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big-32x32.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2023/02/532714_code_coding_development_javascript_script_icon-cover.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2023/03/3419219_computer-hardware_keyboard_programming_typing_typing-practice_icon-cover.png', 'https://avatars.githubusercontent.com/u/38440668?v=4', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png']"
40'6VVMG5WXX'Типичная рабочая задача разработчика и её решение'"Каждый день программисту приходится решать разные типы задач. Я рассмотрю на примере одной из них, из каких шагов состоит работа в проекте.

Эта статья будет полезна как тем, кто интересуется разработкой, так и проходящим базовые курсы по программированию и еще не представляет, как все эти переменные, циклы, условия и функции применяются на реальных задачах.

Так же в статье покажу самый базовый принцип парсинга web-страниц.

Описание проблемы

Задача, которая будет решаться в этой статье выбрана просто для примера, с целью показать общую картину.

Я работаю над мессенджером «Пачка», и в нашем сервисе пользователи могут загрузить архив сообщений из Slack.

Однако, при работе с архивом сообщений, загруженных из Slack, возникает проблема: эмодзи представлены в собственном формате.

При загрузке этих сообщений в «Пачку» человек вместо сообщения

«Всем привет! :)» получит текст «Всем привет :simple_smile:»

Это не очень красиво и выглядит как ошибка.

Приступаем к решению задачи!

Большую часть времени при работе программистом приходится искать ответы на вопросы, на которые ты не знаешь ответа.

Сначала я поискал информацию в официальной инструкции Slack, чтобы найти подсказки, куда двигаться дальше.

Уже лучше, нашёл тут что-то интересное: гайд ссылается на сайт со «стандартными кодами эмодзи».

Первая неудача

Вот, казалось бы, решение — все коды с нужными эмодзи уже есть. Достаточно спарсить простую веб-страницу, и дело в шляпе.

Давайте посмотрим на код при помощи инспектора HTML, но вот незадача — это не эмодзи, а картинка!

Картинки вместо эмодзи мне не подходят, так как их нельзя вставить в обычный текст.

Хорошо, имея официальный список уже неплохо. Давайте попробуем его спарсить, и дальше посмотрим.

Начинаем писать код на Ruby.

require 'nokogiri' require 'open-uri' # Загружаем веб-страничку, используя библиотеку ""Nokogiri"" для парсинга HTML. html = Nokogiri::HTML.parse(URI.open('https://www.webfx.com/tools/emoji-cheat-sheet/'))

Выбираем все элементы с сайта с эмоджи:

# Используя возможности библиотеки, выбираю нужные мне данные tags = html.css('img.emoji')

Теперь у нас есть список элементов с ссылками на картинки с сайта.

Но пока мы не получили ничего полезного. Как получить нужные символы эмодзи?

Есть вариант вручную найти все эмодзи по картинкам и заменить их на символы. Но на это уйдёт несколько дней монотонной работы.

Продолжение поисков

Давайте зайдем на GitHub в поисках материалов, ведь, наверняка, кто-то уже решал похожую задачу.

Мы просматриваем часто встречающиеся названия в коде, но пока ничего не нашли.

Сделаю запрос в поиск более точным, что бы найти подходящие файлы

Прикольно, но мы не 2001 году, что бы рисовать ASCII символами смайлики :-).

Чтобы найти нужную информацию, мы должны сделать более точный запрос в поисковой системе.

Тут вспоминаю, что каждый эмодзи имеет соответствующий код в Unicode.

При поиске на GitHub натыкаюсь на один из файлов:

Кроме того, в данном файле к нашему счастью названия эмодзи соответствуют тем, которые используются в слаке, судя по их ссылке на руководство. Формат JSON также очень удобен.

Осталось только загрузить этот JSON-файл и преобразовать Unicode-эмодзи в их отображения, как мы их видим на экране.

require 'json' emoji_list = 'https://raw.githubusercontent.com/pritishvaidya/react-native-slack-emoji/master/data/all.json' json = JSON.load(URI.open(emoji_list))['emojis']

Вот так мы в Ruby конвертируем Unicode:

Пройдусь по всем эмодзи из Slack в результате нашего первого парсинга и найду соответствующие значения из файла Unicode. Затем запишу результат в новый файл.

tags.map do |emoji_tag| url = emoji_tag['src'] # Название файла картинки сооствествует коду эмоджи в слаке # поэтому просто разбиваем url картинки на части по слешу # и выбираем нужную часть code = url.split('/')[12].sub('.png', '') { emoji: json[code] ? [json[code]['b'].hex].pack(""U"") : nil, code: "":#{code}:"" } end # Записываем результат в файл File.open('emojis.json', ""w"") {|file| file.puts emojis.to_json }

А вот и итоговый результат: файл где каждому эмоджи сопоставлен код из Slack.

Некоторые символы не были найдены, так как их названия различаются, но их очень мало, поэтому можно не беспокоиться и добавить их в файл вручную.

Теперь этот список можно использовать для решения своих задач. Следуя принципам работы opensource, можно помочь другим людям решить подобную задачу, и опубликовать результаты на GitHub.

А мы будем использовать этот файл, для замены Slack-эмоджи на обычные, при импорте архивов сообщений в “Пачку” и результат будет выглядеть правильно. Эмоджи пользователей не будут потеряны при переезде.

Поставленная задача решена за пару часов, и можно переходить к следующим.

Надеюсь, у меня получилось показать, общий подход к работе на реальном проекте.

Очень часто приходится сталкиваться с тем, в чём ты плохо разбираешься или не знаешь вовсе. Это и делает работу интересной, заставляя всегда пытаться узнать что-то новое! 🙂"'https://tproger.ru/articles/typical-it-task/'https://media.tproger.ru/uploads/2023/03/3561842_emoji_emoticon_expression_shame_smiley_icon-cover.png'"['https://media.tproger.ru/uploads/2023/03/cee3bc4f-63e9-4ac0-ad11-562ad7e1ac0a.png', 'https://media.tproger.ru/uploads/2022/01/mts-90x90.png', 'https://media.tproger.ru/uploads/2020/12/sql-commands-mysql-cover-1.png', 'https://media.tproger.ru/uploads/2023/03/ac4e5fb8-1f99-4155-a3c8-299b65c8c705.png', 'https://media.tproger.ru/uploads/2023/03/3561842_emoji_emoticon_expression_shame_smiley_icon-cover-icon-original.png', 'https://media.tproger.ru/uploads/2019/07/iconfinder-icon-19-cover-1.jpg', 'https://media.tproger.ru/uploads/2023/03/1bc1ce18-dfc3-4d8b-a0c3-c5b29ed44bef.png', 'https://media.tproger.ru/uploads/2022/01/mts-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://mc.yandex.ru/watch/27485085', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2023/03/0f8c3c97-ae09-4140-a29f-d81bbe36ee34.png', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'https://media.tproger.ru/uploads/2020/12/css-flexbox-animation-cover-1.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2023/03/73556188-3f12-4390-baee-a898c2eb9918.png', 'https://media.tproger.ru/uploads/2023/03/c82cd08d-d1a7-4817-a578-5619457b1f33.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://lh3.googleusercontent.com/a/AEdFTp50gv326z_1BBk_3Pgt4zXAyh8MSdycOeVlD9gn=s96-c', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2021/11/OTR-32x32.png', 'https://media.tproger.ru/uploads/2023/03/011a85e2-b987-4b5f-a94b-51b230a0d404.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2023/03/77db6bea-6d68-49a4-ab6c-c9f5bc2363e8.png', 'https://media.tproger.ru/uploads/2023/03/e81c167e-6223-4def-bd81-89455a0bc0f9.png', 'https://sun9-7.userapi.com/c880/u29862656/d_4a6db76f.jpg', 'https://sun1-19.userapi.com/s/v1/ig2/C4jmxAQMzXlBpYLS2Lj2Hl5hmxUT7QuQmOtuthEcbfsSiQAyy8g8TyjY9fvD3boVvNmaEMoS9MR7T28Y3csDyZpn.jpg?size=400x400&quality=96&crop=0,0,1957,1957&ava=1', 'https://media.tproger.ru/uploads/2023/03/782dd678-7250-448e-bc8f-bef5f5b5b62f.png', 'https://media.tproger.ru/uploads/2023/03/3561842_emoji_emoticon_expression_shame_smiley_icon-cover.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2023/03/4015dd06-95e2-4d33-8ce4-2c36af99526d.png', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2021/01/Python_regexp-cover.png']"
41'P164JGBRO'SQL запрос SELECT: значение и примеры'"SELECT SQL — оператор запроса, который возвращающает определённый набор данных из базы данных. Список столбцов выборки задаётся в части оператора, которая называется предложением оператора SELECT.

Здесь column1 , column2 , … — это имена полей таблицы, из которой выбираются данные. Если вы хотите выбрать все поля, доступные в таблице, используйте следующий синтаксис:

SELECT * FROM table_name;

Примеры использования SELECT SQL

Если у вас есть таблица employees со столбцами id , name , age , department , salary , вы можете выбрать только имена и возраст всех сотрудников следующим образом:

SELECT name, age FROM employees;

Чтобы выбрать все столбцы из таблицы, вы можете использовать символ * :

SELECT * FROM employees;

Вы также можете использовать оператор WHERE для фильтрации данных по определенным условиям. Например, чтобы выбрать только имена и возраст сотрудников младше 30 лет, используйте такой запрос:

SELECT name, age FROM employees WHERE age < 30;

Кроме того, есть ORDER BY для сортировки результатов по определённому столбцу. Например, можно отсортировать сотрудников по возрасту в порядке убывания:

SELECT * FROM employees ORDER BY age DESC;

SQL SELECT может использоваться для выполнения вычислительных операций над столбцами данных, например, для вычисления общей суммы или среднего значения. Чтобы вычислить среднюю зарплату всех сотрудников, напишем такой запрос:

SELECT AVG(salary) FROM employees;"'https://tproger.ru/articles/select-sql/'https://media.tproger.ru/uploads/2023/03/2672928_choose_hr_human_job_person_icon-cover-2.png'"['https://media.tproger.ru/uploads/2022/01/mts-90x90.png', 'https://media.tproger.ru/uploads/2020/12/sql-commands-mysql-cover-1.png', 'https://media.tproger.ru/uploads/2019/07/iconfinder-icon-19-cover-1.jpg', 'https://media.tproger.ru/uploads/2022/01/mts-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://mc.yandex.ru/watch/27485085', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2020/12/css-flexbox-animation-cover-1.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2023/03/2672928_choose_hr_human_job_person_icon-cover-2.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://lh3.googleusercontent.com/a/AEdFTp50gv326z_1BBk_3Pgt4zXAyh8MSdycOeVlD9gn=s96-c', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2021/11/OTR-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://sun9-7.userapi.com/c880/u29862656/d_4a6db76f.jpg', 'https://sun1-19.userapi.com/s/v1/ig2/C4jmxAQMzXlBpYLS2Lj2Hl5hmxUT7QuQmOtuthEcbfsSiQAyy8g8TyjY9fvD3boVvNmaEMoS9MR7T28Y3csDyZpn.jpg?size=400x400&quality=96&crop=0,0,1957,1957&ava=1', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big-32x32.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2021/01/Python_regexp-cover.png', 'https://media.tproger.ru/uploads/2023/03/2672928_choose_hr_human_job_person_icon-cover-icon-original.png']"
42'5UPH7OLNS'Не только ChatGPT и Midjourney. 8 нейросетей для работы и творчества'"Не только ChatGPT и Midjourney. 8 нейросетей для работы и творчества

В последние месяцы ChatGPT и Midjourney — лидеры по упоминаниям среди нейросетей. Но это не единственные инструменты, которые можно использовать для хобби и работы.

В этой статье мы собрали менее раскрученные нейросети для решения разных задач. Они пригодятся дизайнерам, блогерам, фотографам, SMM-специалистам и всем, кто неравнодушен к современным технологиям.

1. Написать музыку — MuseNet



Как работает: полностью бесплатно, регистрация не нужна.

MuseNet — проект компании OpenAI, создателя популярной нейросети для генерации изображений DALL-E и уже легендарной ChatGPT. MuseNet, обученная на сотнях тысяч музыкальных произведений, генерирует 4-минутные треки, которые можно использовать как фоновую музыку для работы, учёбы или творчества.

Чтобы создать свою музыку, нужно выбрать:

стиль (от джаза до видеоигр и Beatles); с какой мелодии начнётся трек (например, Poker Face от Lady Gaga или Rondo Alla Turca Моцарта); предпочитаемые инструменты: струнные, гитара, барабаны и т. д.

Разработчики просят не использовать сгенерированные треки в коммерческих целях и предупреждают, что нейросеть может случайно проиграть мелодию с авторскими правами.

2. Раскрасить чёрно-белое фото — Palette



Как работает: бесплатно, но с ограничениями.

Нейросеть Palette, работать с которой можно прямо в браузере, раскрашивает чёрно-белые снимки. Сначала сервис попытается определить, что изображено на фото, а потом предложит несколько фильтров, которые можно применить к фотографии. Таким образом вы сможете выбрать более яркие или, наоборот, приглушённые оттенки цветов на свой вкус.

Бесплатно можно раскрашивать неограниченное количество изображений и скачивать их в разрешении до 500 x 500 пикселей. Но если вы хотите скачать фото в высоком разрешении, придётся оформить подписку или оплатить отдельное фото.

3. Перевести текст с одного языка на другой — DeepL



Как работает: бесплатно, но с ограничениями.

Google Translate и Яндекс.Переводчик показывают достаточно высокое качество перевода, но с узкоспециализированными текстами у них иногда возникают проблемы. В этом случае на помощь может прийти нейронный машинный переводчик DeepL, который учитывает контекст.

DeepL поддерживает 31 язык, в том числе русский, переводит за раз до 5 000 символов, в месяц в бесплатной версии можно перевести до 3 документов. Кроме того, DeepL можно обучать, то есть подсказывать правильный перевод для отдельных слов.

Помимо веб-версии, нейросеть существует в виде программы для Windows, а также приложений для iOS и Android.

4. Улучшить качество изображения — Upscale



Как работает: бесплатно, если использовать результаты в личных целях.

Благодаря алгоритмам компьютерного зрения Upscale может увеличить разрешение изображения до 4x. При этом доступен фильтр, который удаляет артефакты на финальном изображении после увеличения.

Нейросеть работает с любыми форматами: от портретов и пейзажей до абстракций и фото. Для обработки можно загрузить исходник размером не более 1 500 × 1 500 пикселей в следующих форматах: PNG, JPG, JPEG и WEBP.

5. Преобразовать текст в речь — Uberduck



Как работает: бесплатно, но есть PRO-версия.

Uberduck начинался как шуточный проект, с помощью которого можно было озвучить текст голосами известных рэперов. Но теперь нейросеть используют и в коммерческих целях.

В библиотеке Uberduck доступно более 4 000 голосов: от известных личностей до киногероев. С русскоязычными голосами пока всё печально — связная речь вряд ли получится. Качество генерации англоязычного текста обычно очень высокое, но многое зависит от конкретного голоса.

Тем, кто хочет большего, можно приобрести PRO-версию. В неё входят доступ к API, возможность сохранять неограниченное количество аудиодорожек и генерация рэпа. Также за отдельную плату доступна функция клонирования: можно использовать собственный голос для озвучки текста, предоставив модели около 20 минут записи своей речи.

6. Удалить лишние объекты с фото — Cleanup.pictures



Как работает: бесплатно, но с ограничениями.

Если вы хотя бы раз в жизни делали фото на пляже или в оживлённом туристическом месте, то понимаете, что посторонние люди могут легко испортить кадр. Для этой и других ситуаций, когда с фото нужно убрать человека, дефект, текст или лишний объект, можно использовать сервис Cleanup.pictures.

Загрузите фото на сайт, выделите кисточкой ненужные детали и подождите несколько секунд. В итоге вы получите отредактированное изображение, которое можно скачать на компьютер. В отличие от основного конкурента — программы Adobe Photoshop — Cleanup.pictures отлично работает даже на слабых компьютерах.

В бесплатной версии сервиса можно редактировать неограниченное количество изображений, но их разрешение не будет превышать 720 пикселей.

7. Сделать логотип — Looka



Как работает: бесплатно, но скачать результаты можно только в составе платного бренд-кита.

Чтобы использовать сервис Looka, нужно указать название вашей компании, сферу, в которой она работает, выбрать из списка предложенных цветов, логотипов и символов те, которые вам нравятся, а также добавить слоган.

Нейросеть предложит несколько десятков вариантов лого на выбор. Их также можно кастомизировать (изменить шрифт, цвета, элементы) по вашему желанию.

Несмотря на то что результаты работы сервиса Looka можно скачать только после оплаты, мы решили добавить его в наш список. И вот почему: готовые логотипы отлично подойдут в качестве референсов, которые можно доработать на своё усмотрение.

8. Убрать посторонние звуки с аудиозаписи — Audo Studio



Как работает: бесплатно, но есть ограничения.

Нейросеть Audo Studio удаляет посторонние шумы на аудиозаписях с голосом, что особенно полезно для подкастеров, блогеров, музыкантов и других людей, которые работают со звуком.

Искусственный интеллект был обучен на записях различных шумов, поэтому хорошо очищает аудиодорожки от лая собак, звука полицейских сирен или работающей дрели. Помимо этого, Audo Studio в целом улучшает качество записей, например, выравнивая звук и убирая длинные паузы в речи.

Бесплатная версия нейросети позволяет обработать до 20 минут аудиозаписей. Чтобы пользоваться ей без ограничений, придётся каждый месяц оплачивать подписку.

Это лишь некоторые нейросети и сервисы на их основе, которые не мелькают каждый день в новостях. Если вы хотите посмотреть на другие полезные разработки, можно воспользоваться каталогом «Библиотека AI 2023». В нём собрано более 800 нейросетей, которые разбиты на категории для удобства пользователей."'https://tproger.ru/articles/podborka-nejrosetej-8-servisov-dlya-raboty-i-tvorchestva/'https://media.tproger.ru/uploads/2023/03/tproger_MTC_03.03-1.png'"['https://media.tproger.ru/uploads/2023/03/64cd0e3d-64dc-4b2f-a920-11e7729b86f7.png', 'https://media.tproger.ru/uploads/2023/03/f1b9f499-c655-4cec-a342-4effef9d3683.png', 'https://media.tproger.ru/uploads/2023/03/f564f9f9-5c44-4c9e-abe4-a8470d55ecf4.png', 'https://media.tproger.ru/uploads/2023/03/f07365b5-34d4-4e7a-b1ec-b8e97618c33f.png', 'https://avatars.githubusercontent.com/u/38440668?v=4', 'https://media.tproger.ru/uploads/2022/01/mts.png', 'https://media.tproger.ru/uploads/2023/03/b263ccf5-b0b3-40eb-8eab-795cca09f1d5.png', 'https://media.tproger.ru/uploads/2023/03/e011d108-958a-4ce5-96e2-d597b03e45ff.png', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2023/03/834d0b1c-6228-48d4-b0fc-bb52deb3faaf.png', 'https://media.tproger.ru/uploads/2023/03/tproger_MTC_03.03-1.png', 'https://media.tproger.ru/uploads/2023/03/65adafd8-1203-4b18-bd3b-fec92102ce0c.png']"
43'1Z6Q5MPFA'Что вы делали на этой неделе? Пост хвастовства за 27 февраля — 3 марта'"Что вы делали на этой неделе? Пост хвастовства за 27 февраля — 3 марта

Предлагаем делиться в комментариях под этой записью, над чем вы работали на этой неделе, ведь нет ничего интереснее, чем задачи коллег! Вот, чем вы занимались на прошлой неделе.

Не важно, разработчик вы или тестировщик, деврел или эйчар. Расскажите, какие задачи вы героически решили, и делитесь успехами.

Кидайте всё, чем хочется похвастаться: текст, скриншоты кода и даже ссылочки на видео.

Не забывайте про NDA: не указывайте названия компании или деликатные частности.

Итак, чем вы похвастаетесь на этой неделе?

Внимание Это — зона взаимного уважения, понимания и нулевого токсика. Похвала и помощь горячо приветствуются. 🙂"'https://tproger.ru/articles/chto-vy-delali-na-jetoj-nedele-post-hvastovstva-za-27-fevralja-3-marta/'https://media.tproger.ru/uploads/2023/03/5504795_arm_exercise_fitness_muscle_power_icon-cover.png'"['https://media.tproger.ru/uploads/2022/01/mts-90x90.png', 'https://media.tproger.ru/uploads/2020/08/iconfinder_17_1280977-cover-3.png', 'https://media.tproger.ru/uploads/2023/03/5504795_arm_exercise_fitness_muscle_power_icon-cover.png', 'https://media.tproger.ru/uploads/2022/01/mts-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2021/05/iconfinder-icon-cover-2.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://media.tproger.ru/uploads/2023/03/5504795_arm_exercise_fitness_muscle_power_icon-cover-icon-original.png', 'https://media.tproger.ru/uploads/2020/07/iconfinder-icon-48-cover.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big-32x32.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""480px"" viewBox=""0 0 480 480""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2020/03/hent-AI-changed.jpg']"
44'V69BHBCOT'Как специалистам в сфере аналитики и ML найти работу в IT за рубежом'"Сегодня многие представители российской IT-индустрии переехали в другие страны или задумываются о переезде. Однако у релокации и работы в зарубежных IT-компаниях есть свои особенности, о которых полезно знать заранее. В статье я расскажу о конкуренции на западном рынке IT, об особенностях трудоустройства и подхода к работе в заграничном офисе международной IT-компании и о возможностях карьерного роста.

Даниил Корбут ML-engineer в Amazon London и преподаватель программ «Машинное обучение» и «Deep Learning» в Нетологии

Коротко обо мне

Мой суммарный опыт работы составляет 6 лет, половина из которых приходится на международные компании с офисами за рубежом. Сейчас я живу в Лондоне и работаю ML-инженером в Amazon Alexa Shopping — онлайн шопинг-ассистенте. До этого был ML-инженером в сервисе по доставке продуктов и готовой еды Deliveroo, где оптимизировал систему предсказания готовности заказов.

Карьерный путь начинал в России: еще в бакалавриате МФТИ начал работать Data Scientist в стартапе Statsbot, а затем перешел в команду диалоговых сценариев Яндекс Алисы. Также работал research-инженером в биотех-стартапе Insilico Medicine и полгода удаленно на проекте для офиса Bing Microsoft в Редмонд, штат Вашингтон.

Конкуренция на зарубежном IT-рынке

Сегодня европейская и американская экономики находятся в рецессии. Это влияет и на найм — поиск новых сотрудников компании приостанавливают или полностью замораживают. Вместе с этим происходит и пересмотр состава текущих команд. Так в январе-феврале 2023 года в Google сократили 12 тысяч сотрудников, Microsoft — 10 тысяч, Amazon — 18 тысяч человек. Суммарно за последние полгода компании Big Tech сократили более 100 тысяч сотрудников.

Однако не могу сказать, что в сфере аналитики данных и ML заметна остановка профессионального роста и развития. Конечно, экономика затормозила некоторые процессы, но появляются и новые технологии, которые меняют рынок и создают новые рабочие места. Например, многие Big Tech компании сейчас интегрируют ChatGPT в свои продукты. Кроме того, уже сейчас по акциям видно, что компании начинают возвращаться к изначальным позициям. Поэтому, скорее всего, в течение полугода ситуация стабилизируется.

Вне зависимости от того, собираетесь вы переезжать в спокойные или турбулентные времена, важно обращать внимание на два фактора, которые будут сильно влиять на уровень конкуренции по вакансиям:

Локация: в IT-хабах и популярных местах для релокации — Лондоне, Шанхае, Тель-Авиве, Берлине — возможностей больше, но и найти работу в разы сложнее, чем в других городах мира из-за большей конкуренции.

Готовность компании помочь с оформлением рабочей визы. Далеко не все фирмы готовы работать с иностранцами — за каждого сотрудника-иностранца организация должна платить ежегодно дополнительный налог. Это могут позволить себе далеко не все, поэтому там, где выстроен процесс найма и работы с иностранцами, конкуренция выше. Как правило, это Big Tech компании — Alphabet (Google), Amazon, Apple, Meta (признана в России экстремистской организацией) и Microsoft.

Переезд в новое место оказывает большое влияние на ваше восприятие мира и повседневные привычки. Поэтому вакансии за границей всегда лучше рассматривать вместе с локацией: насколько вам будет комфортно жить в конкретном городе или стране, есть ли там русскоязычное сообщество и возможности для досуга, каков уровень цен, какие есть особенности работы для иностранцев.

Каким должно быть резюме

Во многих компаниях западных стран сейчас есть тенденция отклонять резюме, содержащее возраст, пол, фото и любую информацию, которая может вызвать предвзятое отношение. Поэтому резюме лучше составить без этих деталей.

Само описание вашего опыта лучше построить не в процессном, а в результатном формате — это больше ценится на европейском и американском рынке. Например, вместо:

❌ работал с Google Analytics, владею Python и SQL, умею проводить A/B-тесты,

лучше написать:

✔️ в рамках экспериментов и анализа выявил(а), что пользователям X более свойственно Y, и внедрение этих изменений помогло улучшить метрики на Z%.

Конечно, далеко не всегда можно составить всё резюме именно по результатам, но даже часть текста в таком формате позволит выделиться среди других кандидатов. Также надо быть готовым, что на первых скринингах вам зададут уточняющие вопросы о результатах проектов, в которых вы принимали участие, а также о вашей мотивации к работе в данной компании.

Как искать работу

Как и в России, самый верный способ подачи резюме в зарубежные офисы европейских и американских компаний — через систему рекомендаций, когда твою заявку на вакансию отправляет человек, работающий в организации. HR рассматривают такие резюме в приоритетном порядке, поскольку они могут сразу попросить обратную связь о кандидате от действующего сотрудника.

Если возможности отправить резюме по рекомендации нет, можно найти рекрутера конкретной компании в LinkedIn или Indeed и написать ему письмо, которое должно содержать:

небольшой рассказ о вашем опыте работы,

ссылку на вакансию, которая вас заинтересовала,

почему вас заинтересовала эта вакансия, и как ваш опыт с ней соотносится.

Таких кандидатов обычно рассматривают более охотно, чем тех, кто отправил заявку через сайт: они проявили проактивность и установили личный контакт с рекрутером, облегчили ему работу и выделили себя среди остальных кандидатов.

Если говорить о небольших компаниях, то вероятность успешной подачи заявки через сайт компании или рекрутинговые сайты, в разы выше, чем для крупных компаний.

Процесс интервью, или как скоро ожидать оффер

Подготовка к собеседованиям в зарубежные компании с точки зрения hard-навыков — стиля написания кода, технической части — мало отличается от подготовки к собеседованиям в российские Яндекс, VK или Сбер. Как правило, чем крупнее зарубежная компания, тем в большей степени при найме в нее обращают внимание на опыт и владение кандидатом концепций и подходов, нежели на знание определенных инструментов или языков программирования. Важна универсальность и широта знаний: в Big Tech большинство технологий внутренние, поэтому их придется осваивать с нуля. Но знание сторонних технологий и концепций поможет ускорить этот процесс. Помимо этого, чаще всего обращают внимание на область, в которой работал кандидат: аналитика, Computer Vision, NLP-программирование и другие. Конечно, самым популярным языком для ML и аналитики является Python. Но компании могут писать бекэнд своих сервисов на чём угодно, и предугадать заранее, какой это будет язык, невозможно. Также важным является знание статистики и алгоритмов машинного обучения.

Если говорить о подходе к найму в России и за рубежом, то он заметно отличается: у нас в стране часто стоит задача быстрее нанять сотрудника и начать работу, а европейские и американские компании нанимают медленно — им важно посмотреть максимальное количество кандидатов и отсеять неподходящих на каждом этапе. Так в Amazon у меня было сначала 30-минутное интервью с HR о моей мотивации, целях и пожеланиях к работе. Затем проходил технический скрининг. Только после этого меня допустили до полного цикла интервью, состоящего из пяти этапов: три интервью на кодинг, одно — на знание ML-систем и еще одно по “system design”, задача которого состоит в том, чтобы понять, насколько кандидат действительно знает, как работает IT: из чего состоят архитектура, компоненты и интерфейсы технологичных проектов, предлагают решить кейсы.

Поэтому стоит запастись терпением — между отправлением резюме и получением предложения о работе в зарубежные офисы может пройти до полугода на менеджерских позициях и до года для руководящих. В то время как, собеседуясь в России, я обычно понимал, что если интервью со мной прошли успешно, то довольно скоро можно ожидать оффера, ведь компания не будет рассматривать дополнительных кандидатов, чтобы убедиться в том, что на рынке нет кого-то более подходящего.

Конечно, в европейских и американских IT-компаниях бывают ситуации, когда во время прохождения собеседований человек получает оффер от другой компании. В таком случае ему могут организовать более быстрый процесс интервью.

Подход к работе в России и за рубежом в IT: в чем разница

За время работы в российских и зарубежных IT-компаниях я заметил несколько ключевых отличий в подходах к работе:

Больше встречи и синхронизации между командами

За рубежом уделяется большое внимание soft-навыкам: как ты умеешь находить общий язык с разными людьми, вести переговоры, аргументировать свою точку зрения. Здесь намного больше созвонов и встреч между командами, менеджерами. Например, когда я работал в России, на встречи у меня уходило до часа в день. Сейчас на позиции ML-инженера в Amazon у меня стабильно уходит 2,5-3 часа в день на созвоны. У менеджеров встречи занимают еще больше времени в рабочем графике.

Длительный процесс планирования разработки и фиксация в документах

Работая в российских компаниях, я почти не писал никаких дизайн-документов. После планирования системы мы с коллегами фотографировали получившееся на телефон или перерисовывали на бумагу и сразу уходили писать код.

В зарубежных компаниях процесс планирования более долгий: нужно сначала составить дизайн-документ, получить по нему обратную связь от всей команды и согласовать с менеджерами. А иногда и с другими командами, чтобы убедиться, что наши изменения не затронут их продукты. Только после этого можно приступать к разработке.

Поначалу этот процесс кажется нудным и бюрократизированным. Но в компании, где множество продуктов взаимосвязаны, нужно много ресурсов для поддержания стабильной работы системы. Например, когда я начинал работать в Яндекс.Алисе, у нас было порядка ста человек во всем продукте. В Amazon только над одной Alexа трудится порядка 6 тысяч человек — это как треть всего Яндекса. В долгосрочной перспективе такой подход тоже приносит свои плоды: работа делается более осознанно. Конечно, бывают ситуации, когда люди меньше тратят времени на планирование и документацию, и пишут код, как мы в России. Например, когда появляются срочные баги или горящие дедлайны.

Более широкая роль у технических специалистов и аналитиков

В зарубежных IT-компаниях важно не просто уметь писать код, а видеть направления, в которых должен развиваться продукт, понимать, что принесет прибыль, и какую метрику лучше оптимизировать именно сейчас. Каждый разработчик является немного продактом.

Обоснование цифрами и целями

Все команды ставят в приоритет свои цели и сильно загружены, но в то же время часть задач невозможно сделать самостоятельно только своей командой, без проработки совместно с другими отделами. Поэтому здесь максимально важны навыки ведения переговоров — необходимо убедить людей выделить свое время на твою задачу: обосновать, зачем она нужна, чем полезна, и как она поможет другой команде достичь её целей. В России бывает такое, что какие-то задачи другие команды берут в работу по договоренности, здесь же всегда нужны четкие данные по метрикам или прибыльности задачи или проекта.

Как происходит карьерный рост

Оценка эффективности работы в международных IT-компаниях далеко не всегда напрямую связана с техническими достижениями. Например, на уровнях Middle и Senior больше оценивают, какой вклад человек вносит: насколько его работа принесла или потенциально принесет прибыль или рост бизнесу.

Здесь в целом есть четкое разграничение между уровнями Junior, Middle и Senior и минимальный срок, в рамках которого ты находишься в пределах одного грейда. Например, в Amazon первые три года работы после выпуска из университета человек не может подняться выше позиции Junior, от 3 до 7 лет работы — выше уровня Middle. Конечно, всегда есть место исключениям, но зачастую опыт работы прописан в минимальных требованиях на позицию. Да и ревью проходят только раз в год, поэтому быстрый карьерный рост практически невозможен. В России карьерный рост происходит иначе: если человек очень талантливый, он может за 2-3 года вырасти до позиции Senior.

Также и отличается подход к работе: нужно самому ставить себе задачи, обосновывать их важность и в целом проявлять проактивность. Никто не будет приходить и говорить, что тебе делать.

Помимо этого надо быть готовым к тому, что переход в зарубежный офис международной компании будет с понижением грейда — там не понимают, как сопоставить российский опыт работы с опытом в Европе или США. К примеру, при устройстве на работу лондонский Deliveroo у меня было уже 4 года опыта работы в России, однако меня рассматривали на позицию между Junior и Middle. Не могу сказать, что люди за границей более опытные, чем русские разработчики и аналитики, просто нужно быть готовым к тому, что к твоему опыту на этапе резюме относятся немного настороженно.

О возможности работать удаленно

Осенью 2022 года не только российские, но и зарубежные IT-компании как крупные, так и небольшие, начали возвращать сотрудников в офисы. В среднем сейчас есть рекомендация работать 2-3 дня в неделю из офиса. Для иностранных сотрудников есть возможность частичной удаленной работы — когда ты можешь пару месяцев в году поработать из своей страны. Все зависит от визовых условий между государствами. Например, соглашение по рабочей визе между Великобританией и Россией не предполагает возможности работать несколько месяцев из России, а визовое соглашение Великобритании и ЕС при наличии паспорта ЕС у работника дает такую возможность. Более того, у многих международных IT-компаний есть список стран, из которых сотруднику категорически нельзя работать — открыв ноутбук там, он автоматически заблокируется.

Вариант полной удаленки постепенно становится реалистичен только если вы работаете в маленькой компании или стартапе, которые не хотят тратить средства на аренду офиса.

О предвзятом отношении к иностранцам

У компаний Big Tech нет предпочтений к людям определенных национальностей. Наоборот, стоит задача собрать многогранную команду: с людьми разного пола, возраста, опыта, национальностей, культур и менталитета. В долгосрочной перспективе это работает на компанию, поскольку команда не мыслит шаблонно и одинаково — каждый человек в силу своего опыта имеет свое видение продукта и взгляд на решение проблемы.

Требования к образованию и знанию языка

На позицию в сфере аналитики или машинного обучения сложно устроиться в зарубежный офис международной IT-компании сразу после окончания российского университета. Лучше, чтобы у вас уже было 1-2 года опыта работы в IT после вуза. Дело в том, что в России совмещение постоянной работы и учебы студентом является нормой и даже преимуществом на рынке труда. Однако многие зарубежные компании не понимают, как работать полный день и учиться в бакалавриате или магистратуре — такой практики почти нет. Например, студенческая виза Великобритании практически не позволяет работать во время обучения.

Поэтому, если у вас есть планы о релокации, и вы закончили российский университет или курсы дополнительного образования и только собираетесь начать работу в сфере, то лучше выбирать большие, известные на рынке IT-компании в России, где вы проработаете год или два. Это не только увеличит шансы, что иностранные рекрутеры в будущем будут более охотно рассматривать ваше резюме, поскольку знают эти компании, но и даст вам больше опыта в начале карьеры. Вы будете лучше понимать, как организованы внутренние процессы, как правильно расставлять приоритеты в работе, как ревьюить код, писать тесты.

Если вы сейчас учитесь в зарубежном вузе, посмотрите программы стажировок в Big Tech для студентов университетов. По итогу таких стажировок часто можно получить полноценный оффер. Также есть специальные вакансии для недавних выпускников (“New Grad”). Big Tech-компании, где работает много русских, уже знают, что из себя представляет образование МГУ, «Бауманки» или МФТИ.

Также стоит посмотреть зарубежные вакансии на предмет требований к ученой степени. Например, на Research Scientist почти всегда требуется PhD, на Research Engineer очень часто просят магистерскую степень. Для исследовательских позиций помимо магистратуры или PhD часто необходимы публикации статей. А для позиций аналитика, ML-инженера будет достаточно бакалавриата. Однако при наличии кандидата в области анализа данных с опытом работы 5-6 лет в крупной IT-компании, Big Tech будут более важны его кейсы, опыт и знания, нежели профильное высшее образования и ученая степень.

Если говорить о знании английского, то как правило, никто не просит на этапе подачи резюме или собеседований показать сертификат IELTS. Считается, что если человек хорошо проходит интервью, то и уровень знаний у него высокий. Однако для получения визы обязательно нужно иметь сертификат. Если вы успешно проходите интервью и понимаете людей с разными акцентами, владеете языком на уровне B1 и выше, скорее всего, вы успешно сдадите экзамен и без длительной подготовки.

Резюмируем"'https://tproger.ru/articles/kak-specialistam-v-sfere-analitiki-i-ml-najti-rabotu-v-it-za-rubezhom/'https://media.tproger.ru/uploads/2023/03/5686463_application_cv_job_resume_icon1-cover.png'"['https://media.tproger.ru/uploads/2022/01/mts-90x90.png', 'https://media.tproger.ru/uploads/2020/08/iconfinder_17_1280977-cover-3.png', 'https://media.tproger.ru/uploads/2022/01/mts-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2021/05/iconfinder-icon-cover-2.png', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""90px"" viewBox=""0 0 90 90""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2023/03/5686463_application_cv_job_resume_icon1-cover.png', 'https://lh3.googleusercontent.com/a/AEdFTp50gv326z_1BBk_3Pgt4zXAyh8MSdycOeVlD9gn=s96-c', 'https://media.tproger.ru/uploads/2020/08/iconfinder_356_-Roadmap-_interaction_communication_essential_1451052-cover.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2021/11/OTR-32x32.png', 'https://media.tproger.ru/uploads/2023/03/5686463_application_cv_job_resume_icon1-cover-icon-original.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://sun9-7.userapi.com/c880/u29862656/d_4a6db76f.jpg', 'https://sun1-19.userapi.com/s/v1/ig2/C4jmxAQMzXlBpYLS2Lj2Hl5hmxUT7QuQmOtuthEcbfsSiQAyy8g8TyjY9fvD3boVvNmaEMoS9MR7T28Y3csDyZpn.jpg?size=400x400&quality=96&crop=0,0,1957,1957&ava=1', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2021/03/iconfinder_Neural_network_2844558-cover.png']"
45'DZUQJMKUJ'Оператор LIKE в SQL: примеры и синтаксис'"LIKE SQL — это оператор, который используется для поиска строк, содержащих определённый шаблон символов. Подробнее о нём читайте в нашей статье.

Синтаксис LIKE SQL

Использовать оператор LIKE в SQL очень просто: достаточно прописать стандартную команду выбора SELECT * FROM и задать условие через WHERE , где и будет использован оператор LIKE.

Шаблон LIKE SQL:

SELECT column1, column2, ... FROM table_name WHERE columnN LIKE pattern;

Существует два подстановочных знака, которые используются в сочетании с оператором LIKE:

% — знак процента представляет собой ноль, один или несколько символов;

— знак процента представляет собой ноль, один или несколько символов; _ — подчёркивание представляет собой один символ.

Примеры использования LIKE SQL

Представим, что вы хотите найти все имена, начинающиеся с буквы J. Для этого достаточно использовать следующий запрос:

SELECT * FROM table_name WHERE name LIKE 'J%';

В данном случае символ % используется для указания любого количества символов после J. Таким образом, запрос найдёт все имена, которые начинаются с буквы J, независимо от того, какие символы следуют за ней.

Ещё один пример — поиск всех адресов электронной почты, содержащих слово gmail. Для этого можно использовать следующий запрос:

SELECT * FROM table_name WHERE email LIKE '%gmail%';

Здесь символы % используются для указания, что слово gmail может быть в любом месте в адресе электронной почты.

Также можно использовать символ _ для указания одного символа. Например, запрос ниже найдет все имена, состоящие из шести символов. Эти имена должны начинаться с буквы J и заканчиваться буквой n:

SELECT * FROM table_name WHERE name LIKE 'J____n';

Здесь каждый символ _ указывает на любой один символ.

Иногда символы % и _ сами могут быть частью искомой строки. В таких случаях их нужно экранировать. Например, запрос ниже найдет все имена, содержащие символ % :

SELECT * FROM table_name WHERE name LIKE '%\%%';

Также вы можете почитать о других основных командах SQL."'https://tproger.ru/articles/like-sql/'https://media.tproger.ru/uploads/2023/03/1034360_like_hand_tumb_up_icon-cover.png'"['https://media.tproger.ru/uploads/2022/01/mts-90x90.png', 'https://media.tproger.ru/uploads/2023/03/1034360_like_hand_tumb_up_icon-cover-icon-original.png', 'https://media.tproger.ru/uploads/2020/12/sql-commands-mysql-cover-1.png', 'https://media.tproger.ru/uploads/2019/07/iconfinder-icon-19-cover-1.jpg', 'https://media.tproger.ru/uploads/2022/01/mts-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2020/12/css-flexbox-animation-cover-1.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big-32x32.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2021/01/Python_regexp-cover.png', 'https://media.tproger.ru/uploads/2023/03/1034360_like_hand_tumb_up_icon-cover.png']"
46'Q5P94BDZS'Промт-инженер — IT-профессия будущего'"Новомодные диалоговые вербальные интерфейсы быстро набирают популярность. Но они пока всё ещё часто ошибаются и выдают не тот код, изображение или текстовый ответ, который хотелось бы получить.

Пока мы смеёмся над промашками нейросетей и спорим о том, заменят ли они разработчиков/дизайнеров/уборщиков, на рынке IT-специалистов появляется новая дисциплина: prompt engineering.

Что такое «промты»

Если алгоритмы выдаёт не совсем ожидаемый результат, пользователям становится интересно, что такого дать алгоритму на вход, чтобы результат получился лучше.

Вот они и экспериментируют с «промтами», формулируют запрос иначе, подбирают подсказки, которые помогают алгоритмам выдавать сгенерированный код/изображение/тескт куда лучше.

Например, мы рассказывали, как пользователи специально подбирали запросы для того, чтобы новый помощник Bing на основе ChatGPT начал отвечать грубо и даже впал в депрессию.

А здесь энтузиасты объявили целый конкурс, в котором нужно сгенерировать изображение с Карлсоном — нейросеть просто не знала этого персонажа.

Пропеллер то и дело оказывался частью самолёта на заднем плане. Иногда удавалось сгенерировать мужчину с крыльями феи на спине, но никак не Карлсона.

Появились даже сборники удачных промтов, используя которые можно улучшать выдачу нейросети. Например, AIcyclopedia.

Кто такой промт-инженер

При работе с алгоритмами важно не только уметь правильно формулировать свои «хотелки». Алгоритмам тоже нужно учиться понимать «хотелки» неправильные. Обе эти задачи — работа для будущих промт-инженеров.

Получается, это такой специалист, который выясняет потребности заказчика и пытается верно передать их разработчикам, только в мире нейросетей.

Где искать работу промт-инженерам

Пока эту специальность можно представить только в общих чертах. Но крупные IT-компании уже дают сигналы, что профессия промт-инженера скоро будет востребованной.

Microsoft, например, уже вовсю инвестируют в «new software engineering discipline: prompt engineering (prompt engineering is the practice of using prompts to get the output you want)».

И сейчас компания разрабатывает инструмент, который помогает пользователям создавать подсказки для больших языковых моделей — Microsoft Prompt Engine.

Если интересно узнать подробнее, на Infoworld вышел большой материал, который объясняет, как компания к этому пришла, в чём суть инструмента и что планируют делать дальше с новой дисциплиной.

Кстати, инструмент опенсорсный и его можно посмотреть на гитхабе:"'https://tproger.ru/articles/promt-inzhener-it-professiya-budushhego/'https://media.tproger.ru/uploads/2023/03/3838353_ai_artificial_customer_intelligence_robot_icon-cover.png'"['https://media.tproger.ru/uploads/2022/12/4271720_anime_automaton_cartoons_gundam_gundam-0080_icon-cover.png', 'https://media.tproger.ru/uploads/2022/01/mts-90x90.png', 'https://media.tproger.ru/uploads/2023/03/3838353_ai_artificial_customer_intelligence_robot_icon-cover-icon-original.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2022/01/mts-32x32.png', 'https://media.tproger.ru/uploads/2016/01/NW_RD.jpg', 'https://media.tproger.ru/uploads/2023/03/3838353_ai_artificial_customer_intelligence_robot_icon-cover.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://media.tproger.ru/uploads/2023/03/8f9fb789-2e5d-4170-af61-a8b0676b7b8b.jpg', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2023/03/eca625d7-ff7a-4532-ac34-5f9815598e7f.jpg', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2023/03/7615f16a-453a-40c3-a5f0-4b1a0837f049.jpg', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://avatars.githubusercontent.com/u/38440668?v=4', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2021/03/nn-icon-cover.png', 'https://media.tproger.ru/uploads/2021/03/iconfinder_Neural_network_2844558-cover.png']"
47'8KB79JYKC'Менеджмент зависимостей в Javascript — управляем хаосом'"Никита Балихин Главный инженер разработки

Для многих разработчиков процесс установки зависимостей представляет собой магию, которая происходит при выполнении npm install . Имеющим у себя в проекте большое количество зависимостей — и тем, кто разрабатывает эти самые зависимости, публикуя в виде NPM-пакетов, — будет полезно разобраться в принципах работы этой магии, чтобы сделать установку более эффективной и не создавать проблемы коллегам.

Внешние зависимости в том или ином виде существовали в JavaScript практически с самого появления, и инструменты, управляющие ими, постепенно развивались. Чтобы разобраться, зачем они существуют и как именно решают задачи разработчиков, предлагаю проследить историю их развития с самого начала

Как мы делали раньше

До появления Node.js и NPM подключение библиотек к сайту осуществлялось с помощью тега script прямо в HTML:

<script src=<URL-библиотеки>""></script>

Чтобы это работало, нужно, чтобы по адресу <URL-библиотеки> был размещён .js файл. Сделать это можно было двумя способами:

Воспользоваться CDN, на котором уже размещён код библиотеки: <script src=""https://ajax.googleapis.com/ajax/libs/jquery/3.6.1/jquery.min.js""></script> .

В этом случае у нас не было контроля над тем, что на самом деле получал пользователь, мы делегируем всю работу провайдеру CDN и доверяем ему.

В качестве бонуса пользователи получали кросс-доменный кеш и если, например, они уже загрузили jQuery на другом сайте, при открытии нашего сайта они получали её из кеша вместо того, чтобы загружать его с CDN заново, так как URL совпадал. К сожалению, этот механизм более не актуален. Скачать код библиотеки и самостоятельно положить его, например, в директорию vendors : <script src=""vendors/jquery-3.6.1.min.js""></script> .

Так мы получали полный контроль над кодом библиотек и способом его получения пользователями. И, при необходимости, могли производить над ними дополнительные преобразования (например, минифицировать).

Второй способ становился всё более актуальным, но с ростом экосистемы JavaScript росло и количество библиотек, подключаемых к сайту. Скачивать все библиотеки вручную и хранить их в репозитории с кодом становилось накладно, поэтому появился инструмент, именуемый Bower.

Bower

Bower — пакетный менеджер. Его основная задача в автоматизации загрузки различных компонентов приложения со сторонних ресурсов. В репозитории с кодом мы в таком случае храним только информацию о том, что ему нужно скачать, в файле bower.json :

{ ""name"": ""my-app"" ""dependencies"": { ""react"": ""^16.1.0"" } }

(Ничего не напоминает?)

При выполнении команды bower install Bower устанавливает зависимости, указанные в поле dependencies . У Bower есть свой реестр пакетов, из которого он их и скачивает.

Версионирование

В bower.json мы указываем не конкретный URL, по которому он должен загрузить библиотеку, а диапазон версий согласно SemVer. Фактически это — реализация принципа инверсии зависимостей: проект зависит не от конкретного кода, хранящегося на удалённом сервере, а от абстракции в виде диапазона версий. За выбор соответствующей версии и загрузку кода отвечает пакетный менеджер.

SemVer гарантирует, что при выборе любой версии из указанного диапазона проект будет работать.

Как это работает?

Например, мы хотим использовать в своём проекте библиотеку React. Открываем документацию и изучаем API библиотеки, обращая внимание на то, для какой версии библиотеки написана документация (например, 16.1.0 ).

Первый разряд версии означает изменения API, ломающие обратную совместимость (мажорные), второй — обратно совместимые изменения (минорные). Соответственно, минимальная версия, которая нам подойдёт для использования всего API из документации, — 16.1.0 , максимальная, которую мы можем использовать, не опасаясь что проект перестанет работать, — 17.0.0 .

Записать такой диапазон можно в виде >=16.1.0 <17.0.0 . Для более краткой записи существуют модификаторы диапазона версий, с помощью которых мы можем обозначить тот же самый диапазон как ^16.1.0 .

На практике всё не всегда так радужно, и разработчик библиотеки может случайно выпустить ломающие изменения в минорном обновлении. Поэтому нам приходится внимательно следить за историей обновлений и подбирать диапазон так, чтобы не напороться на проблемы. Либо указывать конкретную версию вместо диапазона.

Транзитивные зависимости

Bower позволил формализовать и автоматизировать управление зависимостями во фронтенд-разработке. Это подтолкнуло экосистему JavaScript к закономерному росту и, соответственно, усложнению.

Помимо появления пакетного менеджера, возникали различные модульные системы. Это в совокупности позволило разработчикам библиотек использовать другие библиотеки, тем самым снизив уровень копипасты и, теоретически, объём кода, загружаемого пользователем.

Зависимости зависимостей проекта называются транзитивными.

Разрешение зависимостей

Пакетный менеджер начинает установку с разрешения ( resolution ) зависимостей. На этом этапе он анализирует зависимости в поле dependencies и подбирает версии библиотек, соответствующие указанным в нём диапазонам.

Поскольку у загружаемых библиотек могут быть свои зависимости, разрешение зависимостей производится и для них. В результате процесс становится рекурсивным и представляет собой обход дерева, которое постепенно достраивается.

Зависимости для локальной разработки

Помимо использования библиотек в коде приложения, разработчики пишут автотесты, производят манипуляции с исходным кодом и делают множество других полезных вещей. Чтобы никто не изобретал свой велосипед, для них также используют различные библиотеки.

Но когда мы добавляем библиотеку в свой проект, мы не хотим вместе с исходным кодом загрузить ещё и тонну инструментов (которые, несомненно, полезны самой библиотеке, но нам могут быть не нужн). Поэтому для экономии дискового пространства пользователей библиотек в bower.json появилось поле devDependencies .

devDependencies — зависимости, которые пакетный менеджер установит, только если они являются прямыми зависимостями проекта. Транзитивные devDependencies пакетный менеджер игнорирует.

Плоская модель установки

Bower поддерживает только плоскую модель установки зависимостей, что подразумевает загрузку всех прямых и транзитивных зависимостей в одну директорию. Например, результат установки с Bower будет выглядеть так:

Такая структура допустима. Но с развитием экосистемы JavaScript количество транзитивных зависимостей быстро растёт, а это рано или поздно неизбежно приводит к конфликтам их версий (они могут возникнуть, если зависимости проекта зависят от разных версий одной и той же библиотеки):

Bower устанавливает все зависимости в одну директорию и не может установить несколько версий одного и того же пакета. Поэтому разработчику приходится решать такие конфликты вручную, выбирая версию, которая будет использоваться. Это довольно рискованно в случае с несколькими разными мажорными версиями.

Ручное разрешение конфликтов

Для разрешения подобных конфликтов в bower.json появилось поле resolutions, позволяющее вручную произвести разрешение транзитивной зависимости.

{ ""resolutions"": { ""library-d"": ""2.0.0"" } }

Тем не менее, выбор одной из нескольких мажорных версий зависимости — не самый лучший вариант. Одна из транзитивных зависимостей с высокой долей вероятности может сломаться. Более безопасно установить обе версии, чего Bower не позволяет.

Решение этой проблемы нашлось в смежной области — бэкенд-разработке на Node.js. Для платформы был разработан свой пакетный менеджер — NPM.

NPM

NPM имел nested-модель установки. Она подразумевает, что для каждой зависимости проекта создаётся своя директория node_modules , в которой изолированно хранятся её зависимости. Это позволяет избежать конфликтов версий.

Поскольку NPM изначально предназначался для Node.js, все пакеты в нём имели модульный формат CommonJS, который не поддерживается в браузере. Соответственно, использовать их для фронтенда было невозможно. Но с появлением Browserify (инструмента, собирающего все CommonJS модули в один файл), пост которого впоследствии занял Webpack, проблема была решена, и разработчики постепенно начали переходить с Bower на NPM.

Для безболезненной миграции с Bower в NPM появился флаг --flat , который меняет модель установки на плоскую.

Переход на nested-модель установки был не бесплатным. Директория node_modules представляла собой довольно глубокую иерархию пакетов, которая занимала колоссальное количество места на диске. А также могла приводить к проблемам из-за ограничения максимальной длины путей на Windows.

Для бэкенда это было приемлемо. Но тянуть на сайт так много библиотек, среди которых множество дубликатов, никому не хотелось. Поэтому в NPM 3 появилась новая hoisted-модель установки и механизм дедупликации пакетов.

Hoisted-модель установки представляет собой нечто среднее между плоской и nested-моделями. В ней пакеты по возможности хранятся в верхней директории node_modules , а вложенности возникают только в случае конфликтов версий.

Работа модели обеспечивается механизмом разрешения модулей в Node.js. При поиске пакета, указанного в require , Node.js проходит по всем директориям node_modules снизу вверх, то есть «всплывает» (аналогично всплытию переменных в JavaScript). Поэтому модель и называется hoisted.

Конфигурация NPM

Управлять тем, как NPM производит различные операции — такие как установка и публикация, — можно с помощью флагов командной строки и файла .npmrc .

В отличие от многих других конфигурационных файлов (например, .gitignore или .prettierrc ), .npmrc не ищется рекурсивно. В общем случае NPM ожидает его только в двух местах: непосредственно в директории проекта и в домашней директории текущего пользователя ( ~/ для Linux и Mac OS или %homepath% для Windows). Оба файла будут объединены, при этом значения параметров проекта будут иметь приоритет над пользовательскими.

Чаще всего в .npmrc указывается параметр registry , который отвечает за выбор реестра пакетов. По умолчанию его значение равно https://registry.npmjs.com.

Можно указать отдельный registry для пакетов определённой организации. Предположим, компания, в которой вы работаете, публикует внутренние пакеты в приватном репозитории с префиксом @my-company/ (например, @my-company/awesome-library ). В таком случае содержимое .npmrc будет выглядеть примерно так:

Авторизация в NPM

Чтобы публиковать пакеты или устанавливать их из приватного репозитория, необходимо авторизоваться в NPM. Это можно сделать с помощью команды npm login . Но я предпочитаю вручную указывать пакеты в .npmrc , так как это более явный способ — и это не сильно сложнее.

Авторизация с токеном <MY_TOKEN> для npmjs выглядит в .npmrc следующим образом:

//registry.npmjs.org/:_authToken=<MY_TOKEN>

Обратите внимание, что // в начале строки не обозначает комментарий. Это обычная часть URL, которая следует после протокола. Но в данном случае протокол не имеет значения, так как авторизация для http и https будет одинаковой.

Авторизационные данные для репозиториев лучше хранить в .npmrc, находящемся в домашней директории. Так они будут использоваться для всех проектов на вашей машине, и вы точно случайно не закоммитите их в GIT.

Публикация пакетов

Чтобы сделать свой NPM-пакет доступным для загрузки другими разработчиками, его надо опубликовать в реестре пакетов ( registry ). Глобальным реестром NPM-пакетов является https://registry.npmjs.com.

Существуют и другие зеркала: например, https://registry.yarnpkg.com. Но зачастую они просто проксируют npmjs, который на текущий момент является главным источником истины для JavaScript-пакетов.

Для публикации пакета существует команда npm publish . Она упаковывает всё содержимое в .tgz-архив — это можно сделать отдельно командой npm pack — и отправляет его в реестр пакетов. По умолчанию в архив попадает всё содержимое проекта. Поэтому размер пакета может оказаться неоправданно большим.

Если в package.json определено поле files , NPM упакует в архив только указанные в нём файлы и директории. Также можно указать исключения в файле .npmignore . Это работает аналогично тому, как работает .gitignore .

Предположим, вы собираете свою библиотеку с помощью компилятора Typescript в директорию lib . В этом случае в поле files следует указать [""/lib""] . Далее можно, например, исключить из публикации файлы тестов, добавив в .npmignore строчку *.test.* .

Некоторые критичные для пакета файлы — например, package.json и README.md — будут опубликованы в любом случае. А некоторые файлы и директории — например, .git или node_modules — никогда не попадут в публикуемый архив. Но с последним есть нюанс.

Публикация зависимостей вместе с пакетом

Если какие-то из зависимостей публикуемого пакета указаны в виде пути в файловой системе (например, file:../my-awesome-library , что не является хорошей практикой, но тем не менее случается), их можно опубликовать вместе с пакетом, указав их в поле bundledDependencies файла package.json . В таком случае директория node_modules всё же попадёт в публикуемый архив, но в ней останутся только пакеты, указанные в этом поле.

Когда пользователь установит пакет, у которого есть bundledDependencies , пакетный менеджер возьмёт такие зависимости из архива самого пакета вместо того, чтобы загружать их отдельно.

Основной сценарий использования bundledDependencies в настоящий момент — дать пользователям возможность загружать утилиты одним файлом. И снизить тем самым время загрузки, так как пакетный менеджер вместо нескольких последовательных запросов на сервер делает всего один. Так делает, например, сам NPM.

Необязательные зависимости

В package.json существует поле optionalDependencies . Оно работает аналогично dependencies, но подразумевает, что пакет в целом может работать и без них. Его можно использовать, например, для каких-либо пакетов, которые нужны не всегда.

Так, установка Cypress предполагает загрузку около 500 мегабайт, что может негативно сказаться на времени выполнения CI. Если cypress не используется в некоторых окружениях, можно перенести его в секцию optionalDependencies и выполнять установку с флагом --omit=optional ( --no-optional в более ранних версиях NPM).

Ключевое отличие optionalDependencies от dependencies в том, что если установить указанные в этом поле пакеты невозможно, NPM не завершит процесс с ошибкой. А продолжит установку остальных зависимостей в штатном режиме.

Эта особенность используется авторами NPM-пакетов, содержащих бинарные файлы для разных операционных систем. Например, сборщик esbuild написан на языке Go. При установке его зависимостей пакетный менеджер обратит внимание на поля os (операционная система) и cpu (архитектура процессора) в их package.json и установит только те, что соответствуют текущей ОС.

«Плагины» для пакетов

Когда мы устанавливаем, например, расширение для Chrome, то ожидаем, что оно будет использовать нашу версию Chrome, а не установит какую-то свою. С NPM-пакетами принцип тот же: плагин должен использовать уже установленную в проекте версию хост-пакета.

Обратите внимание, что понятие «плагин» в данном случае довольно широкое и, например, библиотека React-компонентов будет фактически являться плагином для React.

React в приложении должен быть в единственном экземпляре. И если пакетный менеджер установит для библиотеки компонентов собственный React, то помимо засорения node_modules приложение может перестать работать.

При этом плагин может быть совместим только с определёнными версиями хост-пакета, поскольку использует его API. А значит — может перестать работать, если этот API будет удалён.

Реализацией вышеописанного механизма являются peerDependencies .

При разработке плагина стоит указать его хост-пакет в поле peerDependencies в package.json , чтобы подсказать пакетному менеджеру, как поступать в такой ситуации.

{ ""peerDependencies"": { ""react"": "">= 16"" } }

В таком случае мы не объявляем прямую зависимость библиотеки от хост-пакета, а предъявляем требования к пользователю, обязывая установить пакет самостоятельно.

NPM 7 и выше автоматически установит недостающие peerDependencies .

В peerDependencies стоит указывать как можно более широкий диапазон версий, чтобы дать пользователю библиотеки возможность выбора. Если, например, библиотека будет ожидать React ^17.0.0 , а пользователь использует React 18.0.0 , то возникнет конфликт версий зависимостей. Это приведёт к ошибке установки при использовании NPM 7 и выше.

Пользователю эта ошибка может быть непонятна и он весьма вероятно попытается установить зависимости с флагом --force или --legacy-peer-deps , как подсказывает сам текст ошибки. Это заставит NPM работать по старинке (как до NPM 7), но может привести к проблемам с дубликатами.

Переопределение версий

Решить такие проблемы можно по старинке — вручную. Для этого в package.json появилось поле overrides , которое работает подобно полю resolutions из Bower, но поддерживает каскад, как в CSS.

{ ""dependencies"": { ""react"": ""18.2.0"" }, ""devDependencies"": { ""@storybook/react"": ""6.3.13"" }, ""overrides"": { ""@storybook/react"": { ""react"": ""18.2.0"" } } }

Это не единственная для NPM аналогия с СSS, команда npm query поддерживает СSS-селекторы для анализа дерева зависимостей.

Похожее поле есть и в других пакетных менеджерах, но, поскольку для package.json нет никакой общей спецификации, работает и называется оно по-разному. Например, в Yarn есть поле resolutions .

Опциональный хост

Может случиться так, что библиотека достаточно универсальна и способна работать без хост-пакета, но при его наличии станет производить какие-то дополнительные действия. В таком случае мы не хотим заставлять пользователя устанавливать хост-пакет. Но если он его всё-таки установит, нам всё ещё придётся проследить, что его версия будет совместима с нашей библиотекой.

Для решения этой задачи в package.json существует поле peerDependenciesMeta — оно позволяет предоставить пакетному менеджеру дополнительный контекст для установки зависимостей.

На текущий момент в peerDependenciesMeta доступен только параметр optional , который говорит о том, что наличие пакета необязательно.

{ ""peerDependencies"": { ""react"": "">= 16"" }, ""peerDependenciesMeta"": { ""react"": { ""optional"": true } } }

То есть peerDependenciesMeta.optional является аналогом optionalDependencies , но для peerDependencies .

Воспроизводимость

Как мы выяснили ранее, пакетный менеджер начинает установку с разрешения зависимостей. В большинстве случаев зависимости пакетов задаются не фиксированными версиями, а диапазонами версий. Это даёт пакетному менеджеру некоторый простор для манёвра, но лишает нас гарантии, что две выполненные друг за другом установки дадут одинаковый результат. Чем это грозит?

Допустим, мы установили зависимости проекта, реализовали новую фичу, протестировали все возможные сценарии и со спокойной душой отправили код в продакшен. Но на момент установки зависимостей в CI пакетный менеджер обнаружил, что может установить более свежую версию одной из транзитивных зависимостей.

В результате наш идеально выверенный код неожиданно начинает работать иначе. Возможно, риск напороться на неприятности из-за этого и невелик, но ему будет подвержена каждая установка зависимостей проекта.

Проблему решил альтернативный пакетный менеджер — Yarn. По завершении установки он генерирует файл yarn.lock , в котором сохраняется результат процесса разрешения зависимостей. А именно — конкретные версии пакетов, которые подобрал пакетный менеджер. Если такой файл есть в проекте, при запуске установки пакетный менеджер проверит, что package.json и yarn.lock соответствуют друг другу и, полностью пропустив этап разрешения зависимостей, загрузит пакеты по списку.

Такой подход ускоряет установку, ведь сетевых запросов в результате совершается меньше. И, что главное, делает её предсказуемой: две последующие установки точно дадут одинаковый результат, даже на другой машине.

Yarn подтолкнул NPM к развитию, и впоследствии тоже научился генерировать свои npm-shrinkwrap.json и package-lock.json файлы для реализации подобного механизма.

npm ci

Чтобы добиться действительно предсказуемой установки в автоматизированных средах, важно использовать команду npm ci вместо npm install .

Команда npm ci расшифровывается как clean install, поскольку при её выполнении NPM полностью удаляет директорию node_modules и загружает все зависимости с чистого листа, что также улучшает воспроизводимость.

Yarn

Помимо вышеописанного механизма фиксации версий зависимостей, Yarn также имеет ряд других преимуществ перед NPM: простота использования, безопасность и скорость.

Давайте рассмотрим подробнее, в чём именно заключаются эти преимущества.

Простота использования

Функциональность NPM расширялась постепенно, новые фичи появлялись и его API разрастался, а кардинально менять его и заставлять разработчиков привыкать к новым командам при переходе на новую версию не хотелось. Создавать удобный DX в таких условиях довольно проблематично. Yarn же создавался с нуля, учитывая опыт использования NPM, поэтому его CLI получился несколько более интуитивным и простым в использовании.

Часто используемые команды стали короче, а команды для CI — читабельнее:

npm install —> yarn install/yarn ;

—> ; npm install --save react —> yarn add react ;

—> ; npm ci —> yarn install --frozen lockfile ;

Безопасность

Помимо фиксированных версий зависимостей, в yarn.lock сохраняется также их контрольная сумма ( Subresource Integrity ) в поле integrity каждого пакета. Она позволяет при установке из локфайла убедиться, что его никто не подменил и инсталлируется то же, что и при генерации локфайла.

Позже эту информацию стал сохранять и NPM.

Скорость

Основная причина быстроты Yarn — кэш. Он позволяет создать на своей машине собственный реестр пакетов и в процессе установки заменять сетевой запрос на копирование папок в файловой системе. Меньше сетевых запросов — меньше времени занимает установка.

При этом кэш можно переиспользовать между всеми проектами, которые вы разрабатываете на своей машине.

Собственный реестр пакетов

Чтобы получить контроль над пакетами, которые используются в проектах, большие компании организуют собственные репозитории пакетов, которые могут проксировать глобальный реестр NPM. Обычно для этого используется Nexus.

Также собственный репозиторий может использоваться в качестве удалённого кэша, чтобы ускорять установку зависимостей — такой кэш будет находиться ближе к разработчикам.

Для этого можно воспользоваться более легковесным и опенсорсным аналогом Nexus — Verdaccio. Его, например, можно запустить в Docker на своей машине, что позволит организовать кэш, переиспользуемый между всеми проектами и доступный для любого пакетного менеджера. Либо установить на сервер, который находится недалеко от вас, чтобы не расходовать ресурсы своей машины.

Для этого необходимо будет указать в .npmrc адрес сервера с Verdaccio.

С Verdaccio можно и локально попрактиковаться в публикации пакетов, если у вас не было опыта.

Связывание пакетов локально

При разработке нескольких пакетов в едином монорепозитории возникает задача связать их между собой — чтобы они могли переиспользовать код друг друга. Публиковать их в NPM при каждом изменении и переустанавливать заново весьма накладно. К тому же их код уже находится рядом, и нужно просто локально подключить один пакет к другому. Это можно сделать несколькими способами:

Импортировать код из библиотеки или вложить библиотеки друг в друга. Пожалуй, это худшее, что можно придумать, поскольку связанность кода будет неконтролируема, и все преимущества разбиения на пакеты сойдут на нет. И проект превратится в один большой монолит.

Указать в package.json одного пакета путь в файловой системе до другого (например, file:../my-library ) вместо версии зависимости. В целом рабочий вариант, но нарушается инверсия зависимостей. Пакет перестаёт зависеть от абстракции и начинает зависеть от конкретного кода. Если его понадобится опубликовать, придётся включать в архив все его подобные зависимости с помощью поля bundledDependencies .

одного пакета путь в файловой системе до другого (например, ) вместо версии зависимости. В целом рабочий вариант, но нарушается инверсия зависимостей. Пакет перестаёт зависеть от абстракции и начинает зависеть от конкретного кода. Если его понадобится опубликовать, придётся включать в архив все его подобные зависимости с помощью поля . Использовать npm link . Можно указать в package.json пакета последнюю опубликованную в NPM версию зависимости и заменить её симлинком на локальную версию командой npm link . Делать это придётся после каждой установки зависимостей, что довольно неудобно.

. Можно указать в пакета последнюю опубликованную в NPM версию зависимости и заменить её симлинком на локальную версию командой . Делать это придётся после каждой установки зависимостей, что довольно неудобно. Использовать Lerna. Lerna фактически была создана для автоматизации выполнения npm-link с целью организации монорепозитория.

Использовать Workspaces . С появлением во всех актуальных пакетных менеджерах механизма Workspaces использование Lerna стало бесполезным, поскольку практически всё то же самое можно получить из коробки, создав в корне монорепозитория package.json с полем workspaces :

{ ""workspaces"": [ ""my-app"", ""my-library"" ] }

Фантомные зависимости

Как мы выяснили ранее, механизм всплытия пакетов в node_modules помогает избежать дублирования пакетов. Такие зависимости также становятся доступными в нашем пакете, из-за чего мы можем столкнуться с довольно непредсказуемыми проблемами.

Например, мы используем библиотеку library-a версии 1.0.0 , которая, в свою очередь, зависит от библиотеки library-b . Поскольку library-b всплывает на верхний уровень node_modules , мы сможем импортировать её в проект.

Может случиться так, что в следующей патч-версии library-a больше не будет зависеть от library-b . Это вполне валидная ситуация, поскольку внешний API библиотеки не изменился.

В таком случае library-b не установится, и мы больше не сможем использовать её в своём проекте. Но весьма вероятно мы узнаем это только перед продакшн сборкой в CI, поскольку производим чистую установку с npm ci там.

Использование транзитивной зависимости без явного указания её в package.json называется фантомной зависимостью.

Простое решение этой проблемы заключается в валидации импортов в проекте с помощью ESLint-плагина. Но давайте всё-таки копнём чуть глубже и попытаемся разобраться с первопричиной этой проблемы.

Структура зависимостей

Многие называют структуру зависимостей деревом, что не совсем верно с концептуальной точки зрения. Зависимости представляют собой ориентированный ациклический граф, а дерево является частным случаем этой структуры данных.

Самое важное отличие графа от дерева заключается в возможности возникновения ромбовидных зависимостей.

Файловая система же представляет собой именно дерево и не может иметь ромбовидных зависимостей. Поэтому пакетному менеджеру приходится делать некоторые преобразования, чтобы записать пакеты на диск в node_modules .

Nested-модель установки наиболее близка к исходной структуре данных, но фактически она предлагает дублировать узлы графа, в которых возникли ромбовидные зависимости, что приводит к огромному количеству дубликатов.

На самом деле, в файловых системах есть более эффективный инструмент для решения этой задачи — симлинки, которые позволяют создать ссылку на файл или директорию, вместо дублирования содержимого.

На основе этой идеи был разработан новый пакетный менеджер — PNPM.

PNPM

PNPM, в отличие от NPM и Yarn, не пытается сделать структуру node_modules как можно более плоской. Вместо этого он скорее нормализует граф зависимостей.

После установки PNPM создаёт в node_modules директорию .pnpm , которая концептуально представляет собой хранилище ключ-значений, в котором ключом является название пакета и его версия, а значением — содержимое этой версии пакета. Такая структура данных исключает возможность возникновения дубликатов.

Структура самой директории node_modules будет подобна nested-модели из NPM, но вместо физических файлов ней будут находиться симлинки, которые ведут в то самое хранилище пакетов.

В node_modules каждого пакета будут находиться только симлинки на те пакеты, которые указаны у него в package.json . Это полностью избавляет нас от проблемы фантомных зависимостей, и потребность в наличии ESLint-плагина отпадает.

В версии NPM 9 появился флаг install strategy . Значение linked в нём включает подобную PNPM модель установки с симликами, но на текущий момент, это экспериментальная фича.

Глобальное хранилище пакетов

PNPM может создать директорию .pnpm не только в node_modules проекта, но и глобально. В таком случае node_modules у проектов будут содержать только симлинки, за счёт чего ускоряется установка зависимостей (создание симлинка занимает меньше времени, чем копирование файлов). Это экономт колоссальное количество дискового пространства.

Переопределение зависимостей

Для переопределения зависимостей PNPM тоже имеет свою версию поля overrides . Помимо этого, он предлагает механизм хуков, которые позволяют вмешаться в процесс разрешения зависимостей.

В .pnpmfile.cjs можно написать JavaScript-код, который будет изменять package.json всех пакетов в дереве зависимостей на этапе разрешения. Это позволяет максимально точно исправлять ошибки, возникающие с транзитивными зависимостями.

Простота использования

PNPM имеет API, очень похожий на Yarn, так что можно не привыкать к новым командам в третий раз.

По всем вышеописанным причинам, я предпочитаю использовать PNPM во всех своих проектах.

Разработчики Yarn решили пойти по более революционному пути для решения​​ проблемы фантомных зависимостей, добавив режим Plug’n’Play. В этом режиме Yarn заменяет собой механизм разрешения модулей из Node.js и вместо директории node_modules создаёт файл .pnp.js, в котором сохраняет всю необходимую ему информацию для разрешения зависимостей. Не все пакеты в NPM совместимы с этим режимом, поэтому его внедрение может вызвать некоторые трудности. Но весьма вероятно, что для менеджмента зависимостей в JavaScript это большой шаг в будущее.

Будущее менеджмента зависимостей в JavaScript

По моим наблюдениям, управляющие зависимостями в JavaScript инструменты постепенно идут к полному избавлению от директории node_modules в проекте. И, возможно, к разрешению зависимостей прямо в рантайме благодаря ES-модулям, которые уже поддерживаются всеми современными браузерами, а также в Deno — альтернативе Node.js, в которой в принципе нет пакетного менеджера как такового.

Также довольно большую популярность обрела концепция Module Federation , представленная в Webpack 5, фактически позволяющая выполнять часть работы пакетного менеджера прямо в браузере пользователя в рантайме за счёт старого доброго script . Но это тоже выглядит как промежуточный шаг к полному переходу на ES-модули.

Больше про JavaScript и всё, что с ним связано, можете почитать в канале. И пишите в комментариях, что бы ещё хотели узнать по этой теме!

Реклама АО «ГАЗПРОМБАНК»"'https://tproger.ru/articles/menedzhment-zavisimostej-v-javascript-upravljaem-haosom/'https://media.tproger.ru/uploads/2023/03/4736236_agile_dependencies_development_scrum_software_icon-cover.png'"['data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""601px"" viewBox=""0 0 601 319""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""960px"" viewBox=""0 0 960 690""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""501px"" viewBox=""0 0 501 302""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""633px"" viewBox=""0 0 633 184""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""681px"" viewBox=""0 0 681 201""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/11/gazprombank-logo-tproger-blog.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""552px"" viewBox=""0 0 552 222""%3E%3C/svg%3E', 'https://mc.yandex.ru/watch/27485085', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""562px"" viewBox=""0 0 562 582""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""90px"" viewBox=""0 0 90 90""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1362px"" viewBox=""0 0 1362 596""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""402px"" viewBox=""0 0 402 402""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2023/03/4736236_agile_dependencies_development_scrum_software_icon-cover-icon-original.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""2377px"" viewBox=""0 0 2377 1122""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2023/03/4736236_agile_dependencies_development_scrum_software_icon-cover.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""362px"" viewBox=""0 0 362 322""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""361px"" viewBox=""0 0 361 297""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""421px"" viewBox=""0 0 421 301""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""572px"" viewBox=""0 0 572 492""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""421px"" viewBox=""0 0 421 341""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""352px"" viewBox=""0 0 352 511""%3E%3C/svg%3E', 'https://avatars.githubusercontent.com/u/38440668?v=4', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""621px"" viewBox=""0 0 621 431""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""514px"" viewBox=""0 0 514 441""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""481px"" viewBox=""0 0 481 261""%3E%3C/svg%3E']"
48'Z7I11JBFJ'Winamp станет стриминговым музыкальным сервисом'"Компания анонсировала запуск на сайте проекта.

Разработчики обещают «справедливое вознаграждение артистов: музыканты будут получать до 85% дохода от подписок и смогут сами устанавливать стоимость доступа к своему контенту. А ещё — возможность продавать NFT.

Хотя стриминговые платформы упростили артистам доступ к более широкой аудитории, доходы от них мизерные. Стриминговая революция, которая так много обещала, оставила позади многих артистов. Им не хватает контроля над тем, как их музыка ​продаётся. Александр Сабунджян

основатель и генеральный директор LLama Group

В сентябре 2022 года на Nullsoft выложили финальную версию Winamp 5.9 с номером сборки 9999. Разработчики рассказали, что это кульминация их четырёхлетней работы.

Самой большой и сложной частью был перенос всего проекта с Visual Studio 2008 на Visual Studio 2019 и успешная сборка проекта. 4 года разработки было потрачено на работу с легаси. А новая версия плеера — своего рода реставрированный предмет старины, только в мире программирования.

А в ноябре 2021 года стало известно, что легендарный плеер Winamp готовится к перезапуску.

Предыдущая версия плеера Winamp 5.8 была выложена в открытый доступ разработчиками в октябре 2018 года."'https://tproger.ru/articles/winamp-stanet-strimingovym-muzykal-nym-servisom/'https://media.tproger.ru/uploads/2023/03/694274_electricity_flash_lightening_thunder_icon-cover.png'"['https://media.tproger.ru/uploads/2022/01/mts-90x90.png', 'https://media.tproger.ru/uploads/2017/03/ntr.jpg', 'https://media.tproger.ru/uploads/2023/03/694274_electricity_flash_lightening_thunder_icon-cover-icon-original.png', 'https://media.tproger.ru/uploads/2022/01/mts-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2023/03/b1fef982-e91e-48e3-9358-46e14d6adac8-cover.png', 'https://media.tproger.ru/uploads/2023/03/8ba197b8-84b7-44d3-b2ba-a8aaa3fc33b9-autoconverted.jpeg', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://lh3.googleusercontent.com/a/AEdFTp50gv326z_1BBk_3Pgt4zXAyh8MSdycOeVlD9gn=s96-c', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2021/11/OTR-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://sun9-7.userapi.com/c880/u29862656/d_4a6db76f.jpg', 'https://sun1-19.userapi.com/s/v1/ig2/C4jmxAQMzXlBpYLS2Lj2Hl5hmxUT7QuQmOtuthEcbfsSiQAyy8g8TyjY9fvD3boVvNmaEMoS9MR7T28Y3csDyZpn.jpg?size=400x400&quality=96&crop=0,0,1957,1957&ava=1', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2023/02/532714_code_coding_development_javascript_script_icon-cover.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2023/03/694274_electricity_flash_lightening_thunder_icon-cover.png', 'https://media.tproger.ru/uploads/2016/03/14576377493040.jpg']"
49'8AVA9JJ5M'Дайджест Python #4: версия 3.12 и свой GPT за 60 строк кода'"Собрали дайджест из лучших материалов по Python с 14 по 28 февраля, которые только смогли найти. Дайджест включает статьи и видео на русском и английском языках.

Узнайте, как написать свою GPT-модель всего за 60 строк кода, какие обновления коснулись Python в версии 3.12 и как повлиять на работу коммунальных служб с помощью машинного обучения.

Big Data / Data Science

AI и ML

Веб / Django / Flask

Скрипты, приложения и боты

Развлекательный контент

Нашли что-нибудь полезное и интересное для себя? Расскажите, какие материалы понравились вам больше всего, а каких статей не хватило, чтобы следующий дайджест получился ещё лучше.

Дайджест оказался полезным? Да

Нет

Если дайджест вам понравился, посмотрите предыдущие подборки:

А ещё присылайте в комментарии статьи и видео, которые ускользнули от нашего взгляда и не попали в дайджест. Поделитесь полезными материалами с другими читателями! 😉"'https://tproger.ru/articles/dajdzhest-python-4-versija-3-12-i-svoj-gpt-za-60-strok-koda/'https://media.tproger.ru/uploads/2023/02/5081652_earth-worm_python_snake_worm_icon-cover-4.png'"['https://media.tproger.ru/uploads/2022/01/mts-90x90.png', 'https://media.tproger.ru/uploads/2021/01/python_telegram_bot-cover.png', 'https://media.tproger.ru/uploads/2019/07/iconfinder-icon-19-cover-1.jpg', 'https://media.tproger.ru/uploads/2022/01/mts-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://media.tproger.ru/uploads/2020/12/css-flexbox-animation-cover-1.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2023/02/5081652_earth-worm_python_snake_worm_icon-cover-4.png', 'https://lh3.googleusercontent.com/a/AEdFTp50gv326z_1BBk_3Pgt4zXAyh8MSdycOeVlD9gn=s96-c', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2021/11/OTR-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://sun9-7.userapi.com/c880/u29862656/d_4a6db76f.jpg', 'https://sun1-19.userapi.com/s/v1/ig2/C4jmxAQMzXlBpYLS2Lj2Hl5hmxUT7QuQmOtuthEcbfsSiQAyy8g8TyjY9fvD3boVvNmaEMoS9MR7T28Y3csDyZpn.jpg?size=400x400&quality=96&crop=0,0,1957,1957&ava=1', 'https://media.tproger.ru/uploads/2023/02/5081652_earth-worm_python_snake_worm_icon-cover-icon-3-original.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2021/01/Python_regexp-cover.png']"
