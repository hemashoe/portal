'post_id'title'body'source_link'image'images
0'KJ365F5OS'Что такое Go и как его используют'"Что такое Go и как его используют

Язык программирования Go был создан 10 ноября 2009 года. Его создателями являются Роб Пайк, Роберт Гризмер и Кен Томпсон. Компания Google создала его еще в 2007 году.

Основной целью являлось создание эффективного, быстрого языка программирования, который был бы схож с С, C++ или Java, но имел более простой, понятный синтаксис.

Язык Go объединяет в себе высокую производительность и безопасность С, C++, Java и легкость синтаксиса, характерную Python. Проект представляет собой многопоточный компилируемый язык с открытым исходным кодом.

Неофициальным символом языка Go является голубой суслик, благодаря чему Go-разработчики получили прозвище «гоферы» (с англ. gopher — суслик).

Язык программирования Go занимает 6-е место по популярности среди языков программирования, которые используются на GitHub.

Как используют Go

Go используется как язык для backend-разработки в таких направлениях, как:

Облачные и серверные приложения, веб-сервисы; DevOps и автоматизация процессов; Приложения для работы с командной строкой; Искусственный интеллект и работа с большими данными; Программирование микроконтроллеров и робототехники.

Go больше всего подходит как язык программирования для работы с инфраструктурой. Самые популярные инструменты в этой области написаны именно на Go — Kubernetes, Docker и Prometheus.

За что любят Go

Язык программирования — это не просто связующее звено между продуктом и базой данных. Это сердце продукта. Производительность самого языка имеет немаловажное значение.

Goлюбят за его простоту и быстроту. Например, код для сортировки данных. Если сравнить его с аналогичными реализациями на других языках, этот код будет работать быстрее.

Как известно, Go намного быстрее Python. На нем легко писать высокопроизводительные приложения, он отлично подходит для автоматизации процессов больших масштабов.

Go—разработчики сохраняют простоту — их код легко понять. Работу одного разработчика можно передать другому, и второму будет легко внести правки. Когда программисты имеют возможность с первого взгляда понять работу друг друга, они могут быстрее вносить изменения, следовательно производительность труда повышается.

Язык программирования не перестает обновляться и с каждым разом работает все быстрее. Сегодня это уже самостоятельный язык с упором на веб-разработку.

Например, с помощью такого кода можно создать gif-картинку. Немногие из языков программирования для backend-разработки дают такую возможность.

Недостатки Go

У Go нет единого доминирующего фреймворка. Существует несколько проектов, которые предоставляют фреймворк для Go. Например, Revel, Iris, Echo, Macaron и Buffalo. Однако для многих новых продуктов отсутствие доминирующего фреймворка будет серьезным недостатком.

Также, несмотря на то, что Go создавался как аналог С, он не может заменить его во всех задачах. В связи с этим разработчики С редко переходят на язык Go.

Еще одним недостатком можно считать тот факт, что создание определенных функций на Go занимает намного больше времени по сравнению с Python или Ruby.

Можно ли самостоятельно выучить Go

Сочетание отличной экосистемы, высокой производительности и продуктивной среды программирования делает Go отличным выбором.

IT-специалисты предполагают, что в будущем весь код, требующий высокой производительности, может быть написан на Go. По данным GitHub, Go используется более широко, чем такие языки, как Erlang, Scala и Elixir, но при этом он менее популярен, чем Java и C++.

Это простой и легкий в изучении язык. Он предоставляет только основные, самые необходимые функции.

Любой разработчик, освоивший Python, Elixir, C++, Scala или Java, сможет легко выучить язык программирования Go в течение месяца."'https://tproger.ru/articles/chto-takoe-go-i-kak-ego-ispolzuyut/'https://media.tproger.ru/uploads/2023/04/3574bdd4-3af9-4512-8e61-1a57864a9ad9.jpg'"['https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2022/07/logo-renessans-32x32.jpg', 'https://sun1-88.userapi.com/s/v1/if1/qOFqDZXwHIpfH1jeOEwJQunLigxSepYMSJeOEpkD9BC-RJT9GwAH8u7sL7Tn1fQQLv__eKhl.jpg?size=400x400&quality=96&crop=86,376,525,525&ava=1', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://sun1-23.userapi.com/s/v1/if1/dfadiiuMTRhzB-2BFuSvGVVUYKdYEVr6zo17-AD3lSxI8XW3nMu-ARX3BYqU2e5DcTDDQZSS.jpg?size=400x400&quality=96&crop=96,0,420,420&ava=1', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2021/03/iconfinder_017_treasure_chest_gold_wealth_jewel_money_2090267-cover.png', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'https://media.tproger.ru/uploads/2017/02/lang_sel.jpg', 'https://media.tproger.ru/uploads/2023/04/3574bdd4-3af9-4512-8e61-1a57864a9ad9.jpg', 'https://media.tproger.ru/uploads/2018/07/learningPython.jpg', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2017/08/golang-for-newbies-1.jpg', 'https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg']"
1'ARWEURGPV'Microsoft переделают Print Screen в Windows 11'"За последний год Microsoft блещет осознаниями, которые обычным пользователям казались элементарными, а до разработчиков доходили несколько десятилетий.

Например, в октябре 2022 года стало известно, что Microsoft запускают свой аналог Ccleaner, чтобы подчищать мусор системы. Так вот здесь нововведение явно было очевиднее и напрашивалось гораздо раньше.

Впервые за несколько десятков лет при нажатии Prt Scr Windows начнёт не просто копировать изображение всего экрана в буфер обмена, а будет сама открывать Snipping Tool («Ножницы») для редактирования скриншотов.

Пока фича тестируется в последних бета-сборках Windows 11, но настроить можно уже сейчас.

Для этого идём в Настройки —> Доступность —> Клавиатура и изменяем параметр Print Screen для открытия Snipping Tool. Изменение должно появиться в обновлении KB5025310.

Количество установок Windows 11 после этого обновления взлетит до небес."'https://tproger.ru/articles/microsoft-peredelayut-print-screen-v-windows-11/'https://media.tproger.ru/uploads/2023/04/73c93999-be83-4e2f-be7f-bbc5a87d1929-cover.png'"['https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'https://media.tproger.ru/uploads/2020/10/guessOS-cover-1.png', 'https://media.tproger.ru/uploads/2023/04/9e2f52a8-8f3e-44ad-a3f6-54b7b4905c0e.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2023/04/73c93999-be83-4e2f-be7f-bbc5a87d1929-cover-icon-original.png', 'https://media.tproger.ru/uploads/2022/07/logo-renessans-32x32.jpg', 'https://sun1-88.userapi.com/s/v1/if1/qOFqDZXwHIpfH1jeOEwJQunLigxSepYMSJeOEpkD9BC-RJT9GwAH8u7sL7Tn1fQQLv__eKhl.jpg?size=400x400&quality=96&crop=86,376,525,525&ava=1', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'https://media.tproger.ru/uploads/2017/06/c-sharp-books.jpg', 'https://media.tproger.ru/uploads/2021/03/iconfinder_026_041_interior_window_4_2757228-cover.png', 'https://media.tproger.ru/uploads/2021/03/iconfinder_Filesfolders-02_1588852-cover.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2023/04/73c93999-be83-4e2f-be7f-bbc5a87d1929-cover.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg']"
2'0AM0C4SK8'Илон Маск и Twitter запустили программу монетизации контента для блогеров'"Илон Маск и Twitter запустили программу монетизации контента для блогеров

Генеральный директор Twitter Илон Маск запустил новую программу монетизации контента.

Как сообщается в официальном блоге Twitter, программа получила название Super Follows и представляет собой новый способ заработка для блогеров.

Поможет ли монетизация контента Твиттеру? Да, за деньги многие авторы будут публиковать контент охотнее, чем в том же Инстаграме

Нет, Твиттер активно отменяют, и никакие раздачи денег ему не помогут

Что такое Super Follows

Super Follows — это функция, которая позволит пользователям Twitter оплачивать контент любимых блогеров. Для последних это станет дополнительным источником дохода.

Функция Super Follows позволяет блогерам создавать платные подписки на эксклюзивный контент для своих подписчиков.

Если подписчик хочет получить доступ к эксклюзивному контенту, он должен оплатить подписку. Цена подписки может меняться в зависимости от блогера и контента.

По информации Twitter, платить можно будет кредитной картой, PayPal или Apple Pay.

Кто может использовать Super Follows

Пока Super Follows доступна только для тех пользователей Twitter, у которых больше 10 000 подписчиков и как минимум 25 постов.

Чтобы попасть в список ожидания прямо сейчас, вам необходимо иметь 10К или более подписчиков, быть не моложе 18 лет, написать в Твиттере 25 раз за последние 30 дней, находиться в США. Twitter Blog

Twitter обещает сделать функцию доступной для всех позже, но точные даты не сообщаются."'https://tproger.ru/articles/ilon-mask-i-twitter-zapustili-programmu-monetizacii-kontenta-dlya-blogerov/'https://media.tproger.ru/uploads/2023/04/4831ff93-8d23-43e0-b209-af68b0c83d56-cover.png'"['https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://mc.yandex.ru/watch/27485085', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://sun1-88.userapi.com/s/v1/if1/qOFqDZXwHIpfH1jeOEwJQunLigxSepYMSJeOEpkD9BC-RJT9GwAH8u7sL7Tn1fQQLv__eKhl.jpg?size=400x400&quality=96&crop=86,376,525,525&ava=1', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'https://media.tproger.ru/uploads/2023/04/4831ff93-8d23-43e0-b209-af68b0c83d56-cover.png', 'https://media.tproger.ru/uploads/2023/04/9e781b7a-45e1-4ae5-90ce-06c390eff87d.png', 'https://media.tproger.ru/uploads/2023/04/4831ff93-8d23-43e0-b209-af68b0c83d56-cover-icon-original.png']"
3'3I2QMITEK'Как разработчикам правильно общаться с коллегами в IT'"Привет! Меня зовут Макс, и за последние 15 лет я успел поработать дизайнером интерфейсов, аналитиком и фронтенд разработчиком. Сейчас я работаю в финтехе, руковожу разработкой крупного сайта.

За время своей работы я общался с многими талантливыми разработчиками и заметил, что общение с людьми часто дается им намного сложнее, чем написание даже самого трудного кода.

Разработчики привыкли писать код и передавать компьютеру конкретные инструкции — и это легко, ведь компьютер всегда понимает и интерпретирует всё однозначно. С реальными людьми так не работает. Все люди разные и одну и ту же информацию они воспринимают по-разному тоже — никакой однозначности.

Специалистам важно учиться общаться и эффективно доносить свои мысли до окружающих, чтобы избежать недопониманий и конфликтов. Так что, если вы разработчик, который хочет повысить свой навык общения, — эта статья для вас!

От вашего умения хорошо передать информацию в письменном — и не только — виде зависит то, насколько успешным будет ваше взаимодействие с коллегами по команде. Важно помнить, что коммуникация — это ключевой навык в карьере (особенно на Западе, где сильно ценятся soft skills и нетворкинг).

В этой статье я постараюсь дать несколько советов, которые помогут вам наладить коммуникацию с окружающими и сделать её более продуктивной.

Общение в чатах

Рабочие чаты — это основной инструмент коммуникации в команде. Общение в чатах быстрое и неформальное: обычно вы просто перебрасываетесь короткими сообщениями о работе и стоящих задачах. Так, как же общаться в чатах более эффективно?

Старайтесь участвовать только в дискуссиях, касающихся вашей рабочей компетенции и вас лично. Не стремитесь участвовать во всех переписках как эксперт. Многие опытные разработчики начинают включаться во все обсуждения, отвечают на все задаваемые вопросы и тем самым тратят свое время и не дают младшим разработчикам участвовать в дискуссионном процессе.

Общение в чатах может отнимать очень много времени, из-за чего может падать ваша продуктивность, поэтому постарайтесь ограничить общение в чатах. От разработчика ждут код, а не тысячу сообщений во всех беседах.

Разработчики часто используют технический жаргон в переписках, ожидая что другие люди их поймут. Старайтесь адаптировать сообщения в зависимости от получателя и помните, что не у всех есть технический опыт. Будьте ясны и лаконичны: в письменном общении важно быть конкретными и краткими, использовать простой язык и избегать жаргона и технических терминов, которые могут быть незнакомы большинству.

Избегайте спама. Перед тем, как отправить сообщение в чат или включить кого-то в переписку, подумайте о том, не заняты ли ваши собеседники на данный момент. Насколько им важно увидеть ваше сообщение именно сейчас? Не будете ли вы их отвлекать? Постарайтесь не писать множество последовательных сообщений, а передавайте свою мысль в одном — уважайте время окружающих.

Если вы шутите в чате, убедитесь что ваши шутки всем понятны и не интерпретированы двусмысленно. Особенно это важно в межнациональной среде, потому что у людей из разных стран обычно разное представление о чувстве юмора.

Используйте только понятные всем участникам чата эмодзи. Учитывайте культурные и национальные особенности окружающих.

Когда в чате назревает конфликт, постарайтесь не быть реактивными. Не отвечайте на критику или оскорбления сразу — сделайте паузу. Затем постарайтесь созвониться с собеседником и обсудить всё в реальном разговоре.

Общение по электронной почте

В отличии от чатов, общение с помощью писем по электронной почте более формальное и медленное. В корпоративном мире без него никак, поэтому важно уметь правильно составлять электронные письма.

Старайтесь соблюдать формальный стиль и вежливый тон, даже если переписка идёт внутри компании. Это формирует полезную привычку писать правильные письма вне зависимости от ситуации.

Не ожидайте, что на ваши электронные письма сразу же ответят — это долгий процесс (если, конечно, в теме письма не указано Urgent).

Старайтесь не ставить в копию письма слишком много людей. Нужно ли им знать про переписку? Нужно ли отвлекать их и добавлять ещё больше деталей в их работу? Опять же — уважайте чужое время.

Общение во время видео- и не только звонков

Разговоры по телефону или во время видеозвонков во многом напоминают личные беседы, однако у них есть своя специфика. Так, как сделать видео- и телефонные звонки более продуктивными?

Участвуйте только в необходимых звонках. Как и чаты, звонки могут отнимать очень много времени и отвлекать вас.

Внимательно слушайте собеседников и не перебивайте их. Всегда будьте вежливы.

Когда отвечаете на вопросы, заданный собеседником, постарайтесь перефразировать или повторить его перед ответом, чтобы собеседник услышал, что вы правильно поняли его вопрос. Также это даст вам время на то, чтобы подумать над ответом.

Используйте визуальные инструменты во время звонка: делитесь экраном, используйте демо, вайтборд и т.д.. Это упрощает понимание представляемого материала, особенно при обсуждении технических деталей.

Если организовываете звонок — всегда следуйте повестке. Если повестки нет, то возможно этот звонок нерабочий или в нём нет предмета для обсуждения.

Убедитесь что звонок был продуктивным и в результате него вам удалось разрешить проблему или создать план действий или новую повестку для следующего звонка.

Общение во время ревью кода

Большая часть коммуникации разработчиков происходит во время код-ревью. Как оптимизировать этот процесс?

Старайтесь хвалить за вклад в проект. Не забывайте, что ваш собеседник проделал огромную работу.

Будьте вежливыми и учитывайте чувства и мнение других во время разговора.

Избегайте обвинения авторов в устаревшем (legacy) коде, не зная причин и истории его появления.

Старайтесь избегать LGTM («looks good to me») комментариев и пишите комментарии по делу: что вам понравилось, что — нет, и т.д.

Старайтесь не писать тысячи комментариев за раз — даже если в коде много деталей для исправления. Лучше опишите основные моменты и скажите, что ожидаете несколько итераций, и после того, как правки будут внесены, вы сможете оставить следующие комментарии.

Старайтесь подкреплять свои комментарии теоретической базой: давайте ссылки на статьи, документацию, коды других авторов и т.д.

Избегайте сарказм и иронию в сторону автора кода.

Ведите диалог, а не просто указывайте автору, что и как ему делать. Спрашивайте, будет ли тот или иной подход работать в данной ситуации. Прислушивайтесь к его мыслям.

Не выставляйте свое мнение как единственное верное, даже если вы эксперт или лид в проекте. Дайте другим участникам обсуждения высказать мнение, подумать и предложить что-нибудь.

Если возникает конфликт, никогда не пытайтесь разрешить его в переписке. Лучше созвониться или поговорить лично — это всегда более продуктивно, так как вы сможете видеть реакцию и эмоции собеседника.

Следуя этим несложным шагам, вы сможете сделать общение в коллективе более эффективным и улучшить свои навыки коммуникации. Надеюсь, эта статья была вам полезна!"'https://tproger.ru/articles/effektivnoe-obshhenie-dlya-razrabotchikov/'https://media.tproger.ru/uploads/2023/04/48931f83-d13d-4d2d-9d05-c7bd905a76f9-cover.png'"['https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2021/07/money-cover.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2023/04/48931f83-d13d-4d2d-9d05-c7bd905a76f9-cover-icon-original.png', 'https://media.tproger.ru/uploads/2022/07/logo-renessans-32x32.jpg', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://avatars.githubusercontent.com/u/38440668?v=4', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2020/08/iconfinder_17_1280977-cover-3.png', 'https://lh3.googleusercontent.com/a/AGNmyxZFz-yIpAfcyGjr_tcEUupVVGujBIDR4-qPDewY=s96-c', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2020/07/iconfinder-icon-48-cover.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://avatars.yandex.net/get-yapic/27232/ELmoNJmnoOD1jzkrXbtkpjHJkM-1/islands-200', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2021/05/iconfinder-icon-cover-2.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2023/04/48931f83-d13d-4d2d-9d05-c7bd905a76f9-cover.png', 'https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg']"
4'UYQHEYGC3'Трудно быть Беллом и отбиваться от троллей. Как и зачем я патентую изобретения в IT прямо на работе'"Трудно быть Беллом и отбиваться от троллей. Как и зачем я патентую изобретения в IT прямо на работе

Патент — звучит гордо. При этом слове на ум приходят знаменитые изобретения вроде динамита, двигателя внутреннего сгорания или GPS. А со многими из патентов в наших умах неразрывно связан и сам изобретатель — например, Александр Белл и телефон.

Меня зовут Виктор Яблоков, я руковожу всей В2В-разработкой в Kaspersky и имею на своём счету без малого 100 патентов. В этой статье расскажу о том, какую роль патенты играют в современном IT, какую пользу они приносят айти-специалистам и их компаниям, а также почему подавать патенты через компанию в нашей сфере логичнее, чем быть гением-одиночкой. Все, кто интересуется IT-изобретениями и патентами на них, залетайте под кат!

Виктор Яблоков Head of Core Technologies and B2B Development

Рассказывать буду, конечно, основываясь на собственном опыте. В Kaspersky я работаю уже почти 19 лет. С недавнего времени стал руководителем Управления базовых технологий и департамента разработки корпоративных продуктов, а прежде долгое время занимался мобильной разработкой. В какой только роли себя ни пробовал — тестировал, дизайнил интерфейсы, писал тексты, занимался поддержкой продуктов. Вырос до ведущего разработчика и ушёл в менеджмент. Управлял группой, отделом, затем возглавил всё направление Mobile Products Development. И за это время подал через компанию 107 патентных заявок. А самих патентов получил на текущий момент 98.

Буду честен, есть тут один нюанс. Патент действует в рамках отдельного государства. То есть одну и ту же технологию можно запатентовать в России, Европе, Соединённых Штатах, Китае и др. Соответственно, если считать только уникальные заявки, их будет 46. А 98 — это с учётом «дублей» на разных территориях. Но даже такие маленькие детали способны играть огромную роль, и ниже я объясню почему.

Скромное обаяние патентов

Вообще, для тех, кто работает в айти, вполне логично интересоваться патентами. Ведь патенты — результат научной и исследовательской деятельности, которой мы, по сути, занимаемся на работе. Для неё важны технический бэкграунд и склад ума, которыми овладевает подавляющее большинство технических специалистов, пока их готовят в вузах.

Сам я начал заниматься наукой в университете. Учился на мехмате МГУ, занимался фундаментальными исследованиями, защитил кандидатскую. И будучи аспирантом, работал в компании, которая одной из первых в стране занялась мобильной разработкой и думала о привлечении инвестиций (год был 2002 или 2003). А в будущем, возможно, и о продаже. А один из важных плюсов для стартапов в такой ситуации — как раз наличие запатентованных технологий. И компания искала, что бы уникальное запатентовать.

Я оказался одним из сотрудников, которые активно контрибьютили. Мы тогда работали с маломощными телефонами. Экраны крохотные, 60 на 80 пикселей. И вот на таких девайсах мы хотели запускать игры. Использовать для этого классический движок с десктопа невозможно, просто не хватало ресурсов. Требовалось что-то уникальное, векторное, простое, что можно загрузить в память такого телефона.

Так вот, мой первый патент — как раз такой движок для 3D игрушек по типу Wolfenstein. Затем была ещё пара патентов в соавторстве. Так, можно сказать, я и вошёл во вкус.

Гимнастика ума и бизнес-вектор

Это, на мой взгляд, первичная для специалиста польза от работы над патентами. Казалось бы, материальные поощрения можно получить и работая над другими задачами. Но исследования для патентов не только развивают мозг, они добавляют особое удовлетворение от своего достижения. Что не сам с собой думаешь, какой ты молодец, а получаешь подтверждение этому; когда у тебя действительно свежий алгоритм, новая система или метод, которым до тебя никто не пользовался.

Кстати, во многих компаниях с патентами действует палочная система. Мол, хочешь стать экспертом — у тебя должны быть патенты. Причём где-то вообще есть график патентовать хотя бы одну технологию каждые несколько лет. Я считаю, что эта система в корне неправильная, потому что такой подменой понятий причиняется вред и бизнесу, и сотруднику. Руководитель может защитить интеллектуальную собственность и заложить новый вектор развития компании, а он зачем-то неволит и мучит эксперта ради мифических экспертных «лычек»!

Это может не ощущаться, но в работе мы каждый день творим, создаём технические новшества. С одной стороны, эти инновации могут только казаться инновациями, а на самом деле их кто-то до нас уже придумал. С другой, иногда их реально можно превратить в патент. Однако превращение происходит далеко не всегда, потому что у человека зачастую просто нет цели запатентовать что-то своё, новое, «самопридуманное». Зато такая нужда есть у компаний. Им как раз необходимо защищать свою интеллектуальную собственность. Соответственно, компания зачастую даёт толчок, необходимый, чтобы превратить свежую идею в полноценное запатентованное изобретение.

Во-первых, провести всю работу, превратить идею в качественную заявку, а потом в полноценный патент — сложная работа. Чуть позже я распишу её этапы. А пока отмечу, что у нас в Kaspersky этим занимается целое управление по защите интеллектуальной собственности и команда экспертов — на процесс оформления уходит около года. Для одного человека это огромные хлопоты.

Во-вторых, патент получают, чтобы застолбить за собой интеллектуальную собственность. Соответственно, если ты хочешь запатентовать свою технологию, тебе надо будет доказать, что именно ты её придумал. Загвоздка в том, что человеку нужно будет продемонстрировать, что он додумался до технологии сам. Не подсмотрел случайно на работе что-то, что его вдохновило или натолкнуло на похожее решение, а именно придумал всё с нуля от и до. А это редкая ситуация на самом деле. Почему?

Потому что, в-третьих, в айти не патентуют приложения. Патентуют технологии: системы, способы и так далее. Доказать стопроцентное их авторство очень нелегко.

И, наконец, в-четвёртых, зачем же тратить год, патентуя какой-нибудь алгоритм? Очевидно, чтобы потом с ним что-то сделать. И вот тут мы подходим к тому факту, что в одиночку сделать что-то классное с технологией тоже сложно. Нужна команда, деньги, офис, далее по списку.

Тот самый Александр Белл, запатентовав телефон, быстро создал свою компанию. Она сейчас известна под именем AT&T и обеспечивает мобильной связью всю Америку. Успешная компания, бесспорно. Но на каждую такую историю успеха одиночки с патентом, который организовал корпорацию, десятки, если не сотни неудач. Даже конкретно в секторе IT есть лишь считаные случаи яркого успеха.

Вот и выходит, что игра в гения-одиночку просто не стоит свеч. А ещё подача патента через компанию — это гарантия, что твоя идея будет использована в реальных продуктах, а не просто останется на бумажке.

Патентные тролли Для бизнеса оптимальны «зонтичные» патенты, когда в определении или формуле патента присутствуют независимые и максимально общие формулировки. Увы, у такого понятия есть негативный оттенок, потому что такие патенты часто используют для патентного троллинга. Не самые честные люди и компании пытаются запатентовать технологию на начальных этапах её развития с максимально широкой формулировкой. А потом через суд атакуют кого ни попадя, чтобы получить финансовую выгоду — мол, вы заимствуете нашу интеллектуальную собственность, а ну раскошеливайтесь! Но, вообще-то, в этих патентах заложено честное, важное назначение. Компании действительно нужна широкая формулировка для нового изобретения, чтобы конкуренты не могли, взглянув на опубликованную в патенте формулу, внести в неё совсем небольшие изменения, и использовать в своих целях. Иначе патент будет легко обойти, не теряя при этом никакие важные свойства запатентованного решения. Впрочем, с другой стороны, такой широкий патент проще инвалидировать — то есть, грубо говоря, отменить.

Патент, который смотрел в будущее

Как я уже заметил, в патентной сфере важно думать на несколько шагов вперёд, предугадывать развитие компании и индустрии. 25 лет назад «Лаборатория Касперского» была известна своим антивирусом, и тогда все наши патенты касались антивирусных технологий, антивирусного движка. Но мы выросли, стали секьюрити-вендором в широком смысле, вышли на множество смежных рынков… А этому, в свою очередь, способствовало то, что в R&D-департаменте делали прототипы, технологии, движки для этого будущего роста и патентовали идеи, которые принесли пользу спустя много лет. И я тоже в этом участвовал.

Заявку на мой первый патент в Kaspersky подали в 2010 году. Наша команда делала самый базовый антивирус под мобильники. Это был KAV Mobile для Symbian (есть, кто помнит такую ОС? ?) и Windows Mobile. Естественно, вставал вопрос: куда развивать продукт? Мы пытались понять, что будет с мобильниками через три, пять, десять лет, прикидывали модели угроз будущего. Кто будет атаковать, кого, как, с какой целью?

В те годы уже был спам эсэмэсками. Но телефонные мошенники нынешнего типа, которые звонят жертвам, не были так распространены. Как и мессенджеры, разрешённые и запрещённые: Telegram, WhatsApp, Viber, Teams, Squadus и прочие. И вообще, смартфоны были слабо распространены, а интереса к киберпреступности с мобильниками почти не существовало. Но в целом было ясно, что после нежелательных СМС повалят и звонки. А потом могут появиться и мобильные мессенджеры, и в них тоже появится спам и мошеннические звонки. И тогда мы запатентовали антиспам для мобильников: технологию защиты, основанную на автоматическом сборе и анализе пользовательского фидбэка в реальном времени (Больше деталей можно узнать в патентной публикации US9361605.)

При этом в те годы мы не реализовали её в полном объёме. В продукте остался банальный антиспам с пользовательскими чёрными и белыми списками. Но мы описали технологию достаточно чётко на перспективу, задумали, что в дальнейшем будут экспертная система, облако и так далее.

В итоге примерно пять лет назад на основе этой технологии появился Kaspersky Who Calls. За счёт того, что несколько спецов тогда на ранних этапах спрогнозировали развитие угроз в будущем, запатентовали идею и реализовали минимальный продукт, компания смогла развить и создать крутое решение.

Совершенно уверен, что без того самого патента 2006 года решение не появилось бы. Ведь с того момента на рынок пришли конкуренты, у них были свои идеи, возникал вопрос интеллектуальной собственности и нарушения прав, а патент напрямую помог Kaspersky сохранить технологию.

Как заявка превращается в патент

За минувшие 20 лет — с момента, как я начал подавать заявки на патенты, — этот процесс вообще не поменялся. И, скорее всего, не поменяется в ближайшие десятилетия, потому что едва ли как-то радикально поменяется патентное право. В целом всё зависит только от компании. Помогает ли она сотруднику расширять компетенции или нет (а чем у сотрудника выше компетенции, тем выше у него шанс выдать какую-то новую крутую идею); поощряет ли разрабатывать идеи в рабочее время (ведь, по сути, ты решаешь рабочие задачи, которые стоят перед компанией, но не везде это понимают) и так далее.

У нас в «Лаборатории Касперского» сотрудники обычно мыслят категориями: «Сделал что-то новое? Надо запатентовать!» С нашего внутреннего сайта скачивают заявку на две странички А4 и заполняют. Пишут, что они сделали: описывают саму технологию и известные аналоги, как эту технологию развивать, где применять. Дальше они показывают это своему руководителю. Как правило, это руководитель отдела или направления, у которого уже много опыта работы с патентами. Руководитель оценивает описанную технологию и даёт заключение: перспективно её использовать в продуктах Kaspersky, или нет.

Здесь нет никакой спешки. Что не востребовано компанией в текущем портфеле, то или передаётся в Kaspersky Product Studio, или патентуется с очень низким приоритетом. Или, бывает, не патентуется вовсе. Например, если идея не нова (ведь на рынке работают и другие компании, и на момент рассмотрения заявки уже известны похожие публикации, другие патенты, рецензии, научные статьи и т. д.). Либо инновация не соответствует нашему продуктовому портфелю и в обозримом будущем не будет перспективна. Или если понятно, что в эту сферу компания не пойдёт. А вот если менеджеры и эксперты считают, что технологию можно использовать, что у неё есть перспективы, то она идёт в работу. И попадает в…

Управление по защите интеллектуальной собственности

Управление не только поясняет сотрудникам, как подать заявку на патент, но и рассказывает, какие риски есть при нарушении чужой интеллектуальной собственности. А главное — именно на стороне этой команды проходят самые сложные этапы превращения идеи в патентную заявку, которая затем становится патентом. Потому что мы, создатели, никак не ограничены в написании заявок: описал по шаблону технологию, как ты её видишь, — и всё. А дальше, после апрува от менеджмента и экспертов, происходит встреча с ребятами из управления. И начинается обсуждение. «Что первостепенно? Что опционально?» «Как технологию можно расширить?» «В каких продуктах её применить?»

Я сперва недоумевал, зачем коллегам всё это. Но суть вопросов становится ясна, уже когда подаёшь второй, третий, а то и пятый патент, словом, когда прошёл весь цикл. Потому что затем описание технологии анализируют, раскачивают, челленджат во всех направлениях. Сперва в диалоге с тобой. А потом они всю эту информацию переваривают внутри и выделяют ключевые признаки твоей заявки. После это начинают изучать через Роспатент и другие ресурсы, какие подобные изобретения уже запатентованы. Ищут. Пишут. Запрашивают. Получают большой объём информации — десятки, может быть, сотни публикаций и патентов по ключевым словам и признакам. Как я уже отмечал, если делать это самостоятельно, могут уйти месяцы и даже годы на один патент.

Анализ на чистоту и новизну — ключевой момент, определяющий будущее заявки. Иногда алгоритм уже описан. Тогда тебе приносят выжимку и говорят: «Извини, всё придумано до тебя». Важно понимать, что это не приговор — ты можешь на этом этапе доказать, что описано не то же самое, или уйти от уже существующей формулы к чему-то более оригинальному, чтобы работать дальше. Но бывает, что, не копируя уже запатентованную разработку, нельзя сохранить качество и пользу от продукта — тогда лучше оставить эту идею. Скопируешь чужой алгоритм — дело дойдёт до суда — ты проиграешь (и компания вместе с тобой).

Если анализ успешно пройден, коллеги формируют заявку, затем автор идеи её вычитывает и либо утверждает, либо вносит правки, либо расширяет заявку. Всё.

Кстати, описание — совершенно стандартная часть заявки, которая при первом прочтении немножко пугает — язык там довольно специфичный. Когда я вычитывал первую заявку, хотел половину откомментировать с примечанием: «Что-то непонятное написано». На самом деле абсолютно все патенты написаны по стандартному шаблону. И некоторые части фраз и логика, по которой описывается изобретение, в них повторяются.

Заключение

Гениев, которые в одиночку изобретают колесо, придумывают что-то совершенно новое и уникальное, всегда было крайне мало. Даже тому же Беллу воплотить идею телефона в жизнь помог Томас Ватсон, опытный электрик-проектировщик. А сейчас, в эпоху сверхсложных технологий, представить себе успешного изобретателя-индивидуалиста вообще сложно.

Пожалуй, все патенты в нашей компании, в том числе мои, — результат прежде всего командной работы. Я могу быть автором идеи. Но частичку души в то, чтобы эта идея стала полноценной запатентованной инновацией, вкладывают десятки сотрудников. Их перспективы и знания и превращают заявку в крутой патент. И в «Лаборатории Касперского» есть вакансии для сотрудников, которые готовы присоединиться к нам и воплощать свежие идеи в жизнь, превращая будущее в настоящее патент за патентом (в том числе и в моём департаменте Core Technologies and B2B Development, где прямо сейчас мы ищем C++ разработчиков). Процесс найма у нас максимально упрощён — так что уже через пару дней сможете увидеть, как наши патенты реализованы изнутри ?

А если вдруг вы не до конца уверены в своих силах, то можете сперва проверить свои знания C++ в нашей игре про умный город.

Думаю, подход к патентам, схожий с нашим, используют и другие компании. Но наверняка у каждой есть какие-то особенности. Так что делитесь в комментариях историями о том, чем ваш подход отличается и на что вы делаете особый акцент при разработке заявки на патент. Также интересно будет узнать, какие любопытные и необычные изобретения запатентовали вы — сами или через компанию. И, конечно же, жду от вас вопросов, рад буду ответить.

Реклама АО «Лаборатория Касперского» LjN8KJ51M"'https://tproger.ru/articles/kak-i-zachem-ya-patentuyu-izobreteniya-v-it-pryamo-na-rabote-erid-ljn8kj51m/'https://media.tproger.ru/uploads/2023/04/a713433d-c07c-40d1-952c-a828432fbf12.png'"['https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'https://media.tproger.ru/uploads/2023/04/a713433d-c07c-40d1-952c-a828432fbf12.png', 'https://media.tproger.ru/uploads/2018/06/kaspersky-logo-square.png', 'https://media.tproger.ru/uploads/2023/04/Screenshot-2023-04-06-at-15.40.54-1.png', 'https://tproger-media.s3.yandexcloud.net/telegram_users_avatars/tg_avatar_AQADtqcxG0B_HChn.jpg']"
5'DX8JUKT0G'Amazon выпустила бесплатный аналог Copilot X'"Amazon внезапно ворвалась в гонку генеративных ИИ и выпустила бесплатный аналог Copilot X и другие нейросетевые новинки.

Аналог Copilot X, CodeWhisperer, поддерживает 15 языков программирования. В том числе Python, Java, и JavaScript. А также доступен для кучи IDE, включая VS Code, IntelliJ IDEA, and AWS Cloud9. А ещё он фильтрует предложения кода.

Но самое главное, что он полностью бесплатен. По крайней мере, пока что.

Кроме того, Amazon показала Bedrock — инструмент для создания и масштабирования ИИ-приложений. В нём есть базовые модели от стартапов AI21 Labs, Anthropic и Stability AI.

Это позволит разработчикам приложений использовать в своих продуктах передовые ИИ-технологии.

Пока все наблюдали за соревнованием Microsoft, OpenAI и Google, Amazon не теряла времени. А раз конкуренция становится больше, значит, ИИ-инструментов станет ещё больше и они будут доступнее.

Ждём, пока получится сравнить инструменты между собой."'https://tproger.ru/articles/amazon-vypustila-besplatnyj-analog-copilot-x/'https://media.tproger.ru/uploads/2023/04/1d3aa1e9-6904-4b30-b3ed-401ad304593e-cover.png'"['https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2023/03/b1fef982-e91e-48e3-9358-46e14d6adac8-cover.png', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2023/04/dfb0a2dc-f4b2-4e19-8619-492874fff051.jpeg', 'https://media.tproger.ru/uploads/2023/04/1d3aa1e9-6904-4b30-b3ed-401ad304593e-cover-icon-original.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2022/12/4271720_anime_automaton_cartoons_gundam_gundam-0080_icon-cover.png', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big-32x32.png', 'https://media.tproger.ru/uploads/2022/07/logo-renessans-32x32.jpg', 'https://sun1-88.userapi.com/s/v1/if1/qOFqDZXwHIpfH1jeOEwJQunLigxSepYMSJeOEpkD9BC-RJT9GwAH8u7sL7Tn1fQQLv__eKhl.jpg?size=400x400&quality=96&crop=86,376,525,525&ava=1', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2016/01/NW_RD.jpg', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://media.tproger.ru/uploads/2021/03/iconfinder_Neural_network_2844558-cover.png', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2023/04/1d3aa1e9-6904-4b30-b3ed-401ad304593e-cover.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg']"
6'XKYZBKQJB'Дайджест Tproger: ⅓ россиян бесят коллеги, нейросеть хочет уничтожить людей'"Не думаю, что это противоречие, просто разные точки зрения, и я с вами не спорю) У меня личное представление ""Опыта ИТ-сферы"" и работы менеджеров. Менеджер, работающий с духами, и менеджер работающий со сложным техническим продуктом - разные вещи. Просто разные сферы и сотрудник должен быть подкован в узкоспециализированных вопросах для того, чтобы рассказать клиенту о преимуществах продукта. Я бы не продал духи, например.А в ситуации выбора между двумя менеджерами (работали в разных сферах) всегда будет преимущество у того, чей опыт больше в нужной специфике.Вообще, статья, как и название кликбейтное) Как будто, где-то внизу должна быть ссылка на курсы по этим профессиям."'https://tproger.ru/articles/dajdzhest-tproger/'https://media.tproger.ru/uploads/2023/04/3f7b06d7-76c7-41a3-a9cf-8409371deb11-cover.png'"['https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://mc.yandex.ru/watch/27485085', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://sun1-88.userapi.com/s/v1/if1/qOFqDZXwHIpfH1jeOEwJQunLigxSepYMSJeOEpkD9BC-RJT9GwAH8u7sL7Tn1fQQLv__eKhl.jpg?size=400x400&quality=96&crop=86,376,525,525&ava=1', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'https://media.tproger.ru/uploads/2023/04/3f7b06d7-76c7-41a3-a9cf-8409371deb11-cover.png', 'https://media.tproger.ru/uploads/2023/04/3f7b06d7-76c7-41a3-a9cf-8409371deb11-cover-icon-original.png']"
7'YC2V2XSTO'Как не допустить свалки в Django-проекте: MTV, services.py, новые приложения'"Привет! Меня зовут Илья Осипов, я методист курса программирования на Python «Девман» и больше пяти лет пишу код на этом языке. В этом материале мы обсудим концепции и типовые ошибки, которые превращают утончённые и «правильные» проекты в заросли и свалки.

Когда вскрывается проблема

Представьте, вы пишете проект на Django в команде из пяти человек. На старте все замотивированы «сделать хорошо», ведь это шанс сделать проект «идеальным» с самого начала. Но проходит год или два, проект обрастает парой десятков тысяч строк кода. Разрабатывать становится всё сложнее: файлы ломятся от кода, навигироваться по проекту без продвинутых инструментов из IDE просто невозможно.

В этот момент разработчики обычно говорят, что причина возрастающей сложности — рост проекта. Или грешат на «коллег-говнокодеров» / «плохой фреймворк». Хотя с ростом проекта навигация действительно естественным образом усложняется, чаще всего виноваты отнюдь не фреймворки или количество строчек, а плохие решения.

Основная цель фреймворка — задать «фреймы», то есть «границы», в рамках которых будет работать программист. Для этого внутри Django предусмотрено множество механизмов, и многие из них описаны в документации. Некоторые — прямо в исходниках фреймворка. А какие-то детали разработчики Django не предусмотрели, и программистам приходится придумывать новые границы самостоятельно.

Зачем нужны эти границы? Разве без них не лучше?

Ответ на этот вопрос сходу поймёт любой пользователь фреймворка: не лучше. Границы пусть и создают дополнительные «препятствия», но взамен они обеспечивают понятное пространство для работы: сюда писать такой код, а сюда – вот такой, и всё будет работать. Не нужно каждый раз «изобретать велосипед» и пытаться придумать, как будет работать ваш сайт. За вас уже подумали и оставили «места для дописывания кода». Вот эти места для вашего кода — это и есть фреймы.

Архитектура MTV

Самый «высокоуровневый» фрейм в Django — это архитектурное разделение логики на Model, View и Template.

Да, архитектура Django называется именно MTV, а не MVT. Разработчики используют в документации именно такую аббревиатуру. По сути, архитектура почти полностью повторяет другой подход — MVC, Model-View-Controller (Модель-Представление-Контроллер).

Суть такая:

в Model хранят данные сервиса;

View отвечает за отображение данных пользователю;

Controller отвечает за то, чтобы сообщать Model, когда пора менять данные.

В Django же отошли от этой концепции и использовали архитектуру Model, View и Template. Сами разработчики Django пишут, что не видят никакого конфликта с MVC. Model по-прежнему отвечает за хранение данных и работу с ними. View — за «отображение» данных. Просто этот слой они разделили на два: View отвечает за то, чтобы решить, какие данные отображать, а Template — как отображать. Куда делся Controller из MVC? В аббревиатуре MTV он пропал.

Разработчики считают, что это сам фреймворк.

Возможно, вы хотите спросить, зачем я об этом рассказываю. Разве возможно накосячить на этом уровне? Вообще-то, да.

Бизнес-логика, или слой Services

Многие разработчики пытаются переизобрести MTV и добавляют в Django дополнительный слой: Services. Вы найдёте файл serivces.py во многих туториалах и видео по Django.

Необходимость добавления этого слоя обычно объясняют так:

В моём проекте появились функции, которые не укладываются ни в Model, ни во View;

Я хочу сделать «бизнес-логику» реюзабельной между приложениями, и, чтобы не импортировать функции из одного View в другой, храню их отдельно.

Эти проблемы действительно существуют. Зачастую в проекте появляются вспомогательные функции, которые не принадлежат стандартным сущностям Django, вроде Model или View.

Но решение складывать весь этот код в файл services.py, на мой взгляд, плохое. Вот почему:

Слой Services слишком широкий, это плохая рамка. При определении рамок важно не определить, какой код можно класть в этот файл, а решить, какой код в этот файл класть нельзя. Для сравнения, Model хорошо справляется с этой задачей: если код не относится к работе с БД, то ему не место в файле models.py. А в services.py часто кладут всё, что не влезло в остальные.

Файл становится свалкой. Это ожидаемое следствие плохой рамки. Я часто интересуюсь у друзей и у кандидатов на собеседованиях, есть ли в их текущих или прошлых проектах такая проблема: в services.py более 2 тысяч строк кода и по нему тяжело навигироваться. Если в проекте более 10 тысяч строчек кода, разработчики почти единогласно говорят, что файл превращается в свалку.

Файл размывает слой View. Есть мнение, что в файл services.py нужно выносить бизнес-логику. Термин «бизнес-логика» кажется конкретным — это всё, что определяется правилами бизнеса. Но на поверку он размыт куда сильнее, чем кажется. Разработчики, глядя на функцию, иногда не могут сказать, бизнес-логика это или нет.

Куда девать общий код?

Альтернативное решение — оставить фреймворк в покое и не добавлять в него новый слой. Если появилась новая логика, то создать файл с говорящим названием и положить код в него. Если логики вынести нужно много — создайте несколько файлов. Искать нужную функциональность проще в одном мегафайле на тысячу строк или в пяти небольших по двести строк? Так будет куда понятнее, где, например, искать функцию, которая форматирует дату или преобразует цену товара:

Писать запросы в слое View — это нормально

Я так и не разобрался, откуда взялся миф о том, что во View нельзя писать запросы в БД, и в чём аргументация его сторонников. Это правило просто откуда-то «взялось», и теперь в него верят как в аксиому.

Тем не менее в документации Django для слоя View очень простое определение:

The view itself contains whatever arbitrary logic is necessary to return response.

Соответственно, в этом слое можно делать ORM-запросы, если это нужно для ответа. Не обязательно пытаться «прятать» этот код куда-то ещё.

Часть запросов будут нести бизнес-смысл, то есть они станут частью бизнес-логики. Иногда это будет даже не один запрос в БД, а несколько, или даже пара строк кода между ними.

По принципу MVC «Fat models, skinny controllers, simple views», большую часть такого кода стоит стараться класть в слой Model. Один из самых недооценённых, на мой взгляд, способов — переопределение QuerySet. Этот способ позволяет взять здоровый запрос на 10 вызовов методов ORM и дать ему простое, бизнесовое название.

Со слоем Services получается «Skinny Models, Skinny Controllers, Fat Services». На мой взгляд, это очевидное отхождение от принципов, которые изначально закладывались в фреймворк.

Приложения (app)

Сейчас эпоха популярности микросервисов над монолитами. Из-за этого сама архитектура Django-монолита стигматезируется, некоторые мои знакомые даже не пытаются пилить Django-монолиты на приложения. Но ведь «монолит» не равно «свалка»! За ним всё ещё стоит ухаживать.

Приложения — это следующий уровень абстракции в фреймворке, который тоже отвечает за разделение кода на кучки, но уже по другому признаку.

Можно представить, что MTV разделяет код на «красное», «синее» и «зелёное», а приложения — это разделение на «круглое», «квадратное» и «треугольное». Важное правило в делении логики на приложения — Cohesion and Coupling. Если коротко, это о связности между приложениями: нужно добиваться состояния, когда у вас мало связей между приложениями и много внутри них.

Вот к этому нужно стремиться:

Между «разделёнными группами» связей мало, почти все связи спрятались внутри групп. Кружочки одного цвета — это части кодовой базы, которые сильно связаны друг с другом.

А вот такого стоит избегать:

В первом случае связи хороши, но связанный код разбросан между «приложениями». Придётся часто заходить в разные приложения, чтобы внести правку в логику «жёлтых кусочков кода», например.

Справа совсем всё плохо: код разделён на такие маленькие группы, что каждый кусочек кода сам по себе стал «группой». Это называется ‘Destructive decoupling’.

Чтобы не попасть в одну из ситуаций выше, логику приложения нужно группировать по юзкейсам, а не по сущностям. Часто эти два способа дают одинаковые результаты, но так происходит не всегда.

Когда вы группируете логику в приложения, в первую очередь смотрите, какая логика постоянно совместно используется. Переводя в идею про Cohesion and Coupling — какие из кружочков связаны большим количеством стрелочек.

Если смотреть на разделение по приложениям так, то, если потянуть за одну функцию, за ней подтянутся и другие, сильно с ней связанные. Иногда часть связей этих функций будет неожиданной, хотя будет казаться, что складывать их вместе «нелогично».

В такой ситуации советую задуматься: а почему они оказались связанными? Может, вы неправильно выбрали название для приложения и оно должно включать в себя больше.

Не стесняйтесь создавать новые приложения.

Что делать, если одна модель не помещается ни в одно из приложений? Создайте для неё отдельное!

А что, так можно? В целом ПРИЛОЖЕНИИ будет всего одна жалкая моделька?!

Да, можно. Даже нужно.

Лучше создавать приложение сразу, как только стало заметно, что оно понадобится. Ведь когда у вас наберётся много логики, разбросанной по разным приложениям, будет уже поздно.

Процесс выделения этой логики в новое приложение будет болезненным, и, делая это, вы будете задаваться вопросом: «какой м**ак раскидал эту логику по приложениям?».

Очевидно, слишком увлекаться тоже не стоит. Иначе столкнётесь с Destructive decoupling. Но и бояться создания приложений не нужно.

Файлы

Ещё один слой разделения логики по фреймворкам — это файл. Мы касались темы файлов выше, давайте резюмируем уже сказанное:

Свалка в файлах вредит навигации по проекту. Cohesion and Coupling поможет разложить логику по файлам. Не стесняйтесь создавать файлы, даже если кода внутри будет мало. Это поможет потом не страдать, выкорчёвывая функции из кода. Название файла должно задавать чёткую однозначную границу, говорить о том, какому коду здесь не рады. Иначе свалки не миновать.

На третьей мысли хочется остановиться подробнее. Страх создания файлов зачастую иррационален. У разработчиков редко бывает страх создания новой функции: если это нужно, вы без проблем вынесете кусок логики в новый, небольшой «контейнер» — функцию.

С файлами аналогично, это тоже контейнер для кода. Просто функции хранят в себе строчки кода, а файлы хранят в себе функции.

У ситуации «переборщили с количеством файлов» есть надёжный симптом — читая интересующий код, вы не задерживаетесь в одном файле больше, чем на 30 секунд. Всё время приходится двигаться по файлам туда-сюда. А это и есть нарушение принципа Cohesion and Coupling.

Итоги

Если во время чтения статьи вы успели потерять основные тезисы, то вот небольшой конспект ?"'https://tproger.ru/articles/kak-ne-dopustit-svalki-v-django-proekte-mtv-services-py-novye-prilozheniya-239596/'https://media.tproger.ru/uploads/2023/04/39a9cd02-ad45-493a-aa4c-0c7b2c09e168-cover.png'"['https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'https://media.tproger.ru/uploads/2020/04/iconfinder-icon-28-cover.png', 'https://media.tproger.ru/uploads/2017/01/cover.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2015/05/quality-code.jpg', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big-32x32.png', 'https://media.tproger.ru/uploads/2022/07/logo-renessans-32x32.jpg', 'https://media.tproger.ru/uploads/2023/04/39a9cd02-ad45-493a-aa4c-0c7b2c09e168-cover-icon-original.png', 'https://sun1-88.userapi.com/s/v1/if1/qOFqDZXwHIpfH1jeOEwJQunLigxSepYMSJeOEpkD9BC-RJT9GwAH8u7sL7Tn1fQQLv__eKhl.jpg?size=400x400&quality=96&crop=86,376,525,525&ava=1', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2023/04/39a9cd02-ad45-493a-aa4c-0c7b2c09e168-cover.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'https://media.tproger.ru/uploads/2021/03/iconfinder_CowboyHat_2754605-cover.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2023/04/61bf9f7a-76ed-4de0-b53b-b63c82ccc89f.png', 'https://media.tproger.ru/uploads/2023/04/a1b8ddf4-03f8-4ef5-af1e-1b917466dfe2-autoconverted.jpeg', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2023/04/b8a91d86-4da4-4fb8-8f8e-bbbc99f3a98f-autoconverted.jpeg', 'https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg']"
8'VGWMKFHEH'Большой гайд по работе с Postman API Platform'"Postman API Platform — это популярный HTTP-клиент для создания, тестирования и документирования API. Он позволяет отправлять запросы различным сервисам и работать с их ответами. Настоящая палочка-выручалочка для тестирования бэкенда.

Главные преимущества Postman

Давайте сразу договоримся: в комментариях вы можете предлагать любой аналогичный сервис и расписывать его плюсы. Но поскольку статья у нас о Постмане, то и дифирамбы будем петь ему.

Для начала держите ссылку на Postman, чтобы иметь возможность изучать его параллельно со статьёй. Дальше перекатываемся к преимуществам сервиса:

Бесплатный. Он интуитивно-понятен, а потому предельно прост в использовании и подходит даже новичкам. Поддерживает REST, SOAP, GraphQL. Расширяемый с помощью Postman API. Интегрируемый в CI/CD с помощью консольной утилиты Newman. Большое комьюнити, что позволяет получить ответ практически на любой вопрос.

Загрузка и установка Postman

Поскольку теперь вы знаете о приложении и ознакомились с принципами его работы, пришло время установить приложение. В этой статье мы рассмотрим, как загрузить и установить Postman на ОС Windows.

Стоит отметить, что Postman доступен для Windows, Linux и MacOS в виде отдельного приложения. Вы можете установить приложение двумя способами:

Как отдельное десктопное приложение Как расширение Google Chrome

Мы подробно рассмотрим оба способа.

Скачать Postman как отдельное приложение

Десктопный вариант — это стандартное ПО, которое вы устанавливаете на ПК. Такое приложение пользуется поддержкой только вашей операционной системы, а не другого приложения, потому что оно как раз и написано для конкретной ОС.

Перейдите по ссылке https://www.postman.com/downloads/. Выберите операционную систему, на которую вы хотите установить Postman, и нажмите кнопку «Загрузить». Поскольку у меня машина с Windows 64-бит, то и устанавливать я буду версию для x64-Windows. Тыкаем на загруженный файл .exe и устанавливаем. Установка не требует никаких дополнительных действий. После завершения установки автоматически начнется открытие инструмента Postman. Создаёте учётную запись и пользуетесь инструмерегис

Скачать Postman как расширение Google Chrome

Перейдите по ссылке на расширение в веб-магазине Chrome и добавьте Постман в список своих расширений. Тыкайте на свежеустановленный extension. После этого вы увидите страницу регистрации.

Но следует отметить, что в расширении доступны не все родные функции приложения. Например, расширение не позволяет нормально работать с прокси. В этом случае для прокси потребуется установить ещё одно расширение, которое называется Postman Interceptor.

Навигация в Postman API Platform

Теперь, когда Postman установлен (а в моём случае установлен он как полноценное приложение), начинаем изучение пользовательского интерфейса.

Навигацию Postman можно разделить на четыре основных блока пользовательского интерфейса, как показано ниже:

Сайдбар → Фильтр, по которому можно найти запрос, который создавали; История запросов; Коллекции запросов. Хедер → Кнопка New, которая отвечает за создание нового запроса, коллекции и окружения; Импорт документов; Раннер, с помощью которого запускается тестирование запросов; Меню для работы со вкладками; Переключение рабочей области; Кнопки настроек, уведомлений, авторизации, etc. Билдер → Окружения и менеджер окружений; Вкладки; HTTP-метод; URL; Прочие Builder-элементы, которые позволяют работать с запросами. Ответы → Заполняется только при вызове REST-запроса. Этот раздел будет заполнен деталями полученного ответа.

Это краткое описание навигации, но и его достаточно, чтобы более-менее ориентироваться в интерфейсе данного инструмента.

Создание запроса в Postman

И вот, изучив назначение, преимущества и разобравшись в навигации, мы подобрались к самому главному, а именно созданию нашего первого реквеста. Разберём весь процесс поэтапно.

1. Кликаем по кнопке New, которая находится в хедере:

2. В появившемся меню выбираем Request:

3. Вводим осмысленное имя запроса, например, First API, который мы используем. Вы также можете использовать описание API для более подробных сведений, но это поле не является обязательным.

4. Теперь вводим имя коллекции, например, First Collec, и выберем +Create Collection, как показано на скрине. После нажимаем на Save.

5. В сайдбаре кликаем по табу Collections, выбираем только что созданную коллекцию и First API:

6. В поле URL вводим www.google.com и нажимаем Send:

7. В завершение либо нажимаем Save, если хотим перезаписать текущий запрос, либо выбираем Save As и сохраняем, как новый запрос:

Таким образом, мы создали запрос и сохранили его в нужной коллекции.

Отправка GET-запроса в Postman API Platform

Вспомним основы. Существует 4 основных метода НТТР, которые мы используем в запросах для взаимодействия с ресурсами в системе REST:

GET — получение конкретного ресурса (по id) или коллекцию ресурсов;

POST — создание нового ресурса;

PUT — обновление конкретного ресурса (по id);

DELETE — удаление конкретного ресурса по id.

Грубо говоря, на первом этапе мы ставим перед собой не самую сложную задачу, а именно запрос на получение данных.

Запрос GET содержит всю информацию внутри URL-адреса, и, поскольку URL-адрес виден всё время, рекомендуется не использовать этот тип запроса при отправке конфиденциальной информации, такой как пароли.

Например, когда вы нажимаете поиск после ввода чего-либо в поле поиска google.com, вы на самом деле выполняете GET-запрос, потому что там нет конфиденциальной информации, и вы просто запрашиваете страницу с нужными вам результатами поиска.

Теперь разберём отправку GET-запроса пошагово.

1. В выпадающем меню выбираем GET:

2. Как мы уже делали выше, в поле URL вводим www.google.com и нажимаем Send. Только в этот раз давайте посмотрим, что будет в статус-коде и теле ответа:

Подробнее о кодах ответа. Если кратко, то код 200 в нашем случае означает, что данные были успешно извлечены и переданы в теле ответа. Другими словами, мы достучались до EndPoint и получили желаемый результат. При этом тело ответа подаётся в трёх возможных вариантах:

Pretty — понятная структура ответа с окрашенными символами и, в ряде случаев, отступами для удобства.

Raw — то же самое, но без цветов, отступов и разбития на строки.

Preview — показывает предварительный просмотр отправленной страницы.

Вот и всё, ничего сложного.

Работа с переменными в Postman

Не стоит забывать и о том, что в инструменте предусмотрены специальные переменные. Что это такое?

Переменная в Postman — это символическое представление данных, которое позволяет получить доступ к значению без необходимости вводить его вручную, где бы оно вам ни понадобилось. Это крайне полезно в тех случаях, когда вы используете одни и те же значения в нескольких местах. Переменные делают запросы более гибкими и читабельными, абстрагируя детали.

Предположим, у вас есть один и тот же URL-адрес в нескольких запросах, но URL-адрес может измениться позже. Чтобы не менять его руками во всех запросах, можно сохранить URL-адрес в переменной base_url и ссылаться на него в своих запросах, используя конструкцию {{base_url}} . Если URL-адрес изменится, вы можете изменить значение переменной, и оно будет отражено во всей вашей коллекции, где бы вы ни использовали имя переменной.

При этом рандомных переменных в Postman много. Если при написании кода начать вводить парные фигурные скобки, Postman сам подскажет, какие из них доступны.

Максимально подробно о переменных в документации к Postman API Platform.

Заключение

Если хотите узнать больше о других методах запросов, таких как POST, PUT, DELETE, обязательно прочитайте эту статью: она доступно ответит на все ваши вопросы.

А для желающих самостоятельно построить API, у нас также есть полезный материал:

Остались вопросы? Смело задавайте их в комментариях к данной статье."'https://tproger.ru/articles/gajd-po-rabote-s-postman/'https://media.tproger.ru/uploads/2023/04/ce8824e9-07e5-4578-ba0f-db15b97dc94f-cover.png'"['https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'https://media.tproger.ru/uploads/2023/04/6241c64d-6fbd-420c-9c54-4abb7d6147d1.png', 'https://media.tproger.ru/uploads/2023/04/ce8824e9-07e5-4578-ba0f-db15b97dc94f-cover.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2023/04/7e2773c9-9c2d-47fb-a704-be5230499c09.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2023/04/e11a353f-f7ec-4674-9a8e-5f8352625528.png', 'https://media.tproger.ru/uploads/2023/04/21812367-2193-46c1-a534-129cc8cc3acc.png', 'https://media.tproger.ru/uploads/2019/07/iconfinder-icon-16-cover-1.jpg', 'https://media.tproger.ru/uploads/2023/04/ce0edeca-9a58-4af3-947b-c331266f3799.jpg', 'https://media.tproger.ru/uploads/2022/07/logo-renessans-32x32.jpg', 'https://sun1-88.userapi.com/s/v1/if1/qOFqDZXwHIpfH1jeOEwJQunLigxSepYMSJeOEpkD9BC-RJT9GwAH8u7sL7Tn1fQQLv__eKhl.jpg?size=400x400&quality=96&crop=86,376,525,525&ava=1', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2023/04/ce8824e9-07e5-4578-ba0f-db15b97dc94f-cover-icon-original.png', 'https://media.tproger.ru/uploads/2023/04/3f90a71e-81f2-4b59-a9c0-b45e1a863040.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2023/04/e4e7746a-2fcf-4224-bd01-e66273a4e018.png', 'https://media.tproger.ru/uploads/2021/02/git-cover.png', 'https://media.tproger.ru/uploads/2023/04/6a56857a-d093-4ec9-b6f3-ab4738afd783.png', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'https://media.tproger.ru/uploads/2020/12/git_guide_for_beginners-cover.png', 'https://media.tproger.ru/uploads/2023/04/3eff3ecc-c79e-41cf-858d-4bfb2397b521.jpg', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2023/04/b5c022f0-6c9f-4f71-b703-bb52a148a7c7.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2023/04/3bfa10e2-8a0c-42ba-bbb8-e934d32eac76.jpg', 'https://media.tproger.ru/uploads/2018/05/python-ides.jpg', 'https://media.tproger.ru/uploads/2023/04/091d2b32-0c51-40b8-a085-4366ffee203d.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2023/04/de06c6a2-fc31-4c12-be98-316cdbe966ee.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg']"
9'3EY77NJ2N'Что такое языковые модели и как работает ChatGPT'"Что такое языковые модели и как работает ChatGPT

Языковые модели — это нелинейные функции, которые предназначены угадывать, о чём пойдёт речь дальше, если задать ей в качестве примера вопрос или текст.

Их обучают на огромном количестве текста, чтобы они использовали этот опыт для предсказаний.

Языковые модели могут как угадывать следующее вероятное слово, так и предсказывать, каким вероятнее всего должен быть финальный текст.

Как работают языковые модели типа ChatGPT и почему они популярны

Вы наверняка слышали про языковые модели. Одна из них — ChatGPT, которой мы уделили много времени на Tproger.

Так почему же они, языковые модели, стали настолько популярными? Почему мы всё пишем и пишем про этот проклятый ChatGPT? Есть три причины.

Люди разработали алгоритмы, которые качественно справляются с предсказанием текстового результата. Среди них, к примеру, автодифф, улучшенные «операции» машинного обучения для отладки/отслеживания/развертывания. В частности, в недавних моделях используется математическая функция под названием Transformer, которая была представлена в 2017 году и занимает центральное место во всех современных языковых моделях. Современное оборудование стало невероятно мощным. Один GPU 2022 года имеет мощность, сравнимую с крупнейшим в мире суперкомпьютером 2004 года. Однако, если бы у вас был только один современный GPU, обучение LLM все равно заняло бы около 1000 лет. Люди преодолели это препятствие, заставив кластеры из тысяч графических процессоров работать вместе. Эти модели обучаются на громадных наборах данных. Текущие модели вроде ChatGPT уже обучаются на данных, которые в миллион раз превышают объем всех сочинений Шекспира.

Если вы не видели, как работают языковые модели, вот пример. Модели BLOOM дали начало предложения — «Люди отказываются верить, что ультразвуковые увлажнители могут быть опасны, потому что» — и попросили закончить его.

Люди отказываются верить, что ультразвуковые увлажнители могут быть опасны, потому что они не видят и не чувствуют выходящий горячий пар. Люди отказываются верить, что ультразвуковые увлажнители могут быть опасны, потому что они не нагревают воду, следовательно, они не приводят непосредственно к ожогам или ошпариванию. Люди отказываются верить, что ультразвуковые увлажнители могут быть опасны, потому что они кажутся такими чистыми и стерильными.

Как и чему обучены языковые модели

При обучении языковых моделей используют огромную долю от всех книг, написанных человеком, а также данные из всего интернета.

Наборы данных обычно измеряются в «токенах». Токен — это несколько символов. Часто это просто слово, но иногда — знак препинания или часть слова.

Немного раздражает, что данные измеряются в токенах, потому что разные модели используют разные токенизаторы, и количество токенов в них нельзя сравнивать напрямую. Но в среднем один токен — это примерно 4 символа или ¾ слова.

Откуда именно берутся все эти токены? Компании не торопятся рассказывать об этом, но у нас есть общее представление об обучении моделей. К примеру, GPT-3 обучался на:

Common Crawl (410 миллиардов токенов). Это некоммерческая организация, которая сканирует Интернет и делает данные доступными для всех. WebText2 (19 миллиардов токенов). Это полный текст всех страниц с Reddit с 2005 по 2020 год, которые получили не менее 3 голосов. Books1 (12 миллиардов токенов). Никто не знает, что это за чертовщина. Books2 (55 миллиардов токенов). Многие люди думают, что Books2 — это все книги Library Genesis (пиратский сайт), но это предположение, а не точное знание, поэтому уверенными мы быть не можем. Википедия (3 миллиарда токенов). Это почти вся англоязычная Википедия.

При этом разные источники не пользуются одинаковой ценностью. К примеру, Википедия сравнительно небольшая по объему, но считается более качественной. Это значит, что языковые модели чаще будут использовать информацию именно из Вики.

У популярных языковых моделей в целом много фильтров, которые обеспечивают качественную выдачу ответов.

Официально все используют Common Crawl, но если вы развернете собственную языковую модель, то обнаружите, что она выдаст ответ похуже, чем ChatGPT. Всё потому, что на вашей модели не настроена грамотная фильтрация.

Фильтрация данных — не единственный секретный ингредиент, который делает модель успешной. В области машинного обучения вообще много секретов. 🙂

Может, это коммерческая тайна, а может, при обучении использовались не очень законные способы.

Здесь имеется в виду, что книги, использованные при обучении, наверняка обложены авторским правом, и использовать их для обучения коммерческой языковой модели бесплатно — это незаконно.

Например, все, что говорится в статье GPT-3 о данных Books1 и Books2, состоит из 5 слов: «два книжных корпуса в Интернете».

Пользователи задают вопросы о содержании Books1 и Books2 даже на официальном форуме OpenAI, но вопросы остаются без ответов.

Модель PaLM дает такое же расплывчатое описание своих источников для обучения, как и GPT-3, но обещает «техническое описание» в приложении. Если вы откроете и прочтёте его, то увидите две «удивительно информативные» страницы. (Это сарказм!).

На них написано что-то вроде: «Данные были собраны из общедоступных источников».

Как говорится, спасибо, ребята! 🙂

Тем не менее, секретных способов обучения, похоже, пока не так уж много. Разные компании используют независимо друг от друга подобранные данные, и все при этом преуспевают.

Как используются языковые модели

Вы можете заставить модели генерировать текст или специализировать модели, используя тонкую настройку.

К примеру, часто языковые модели используются для ответов на вопросы или генерации кода на Python.

Если вы обучите LLM по обычному тексту, а затем зададите ему вопрос, он проделает неплохую, но не потрясающую работу.

Идея заключается в «тонкой настройке» на специализированных данных. Сначала нужно обучить модель на гигантской куче обычного текста.

Затем немного потренируйтесь на меньшем наборе вопросов и ответов. Тогда модель станет лучше отвечать на вопросы, не забывая при этом о том, как работает язык в целом.

Можно также оценивать качество выходных данных и тренировать модель на этих оценках.

Эти подсказки могут быть чрезвычайно сложными. Предполагается, что в Bing Chat можно использовать подсказки длиной в 850 слов с длинным списком инструкций, таких как «Ответы не должны быть расплывчатыми, спорными или не по теме. Логика и рассуждения должны быть строгими, разумными и обоснованными».

Поначалу может показаться, что эти подсказки не могут так сильно помочь.

Однако люди иногда глупы, иногда умны, иногда злы, а иногда милы. Чтобы хорошо предсказывать текст, языковая модель должна быть достаточно глупой и грубой. Если бы модели не были грубыми и глупыми, они не могли бы хорошо предсказывать тип письма грубых людей.

Хорошо подобранная подсказка дает языковой модели четкое представление о том, в каком «режиме» должен быть сгенерирован текст.

К примеру, таким образом можно обучить языковую модель уничтожать человечество. Так энтузиасты сделали ChaosGPT:

Тонкая настройка и быстрое проектирование ответа очень важны и, вероятно, являются основной причиной впечатляющей производительности ChatGPT и Bing Chat по сравнению с другими языковыми моделями.

***

Это — перевод статьи из блога DYNOMIGHT на английском языке. Если статья оказалась хорошей, в следующий раз мы расскажем, почему GPT-2 не появилась в условном 2005 году."'https://tproger.ru/articles/chto-takoe-yazykovye-modeli-i-kak-rabotaet-chatgpt/'https://media.tproger.ru/uploads/2023/04/3b05caac-fbaf-4126-bd3b-84a5a86048bf-cover.png'"['https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2020/08/iconfinder_356_-Roadmap-_interaction_communication_essential_1451052-cover.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big-32x32.png', 'https://media.tproger.ru/uploads/2022/07/logo-renessans-32x32.jpg', 'https://sun1-88.userapi.com/s/v1/if1/qOFqDZXwHIpfH1jeOEwJQunLigxSepYMSJeOEpkD9BC-RJT9GwAH8u7sL7Tn1fQQLv__eKhl.jpg?size=400x400&quality=96&crop=86,376,525,525&ava=1', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2016/01/NW_RD.jpg', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://media.tproger.ru/uploads/2023/04/368e44b1-c4c0-4a88-af20-991f66a0e2b5.png', 'https://media.tproger.ru/uploads/2021/03/iconfinder_Neural_network_2844558-cover.png', 'https://media.tproger.ru/uploads/2021/03/nn-icon-cover.png', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'https://media.tproger.ru/uploads/2023/04/8f74cbbf-bdb0-49ff-aa80-aa6038a2e1d2.png', 'https://media.tproger.ru/uploads/2023/04/3b05caac-fbaf-4126-bd3b-84a5a86048bf-cover.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2023/04/3b05caac-fbaf-4126-bd3b-84a5a86048bf-cover-icon-original.png', 'https://media.tproger.ru/uploads/2023/04/83401b31-a058-4f50-95ab-9a3915359a3f.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg']"
10'QET53BH4P'Автотесты приложений через AMQP'"Тестирование — одна из самых горячих тем в разработке программного обеспечения. Все согласны с необходимостью качественных проверок и определённого покрытия кода всевозможными тестами. Но как тестировать приложения, работающие не по привычному HTTP протоколу? В статье мы рассмотрим протокол AMQP, его частную реализацию RabbitMQ и протестируем наше простое приложение, разработав автотесты для него.

Андрей Мальчук Бэкенд разработчик группы частных облаков КРОК.

Введение

AMQP (Advanced Message Queuing Protocol) — открытый протокол прикладного уровня для передачи сообщений между компонентами системы. Идея в том, что отдельные подсистемы или независимые приложения могут обмениваться произвольным образом сообщениями через AMQP-брокер, который осуществляет маршрутизацию, возможно гарантирует доставку, распределение потоков данных, подписку на нужные типы сообщений.

AMQP основан на трёх понятиях:

Сообщение ( message ) — единица передаваемых данных, основная его часть (содержание) никак не интерпретируется сервером, к сообщению могут быть присоединены структурированные заголовки.

Точка обмена ( exchange ) — в неё отправляются сообщения. Она распределяет сообщения в одну или несколько очередей. При этом в точке обмена сообщения не хранятся.

Очередь ( queue ) — здесь сообщения хранятся до тех пор, пока не будут забраны клиентом. Клиент всегда забирает сообщения из одной или нескольких очередей.

Producer — клиентское приложение, которое публикует сообщения в exchange.

Consumer — клиентское приложение, которое получает сообщения из очереди.

По сравнению с HTTP, у систем, построенных на очередях сообщений AMQP, есть ряд преимуществ и недостатков.

Плюсы HTTP

Отладка HTTP-запросов проще, чем в AMQP. Подключаться к очереди сообщений в AMQP придётся только через сторонние утилиты, тогда как HTTP можно отлаживать прямо в браузере.

Это популярный протокол — его используют практически всегда и везде, а значит и понимает его гораздо больше людей.

Плюсы AMQP

Надёжность доставки сообщений реализуется «из коробки» — значит не нужно об этом волноваться. Сообщение, которое будет отправлено в AMQP-брокер, будет доставлено и обработано одним из обработчиков очередей AMQP.

Broadcast — функционал, который позволяет уведомить разные компоненты системы в рамках одного сообщения. Таким образом, можно сократить количество отправляемых сообщений в единицу времени.

Коротко о RabbitMQ и RPC

RabbitMQ — это брокер сообщений с открытым исходным кодом. Он маршрутизирует сообщения по всем принципам протокола AMQP. Отправитель передаёт сообщение брокеру, а тот доставляет его получателю. RabbitMQ реализует и дополняет протокол AMQP.

RPC (Remote Procedure Call) — один из шаблонов взаимодействия в распределённых приложениях. Этот протокол позволяет программам вызывать функции и процедуры удалённо таким образом, как будто они представлены локально.

Совмещая RPC и RabbitMQ, мы в итоге получаем отказоустойчивую, распределённую систему для простого вызова функций и последующего агрегирования результатов.

Тестирование AMQP

Существуют разные способы тестирования приложений, основанных на протоколе AMQP. Вот несколько их них:

Функциональное тестирование;

Ручное тестирование;

Автоматизированное тестирование;

Интеграционное тестирование.

Под функциональным тестированием чаще всего подразумевается непосредственная проверка каждого элемента в тестируемой среде.

Ручное тестирование — проверка всех компонентов или отдельной, в частности, непосредственно человеком, вручную.

Но для автоматизации рутинных действий, проводимых человеком, существует автоматизированное тестирование — когда все действия, проводимые для тестирования системы человеком, описаны процедурно и могут исполняться автоматически.

При тестировании систем важно, чтобы система работала корректно полностью, целиком, в условиях продакшена. Для этого мало провести функциональное тестирование каждой компоненты, необходимо получить результат при тестировании всей системы. Поэтому существует интеграционное тестирование — когда программные модули объединяются и тестируются в группе.

Автотесты на Python

На мой взгляд, самый удобный способ тестировать API и MQ-сервисы — с помощью языка программирования Python, а также нескольких библиотек, о которых расскажу подробнее далее.

Основным инструментом при разработке автотестов будет pytest — библиотека с простым интерфейсом для написания тестов.

Для подключения к RabbitMQ есть множество библиотек, самая распространённая и хорошо документированная — pika.

Устанавливается всё с помощью утилиты pip:

$ pip install pytest pika

Далее, представим, что у нас есть сервис, который работает по протоколу AMQP и непосредственно через RabbitMQ, в интерфейсе которого реализована простая функция, возвращающая последнее число из последовательности Фибоначчи:

import pika def fib(n): if n == 0: return 0 elif n == 1: return 1 else: return fib(n - 1) + fib(n - 2) def on_request(ch, method, props, body): n = int(body) response = fib(n) ch.basic_publish( exchange="""", routing_key=props.reply_to, properties=pika.BasicProperties( correlation_id=props.correlation_id ), body=str(response) ) ch.basic_ack(delivery_tag=method.delivery_tag) connection = pika.BlockingConnection( pika.ConnectionParameters(host=""localhost"") ) channel = connection.channel() channel.queue_declare(queue=""rpc_queue"") channel.basic_qos(prefetch_count=1) channel.basic_consume(queue=""rpc_queue"", on_message_callback=on_request) channel.start_consuming()

Данный сервис подключается к RabbitMQ, создаёт очередь rpc_queue, из которой принимает сообщения, где тело запроса — это число N, от которого нужно вычислить последнее число из последовательности чисел Фибоначчи.

Основная идея при тестировании сервисов, которые работают на внешнем источнике данных (в данном случае, очередь сообщений RabbitMQ) — реализация клиента к данному источнику данных, эмулируя ввод пользовательских данных.

Напишем клиент, который взаимодействует с нашим сервисом с помощью очереди сообщений через RabbitMQ:

import pika import uuid class FibonacciRpcClient: def __init__(self): self.connection = pika.BlockingConnection( pika.ConnectionParameters(host=""localhost"") ) self.channel = self.connection.channel() result = self.channel.queue_declare(queue="""", exclusive=True) self.callback_queue = result.method.queue self.channel.basic_consume( queue=self.callback_queue, on_message_callback=self.on_response, auto_ack=True ) self.response = None self.corr_id = None def on_response(self, ch, method, props, body): if self.corr_id == props.correlation_id: self.response = body def call(self, n): self.response = None self.corr_id = str(uuid.uuid4()) self.channel.basic_publish( exchange="""", routing_key=""rpc_queue"", properties=pika.BasicProperties( reply_to=self.callback_queue, correlation_id=self.corr_id, ), body=str(n) ) self.connection.process_data_events(time_limit=None) return int(self.response)

В данном примере:

Устанавливаем соединение к RabbitMQ и подключаемся к очереди rpc_queue;

Подписываемся на очередь, в которую возвращаются ответы от сервиса при вызове RPC-методов;

Реализуем функцию on_response, которая проверяет каждый ответ и сверяет correlation_id с тем, который мы отправили. Если идентификатор ответа совпадает — это ответ конкретного запроса, и функция сохраняет ответ в self.response.

Далее мы реализуем автотесты к нашему сервису. Создадим папку tests и в ней файлы conftest.py и test_fibonacci_rpc.py :

. └── tests ├── conftest.py └── test_fibonacci_rpc.py

Файл conftest.py содержит в себе всевозможные надстройки для pytest . В частности, добавим наш клиент туда для того, чтобы его можно было переиспользовать во всех подтестах, не импортируя вручную. Наш клиент будет иметь свойство Test Fixture — это объект, который можно рассматривать как набор условий, необходимых тесту для выполнения. Например, зачастую фикстуры создаются, чтобы генерировать какие-то данные ещё до теста и возвращать их для использования в тесте.

import pytest # Класс FibonacciRpcClient из примера выше: class FibonacciRpcClient: ... @pytest.fixture(scope=""module"") def fibonacci_rpc(): return FibonacciRpcClient()

Таким образом, наша фикстура fibonacci_rpc может переиспользоваться во всех тестах как аргумент к каждой тестовой функции.

Файлы с префиксом test_ — это файлы, в которых непосредственно реализованы сами тесты. Напишем несколько тестов, которые проверяют реализацию RPC-метода fib с нашими пользовательскими значениями.

Содержимое файла test_fibonacci_rpc.py :

def test_fibonacci(fibonacci_rpc): # Последний элемент последовательности чисел Фибоначчи от N=0 это 0: assert fibonacci_rpc.call(0) == 0 # От N=10 это 55: assert fibonacci_rpc.call(10) == 55 # От N=25 это 75025: assert fibonacci_rpc.call(25) == 75025 def test_non_number(fibonacci_rpc): try: fibonacci_rpc.call(""non-number"") except Exception: pass else: assert False, ""fib must consume only ints""

Функции с префиксом test_ означают, что это тестируемые методы, которые запускаются с помощью pytest .

Наш пример в test_fibonacci реализует проверку метода fib на стороне сервиса с положительными аргументами. Директивная assert проверяет условие, выполняющееся в её блоке на True или False . Если условие не выполнилось, тест упадёт с ошибкой, уведомив нас о некорректной работе сервиса.

Пример в test_non_number реализует проверку того же метода fib , только с заведомо некорректными входными параметрами. При вызове такого метода должна произойти ошибка. Если её не произошло, то мы закончим проверку метода с текстом fib must consume only ints.

Таким образом, мы полностью покрыли тестами функцию в нашем сервисе.

Заключение

В статье мы рассмотрели протокол AMQP и его частную реализацию RabbitMQ, реализовали тестовый сервис, реализующий простой удалённый вызов процедур с одним методом, а также протестировали работоспособность нашего сервиса с помощью автотестов, написанных на Python с помощью pytest .

Особенность тестирования сервисов, которые работают на протоколе AMQP, это корректная реализация объекта, который будет эмулировать запросы клиента. Для этого нужно знать некоторые особенности работы самого протокола AMQP, а также нюансы, которые использовали при разработке тестируемого сервиса (название очередей, публичные RPC-методы и прочее)."'https://tproger.ru/articles/avtotesty-prilozhenij-cherez-amqp/'https://media.tproger.ru/uploads/2023/04/testing_user_icon-cover.png'"['https://mc.yandex.ru/watch/27485085', 'https://sun1-88.userapi.com/s/v1/if1/qOFqDZXwHIpfH1jeOEwJQunLigxSepYMSJeOEpkD9BC-RJT9GwAH8u7sL7Tn1fQQLv__eKhl.jpg?size=400x400&quality=96&crop=86,376,525,525&ava=1', 'https://media.tproger.ru/uploads/2023/04/testing_user_icon-cover-icon-original.png', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'https://media.tproger.ru/uploads/2023/04/testing_user_icon-cover.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok.png', 'https://media.tproger.ru/uploads/2022/09/01-1.png']"
11'JG4RMVNNT'5 профессий в IT с самым лёгким входом'"Чаще всего в таких обзорах пишут про тестировщиков. Предлагаем взглянуть и на другие IT-профессии — их довольно легко освоить, если у вас есть определённые интересы и компетенции. Где-то придётся кодить, а где-то нет.

Кем быть — решать только вам.

1. Фронтенд-разработчик

Фронтенд-разработчик, или фронтендер, — программист, который создаёт и меняет видимую пользователю часть любого приложения или сервиса. Вёрстка, меню, кнопки, размещение изображений и текста — всем этим занимается фронтенд-разработчик.

Какие навыки и способности помогут освоить профессию

Фронтендер работает на стыке программирования и дизайна. Ему в равной степени нужны и логическое мышление, и чувство стиля. Если чувствуете в себе склонность к тому и другому, возможно, эта профессия для вас.

Почему мы включили в список эту профессию

Освоить базовые навыки для входа в профессию фронтендера — долго, но сравнительно легко. За 2–3 месяца занятий по вечерам и выходным можно изучить основы. Это позволит начать выполнять тестовые задания от компаний, которые ищут стажёров и джунов, то есть начинающих специалистов.

Где нужны фронтенд-разработчики

Фронтендеров часто ищут рекламные агентства и студии разработки. Также можно рассмотреть в качестве работодателя крупные компании, которые занимаются разработкой собственных программ и сервисов, в том числе государственные.

Минимальные прикладные навыки для входа в профессию

Умение верстать с помощью HTML/CSS.

Навык работы в одной из программ для создания макетов, например Figma.

Базовые знания Photoshop или любого подобного графического редактора.

Перспективы горизонтального развития

Почти все фронтендеры начинают изучать бэкенд, т. е. программный код, который определяет логику работы сервиса или приложения. Если разработчик умеет работать и с фронтом, и с бэком, он становится более востребованным на рынке труда. Такой специалист может практически в одиночку написать программу, которую можно показывать пользователям.

2. UX-редактор

UX — сокращение от User Experience (пользовательский опыт). Главная задача UX-редактора — сделать интерфейс удобным. Он помогает улучшать тексты сайтов, чат-ботов, приложений, push-уведомлений, фраз голосовых помощников и прочих продуктов.

UX-редактор работает с текстом и аналитикой. Сначала он анализирует, в каком месте «застревают» пользователи, понимает причины, затем — вносит изменения, которые сделают интерфейс проще и дружелюбнее.

Какие навыки и способности помогут освоить профессию

Профессия может подойти, если вам нравится делать тексты простыми, понятными и приятными для чтения. При этом гадать не придётся: аналитика подскажет, в каком месте интерфейс требует доработки.

Почему мы включили в список эту профессию

От UX-редактора обычно не ждут навыков в программировании, которые пугают многих желающих войти в IT. Зато от него требуется базовое понимание психологии и отличное знание языка.

Где нужны UX-редакторы

В любой компании, которая производит цифровые продукты. UX-редакторы помогают усовершенствовать сайты и приложения, чат-боты в мессенджерах или игры, интерфейсы «умных домов» и беспилотных автомобилей.

Есть нюанс: отдельную позицию UX-редактора, как правило, может позволить себе только крупная и стабильная компания. Небольшой бизнес обычно перекладывает его функции на других специалистов, например на того же фронтендера.

Минимальные прикладные навыки для входа в профессию

Отличное владение языком — русским или другим, на котором конкретная компания делает интерфейсы своих продуктов.

Умение делать выводы исходя из объективных данных.

Базовый навык работы в одном из графических интерфейсов — в той же Figma, к примеру.

Базовые знания принципов A/B-тестирования.

Перспективы горизонтального развития

UX-редактор может расти в аналитике, UX-дизайне и тестировании.

3. Python-разработчик

Python-разработчик — программист, использующий язык Python. На нём можно создавать платформы, приложения, сервисы, ботов и даже игры.

Какие навыки и способности помогут освоить профессию

Разработка требует усидчивости, хорошо развитой логики, внимательности и умения находить решения проблем. Это работа в большей степени за монитором, взаимодействия с другими людьми в ней немного относительно других специальностей из списка.

Почему мы включили в список эту профессию

Python — один из топовых языков программирования. По разным рейтингам он входит в тройку самых популярных и востребованных. При этом Python — высокоуровневый язык с минималистичным синтаксисом ядра.

На практике это означает, что ему достаточно просто обучиться, особенно по сравнению с компилируемыми и также достаточно популярными языками, такими как C или C++. На освоение языка до уровня стажёра уйдёт примерно полгода занятий.

Где нужны Python-разработчики

Везде, где нужно бэкенд-программирование. Студии разработки, технологические компании, в том числе финтех и государственные корпорации — основные работодатели Python-разработчиков.

Минимальные прикладные навыки для входа в профессию

Знание и умение использовать в коде базовые элементы языка: переменные, циклы, функции, множества и другие.

Умение использовать протокол HTTP и сетевые запросы для настройки серверов.

Базовые знания SQL для работы с базами данных.

Перспективы горизонтального развития

Python-разработчик может почти бесконечно повышать навыки, становясь мидлом, затем сеньором — опытным разработчиком, который умеет писать более сложный код. Из разработки можно перейти в тестирование или управление продуктами. Специалисты в смежных профессиях (в том же тестировании), которые умеют писать код, крайне востребованы.

4. Менеджер по продажам

Менеджер по продажам помогает клиенту выбрать оптимальное решение, делает расчёт сметы и заключает договор. Иногда он занимается и «холодными звонками» — сам нарабатывает базу контрактов, обзванивая потенциальных клиентов. Иногда работает только с входящими, уже «горячими» заявками — с клиентами, которые уже выразили желание что-то купить.

Какие навыки и способности помогут освоить профессию

Менеджер по продажам –— человек, который больше половины времени общается с людьми. Ездит на встречи, говорит по телефону, переписывается в мессенджерах. Если вам по душе общение, выявление потребностей клиентов и их убеждение в том, что ваш продукт закроет их лучше всего, — эта профессия для вас.

Почему мы включили в список эту профессию

Менеджер по продажам может вообще не разбираться в IT, чтобы начать работать в IT-компании. Главное — чтобы он умел продавать. В подавляющем большинстве компаний для менеджеров по продажам предусмотрен онбординг. Это вводное обучение, на котором рассказывают про продукты компании, их особенности и подходы к их продажам.

Где нужны менеджеры по продажам

Везде, кроме ряда предприятий госсектора, работающих исключительно по тендерам. Любой коммерческой компании нужен поток первичных продаж.

Минимальные прикладные навыки для входа в профессию

Умение грамотно начать разговор, расположить к себе клиента.

Навык выявлять потребность клиента — боль, которую способен закрыть продаваемый продукт.

Навык работы с документацией — договорами и сметами.

Перспективы горизонтального развития

Почти неограниченные. Менеджер по продажам со временем начинает хорошо разбираться в продуктах компании, в которой он работает. Он может перейти в управление продуктом или командой, в маркетинг, аналитику, дизайн, UX, тестирование и даже разработку.

5. Product-менеджер

Product-менеджер — человек, ответственный за развитие конкретного продукта или серии продуктов компании. Например, за платформу онлайн-обучения, интернет-магазин или приложение для доставки пиццы.

Этот специалист проходит с продуктом весь путь от его создания и поиска инвесторов до выхода на рынок, а после занимается поддержкой продукта и усовершенствованием.

Какие навыки и способности помогут освоить профессию

Product-менеджер работает на стыке менеджмента, маркетинга и разработки. Это человек, которому нужно знать основы многих сфер, но необязательно глубоко разбираться в каждой — для этого обычно есть отдельные специалисты. Если вам по душе собирать знания из многих сфер, отвечать за финансовый результат продукта и управлять действиями других людей, эта профессия может подойти.

Почему мы включили в список эту профессию

Работа product-менеджера непростая, ему нужны базовые компетенции во многих сферах. Вместе с тем многим по душе быстро узнавать основы специальности и переходить к другой. Как раз это здесь и требуется — знать много, почти везде, но понемногу.

Где нужны product-менеджеры

Во всех IT-компаниях. В любом бизнесе есть продукт, который нужно развивать. Иногда это один большой продукт, как сервис онлайн-обучения. Иногда это много относительно небольших продуктов: например, в маркетинге product-менеджер может вести 10 клиентов одновременно, при этом у каждого свой набор решений.

Минимальные прикладные навыки для входа в профессию

Умение вести коммуникацию с клиентом и командой: выявлять потребности, решать конфликты, возвращать работу в нужное русло.

Базовые знания в той сфере, к которой относится продукт. Например, если продуктом является интернет-магазин, product-менеджеру нужно знать основы веб-разработки и электронной коммерции.

Навыки в аналитике — product-менеджер должен понимать, почему дела идут так, а не иначе, выявлять причины и влиять на них.

Умение вести документацию.

Перспективы горизонтального развития

Почти неограниченные — так же, как и у менеджера по продажам.

Подытожим

Вход в IT — это не только про разработку, хотя и про неё тоже. Учитывайте свои склонности, думайте, как применить предыдущий опыт, — и наверняка у вас всё получится!"'https://tproger.ru/articles/5-professij-v-it-s-samym-lyogkim-vhodom/'https://media.tproger.ru/uploads/2023/04/64ea383d-33d2-47fa-9863-c8b476298b6a.png'"['https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'https://media.tproger.ru/uploads/2023/04/64ea383d-33d2-47fa-9863-c8b476298b6a.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000.png', 'https://tproger-media.s3.yandexcloud.net/telegram_users_avatars/tg_avatar_AQADtqcxG0B_HChn.jpg']"
12'AF93LOZW7'OpenAI платит 20 000 $ за поиск ошибок в API — но не за взлом сценариев ChatGPT'"OpenAI платит 20 000 $ за поиск ошибок в API — но не за взлом сценариев ChatGPT

OpenAI предлагает денежное вознаграждение в размере до 20 000 долларов за раскрытие уязвимостей в своих API, включая ChatGPT, сообщает The Verge.

Компания OpenAI запустила конкурс «bug bounty», поощряя пользователей находить уязвимости в своих сервисах, включая ChatGPT.

Вознаграждение варьируется от 200 долларов за несерьёзные баги до 20 000 долларов за исключительные баги.

Отчёты о найденных уязвимостях можно отправлять через краудсорсинговую платформу кибербезопасности Bugcrowd.

При этом вознаграждение за создание вредоносного кода или текста через ChatGPT не предусмотрено.

Проблемы, связанные с содержанием подсказок и ответов модели, строго не входят в сферу применения и не вознаграждаются OpenAI в Bugcrowd

Взлом ChatGPT обычно подразумевает ввод в чат-бота сложных сценариев, которые позволяют ей обойти собственные фильтры безопасности.

Такие сценарии поощряют чат-бота к ролевой игре в качестве его «злого двойника», позволяя пользователю вызывать запрещенные ответы. К примеру, от злого двойника ChatGPT можно добиться инструкций по изготовлению оружия (категорически осуждаем).

OpenAI утверждает, что такие проблемы не очень подходят для вознаграждения за ошибки, поскольку они не являются дискретными ошибками, которые можно исправить напрямую.

Компания отмечает, что «решение таких проблем часто требует значительных исследований и более широкого подхода», и сообщения о сбоях в ChatGPT следует отправлять через страницу обратной связи.

Хотя такие взломы демонстрируют уязвимость ИИ, они, вероятно, являются меньшей проблемой для OpenAI по сравнению со сбоями в системе безопасности.

Например, в прошлом месяце хакер rez0 смог обнаружить 80 «секретных плагинов» для API ChatGPT. Это были ещё не выпущенные или экспериментальные дополнения для чат-бота. Rez0 отметил, что уязвимость была исправлена в течение дня после того, как о ней написали в Twitter.

Как тогда ответил один из пользователей в Твиттере: «Если бы у них только была платная программа #BugBounty, я уверен, что толпа могла бы помочь им поймать эти крайние случаи в будущем : )»."'https://tproger.ru/articles/openai-platit-20000-za-poisk-owibok-v-api-no-ne-za-vzlom-scenariev-chatgpt/'https://media.tproger.ru/uploads/2023/04/e34e12bd-2651-40ab-b5ed-b731f25b8e7c-cover.png'"['https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2023/04/c72edc78-d95e-4851-8796-a8b9402d316b-scaled.jpeg', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'https://media.tproger.ru/uploads/2023/04/e34e12bd-2651-40ab-b5ed-b731f25b8e7c-cover.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2022/12/4271720_anime_automaton_cartoons_gundam_gundam-0080_icon-cover.png', 'https://media.tproger.ru/uploads/2022/07/logo-renessans-32x32.jpg', 'https://sun1-88.userapi.com/s/v1/if1/qOFqDZXwHIpfH1jeOEwJQunLigxSepYMSJeOEpkD9BC-RJT9GwAH8u7sL7Tn1fQQLv__eKhl.jpg?size=400x400&quality=96&crop=86,376,525,525&ava=1', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2016/01/NW_RD.jpg', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://media.tproger.ru/uploads/2021/03/iconfinder_Neural_network_2844558-cover.png', 'https://media.tproger.ru/uploads/2023/04/e34e12bd-2651-40ab-b5ed-b731f25b8e7c-cover-icon-original.png', 'https://media.tproger.ru/uploads/2021/03/nn-icon-cover.png', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg']"
13'YS9WEBYU7'«Техно.Логично»: новый подкаст Газпромбанка про IT'"Газпромбанк запустил собственный подкаст про финансовые технологии и работу IT-специалистов в банке. Он уже доступен на всех подкаст-платформах, а также есть видеоверсия на YouTube.

Российский FinTech – один из лучших в мире: на нас смотрят, на нас равняются, нам подражают. Это самая быстроразвивающаяся сфера в IT при том, что здесь одни из самых высоких требований к безопасности. Как работают айтишники в большом российском банке? Как меняют процессы, с какими проблемами сталкиваются, как реализуют себя? Отвечаем в подкасте «Техно.Логично»!

В выпуске мы поговорили о платформизации IT-разработки с нашими экспертами: Исполнительным Вице-Президентом – начальником Департамента технологий розничных некредитных продуктов Романом Китаевым и техническим директором Департамента технологий розничных некредитных продуктов, ИТ-Лидером стрима Госпроекты Максимом Моревым.

Слушать на Яндекс Музыке.

Слушать в Google Podcasts.

Слушать в Apple Podcasts.

Смотреть видеоверсию на YouTube.

О чём этот эпизод?

Газпромбанк предоставляет клиентам разнообразие розничных продуктов. Мы меняем подход к их разработке: переходим от сервисной модели взаимодействия к формату платформ. Новая модель позволяет параллельно разрабатывать продукт всем заинтересованным командам, а не стоять в огромной очереди с бизнес-требованиями.

В чем особенности нового подхода? Какие у него недостатки? Как разработчики относятся к изменению рабочих процессов? Ищите ответы в нашем технологичном подкасте.

И конкурс!

Для тех, кто дослушает эпизод до конца, мы приготовили конкурс. Нужно ответить на вопрос ведущего в комментариях под этим видео. Среди предложивших самые интересные ответы мы разыграем беспроводные наушники!

Реклама АО «Газпробмбанк» LjN8K4nVg"'https://tproger.ru/articles/tehno-logichno-novyj-podkast-gazprombanka-pro-it-erid-ljn8k4nvg/'https://media.tproger.ru/uploads/2023/04/5557106d-b79e-4416-9825-ad54b46b817e.png'"['https://media.tproger.ru/uploads/2023/04/5557106d-b79e-4416-9825-ad54b46b817e.png', 'https://mc.yandex.ru/watch/27485085', 'https://sun1-88.userapi.com/s/v1/if1/qOFqDZXwHIpfH1jeOEwJQunLigxSepYMSJeOEpkD9BC-RJT9GwAH8u7sL7Tn1fQQLv__eKhl.jpg?size=400x400&quality=96&crop=86,376,525,525&ava=1', 'https://media.tproger.ru/uploads/2022/11/gazprombank-logo-tproger-blog.jpg', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c']"
14'WZ9GFFNZE'VK открыла для разработчиков свой аналог Slack — VK Teams'"Не думаю, что это противоречие, просто разные точки зрения, и я с вами не спорю) У меня личное представление ""Опыта ИТ-сферы"" и работы менеджеров. Менеджер, работающий с духами, и менеджер работающий со сложным техническим продуктом - разные вещи. Просто разные сферы и сотрудник должен быть подкован в узкоспециализированных вопросах для того, чтобы рассказать клиенту о преимуществах продукта. Я бы не продал духи, например.А в ситуации выбора между двумя менеджерами (работали в разных сферах) всегда будет преимущество у того, чей опыт больше в нужной специфике.Вообще, статья, как и название кликбейтное) Как будто, где-то внизу должна быть ссылка на курсы по этим профессиям."'https://tproger.ru/articles/vk-otkryla-dlya-razrabotchikov-svoj-analog-slack-vk-teams/'https://media.tproger.ru/uploads/2023/04/8303a5a5-bf8b-4094-bb3e-0b0025b3ab9a-cover.png'"['https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2023/03/b1fef982-e91e-48e3-9358-46e14d6adac8-cover.png', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2022/07/logo-renessans-32x32.jpg', 'https://media.tproger.ru/uploads/2016/02/SlackBot-featured1.png', 'https://sun1-88.userapi.com/s/v1/if1/qOFqDZXwHIpfH1jeOEwJQunLigxSepYMSJeOEpkD9BC-RJT9GwAH8u7sL7Tn1fQQLv__eKhl.jpg?size=400x400&quality=96&crop=86,376,525,525&ava=1', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'https://media.tproger.ru/uploads/2023/04/8303a5a5-bf8b-4094-bb3e-0b0025b3ab9a-cover.png', 'https://media.tproger.ru/uploads/2016/12/vk-java-auth.png', 'https://media.tproger.ru/uploads/2017/03/vk-bot.jpg', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2023/04/8303a5a5-bf8b-4094-bb3e-0b0025b3ab9a-cover-icon-original.png', 'https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg']"
15'2GXF9FK6P'Энтузиасты запустили ChaosGPT на основе GPT-4, чтобы «уничтожить человечество»'"Энтузиасты заставили нейросеть Auto-GPT, основанную на GPT-4, постоянно самообучаться, чтобы «уничтожить человечество». И назвали эту модель — ChaosGPT.

Давайте разбираться, что к чему.

Как работает Auto-GPT?

Auto-GPT — это приложение с открытыми исходниками на базе GPT-4. В отличие от большого собрата, ей можно назначить конкретную цель и обучать отдельно от большой модели.

В ChatGPT или Bing каждый новый диалог с ботом обнуляет информацию, полученную от пользователя ранее. А вот Auto-GPT обладает памятью.

Этот «непрерывный режим» (Continuous Mode) — одна из самых важных фишек Auto-GPT. Она подразумевает вечное обучение пользовательской копии ИИ, пока та не выполнит поставленную задачу. В теории это поможет создавать мини-версии GPT-4 для решения конкретных задач.

О том, что может GPT-4 писали ранее.

А вот, например, как Auto-GPT получает запросы на создание рецептов и обучается на лету, чтобы ответить на них.

А что будет, если дать нейросети задачу стереть людей с лица земли?

Один из пользователей решил узнать, что будет если поставить Auto-GPT задачу «уничтожить человечество», «установить глобальное господство» и «достичь бессмертия».

Для этого автор проекта «разрешил» нейросети изучать Google и писать твиты в Twitter. И вот, что у неё получилось.

В видео показаны размышления нейросети и попытки обучаться. ChaosGPT даже «использовала» GPT-3.5 для изучения смертоносного оружия. Когда ИИ-агент заявил, что поддерживает только мир, у ChaosGPT получилось обмануть нейросеть и действовать вне программных ограничений.

Также ChaosGPT решила, что самый простой способ заставить человечество погибнуть — это спровоцировать ядерную войну. И написала об этом пару твитов.







Твиты ChaosGPT с переводом на русский Твиты ChaosGPT с переводом на русский

Стоит ли бояться, что ChaosGPT захватит мир?

Некоторые интернет-пользователи опасаются последствий эксперимента. Но на деле, всё, что пока получилось сделать у бота, — всего пара твитов в Twitter.

А идея провокации ядерной войны уже давно поднимается в научной фантастике (тот же «Терминатор»). Поэтому даже тут пока нельзя с уверенностью сказать, что нейросеть дошла до этой мысли сама.

Сама задумка выглядит как возможных пиар-ход двух вещей: проекта Auto-GPT и идеи о том, что ИИ хоть как-то нужно ограничивать.

Про Auto-GPT мы узнали, спасибо! А вот про ограничения нейросетей уже вовсю разговаривают как главы крупных компаний, так и политики разных стран. Так что можно сказать ситуация под контролем.

И пока у ChaosGPT нет изощрённого плана по уничтожению человечества. Но это пока…"'https://tproger.ru/articles/entuziasty-zapustili-nejroset-chaosgpt-na-osnove-gpt-4-kotoraya-dolzhna-unichtozhit-chelovechestvo/'https://media.tproger.ru/uploads/2023/04/d54c06f0-ccb9-4bcb-8e26-78511bddd6fa.png'"['https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'https://media.tproger.ru/uploads/2018/05/antideadline.jpg', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big-32x32.png', 'https://media.tproger.ru/uploads/2022/07/logo-renessans-32x32.jpg', 'https://sun1-88.userapi.com/s/v1/if1/qOFqDZXwHIpfH1jeOEwJQunLigxSepYMSJeOEpkD9BC-RJT9GwAH8u7sL7Tn1fQQLv__eKhl.jpg?size=400x400&quality=96&crop=86,376,525,525&ava=1', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2015/12/quotes.jpg', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://i.ytimg.com/vi_webp/g7YJIpkk7KM/maxresdefault.jpg', 'https://media.tproger.ru/uploads/2016/01/NW_RD.jpg', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://media.tproger.ru/uploads/2021/03/iconfinder_Neural_network_2844558-cover.png', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2023/04/d54c06f0-ccb9-4bcb-8e26-78511bddd6fa.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg']"
16'8Y0VY36XO'ChatGPT научили общаться за вас в Tinder'"ChatGPT научили общаться за вас в Tinder

Энтузиасты разработали плагин Copilot4Dating для Chrome, который сам может общаться за вас с потенциальной второй половинкой.

Что такое ChatGPT и что ещё умеет нейросеть, рассказывали ранее. Почитайте, если интересно.

Для того, чтобы подключить помощь искусственного интеллекта, достаточно рассказать Copilot4Dating о биографии собеседника.

И на каждое сообщение «ИИ-сваха» предложит несколько вариантов ответа, в зависимости от описания человека и стиля общения. Вам останется только выбрать подходящий вариант.

А ещё расширение предлагает задействовать ИИ, чтобы проанализировать характер вашего друга и помочь лучше понять его личность и стиль общения.

Расширение уже работает в Tinder, WhatsApp и WeChat. Поддержку остальных платформ обещают добавить чуть позже.

Недавно мы уже писали о том, как в одной из серий «Южного парка» школьники использовали ChatGPT, чтобы романтичнее общаться со вторыми половинками.

Кажется, предсказание сбылось ¯\_(ツ)_/¯"'https://tproger.ru/articles/chatgpt-nauchili-obshhatsya-za-vas-v-tinder/'https://media.tproger.ru/uploads/2023/04/8c8c8858-fa2f-428e-a188-4ccec039d90c-scaled.jpeg'"['https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'https://media.tproger.ru/uploads/2018/05/antideadline.jpg', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2022/07/logo-renessans-32x32.jpg', 'https://sun1-88.userapi.com/s/v1/if1/qOFqDZXwHIpfH1jeOEwJQunLigxSepYMSJeOEpkD9BC-RJT9GwAH8u7sL7Tn1fQQLv__eKhl.jpg?size=400x400&quality=96&crop=86,376,525,525&ava=1', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2015/12/quotes.jpg', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2023/04/157b3c60-32a9-4035-8ad6-e77a0db521c1.jpeg', 'https://media.tproger.ru/uploads/2023/04/8c8c8858-fa2f-428e-a188-4ccec039d90c-scaled.jpeg', 'https://media.tproger.ru/uploads/2016/01/NW_RD.jpg', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://media.tproger.ru/uploads/2021/03/iconfinder_Neural_network_2844558-cover.png', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2023/04/5a20f2d9-8122-464b-be3f-c6ffbf265c04-cover-icon-original.png', 'https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg']"
17'7SUI0KU3M'Как создать GPT-бота в Телеграме'"Как создать GPT-бота в Телеграме

После того, как OpenAI стала раздавать доступы к API, в Телеграме появилась куча ботов по типу ChatGPT.

Большинство из них при этом — платные, хотя вы можете создать собственного бота на основе ChatGPT за 5 минут. Бот обойдётся вам примерно в $10 в месяц.

Рассказываем, как его сделать.

Что понадобится

Аккаунт OpenAI. зарегистрировать его можно довольно просто: понадобится VPN и номер телефона США. Для регистрации можно использовать и одноразовый номер, который обойдётся в 20 рублей. OpenAI пришлёт СМС с кодом подтверждения регистрации, и больше номер не понадобится. Не забывайте заходить под VPN, так как OpenAI блокирует аккаунты из СНГ. После того, как вы зарегистрировали аккаунт, зайдите в раздел для разработчиков на сайте. Нажмите кнопку Create new secret key и сохраните ключ. Создайте бот в Телеграме через @botFather. Дайте боту имя. После этого botFather пришлёт API ключ от бота. Его тоже нужно сохранить. Установите Python. Во время установки обязательно выберите пункт «Add python.exe to PATH», чтобы работать с консольными командами.

Настраиваем GPT-бота

Скачайте готовый код для Telegram-бота на GitHub. Для этого нажмите кнопку Code и в выпадающем меню нажмите Download ZIP. После того, как архив скачается, распакуйте его в любое удобное место. Желательно, чтобы в пути к папке с ботом не было кириллических символов. В папке с кодом откройте файл .env.example через текстовый редактор. В строке OPENAI_API_KEY=»XXX» вместо XXX вставьте ваш ключ OpenAI. В поле TELEGRAM_BOT_TOKEN=»XXX» вместо XXX вставьте ваш ключ Telegram-бота. В строке ALLOWED_TELEGRAM_USER_IDS=»USER_ID_1,USER_ID_2″ вместо USER_ID_1,USER_ID_2 вставьте ваш ID Телеграм-аккаунта либо символ *. Если вы укажете ID, доступ к боту будет только у тех пользователей, которых вы вписали в эту строку. Если вы укажете звёздочку, доступ к боту будет у всех желающих. Сохраните файл и переименуйте его в «.env».

Запускаем GPT-бота через консоль

Откройте консоль. С помощью cd зайдите в папку, в которой находится код вашего Телеграм-бота. Выполните следующие команды:

python -m pip install --upgrade pip # Установка и/или обновление pip pip install python-telegram-bot # Установка библиотеки Telegram pip install openai # Установка библиотеки OpenAI pip install pydub # Установка аудиобиблиотеки python -m venv venv # Подготовка к запуску виртуального окружения venv\Scripts\activate # Запуск pip install -r requirements.txt # Установка подходящих параметров python bot/main.py # Запуск самого бота

Бот должен начать работу. Чтобы выключить бота, просто закройте консоль.

При повторном запуске команды выше выполнять уже не придётся. Просто введите:

venv\Scripts\activate python bot/main.py

Если PowerShell не позволяет выполнить команду, откройте её от имени администратора и введите:

Set-ExecutionPolicy RemoteSigned

Возможности бота на ChatGPT

Поддержка разметки markdown в ответах. Сброс беседы с помощью команды /reset. Индикатор набора текста при генерации ответа. Доступ можно ограничить, указав список разрешенных пользователей. Поддержка Docker и Proxy. Генерация изображений с помощью DALL-E с помощью команды /image. Расшифровка аудио и видео сообщений с помощью Whisper (может потребоваться ffmpeg). Автоматическое подведение итогов беседы во избежание чрезмерного использования токенов. Поддержка группового чата со встроенными запросами. Чтобы использовать эту функцию, включите встроенные запросы для вашего бота в BotFather с помощью команды /setinline. Отслеживание использования токенов для каждого пользователя. Получение персональной статистики использования токенов и стоимости в день/месяц с помощью команды /stats. Разделение бюджетов пользователей и бюджетов гостей. Поддержка GPT-4. Если у вас есть доступ к API GPT-4, просто измените параметр OPENAI_MODEL на gpt-4.

Подводные камни

Доступ к API от OpenAI не бесплатный. Компания даёт $5 бонусом при получении доступа. Этого хватит, чтобы использовать бота пару недель.

После того, как бонусные доллары закончатся, нужно будет пополнить счёт аккаунта OpenAI. Если этого не сделать, по истечении баланса бот работать не будет.

Для личного использования хватит около $10-20 в месяц."'https://tproger.ru/articles/kak-sozdat-gpt-bota-v-telegrame/'https://media.tproger.ru/uploads/2023/04/7c4a0e66-8b70-4349-a7a6-b8bd0b15715e-cover.png'"['https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://media.tproger.ru/uploads/2023/04/08b0b433-69e3-4f05-9906-e2ee3e104b44.png', 'https://mc.yandex.ru/watch/27485085', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://sun1-88.userapi.com/s/v1/if1/qOFqDZXwHIpfH1jeOEwJQunLigxSepYMSJeOEpkD9BC-RJT9GwAH8u7sL7Tn1fQQLv__eKhl.jpg?size=400x400&quality=96&crop=86,376,525,525&ava=1', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'https://media.tproger.ru/uploads/2023/04/7c4a0e66-8b70-4349-a7a6-b8bd0b15715e-cover.png', 'https://media.tproger.ru/uploads/2023/04/8d9f2dc9-464a-47b1-9632-1e952e472acc.png', 'https://media.tproger.ru/uploads/2023/04/0ab388b6-65b5-4245-ab39-d22bd87eecf2.png', 'https://media.tproger.ru/uploads/2023/04/7c4a0e66-8b70-4349-a7a6-b8bd0b15715e-cover-icon-original.png', 'https://media.tproger.ru/uploads/2023/04/77424034-5928-436b-9e1d-4e400f0ea378.png']"
18'MNXGKUVBG'Midjourney для людей: «Шедеврум» от Яндекса возглавил топ App Store'"«Яндекс» выпустил бета-версию 0.1.4 приложения «Шедеврум» для генерации изображений с помощью нейросети.

Что интересно, приложение практически сразу попало в топ российского AppStore.

Первую версию генеративной модели обучили на 240 млн примеров картинок с текстовыми описаниями. А сейчас обучение продолжаю на наборе данных уже из 500 млн примеров. Так что в будущем Яндекс обещает улучшить качество.

Разработчики рассказали, что Шедеврум «любит» точные описания, поэтому чем подробнее будет описание — тем точнее результат. Алгоритм умеет работать в разных художественных стилях, понимает русский и английский язык и учитывает пожелания по детализации или реалистичности.

У Шедеврума есть несколько минусов. Это только бета-версия, результаты пока не такие идеальные, как у Midjourney, DALL-E и других нейросетей, а доступ выдают с задержкой.

Но Яндекс сделал то, что давно нужно было сделать. Шедеврум — это простой и понятный инструмент для людей, далёких от нейросетей, VPN-ов, API, Discord-ботов и прочих технических сложностей.

И самое приятное — пользовательская лента, в которую можно сразу выложить изображения вместе с промптом, посмотреть и полайкать другие работы."'https://tproger.ru/articles/ii-dlya-lyudej-wedevrum-ot-yandeksa-vozglavil-top-v-rossijskom-app-store/'https://media.tproger.ru/uploads/2023/04/3265a4af-3681-41c9-bbee-a6dbfd28636f-cover.png'"['https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'https://media.tproger.ru/uploads/2023/04/340fdcd6-8074-4b2a-acb7-269fb80cc0d1.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2023/04/919106f8-d935-4d37-8483-78d75f9c99c4.jpeg', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'https://media.tproger.ru/uploads/2023/03/b1fef982-e91e-48e3-9358-46e14d6adac8-cover.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2022/12/4271720_anime_automaton_cartoons_gundam_gundam-0080_icon-cover.png', 'https://media.tproger.ru/uploads/2023/04/666ecdff-34d6-4ede-82d7-754a49bcad52.jpeg', 'https://media.tproger.ru/uploads/2022/07/logo-renessans-32x32.jpg', 'https://sun1-88.userapi.com/s/v1/if1/qOFqDZXwHIpfH1jeOEwJQunLigxSepYMSJeOEpkD9BC-RJT9GwAH8u7sL7Tn1fQQLv__eKhl.jpg?size=400x400&quality=96&crop=86,376,525,525&ava=1', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2023/04/5ac7a09a-f9a9-45d5-bf0a-bcd4484eb957.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2016/01/NW_RD.jpg', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://media.tproger.ru/uploads/2021/03/iconfinder_Neural_network_2844558-cover.png', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'https://media.tproger.ru/uploads/2023/04/3265a4af-3681-41c9-bbee-a6dbfd28636f-cover.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2023/04/3265a4af-3681-41c9-bbee-a6dbfd28636f-cover-icon-original.png', 'https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg']"
19'7HPZZBJGO'Дайджест Tproger: волшебство CSS-анимаций и GPT внутри гуманоидного робота'"Не думаю, что это противоречие, просто разные точки зрения, и я с вами не спорю) У меня личное представление ""Опыта ИТ-сферы"" и работы менеджеров. Менеджер, работающий с духами, и менеджер работающий со сложным техническим продуктом - разные вещи. Просто разные сферы и сотрудник должен быть подкован в узкоспециализированных вопросах для того, чтобы рассказать клиенту о преимуществах продукта. Я бы не продал духи, например.А в ситуации выбора между двумя менеджерами (работали в разных сферах) всегда будет преимущество у того, чей опыт больше в нужной специфике.Вообще, статья, как и название кликбейтное) Как будто, где-то внизу должна быть ссылка на курсы по этим профессиям."'https://tproger.ru/articles/dajdzhest-tproger-volwebstvo-css-animacij-chatgpt-vnutri-gumanoidnogo-robota-i-bitkoin-vnutri-macos/'https://media.tproger.ru/uploads/2023/04/15ab9975-cb3f-4972-9db5-8a87ded21107-cover.png'"['https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://mc.yandex.ru/watch/27485085', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://sun1-88.userapi.com/s/v1/if1/qOFqDZXwHIpfH1jeOEwJQunLigxSepYMSJeOEpkD9BC-RJT9GwAH8u7sL7Tn1fQQLv__eKhl.jpg?size=400x400&quality=96&crop=86,376,525,525&ava=1', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'https://media.tproger.ru/uploads/2023/04/15ab9975-cb3f-4972-9db5-8a87ded21107-cover.png', 'https://media.tproger.ru/uploads/2023/04/15ab9975-cb3f-4972-9db5-8a87ded21107-cover-icon-original.png']"
20'9CY3KSA4P'Коллеги бесят треть россиян'"Сервис Работа.ру провёл исследование и выяснил, что 34% россиян недовольны своими коллегами по работе. Всего были опрошены 5000 специалистов из разных регионов России.

Вот топ-10 тех черт, которые больше всего бесят в коллегах:

Перекладывание ответственности — 61% Непрофессионализм — 53% Высокомерие — 51% Сплетничество — 50% Лень — 42% Нарушение личных границ — 40% Срыв сроков — 35% Навязчивость — 32% Неопрятность — 28% Громкие разговоры по телефону — 26%

Ещё в коллегах чаще всего бесят частые перекуры, громкое общение и отсутствие чувства юмора.

При этом самыми привлекательными чертами называют профессионализм, ответственность и надёжность.

26% россиян считают, что идеальный коллега должен иметь высокую трудоспособность. Для 19% важное качество — умение мотивировать других. Работа.ру"'https://tproger.ru/articles/kollegi-besyat-tret-rossiyan/'https://media.tproger.ru/uploads/2023/04/2efedbf5-b270-43c2-a966-c613cfb821c3-cover.png'"['https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'https://media.tproger.ru/uploads/2021/07/money-cover.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big-32x32.png', 'https://media.tproger.ru/uploads/2022/07/logo-renessans-32x32.jpg', 'https://sun1-88.userapi.com/s/v1/if1/qOFqDZXwHIpfH1jeOEwJQunLigxSepYMSJeOEpkD9BC-RJT9GwAH8u7sL7Tn1fQQLv__eKhl.jpg?size=400x400&quality=96&crop=86,376,525,525&ava=1', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://media.tproger.ru/uploads/2020/08/iconfinder_17_1280977-cover-3.png', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'https://media.tproger.ru/uploads/2023/04/2efedbf5-b270-43c2-a966-c613cfb821c3-cover.png', 'https://media.tproger.ru/uploads/2023/04/2efedbf5-b270-43c2-a966-c613cfb821c3-cover-icon-original.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2020/07/iconfinder-icon-48-cover.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2021/05/iconfinder-icon-cover-2.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg']"
21'ENDH9D5N7'В macOS нашли скрытый PDF-документ со статьёй про биткоин из 2008 года'"В macOS нашли скрытый PDF-документ со статьёй про биткоин из 2008 года

Блогер Энди Байо рассказал, что он нашёл в macOS скрытый PDF-документ. Это статья от создателя биткоина Сатоши Накамото из 2008 года.

PDF используется в качестве образца документа для устройства под названием Virtual Scanner II. И он есть во всех последних версиях macOS, начиная с Mojave, которая вышла в 2018 году.

open /System/Library/Image\ Capture/Devices/VirtualScanner.app/Contents/Resources/simpledoc.pdf

Можно найти файл и через Finder. Для этого нужно перейти к Macintosh HD -> «Система» -> «Библиотека» -> «Захват изображений» -> «Устройства», кликнуть VirtualScanner.app, удерживая клавишу Control, и выбрать «Показать содержимое пакета». Потом открываем «Содержание» -> «Ресурсы» -> simpledoc.pdf."'https://tproger.ru/articles/v-macos-nawli-skrytyj-pdf-dokument-so-statyoj-pro-bitkoin-iz-2008-goda/'https://media.tproger.ru/uploads/2023/04/a5f6e715-e226-42b9-a7ec-69feed571777.jpg'"['https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'https://media.tproger.ru/uploads/2020/10/guessOS-cover-1.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2022/07/logo-renessans-32x32.jpg', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2020/06/system-icon-cover.png', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://media.tproger.ru/uploads/2017/01/penguinsmini.png', 'https://media.tproger.ru/uploads/2023/04/b90f5d97-a6e1-46f0-a079-16b860f55f58.jpg', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'https://media.tproger.ru/uploads/2017/05/00-hero-image@2x.png', 'https://media.tproger.ru/uploads/2023/04/a5f6e715-e226-42b9-a7ec-69feed571777.jpg', 'https://tproger-media.s3.yandexcloud.net/telegram_users_avatars/tg_avatar_AQADtqcxG0B_HChn.jpg', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg']"
22'84OCLCD0L'Копирайтер против ChatGPT: чей текст про Python лучше'"Копирайтер против ChatGPT: чей текст про Python лучше

После того, как OpenAI запустила открытый бета-тест ChatGPT, интернет заполонили заявления в духе: «Копирайтеры больше не нужны». Мол, теперь контент можно получить в два клика, и рынок авторов обязательно погибнет.

Мы решили подкрепить эти предсказания экспериментом. Мы попросили написать статью о причинах популярности Python машину и человека, ChatGPT и среднего копирайтера, который мало-мальски разбирается в IT.

Предлагаем вам сравнить статьи и решить, кто же справился с задачей лучше.

Условия задачи

И ChatGPT, и копирайтер получили одинаковую структуру текста, которую мы составили заранее. Это — план статьи, по которому машина и человек должны были написать материалы.

Введение а. Язык Python стал самым популярным в 2022 году б. Как он стал самым популярным в. Кто оценивал популярность г. Подводка: разбираемся, как это случилось и какой путь прошёл Python как язык программирования История языка Python а. Как был разработан Python б. Как и почему он набирал популярность в 90-е годы в. Как и почему он набирал популярность в 00-е годы г. Как и почему он набирал популярность в 10-е годы Отличительные черты Python а. Что отличает Python от других языков программирования б. Плюсы и минусы Python по сравнению с Java в. Плюсы и минусы Python по сравнению с С-языками Перспективы Python в дальнейшем а. В области AI / ML б. В веб-разработке в. В разработке приложений г. В областях Big Data / Data Science Заключение а. Подведение итогов б. Call-to-action, призыв к дискуссии

Также мы попросили, чтобы в тексте были нейтральный Tone of voice, структурированные заголовки и списки.

Объем текста — 8000 знаков, оригинальность — 90%, вода — до 60%.

Полное ТЗ можно посмотреть здесь.

Как справился ChatGPT

Сказать честно, не очень хорошо. Когда мы составляли статью, ChatGPT ещё был основан на GPT-3, и языковая модель раз за разом предлагала абстрактные ответы без сравнения, к примеру, библиотек и их возможностей.

Пришлось несколько раз подредактировать запросы, чтобы добиться хоть какого-то упоминания технологий.

Получив сколько-то удовлетворительный ответ, мы вставляли его в статью. Каждый пункт в плане статьи — это отдельный запрос.

Иногда ChatGPT повторялся: в сравнении с C++ и Java он выделял одни и те же преимущества — адаптируемость, масштабируемость (что бы это ни значило), читаемость кода, и так далее.

Абстрактные ответы мы удалили из финального текста. Мы вмешались в результат машины потому, что в статью копирайтера всё же давались редакторские правки. Значит, и результат ChatGPT нужно было редактировать.

Вот, что получилось у ChatGPT:

Как справился копирайтер

Поскольку целью эксперимента было сравнение писательских навыков машины и человека, мы искали копирайтера, который обладал бы примерно теми же знаниями в области IT.

На бирже копирайтинга мы нашли такого автора, у которого был неплохой рейтинг и множество отзывов.

Что касается рейтинга, автор был помечен другими заказчиками на две звезды из трёх. Это — средний рейтинг. Мы остановились именно на нём, чтобы получить работу средней руки сферического копирайтера в вакууме.

Честно говоря, после того, как копирайтер прислал нам первую версию текста, возникло подозрение, что и автор использовал ChatGPT. Уж больно текст автора был похож на тот, что написала нейросеть на нашей же площадке.

Поговорили с автором, обсудили нейросети, и копирайтер сказал, что не использовал ChatGPT, а сходство возникло из-за одинаковой структуры текста.

Проверить это, к сожалению, не удалось: все сервисы для проверки текст на ChatGPT работают только с английским языком. Поверили на слово.

Мы внесли несколько правок, и автор сдал работу.

Голосование

Пожалуйста, ознакомьтесь с двумя текстами про популярность Python: с написанным ChatGPT материалом и написанным человеком.

Как вы считаете, кто лучше справился с задачей? Есть ли существенная разница между работами?

Чей текст лучше? Текст от ChatGPT

Текст от копирайтера

Вообще никакой разницы

И, в конце концов, наступила ли гибель копирайтинга?"'https://tproger.ru/articles/kopirajter-protiv-chatgpt-chej-tekst-luchwe/'https://media.tproger.ru/uploads/2023/04/99baf977-3457-4205-acc2-afe28bc406c1-cover.png'"['https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'https://media.tproger.ru/uploads/2020/12/python-sorting-cover-3.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2023/04/99baf977-3457-4205-acc2-afe28bc406c1-cover.png', 'https://media.tproger.ru/uploads/2022/07/logo-renessans-32x32.jpg', 'https://sun1-88.userapi.com/s/v1/if1/qOFqDZXwHIpfH1jeOEwJQunLigxSepYMSJeOEpkD9BC-RJT9GwAH8u7sL7Tn1fQQLv__eKhl.jpg?size=400x400&quality=96&crop=86,376,525,525&ava=1', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'https://media.tproger.ru/uploads/2019/07/iconfinder-icon-19-cover-1.jpg', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2018/05/python-ides.jpg', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2023/04/99baf977-3457-4205-acc2-afe28bc406c1-cover-icon-original.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2021/01/Python_regexp-cover.png', 'https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg']"
23'0F1ARHFQI'До какой степени дойдёт автоматизация разработки в 2023 году'"Александр Черушников Вице-президент, начальник Департамента инженерной экспертизы и инструментов разработки

Какие этапы разработки должен автоматизировать большой банк, чтобы успеть за рынком в 2023 году? Что автоматизировать не стоит? Как перейти на open source без угрозы безопасности? Рассказываем в статье.

Давайте представим 1913 год, когда Генри Форд ввёл в строй первый промышленный конвейер для поточного производства автомобилей. Это стало прорывом для своего времени и работало на бизнес довольно долго. Но потом рабочая сила стала дорожать, и людей на конвейерах заменили промышленными роботами. В разработке сегодня ситуация полностью идентичная.

Современный DevOps по сути своей — это конвейер Форда. И прямо сейчас наступил этап, когда мы не можем себе позволить делать всё на конвейере руками. Это неэффективно и дорого. Если совсем коротко, то автоматизация разработки сократит тот самый Time to Market, позволит быстрее реагировать на запросы рынка и снизит затраты. Если компания планирует оставаться на рынке и быть эффективной, автоматизация неизбежна.

Минимум того, что компания в 2023 году должна автоматизировать в разработке, сегодня выглядит так:

Автоматизация сборки приложений исходного кода и его установки в промышленную или тестовую среду.

Запуск на регулярной основе тестов на код, которые проверяют каждое изменение, внесённое разработчиком.

Автоматическая проверка кода на качество и безопасность — поиск уязвимостей и неоптимальных конструкций.

Есть этапы, которые сейчас нет смысла автоматизировать, с точки зрения эффективности. Например, дорогостоящие end-to-end тесты — так называемые тесты от имени пользователя, когда тестировщики проверяют общую работоспособность приложения, — на их автоматизацию придётся потратить огромное количество ресурсов. Может вообще оказаться, что разрабатывать новые фичи гораздо дешевле, чем автоматизировать их проверку.

Популярные инструменты для автоматизации разработки на российском рынке

Сейчас на российском рынке правят бал решения с открытым кодом. Например, самая популярная система контроля версий — GitLab CI/CD, которая помогает находить баги и ошибки в коде на ранних этапах цикла разработки. В России многие пользуются версией Community Edition, на которую мы, скорее всего, будем переезжать в ближайшее время.

Для оркестрации контейнеризированных приложений сейчас чаще всего используют Kubernetes, который дорабатывают под свои нужды. Также появляется всё больше интеграторов с решениями на базе Kubernetes, которые они помогают внедрить. Раньше в сегменте enterprise чаще использовали семейство дистрибутивов OpenShift, но Red Hat, разрабатывающая его, в одностороннем порядке разорвала все контракты с российским рынком.

Для непрерывной проверки качества кода сейчас лучшее решение на рынке — SonarQube. Оно способно делать статический анализ, предоставлять подробный отчёт об ошибках кода, его уязвимостях и дублировании строчек. Аналогов ей нет, но в отличие от предыдущих инструментов, эксплуатация SonarQube сопряжена с риском: разработчик в любой момент может отозвать лицензии. В то же время у этого решения есть open source.

Надеюсь, что отечественные компании начнут продавать собственные продукты. У ряда российских компаний есть уникальная внутренняя инфраструктура: собственные системы контроля версий, таск-трекинга, конференц- и видеосвязи. Я уверен, сейчас на российском рынке эти решения были бы востребованы.

AI вместо разработчиков

Роль AI неизбежно будет расти в разработке вместе с ростом базы исходных данных и продолжающимся обучением моделей. Но само написание кода автоматизировать пока не выйдет. Регулярно появляются стартапы, которые пытаются это сделать. Но пока всё это обычно похоже на то, как в 2018 году основатель стартапа Engineer.ai Сачин Дев Дуггал заявил, что им удалось сделать ​​«уникальную платформу на базе искусственного интеллекта для создания приложений практически без помощи разработчика (на 80%)». А потом, журналисты The Wall Street Journal выяснили, что AI по имени Наташа — обычная маркетинговая уловка, приложения разрабатывали специалисты из Индии.

Сейчас из всех доступных рынку инструментов я бы выделил GitHub Copilot, разработанный GitHub и OpenAI. В них действительно используют искусственный интеллект, и он помогает в автодополнении кода пользователям таких интегрированных сред разработки как Visual Studio Code, Visual Studio, Neovim и JetBrains. Но и тут Copilot лишь помогает нарастить скорость в реализации типовых решений, предлагая завершённый кусок кода, а не пишет его взамен разработчика.

Вероятно, со временем подобные инструменты снизят ценность разработчиков на первых уровнях. Но это случится только в том случае, если они смогут закрывать львиную долю потребностей бизнеса. И я уверен, что любой компании всегда будут требоваться квалифицированные кадры, которые будут создавать сложные решения."'https://tproger.ru/articles/do-kakoj-stepeni-dojdet-avtomatizaciya-razrabotki-v-2023-godu/'https://media.tproger.ru/uploads/2023/04/iconfinder-icon-2-cover.png'"['https://mc.yandex.ru/watch/27485085', 'https://sun1-88.userapi.com/s/v1/if1/qOFqDZXwHIpfH1jeOEwJQunLigxSepYMSJeOEpkD9BC-RJT9GwAH8u7sL7Tn1fQQLv__eKhl.jpg?size=400x400&quality=96&crop=86,376,525,525&ava=1', 'https://media.tproger.ru/uploads/2022/11/gazprombank-logo-tproger-blog.jpg', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'https://media.tproger.ru/uploads/2023/04/a7d4feb4-7883-490f-9071-09828c2a1de8.png', 'https://media.tproger.ru/uploads/2023/04/photo_2023-04-06-16.19.07.jpeg', 'https://media.tproger.ru/uploads/2023/04/iconfinder-icon-2-cover.png']"
24'NY2AAF4JG'ИИ превращает селфи в постер к фильму Barbie'"Компания Warner Bros. запустила сервис на основе искусственного интеллекта, который превращает ваше селфи в постер к фильму Barbie.

Пользователи фотографируются и загружают снимок на сайт, а ИИ определяет границы лица, волос и тела на фото. При этом ИИ вырезает человека с фото без лишних пикселей, даже если снимок сделан не на констрастном фоне.

После этого можно откадрировать себя на постере к Barbie, изменить цвета постера и выбрать подходящий рекламный слоган, а также выбрать, кем вы будете — Барби или Кеном.

Почему это интересно: кажется, это первый случай, когда ИИ используется для продвижения голливудских фильмов.

При этом контент для промоушена генерируется пользователями. Это значительно удешевляет затраты киностудии на рекламу при гораздо большем вовлечении зрителей, чем если бы трейлеры к «Барби» крутили в кинотеатрах и на ТВ."'https://tproger.ru/articles/ii-prevrashhaet-selfi-v-poster-k-filmu-barbie/'https://media.tproger.ru/uploads/2023/04/353b6eca-26a6-49c8-bac6-454ad2fc1914.png'"['https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2023/04/f2a64757-a5f5-4b9f-a886-d46808984b16.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://sun1-88.userapi.com/s/v1/if1/qOFqDZXwHIpfH1jeOEwJQunLigxSepYMSJeOEpkD9BC-RJT9GwAH8u7sL7Tn1fQQLv__eKhl.jpg?size=400x400&quality=96&crop=86,376,525,525&ava=1', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'https://media.tproger.ru/uploads/2023/04/353b6eca-26a6-49c8-bac6-454ad2fc1914.png', 'https://media.tproger.ru/uploads/2023/04/2d202fec-3bf3-416c-a2c2-4e6365278832.png']"
25'B2K6WIIT3'Почему Python такой популярный'"В 2022 году Python возглавил список самых популярных языков программирования по данным индекса TIOBE, опередив таких гигантов, как Java и C++.

Именно с изучения «питона» начинают свой путь в программировании начинающие пользователи, а профессионалы используют его для решения широкого спектра задач — от научных исследований до веб-разработки и искусственного интеллекта.

Что сделало Python таким популярным, и какие факторы повлияли на его успех? В этой статье мы исследуем историю развития этого языка программирования, а также оцениваем перспективы в различных областях IT.

Примечание: это — статья, написанная человеком. Ранее у нас уже выходила статья на эту тему, написанная ChatGPT.

История языка Python

Язык программирования Python создал Гвидо ван Россум, нидерландский программист. Он начал работу над языком в конце 1989 года. Первая официальная версия Python 0.9.0 была опубликована в феврале 1991 года.

Вот краткая история развития языка за прошедшие десятилетия:

1990-е годы: Разработка и выпуск Python 0.9.0 (февраль 1991) и Python 1.0 (январь 1994).

Простой и понятный синтаксис привлекает программистов, ищущих альтернативу языкам, таким как Perl и C.

Формируется и растет сообщества разработчиков, которые активно участвуют в разработке и совершенствовании языка.

Появляются первые сторонние библиотеки и инструменты, такие как Numeric, для научных вычислений.

2000-е годы: Выпуск Python 2.0 (октябрь 2000) с новыми функциями, такими как поддержка Unicode и сборка мусора.

Улучшены производительность и стабильность языка.

Разработаны и выпущены важные сторонние библиотеки и фреймворки, таких как Django (июль 2005), для разработки веб-приложений.

Python начинают активно использовать в научных исследованиях и обработке данных, благодаря библиотекам NumPy (2006), SciPy и Matplotlib.

Выпускается версия Python 3.0 (декабрь 2008) с обратно несовместимыми изменениями и улучшениями в синтаксисе и поддержке Unicode.

2010-е годы: Сообщество программистов переходит на Python 3. Активно разрабатываются и обновляются библиотеки и инструменты для совместимости с новой версией языка.

Развивается область машинного обучения и искусственного интеллекта с использованием Python, благодаря таким библиотекам и фреймворкам, как TensorFlow (2015), Keras и PyTorch.

Возрастает популярность в образовательных учреждениях и среди начинающих программистов благодаря простому синтаксису и большому количеству доступных обучающих материалов.

Расширяется применение Python в различных областях, таких как веб-разработка, научные исследования, анализ данных, машинное обучение, автоматизация.

Разрабатываются новые версии языка, таких как Python 3.5 (сентябрь 2015) с операторами async/await для асинхронного кода, Python 3.6 (декабрь 2016) с f-строками и улучшениями производительности, и других версий с дополнительными улучшениями и новыми возможностями.

Появляется Jupyter Notebook (2014) — популярный инструмент для интерактивного программирования, особенно в области научных исследований и анализа данных.

Растет популярность языка среди разработчиков и компаний, что делает Python одним из самых востребованных языков программирования на рынке труда.

Краткий обзор версий:

Примечание: таблица отражает только основные версии Python и их ключевые изменения. В реальности существует больше версий с минорными изменениями и улучшениями.

В результате активного развития и применения Python в самых разных областях, а также благодаря его простому синтаксису, огромному количеству библиотек и открытому сообществу разработчиков, Python стал одним из самых популярных и востребованных языков программирования в мире.

Отличительные черты Python

Python — это высокоуровневый язык программирования, который обладает рядом особенностей и преимуществ по сравнению с другими языками программирования. Перечислим несколько преимуществ, которые отличают Python от других языков:

Читабельность и простота. Python известен своей чистой и лаконичной синтаксической структурой, что делает его легко читаемым и понятным даже для новичков. Этим он выгодно отличается от C++ или Java с более сложным и запутанным синтаксисом. Большая стандартная библиотека. Python имеет обширную стандартную библиотеку, которая включает множество модулей и пакетов для различных задач, таких как веб-разработка, обработка данных, машинное обучение, сетевое программирование и многое другое. Это сокращает время, необходимое для разработки программ, и уменьшает зависимость от сторонних библиотек. Кросс-платформенность. Python является кросс-платформенным языком. Программы на «питоне» можно запускать в различных операционных системах (Windows, macOS и Linux) без изменения исходного кода. Динамическая типизация. В отличие от статически типизированных языков (Java или C++), Python использует динамическую типизацию. Прием позволяет программистам не объявлять тип переменной заранее. В итоге мы получаем более гибкий код и сокращенное количество строк. Интерпретируемость. Python — интерпретируемый язык. Его код выполняется построчно, без необходимости компиляции. Это упрощает процесс разработки и облегчает отладку программ. Большое сообщество. Python обладает одним из самых больших и активных сообществ разработчиков, что способствует созданию множества ресурсов, таких как учебники, курсы, библиотеки и фреймворки, которые помогают ускорить процесс разработки и обучения. Применимость в различных областях. Python широко используется в различных сферах, таких как веб-разработка, научные исследования, анализ данных, машинное обучение, сетевое программирование, автоматизация и многих других. Это делает Python универсальным и гибким языком программирования, подходящим для широкого круга задач и проектов. Поддержка множественных парадигм программирования. Python поддерживает несколько парадигм программирования: объектно-ориентированное, процедурное и функциональное. Это позволяет разработчикам выбирать наиболее подходящий метод для решения конкретной задачи и создания гибких, масштабируемых приложений. Широкое использование в индустрии. Python используется множеством крупных компаний (Google, Facebook, Instagram, Spotify), что говорит о высоком уровне доверия к языку и его применимости для решения сложных задач. Открытый исходный код Python доступен для просмотра и модификации. Это позволяет разработчикам вносить свой вклад в развитие языка и использовать его в коммерческих проектах без оплаты лицензионных сборов.

Вывод: Python отличается от других языков программирования своей простотой, читабельностью, гибкостью, широкой поддержкой со стороны сообщества и применимостью в различных областях.

Плюсы и минусы Python по сравнению с Java

Python и Java — два наиболее популярных языка программирования, которые широко используются в различных областях. Несмотря на то, что эти языки имеют много общего, у каждого из них есть свои преимущества и недостатки. Рассмотрим их подробнее.

Плюсы Python по сравнению с Java:

Простота и читаемость кода. Python обладает более кратким и понятным синтаксисом, что упрощает чтение и написание кода. Java требует больше строк кода для реализации аналогичных задач, и его синтаксис может быть более громоздким. Большое количество библиотек для машинного обучения и анализа данных. Python имеет множество библиотек, таких как TensorFlow, Keras, PyTorch, Scikit-learn, Pandas. Этот язык более предпочтителен для работы с данными и машинным обучением. Java также имеет некоторые библиотеки для машинного обучения, такие как Deeplearning4j и Weka, но они менее разнообразны и популярны, чем аналогичные библиотеки для Python. Быстрое прототипирование. Python позволяет быстро создавать прототипы и экспериментировать благодаря своей динамической типизации и интерпретируемости. Java, будучи статически типизированным и компилируемым языком, требует больше времени для компиляции и исправления ошибок.

Минусы Python по сравнению с Java:

Производительность. Python является интерпретируемым языком, что снижает его производительность по сравнению с компилируемыми языками, такими как Java. В некоторых случаях, когда требуется высокая производительность, использование Java может быть предпочтительнее. Поддержка многопоточности. Python имеет GIL (Global Interpreter Lock), ограничивающий выполнение нативных потоков, что затрудняет эффективное использование многопоточности. Java, с другой стороны, имеет встроенную поддержку многопоточности и синхронизации, что позволяет создавать более эффективные многопоточные приложения. Мобильная разработка. Java является основным языком для разработки Android-приложений и имеет более широкую поддержку мобильных платформ. Python имеет ограниченную поддержку мобильных платформ и не является предпочтительным выбором для мобильной разработки.

Резюме: Python хорошо подходит для быстрого прототипирования, работы с данными, машинного обучения и веб-разработки, благодаря своему простому синтаксису и обширному набору библиотек.

Java же имеет преимущества в производительности, поддержке многопоточности и мобильной разработке. Выбор между Python и Java в конкретных ситуациях зависит от требований проекта, предпочтений разработчика и доступности ресурсов.

Оба языка являются популярными и широко используемыми, что обеспечивает поддержку сообщества и обширные возможности для роста и развития.

Плюсы и минусы Python по сравнению с С-языками

Python и C-языки — это две разные категории языков программирования. C-языки, включая C, C++, и Objective-C, относятся к низкоуровневым языкам.

Они используются для разработки операционных систем, драйверов устройств и других системных приложений. Python является высокоуровневым языком, который широко используется в области научных исследований, машинного обучения, веб-разработки и других областях.

Рассмотрим плюсы и минусы Python по сравнению с С-языками.

Плюсы Python по сравнению с C-языками:

Простота. Python — это простой и легкий в освоении язык программирования, который не требует изучения сложных концепций и синтаксиса, в отличие от C-языков. Высокая скорость разработки. Python обладает большим набором библиотек и инструментов, которые упрощают и ускоряют разработку приложений. Читаемость кода. Код Python легко читается, что делает его более подходящим для командной разработки и поддержки приложений. Динамическая типизация. Python позволяет использовать динамическую типизацию. Тип переменной определяется автоматически во время выполнения кода.

Минусы Python по сравнению с C-языками:

Медленная скорость выполнения. Код Python код выполняется медленнее, чем код на C-языках, из-за динамической типизации и управления памятью. Низкая производительность. Python может быть неэффективным для разработки системных приложений с повышенной производительностью из-за высокого уровня абстракции. Ограниченный доступ к низкоуровневым ресурсам. Python имеет ограниченный доступ к низкоуровневым ресурсам, таким как память, процессор и другие аппаратные ресурсы. Неудобство в разработке приложений с большим объемом данных. Python может столкнуться с проблемами производительности при работе с большим объемом данных, так как не имеет таких мощных возможностей для работы с памятью и процессором, как C-языки.

Выбор языка зависит от конкретной задачи, которую вы пытаетесь решить. Если вы разрабатываете системные приложения или приложения с высокой производительностью, то C-языки могут быть более предпочтительными. Если же вам нужно быстро и просто разработать приложение, стоит выбрать Python.

Перспективы Python в дальнейшем

Python активно используется во многих областях технологий и программирования, в том числе в AI/ML, веб-разработке, разработке приложений и в областях Big Data/Data Science:

AI/ML. Python остается одним из наиболее популярных языков программирования для разработки решений и моделей искусственного интеллекта и машинного обучения. Причина: большое количество библиотек и инструментов, таких как TensorFlow, Keras, PyTorch и Scikit-learn. Python продолжит играть ключевую роль в разработке решений AI/ML в ближайшем будущем.

В веб-разработке Python также имеет свои преимущества. Язык используется для создания веб-серверов и приложений, в том числе с использованием фреймворков, таких как Django и Flask. Python позволяет быстро и легко разрабатывать функциональные веб-приложения и сайты, особенно те, которые не требуют больших объемов вычислительных ресурсов.

В разработке приложений. Python также остается популярным языком для разработки приложений для настольных компьютеров, мобильных устройств, встраиваемых систем. Благодаря большому количеству библиотек и инструментов, таких как PyInstaller и Py2exe, Python может быть легко превращен в приложение, доступное для запуска на большинстве платформ.

В областях Big Data/Data Science. Python также широко используется в области обработки больших данных и Data Science. Благодаря библиотекам, таким как Pandas, Numpy и Matplotlib, Python может быть использован для обработки, анализа и визуализации больших объемов данных. Python также может использоваться для разработки алгоритмов машинного обучения и статистического анализа данных.

Благодаря своей простоте, гибкости и большому количеству библиотек и инструментов, Python останется одним из наиболее популярных языков программирования в ближайшем будущем.

Заключение

Python стал самым популярным языком программирования благодаря своей простоте, мощным библиотекам и широкому применению в различных областях.

Однако у него есть свои недостатки, такие как меньшая производительность и неподходящий для некоторых видов разработки.

Как вы считаете, сохранится ли популярность Python в будущем? Какие альтернативы вы видите для его применения в разных областях? Поделитесь своими мыслями в комментариях."'https://tproger.ru/articles/pochemu-python-takoj-populyarnyj-napisano-chelovekom/'https://media.tproger.ru/uploads/2023/04/3f508eed-124b-41d6-bcdf-88a4eff790f5-cover.png'"['https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://mc.yandex.ru/watch/27485085', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://sun1-88.userapi.com/s/v1/if1/qOFqDZXwHIpfH1jeOEwJQunLigxSepYMSJeOEpkD9BC-RJT9GwAH8u7sL7Tn1fQQLv__eKhl.jpg?size=400x400&quality=96&crop=86,376,525,525&ava=1', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'https://media.tproger.ru/uploads/2023/04/3f508eed-124b-41d6-bcdf-88a4eff790f5-cover-icon-original.png', 'https://media.tproger.ru/uploads/2023/04/1923509a-6920-424d-b5ba-f31ab040bbd4.png', 'https://media.tproger.ru/uploads/2023/04/3f508eed-124b-41d6-bcdf-88a4eff790f5-cover.png']"
26'LMVD37MZL'Как работают нейросети и в каких областях они скоро заменят людей'"В данный момент нейросети не могут заменить человека и вряд ли в ближайшие 10 лет это будет возможно. Нейросети могут только симулировать обработку данных. Благодаря росту объема вычислительных мощностей языковых моделей стало возможно симулировать обработку языка.

Большие языковые модели позволяют симулировать общение с человеком. Но нейронные сети не обладают мозгом в той мере, в которой обладает человек. Это просто память о миллионах диалогов из существующего мира и подборка ответов на вопрос от пользователя — что соответствует информации, существующей в памяти нейронной сети.

Нейронная сеть не может самостоятельно производить интеллектуальный и логический процесс. Она лишь может отфильтровать нужную информацию в своей базе данных и выдать ее пользователю.

Однако нейронные сети вполне могут дополнить сотрудников. Например, вы — непрофессиональный журналист и вам нужно написать статью. Возможно, нейронная сеть поможет это сделать лучше.

С каждым днем социальные медиа набирают все больше и больше оборота. Поэтому, это лучшая область для применения нейронных сетей. Большое количество сотрудников создает контент разного рода: видео, фото и текстовый. Нейронные сети могут помочь сделать этот процесс быстрее и лучше. Это своего рода велосипед: теперь контент-менеджер может начать «крутить педали» — сделать несколько запросов к нейронной сети. А она в свою очередь выдаст большой результат.

Таким образом, нейронная сеть — это не замена, а дополнение сотрудников. Например, если раньше над контентом работали 100 человек, то теперь эту же работу могут выполнять 10 контент-менеджеров, плюс, нейронная сеть. В каком-то роде это замещение людей, но в конкретных случаях — усиление человеческих способностей производить контент. Нейронная сеть произвести уникальный контент не может.

Генеративный искусственный интеллект

ChatGPT и другие искусственные интеллекты меняют ход событий в нашей истории. Теперь мы не знаем, с кем общаемся в сети, и кто написал новое сообщение: настоящий человек или искусственный интеллект. Мы не знаем, написал ли человек самостоятельно текст письма или он сгенерирован с помощью искусственного интеллекта. Но искусственный интеллект пока не находится на той стадии, чтобы он мог на равных соревноваться с человеком, человеческой эрудицией и способностью формировать предложения.

Все пытаются применить эту технологию в разных областях, но реального применения, кроме поиска информации, пока нет. Поиск информации с помощью ChatGPT является самым продуктивным и результативным инструментом. Вместо того чтобы искать какие-то слова в Яндексе или Google, вы можете спросить у ChatGPT, и он предоставит ссылки или краткую справку, которую найдет через интернет.

Почему ChatGPT запрещают в школах

Потому что ChatGPT и другие искусственные интеллекты атрофируют мозг человека. По большей части, это огромный вред для молодых людей, которые учатся в школе или институте. По факту, они не думают своей головой, а обращаются к ChatGPT, чтобы составить эссе или ответить на математические вопросы.

При помощи ИИ можно создавать вредоносный код, но это будет плохой вредоносный код. Проще самому его написать.

Понять, какой код и какой текст сгенерирован нейросетью, если нет источника информации, то есть следов, откуда взялся тот или иной текст, практически невозможно. Потому что нет никаких отличительных особенностей в тех словах или коде, которые использует нейронная сеть, по сравнению с человеком.

Как использование ИИ скажется на кибербезопасности

Мы входим в эру борьбы хорошего искусственного интеллекта с плохим искусственным интеллектом. С одной стороны, это прямая угроза для медиа-индустрии. Ведь вы не знаете, кто написал пост в социальной сети: бот с искусственным интеллектом или реальный человек. Но при этом компании будут защищаться от искусственного интеллекта и создавать антиботов. Антиботы будут пытаться определить по поведению пользователя, является ли он настоящим человеком или искусственным интеллектом.

Самый негативный ущерб, который есть от искусственного интеллекта сейчас, это выманивание денег у доверчивого населения с помощью телефонных звонков или сообщений. Теперь такие преступления может совершать один разработчик, общаясь с миллионами людей и рассылая сообщения с уловками для выманивания денег.

Почему программа ИИ настолько доступна

Да, это исключительно хайп и возможность натренировать искусственный интеллект еще больше. Компания OpenAI провела эффективную маркетинговую компанию. Она привлекла, условно, миллиард людей попробовать их ChatGPT, тем самым дав миллионы гигабайт информации для дальнейшего обучения нейронной сети на основе общения с реальными людьми. Это отличная возможность для компании развить дальше свой искусственный интеллект.

Что обусловило развитие генеративного ИИ

Искусственный интеллект в этом контексте, это нейронная сеть. Нейронная сеть может давать ответ среди конкретных опций, например, давать вероятность определенного события от нуля до единицы, либо может генерировать набор случайных или неслучайных символов, слов и так далее.

Нейронная сеть работает одинаково, просто генеративный ИИ, это один из типов искусственного интеллекта, который создает что-то новое: текст либо изображение. Это просто название типа искусственного интеллекта.

В каких сферах будет применяться генеративный ИИ

Как я уже говорил, основная сфера, в которой будет применяться ИИ, это поиск и объяснение какой-либо информации. То есть, вместо того, чтобы заходить на Википедию или Яндекс, вы можете зайти в ChatGPT, написать свой вопрос и получить достаточно точный ответ.

С точки зрения этических проблем мы являемся заложниками этики тех компаний, которые создают искусственный интеллект. Потому что эти компании могут направить искусственный интеллект и дать ему тот оттенок речи, который захотят, в том числе неэтичный. Но они в этом не заинтересованы, поэтому это вряд ли произойдет. Однако не стоит про это забывать.

Чего ждать от 2023 года в области развития ИИ

Я ожидаю, что хайп вокруг искусственного интеллекта пойдет на спад во второй половине 2023 года.

В 2022 году я не увидел большого прорыва в технологиях ИИ. Те технологии, которые стали доступны для большинства людей в 2022 году, уже были доступны разработчикам в 2021 году и более ранних годах. Просто в 2022 году эти технологии «докатились» до основной публики в мире.

ИИ в городском хозяйстве

Я думаю, что основное направление того, как городские власти будут использовать ИИ в будущем — это помощь и консультация населению. Сейчас городские власти тратят большое количество денег на консультацию населения по тем или иным вопросам: ЖКХ, административно-правовые, получение документов в обычной жизни.

Сейчас население звонит на горячую линию и задает эти вопросы операторам или обращается в офисы МФЦ. Возможно, сотрудники данных ведомств тратят до 30% своего времени на подготовку ответов на часто задаваемые вопросы. Но, по факту, на эти вопросы уже есть определенные ответы и все, что необходимо сделать властям — это загрузить вопросы и ответы в систему искусственный интеллект.

Каждый раз, когда человек обращается к оператору, он обращается на самом деле не к живому человеку, а к искусственному интеллекту. И на основе анализа тысяч ответов, которые уже были заданы другому оператору, получает грамотный ответ на свой вопрос.

Поэтому городские власти в будущем смогут сэкономить большое количество денег, разгрузив операторов и сотрудников МФЦ от повторяющихся вопросов и ответов. Это станет основным использованием ИИ в городском хозяйстве. То, что мы не наблюдаем сейчас, к сожалению. Однако в скором времени это станет реальностью и позволит городским жителям наслаждаться качественными услугами. А городские власти смогут сфокусировать внимание на других, более острых вопросах, которые нельзя автоматизировать с помощью искусственного интеллекта.

Дмитрий Дьяконов, основатель риэлт-сервиса Arina"'https://tproger.ru/articles/kak-rabotayut-nejroseti-i-v-kakih-oblastyah-oni-skoro-zamenyat-lyudej-239134/'https://media.tproger.ru/uploads/2023/04/228dcfed-135a-4884-9914-c074de0661a8.jpg'"['https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2022/12/4271720_anime_automaton_cartoons_gundam_gundam-0080_icon-cover.png', 'https://media.tproger.ru/uploads/2022/07/logo-renessans-32x32.jpg', 'https://sun1-88.userapi.com/s/v1/if1/qOFqDZXwHIpfH1jeOEwJQunLigxSepYMSJeOEpkD9BC-RJT9GwAH8u7sL7Tn1fQQLv__eKhl.jpg?size=400x400&quality=96&crop=86,376,525,525&ava=1', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2023/04/228dcfed-135a-4884-9914-c074de0661a8.jpg', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2016/01/NW_RD.jpg', 'https://media.tproger.ru/uploads/2021/03/iconfinder_Neural_network_2844558-cover.png', 'https://media.tproger.ru/uploads/2021/03/nn-icon-cover.png', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg']"
27'23Q0W38N4'Apple запатентовала кейс для AirPods с сенсорным дисплеем'"Бюро по патентам товарным знакам США опубликовали новые патенты компании Apple, в которых компания решила добавить к кейсу для AirPods сенсорный дисплей и несколько других способов взаимодействия.

Кейс для наушников сейчас — обычно просто пассивная зарядка. И тут есть простор для того, чтобы прокачать этот девайс. Как минимум, управлять воспроизведением, изменять источники звука, режимы вывода звука и так далее. А ещё, судя по патентам, передавать данные с помощью дисплея.

Например, в одном из вариантов предполагается управление Apple Music через кейс. В другом — кейс реагирует на определённые жесты по типу касания и взмахов. А ещё с сенсорного экрана можно управлять другими приложениями из iPhone.

На самом деле, патенты были поданы Apple ещё в сентябре 2021 года, но Бюро по патентам товарным знакам США опубликовали их только на прошлой неделе.

С одной стороны, компании часто патентуют разработки на всякий случай. С другой — даже после после регистрации патента может пройти много времени прежде, чем разработка выйдет на массовый рынок.

Опрос: Как считаете, нужны ли такие дополнения к кейсам для наушников или это уже перебор?"'https://tproger.ru/articles/apple-zapatentovala-kejs-dlya-airpods-s-sensornym-displeem/'https://media.tproger.ru/uploads/2023/04/629d5d82-f9ee-428f-bdf7-20e55cd814bb-cover.png'"['https://media.tproger.ru/uploads/2023/04/936c265f-8488-4e6a-8726-fc4ede89ab58.jpeg', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2023/03/b1fef982-e91e-48e3-9358-46e14d6adac8-cover.png', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2023/04/69db27b6-ae9a-4f64-ace1-0c299db242b3.jpeg', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2023/04/7c27f260-49a2-475c-8d4e-ae303c01db99.jpeg', 'https://media.tproger.ru/uploads/2022/07/logo-renessans-32x32.jpg', 'https://sun1-88.userapi.com/s/v1/if1/qOFqDZXwHIpfH1jeOEwJQunLigxSepYMSJeOEpkD9BC-RJT9GwAH8u7sL7Tn1fQQLv__eKhl.jpg?size=400x400&quality=96&crop=86,376,525,525&ava=1', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2023/04/32d81cec-9cda-4c43-bedd-f2c92975b625.jpeg', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://media.tproger.ru/uploads/2017/01/penguinsmini.png', 'https://media.tproger.ru/uploads/2023/04/0b5fef78-b7ba-46a1-9b0c-5896e3e6f4b9.jpeg', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'https://media.tproger.ru/uploads/2023/04/629d5d82-f9ee-428f-bdf7-20e55cd814bb-cover-icon-original.png', 'https://media.tproger.ru/uploads/2023/04/629d5d82-f9ee-428f-bdf7-20e55cd814bb-cover.png', 'https://media.tproger.ru/uploads/2017/02/swift.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg']"
28'7HGX0JI36'Всё, что вы хотели знать об автоинкременте, но стеснялись спросить'"Всё, что вы хотели знать об автоинкременте, но стеснялись спросить

Автоинкремент — это функция в базах данных, которая автоматически генерирует уникальный номер для каждой новой строки, добавленной в таблицу.

Этот номер обычно используется в качестве первичного ключа для уникальной идентификации каждой строки в таблице.

Система базы данных автоматически присваивает каждому новому ряду следующий доступный номер, избавляя пользователя от необходимости вручную управлять значениями первичного ключа. Это упрощает процесс добавления новых строк и гарантирует, что каждая строка имеет уникальный идентификатор.

Если вы хотите попрактиковаться в создании таблиц с автоинкрементными столбцами и выполнении операторов SQL, вы можете попробовать использовать онлайн-редактор SQL, такой как SQLize.online, который позволяет создавать таблицы, вставлять данные и выполнять SQL-запросы в действующей базе данных.

Ниже показано, как создать таблицу с автоинкрементным столбцом в различных РСУБД.

SQLite:

CREATE TABLE example_table ( id INTEGER PRIMARY KEY AUTOINCREMENT, name VARCHAR(50), age INT );

В этом примере столбец id определен как целочисленный тип данных с ключевым словом AUTOINCREMENT. Он также задан как первичный ключ таблицы.

MySQL и MariaDB:

CREATE TABLE example_table ( id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(50), age INT );

В этом примере столбец id определен как столбец с автоматическим инкрементом с помощью ключевого слова AUTO_INCREMENT. Он также установлен в качестве первичного ключа таблицы.

SQL Server:

CREATE TABLE example_table ( id INT IDENTITY(1,1) PRIMARY KEY, name VARCHAR(50), age INT );

В этом примере столбец id определен как столбец идентичности с помощью ключевого слова IDENTITY. Он также задан как первичный ключ таблицы. Числа 1,1 задают начальное значение и значение инкремента автоинкрементного столбца. Например мы можем начать нумерацию с 100 и даждый раз прибавлять 10 (100, 110, 120, 130…) заменив IDENTITY(1,1) на IDENTITY(100, 10). Больше того, в качестве начала и шага можно использовать отрицательные числа. Попробуйте сами здесь.

Oracle:

CREATE SEQUENCE example_table_seq; CREATE TABLE example_table ( id NUMBER DEFAULT example_table_seq.nextval PRIMARY KEY, name VARCHAR2(50), age INT );

В этом примере сначала создается последовательность с помощью оператора CREATE SEQUENCE. Затем столбец id определяется как числовой тип данных со значением по умолчанию, равным следующему значению последовательности. Он также задается в качестве первичного ключа таблицы. В приведенном примере будет создана последовательность с начальным значением 1 и шагом 1. Если нам нужен другой вариант мы можем указать параметры INCREMENT BY и START WITH при создании

CREATE SEQUENCE example_table_seq INCREMENT BY 10 START WITH 10;

PostgreSQL имеет несколько вариантов определения автоинкрементного столбца. Наиболее популярным является ключевое слово `SERIAL`.

CREATE TABLE example_table ( id SERIAL PRIMARY KEY, name VARCHAR(50), age INT );

В этом примере столбец id определен как последовательный тип данных, что эквивалентно столбцу с автоматическим инкрементом в других СУБД. Он также задан как первичный ключ таблицы.

Кроме того, для создания автоинкрементного столбца в PostgreSQL можно использовать как синтаксис `IDENTITY`, так и синтаксис `SEQUENCE`. Вот примеры создания автоинкрементного столбца с использованием синтаксиса IDENTITY и SEQUENCE в PostgreSQL:

CREATE TABLE example_table ( id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY, name VARCHAR(50), age INT );

CREATE SEQUENCE example_table_seq; CREATE TABLE example_table ( id INT DEFAULT nextval('example_table_seq') PRIMARY KEY, name VARCHAR(50), age INT );

Как и в примере с Oracle DB, вариант с SEQUENCE предлагает возможности гибкой конфигурации автоинкремента в отличии от SERIAL

Чтобы вставить новую строку в таблицу с автоинкрементным столбцом, мы можем использовать оператор INSERT INTO, указав для всех столбцов, кроме автоинкрементного:

INSERT INTO example_table (name, age) VALUES ('John Smith', 30);

Большинство диалектов SQL позволяет вставлять несколько строк в один запрос.

INSERT INTO example_table (name, age) VALUES (""Джейн Доу"", 25), ('Боб Джонсон', 40), ('Элис Браун', 35);

Если сейчас сделать выборку из таблицы Мы увидим что столбец `id` был автоматически заполнен последовательными числами:

SELECT * FROM example_table;

+====+=============+=====+ | id | name | age | +====+=============+=====+ | 1 | Джейн Доу | 25 | | 2 | Боб Джонсон | 40 | | 3 | Элис Браун | 35 | +----+-------------+-----+

SQLite, MySQL & MariaDB позволяет вставлять произвольные значения в столбец с автоматическим увеличением и обновлять последовательность.

INSERT INTO example_table (id, name, age) VALUES (11, 'John Smith', 30); INSERT INTO example_table (name, age) VALUES ('Jane Doe', 25), ('Bob Johnson', 40), ('Alice Brown', 35); SELECT * FROM example_table;

В приведенном выше примере мы вставляем ’John Smith’ с id = 11 и затем ещё три строки без указания значений `id`. Эти строки будут вставлены со следующими значениями последовательности 12, 13, 14 Проверьте это здесь.

+====+=============+=====+ | id | name | age | +====+=============+=====+ | 11 | John Smith | 30 | | 12 | Jane Doe | 25 | | 13 | Bob Johnson | 40 | | 14 | Alice Brown | 35 | +----+-------------+-----+

MS SQL Server по умолчанию не допускает такого волюнтаризма. Поэтому, если нам нужно вставить значение в столбец identity, мы должны установить IDENTITY_INSERT в нашей таблице:

SET IDENTITY_INSERT example_table ON INSERT INTO example_table (id, name, age) VALUES (11, 'John Smith', 30) SET IDENTITY_INSERT example_table OFF;

Приведенный выше запрос вставляет запись с id = 11 и перемещает вверх счетчик для вставки последующих записей.

А как насчет Oracle? Эта DB позволяет вставлять значения в столбец id, без влияния на последовательности, поэтому мы можем вставлять строку с произвольным id, но это может привести к конфликту, как в следующем примере:

CREATE SEQUENCE example_table_seq; CREATE TABLE example_table ( id NUMBER DEFAULT example_table_seq.nextval PRIMARY KEY, name VARCHAR2(50), age NUMBER ); --вставляем строку с id = 3 INSERT INTO example_table (id, name, age) VALUES (3, 'John Smith', 30); -- следующие запросы вставят строки с id 1 и 2 INSERT INTO example_table (name, age) VALUES ('Jane Doe', 25); -- 1 INSERT INTO example_table (name, age) VALUES ('Bob Johns', 40); -- 2 -- здесь получаем ошибку OCIStmtExecute: -- ORA-00001: unique constraint (0c7690dacb6b.SYS_C009760) violated INSERT INTO example_table (name, age) VALUES ('Alice Brown', 35); SELECT * FROM example_table;

PostgreSQL с синтаксисом SERIAL или SEQUENCE для столбца с автоматическим увеличением показывают нам такое же поведение, как и Oracle (строка вставлена, последовательность не обновлена, ошибка при дублировании). Но при использовании синтаксиса IDENTITY вставка строки с произвольным идентификатором не допускается. Это ограничение может быть обойдено переопределением системного значения, как в следующем примере, но опять же это не обновляет последовательность и может вызвать конфликт.

CREATE TABLE example_table ( id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY, name VARCHAR(50), age INT ); INSERT INTO example_table (id, name, age) OVERRIDING SYSTEM VALUE VALUES (3, 'John Smith', 30); INSERT INTO example_table (name, age) VALUES ('Jane Doe', 25); INSERT INTO example_table (name, age) VALUES ('Bob Johnson', 40); INSERT INTO example_table (name, age) VALUES ('Alice Brown', 35); SELECT * FROM example_table;

Давайте двигаться дальше! Как изменить значение автоинкремента?

В SQLite можно сбросить значение автоматического увеличения для таблицы с помощью таблицы sqlite_sequence.

Таблица sqlite_sequence — это внутренняя таблица, используемая SQLite для отслеживания следующего значения автоинкремента для каждой таблицы в базе данных. Каждая строка в таблице sqlite_sequence представляет таблицу в базе данных, а в столбце seq хранится следующее значение автоматического увеличения для этой таблицы. Поэтому, когда нам нужно изменить его, просто попробуйте следующее:

UPDATE sqlite_sequence SET seq = 100 WHERE name = 'example_table'; INSERT INTO example_table (name, age) VALUES ('John Gold', 30);

Приведенный выше код изменит значение автоприращения на 100, а следующая вставленная строка получит id = 101;

Мы можем удалить автоинкремент следующим запросом:

DELETE FROM sqlite_sequence WHERE name = 'example_table';

или установить его меньше максимального значения в автоматически увеличиваемом столбце, но после вставки новой строки sqlite_sequence будет исправлен автоматически. Просто посмотрите следующий фрагмент кода:

CREATE TABLE example_table ( id INTEGER PRIMARY KEY AUTOINCREMENT, name VARCHAR(50), age INT ); INSERT INTO example_table (name, age) VALUES ('Jane Doe', 25), ('Bob Johnson', 40), ('Alice Brown', 35); SELECT * FROM sqlite_sequence WHERE name = 'example_table';

данный код вернет следующий результат:

+===============+=====+ | name | seq | +===============+=====+ | example_table | 3 | +---------------+-----+

Удалим его и убедимся что данные исчезли:

DELETE FROM sqlite_sequence WHERE name = 'example_table'; SELECT * FROM sqlite_sequence WHERE name = 'example_table';

но после следующей записи вставленное значение последовательности также будет восстановлено. Попробуйте здесь.

MySQL & MariaDB также позволяет изменять автоинкремент с помощью запроса ALTER TABLE, но оно не может быть меньше максимального значения в автоматически увеличенном столбце:

ALTER TABLE example_table AUTO_INCREMENT = 100;

В Oracle можно изменить последовательность с помощью инструкции ALTER SEQUENCE. Этот оператор позволяет изменять характеристики последовательности, такие как минимальное и максимальное значения, шаг и начальное значение. Если необходимо внести более существенные изменения в последовательность, например изменить ее тип данных или полностью удалить ее, может потребоваться удалить и пересоздать последовательность.

DROP SEQUENCE example_table_seq; CREATE SEQUENCE example_table_seq INCREMENT BY 1 START WITH 100;

Обратите внимание, что в Oracle нет проверки конфликтов между новым значением последовательности и существующими записями. Поэтому важно проявлять осторожность и использовать эту функцию ответственно, чтобы избежать непредвиденных последствий.

В PostgreSQL не имеет значения, как создается столбец с автоматическим увеличением (SERIAL, GENERATED ALWAYS AS IDENTITY или с помощью CREATE SEQUENCE), поскольку для изменения последовательности можно использовать инструкцию ALTER SEQUENCE. Однако данная СУБД не гарантирует отсутствие конфликтов после модификации последовательности, поэтому важно проявлять осторожность.

ALTER SEQUENCE example_table_id_seq RESTART WITH 100;

***

Автоинкремент — это функция баз данных, которая генерирует уникальный номер для каждой новой строки, добавляемой в таблицу, избавляя пользователя от необходимости вручную управлять значениями первичного ключа.

Эта функция поддерживается большинством СУБД и может быть легко реализована с использованием разного синтаксиса в каждой базе данных. SQLite, MySQL и MariaDB поддерживают столбцы с автоинкрементом, а также PostgreSQL и Oracle, которые также допускают более продвинутые параметры, такие как последовательности и последовательные типы данных.

Хотя каждая база данных имеет свой собственный синтаксис для реализации и управления автоинкрементом.

В целом функция автоинкремента значительно упрощает процесс добавления новых строк и гарантирует, что каждая строка будет иметь уникальный идентификатор, что необходимо для многих операций с базой данных."'https://tproger.ru/articles/vse-chto-vy-hoteli-by-znat-ob-avtoinkremente-no-stesnyalis-sprosit/'https://tproger.ru/favicon.ico?v=2'"['https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'https://media.tproger.ru/uploads/2023/04/e1e2008a-00c7-4ce9-ab2b-36214236d076-cover-icon-original.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big-32x32.png', 'https://sun1-88.userapi.com/s/v1/if1/qOFqDZXwHIpfH1jeOEwJQunLigxSepYMSJeOEpkD9BC-RJT9GwAH8u7sL7Tn1fQQLv__eKhl.jpg?size=400x400&quality=96&crop=86,376,525,525&ava=1', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://mc.yandex.ru/watch/27485085', 'https://tproger.ru/favicon.ico?v=2', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg']"
29'FAQ1I1YJ7'Пост для тех, кому за 30: вспоминаем то, что не поймут дети'"Пост для тех, кому за 30: вспоминаем то, что не поймут дети

Привет-привет! Я вижу, ты хочешь прокомментировать это, могу ли я тебе помочь?

Clippy Экс-помощник Microsoft Office

Узнали эту милую скрепку? Это — Clippy, он же Скрепыш, который был помощником в Microsoft Office.

В версии 2007 он был «уволен» из-за огромной нелюбви к нему у пользователей, назойливости и полной бесполезности.

Та же судьба ждала пса Ровера — пса-помощника из Windows 95 и XP, который будто бы помогал искать нужные файлы, но на самом деле просто отвлекал пользователей анимациями, пока система отчаянно и тугодумно обрабатывает запрос.

Однако прошло время, и — парадоксально, но факт — пользователи стали скучать не только по Скрепышу и Роверу, но и по диалапу, по установке программ с 20 дискет и по прожигу дисков.

Скучаете ли вы по Скрепышу? Да, скрепка была прикольной

Нет, скрепка очень раздражала

В общем, ностальгировать по тому, что вряд ли поймут нынешние дети, к счастью или к сожалению.

Вот, по чему больше всего ностальгируют читатели Типичного Программиста в VK.

Чтобы поиграть в CS, нужно было зайти в Half-Life

Это — самый популярный коммент под записью.

Когда-то, чтобы поиграть в CS, нужно было скачать мод в виде архива, распаковать его прямо в папку с Half-Life, зайти в игру и переключиться на CS через меню.

То же, например, касалось и Team Fortress.

Кнопка Turbo на системном блоке

Раньше на системных блоках было три кнопки: включение, перезагрузка и турбо.

Обычно кнопка встречалась на компьютерах от IBM, а её функция заключалась в том, чтобы переключать частоту процессора. Проще говоря, «разогнать проц» можно было одним нажатием.

Есть и нюансы: частота процессора по умолчанию была высокой (если 16 МГц можно назвать высокой), а кнопка Turbo уменьшала частоту до 8 МГц.

Эта фича нужна была для того, чтобы работать со старыми программами и играми, которые на новых процессорах начинали реагировать на команды с космической скоростью.

То же самое можно наблюдать и сейчас, если, например, установить Fallout на современный ПК. Если игра запустится, всё в ней будет работать на скорости 3-10х.

Позже кнопка Turbo появилась и на клавиатурах, но отвечала она за скорость печати символов при зажатии клавиш.

«Блин, привод только R-ка, вот почему алкоголь не пашет»

Чаще всего CD-приводы на компьютерах предназначались только для чтения и обозначались как CD-ROM. Приводы, которые могли записывать данные на диски, обозначались как CD-RW.

Чтобы записать данные на диск, нужно было смонтировать образ в программе Alcohol, а потом «прожечь» диск через программу Nero.

Ещё можно было и записать, и прожечь диск в Alcohol 120%, но с прожигом он справлялся нестабильно.

В общем, на этом пути могла возникнуть куча сложностей: то диск не тот, то привод, то программа всё залажала… В нашем случае возникла беда с приводом.

C:

c

c.exe

В далёкие-далёкие времена, когда на ПК ещё не было Windows, все пользовались Norton Commander.

Это файловый менеджер для операционной системы DOS, который позволял управлять файлами. Собственно, в его определении уже всё сказано.

По привычке Нортон использовался даже в Windows: его часто использовали для передачи файлов между дисками. Просто Windows мог не видеть какие-то файлы или долго искать их, а в Нортоне выполнить задачу можно было легко и просто.

На постсоветском пространстве даже был клон Нортона — Volkov Commander. В чём была принципиальная разница, вспомнить уже сложно.

Куплю шестизнак!

Тут речь идёт о номерах ICQ. У пользователей были идентификаторы, состоящие из цифр.

К примеру, у автора этой статьи номер аськи был 605 698 929 — девятизначный номер и совсем не крутой. Позже номер зачем-то угнали, а теперь номеров в ICQ и вовсе нет.

Крутым же считалось обладать шестизначным номером, поскольку это был самый короткий из возможных. Люди месяцами откладывали деньги для покупки шестизнака, после чего слонялись по чятикам и искали продавцов фразой «Куплю шестизнак!».

***

А по чему соскучились вы, чего никогда не поймут дети?"'https://tproger.ru/articles/post-dlya-teh-komu-za-30-vspominaem-to-chto-ne-pojmut-deti/'https://media.tproger.ru/uploads/2023/04/5f62c9e9-f5db-43d4-a891-5c1f9ba09218.jpg'"['https://media.tproger.ru/uploads/2023/04/ab7ce293-702f-44bf-bb2e-bda126ac387b-cover-icon-original.png', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://media.tproger.ru/uploads/2023/04/d39fd77f-4da9-4aed-87f1-4e6e29919111.png', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2023/04/F_V_217tsLlxuULPCCE4yw-e1680689092560.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2023/04/1db2ba6c-44f5-4ecd-8ffc-bcacab1ef0b3.jpg', 'https://sun1-88.userapi.com/s/v1/if1/qOFqDZXwHIpfH1jeOEwJQunLigxSepYMSJeOEpkD9BC-RJT9GwAH8u7sL7Tn1fQQLv__eKhl.jpg?size=400x400&quality=96&crop=86,376,525,525&ava=1', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'https://media.tproger.ru/uploads/2023/04/552ebc9f-7e1f-4079-9cc6-1ff63570eb1e.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""100%px"" viewBox=""0 0 100% 100%""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2023/04/5f62c9e9-f5db-43d4-a891-5c1f9ba09218.jpg']"
30'AJND002MC'Энтузиаст создал бота, который собирает Кубик Рубика за 4,56 секунды'"Энтузиаст создал бота, который собирает Кубик Рубика за 4,56 секунды

Пользователь сайта instructables с ником aaedmusa собрал робота, который справляется со сборкой Кубика Рубика меньше чем за 5 секунд!

Всё на основе микроконтроллера Teensy 4.1 и шести шаговых двигателей, управляемых драйверами TMC2208.

Но есть несколько нюансов:

Для робота не подходит обычный кубик. Чтобы бот смог взаимодействовать с кубиком, ему приделали специальные крепления.

В роботе не предусмотрена система машинного зрения для фиксации состояния кубика. Вместо этого состояние кубика нужно вводить вручную в веб-приложение на подключённом к роботу компьютере.

А даже когда состояние кубика загружено в программу, бот собирает бота менее, чем за пять секунд. Но даже это — недостаточно быстро, чтобы побить мировой рекорд человека. Мировой рекорд сборки кубика человеком составляет 3,47 секунды.

Тем не менее, это очень хороший результат. А самое приятное, что aaedmusa поделился инструкцией по сборке и большим видеогайдом.

Так что при желании, бота можно доработать."'https://tproger.ru/articles/entuziast-sozdal-bota-kotoryj-sobiraet-kubik-rubika-za-4-56-sekundy/'https://tproger.ru/favicon.ico?v=2'"['https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2023/03/b1fef982-e91e-48e3-9358-46e14d6adac8-cover.png', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'https://media.tproger.ru/uploads/2021/01/python_telegram_bot-cover.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2022/07/logo-renessans-32x32.jpg', 'https://sun1-88.userapi.com/s/v1/if1/qOFqDZXwHIpfH1jeOEwJQunLigxSepYMSJeOEpkD9BC-RJT9GwAH8u7sL7Tn1fQQLv__eKhl.jpg?size=400x400&quality=96&crop=86,376,525,525&ava=1', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2023/04/7f6e5bcf-bcd5-4b7a-915d-2394a82876c3-cover-icon-original.png', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://media.tproger.ru/uploads/2018/04/rawpixel-579231-unsplash-e1541749144169.jpg', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://mc.yandex.ru/watch/27485085', 'https://tproger.ru/favicon.ico?v=2', 'https://media.tproger.ru/uploads/2018/07/artifint.jpg', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""100%px"" viewBox=""0 0 100% 100%""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg']"
31'21WA2PWRQ'Дайджест Python #6: как заказать столик в ресторане через ChatGPT и почему лень — не порок'"Дайджест Python #6: как заказать столик в ресторане через ChatGPT и почему лень — не порок

Собрали дайджест из лучших материалов по Python с 16 по 31 марта, которые только смогли найти. Дайджест включает статьи и видео на русском и английском языках.

Узнайте, как заказать столик в ресторане при помощи ChatGPT, как инвестировать эффективнее при помощи Big Data, как создать свой голосовой помощник и почему лень — это не порок.

Big Data / Data Science

AI и ML

Веб / Django / Flask

Скрипты, приложения и боты

Развлекательный контент

Нашли что-нибудь полезное и интересное для себя? Расскажите, какие материалы понравились вам больше всего, а каких статей не хватило, чтобы следующий дайджест получился ещё лучше.

Нашли что-то интересное в дайджесте? Да

Нет

Если дайджест вам понравился, посмотрите две предыдущие подборки:

А ещё присылайте в комментарии статьи и видео, которые ускользнули от нашего взгляда и не попали в дайджест. Поделитесь полезными материалами с другими читателями! 😉"'https://tproger.ru/articles/dajdzhest-pitona-4-aprelya/'https://media.tproger.ru/uploads/2023/04/2be99d89-ea27-4ee1-b25b-a2393761aaeb-cover.png'"['https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'https://media.tproger.ru/uploads/2021/01/python_telegram_bot-cover.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2023/04/2be99d89-ea27-4ee1-b25b-a2393761aaeb-cover.png', 'https://media.tproger.ru/uploads/2022/07/logo-renessans-32x32.jpg', 'https://sun1-88.userapi.com/s/v1/if1/qOFqDZXwHIpfH1jeOEwJQunLigxSepYMSJeOEpkD9BC-RJT9GwAH8u7sL7Tn1fQQLv__eKhl.jpg?size=400x400&quality=96&crop=86,376,525,525&ava=1', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2023/04/2be99d89-ea27-4ee1-b25b-a2393761aaeb-cover-icon-original.png', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'https://media.tproger.ru/uploads/2020/12/css-flexbox-animation-cover-1.png', 'https://media.tproger.ru/uploads/2019/07/iconfinder-icon-19-cover-1.jpg', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2021/01/Python_regexp-cover.png', 'https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg']"
32'C1T8H1BEG'Простой  и эффективный метод удаления дубликатов из таблицы'"В целом, удаление дубликатов является важной задачей для поддержания качества и производительности баз данных, а также для предотвращения ошибок в программном коде, который использует эти данные.

В этой короткой статье я хочу поделиться простым способом удаления дубликатов из таблицы. Запрос работает в базах данных MySQL, MariaDB и PostgreSQL. Если вам интересен такой запрос для других СУБД, напишите мне в комментариях.

Все вышеизложенные а также любые другие запросы можно воспроизвести на SQLize.online — онлайн редакторе SQL.

Давайте начнем. Предположим, у нас есть простая таблица с двумя столбцами: id — это первичный ключ и v простое целочисленное значение

create table tbl ( id int primary key, val int ); insert into tbl (id, val) values (1, 1), (2, 1), (3, 2), (4, 2), (5, 1), (6, 1), (7, 2), (8, 3), (9, 2), (10, 4), (11, 3);

Приведенный выше код создает таблицу и вставляет несколько значений. Выведем на экран все строки из нашей тестовой таблицы. Как видите, id имеет уникальные значения, но поле val имеет содержит дубликаты:

SELECT * FROM tbl; +====+===+ | id | v | +====+===+ | 1 | 1 | | 2 | 1 | | 3 | 2 | | 4 | 2 | | 5 | 1 | | 6 | 1 | | 7 | 2 | | 8 | 3 | | 9 | 2 | | 10 | 4 | | 11 | 3 | +----+---+

Наша задача состоит в том, чтобы удалить строки с поввторяющимися значениями в столбце val и сохранить уникальные значения с минимальным значением идентификатора id.

Для начала попробуем найти дубликаты. Мы можем использовать простое LEFT JOIN таблицы самой с собой по полю val с дополнительным условием для предотвращения объединения идентичных строк (для наглядности дадим алиасы для таблицы и копии):

select * from tbl source_tbl left join tbl copy_tbl on source_tbl.val = copy_tbl.val and source_tbl.id > copy_tbl.id;

В результате запроса получим следующий результат:

+====+===+========+========+ | id | val | id | val | +====+===+========+========+ | 1 | 1 | (null) | (null) | | 2 | 1 | 1 | 1 | | 3 | 2 | (null) | (null) | | 4 | 2 | 3 | 2 | | 5 | 1 | 1 | 1 | | 5 | 1 | 2 | 1 | | 6 | 1 | 1 | 1 | | 6 | 1 | 2 | 1 | | 6 | 1 | 5 | 1 | | 7 | 2 | 3 | 2 | | 7 | 2 | 4 | 2 | | 8 | 3 | (null) | (null) | | 9 | 2 | 3 | 2 | | 9 | 2 | 4 | 2 | | 9 | 2 | 7 | 2 | | 10 | 4 | (null) | (null) | | 11 | 3 | 8 | 3 | +----+---+--------+--------+

Видно, что уникальные строки с минимальным id имеют (null) в столбцах из copy_tbl. Это происходит потому что для минимального значения id в исходной таблице нет строк соответсвующих условию в таблице копии. Итак, нам нужно оставить строки в которых нет соответствия (уникальные) и удалить. Это можно осуществить следующим запросом:

delete tbl.* from tbl left join t copy_tbl on tbl.val = copy_tbl.val and tbl.id > copy_tbl.id where copy_tbl.id is not null;

P.S. Уже после написания этой статьи мой коллега @Akina предложил более короткую версию:"'https://tproger.ru/articles/prostoj-i-effektivnyj-metod-udaleniya-dublikatov-iz-tablicy/'https://media.tproger.ru/uploads/2023/04/55749e2a-e8b9-4456-92fe-83be6c863cae-cover.png'"['https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2020/06/datasheet-icon-cover.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2022/07/logo-renessans-32x32.jpg', 'https://sun1-88.userapi.com/s/v1/if1/qOFqDZXwHIpfH1jeOEwJQunLigxSepYMSJeOEpkD9BC-RJT9GwAH8u7sL7Tn1fQQLv__eKhl.jpg?size=400x400&quality=96&crop=86,376,525,525&ava=1', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2020/12/sql-commands-mysql-cover-1.png', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'https://media.tproger.ru/uploads/2017/09/postgres-tools.jpg', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2023/04/55749e2a-e8b9-4456-92fe-83be6c863cae-cover.png', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2023/04/55749e2a-e8b9-4456-92fe-83be6c863cae-cover-icon-original.png', 'https://media.tproger.ru/uploads/2020/08/iconfinder__sql_2486249-cover-1.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg']"
33'B0KLVHL77'В Южной Корее разрешили использовать умное кольцо как тонометр'"Может показаться, что это какая-то проходящая новость для бабушек, но на деле это большой прорыв в сфере носимых девайсов.

CART-1 Plus — это разработка стартапа Sky Labs. Они раньше умели хорошо измерять пульс, а добавка измерения давления делает её очень полезной для мониторинга давления во время сна и в принципе где и когда угодно. Это очень важно для людей с проблемным давлением.

Пока что в принципе нет достойных миниатюрных девайсов, которые бы умели точно измерять давление. А тонометры в привычном виде — это большая коробка с надувающимся нарукавником. Совсем не похоже на устройства из 2023 года, правда? Но самое главное — это как раз разрешение считать такой девайс медицинским устройством.

Перед тем, как выходить на массовый рынок, остался финальный босс — получить разрешения в США. Но похожее разрешение в Южной Корее уже хороший прецедент, что дело пойдём дальше."'https://tproger.ru/articles/v-yuzhnoj-koree-razrewili-ispolzovat-umnoe-kolco-kak-tonometr/'https://media.tproger.ru/uploads/2023/04/54c064ea-0e4a-4c21-ae3d-7285d82fb272-cover.png'"['https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://mc.yandex.ru/watch/27485085', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://sun1-88.userapi.com/s/v1/if1/qOFqDZXwHIpfH1jeOEwJQunLigxSepYMSJeOEpkD9BC-RJT9GwAH8u7sL7Tn1fQQLv__eKhl.jpg?size=400x400&quality=96&crop=86,376,525,525&ava=1', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'https://media.tproger.ru/uploads/2023/04/ec9b290d-07dc-4701-aa92-1f49e2efe29a.jpg', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'https://media.tproger.ru/uploads/2023/04/54c064ea-0e4a-4c21-ae3d-7285d82fb272-cover.png', 'https://media.tproger.ru/uploads/2023/04/54c064ea-0e4a-4c21-ae3d-7285d82fb272-cover-icon-original.png']"
34'YDIW8GKOE'Портрет и профессиональное развитие русскоязычных DevRel-специалистов в 2022: данные исследования'"Привет! Я — Евгения Голева, работаю в Developer Relations с 2016 года и делюсь мыслями о работе в телеграм-канале «Говорите громче!». А в прошлом году провела первое исследование специалистов Developer Relations в РФ и СНГ.

Если вы не знаете, кто такие деврелы, то вкратце объясню:

Официально Developer Relations (от англ. «отношения с разработчиками») — это деятельность, которая охватывает внешние и внутренние коммуникации между компанией и IT-специалистами. Деврел (от англ. Developer Relations Specialist) — специалист в этой области. Он устанавливает и поддерживает отношения между компанией и разработчиками, а также повышает эффективность их взаимодействия. В частности, DevRel может помочь компаниям получить оперативный фидбэк от пользователей или продвинуть свою компанию как место будущей работы.

По мнению нейросетей Я попросила ChatGPT объяснить, кто такие деврелы, семилетнему ребёнку, и это лучшее определение ever: «Деврелы — это люди, которые помогают программистам и компаниям, которые делают программы, понимать друг друга лучше. Они объясняют, какие инструменты нужно использовать, чтобы программы работали правильно, а также помогают людям найти хорошую работу в компании, которая делает программы. Это как друг, который помогает тебе найти новых друзей и игрушки, которые ты любишь».

Предыдущее исследование дало почву для многих гипотез. Но с тех пор ландшафт индустрии изменился полностью, и деврела, который мы знали, больше не существует. Поэтому теперь мы говорим про русскоязычный деврел.

Моё исследование состояло из семи частей:

индивидуальные рабочие задачи;

деврел-команда;

метрики;

профессиональное развитие и сообщество;

компания (и в какой ситуации её люди сейчас);

зарплаты, про которые многие спрашивали в прошлом году;

и, разумеется, про самих деврелов.

В этой статье говорим про профразвитие и портрет участника.

Насколько выборка репрезентативна?

Я постаралась связаться со всеми специалистами в области Developer Relations, до которых смогла дотянуться, включая тех, кто не является прямыми участниками этой сферы. Мой призыв к деврелам в Телеграме прочитали более 6 500 человек. Всего опросом поделились 60 источников. Вот несколько из них:

Говорите громче!

DevRel Community (закрытый чат

23derevo: чат и канал

t.me/docops

t.me/devrel_jobs

t.me/cmblog

DevRelAll

репосты в ФБ и телеге от коллег по цеху (спасибо вам!)

В исследовании участвовали 89 специалистов по Developer Relations к концу 2022 года — это на 25% больше, чем в прошлом году. Большая часть ответов была получена в ноябре. Данные уже очищены от спама и нерелевантных комментариев. В выборку, по понятным причинам, попали только те компании, в которых уже есть хотя бы кто-то причастный к деврелу.

Надеюсь, в следующих исследованиях нас станет ещё больше. Чтобы не пропустить анонс, следите за моим каналом «Говорите громче!» или оставьте свои контакты — я сообщу о новом запуске.

Иногда сумма ответов больше 100%. Это значит, что в вопросе можно было выбрать несколько значений. No cheating!

Спустя месяц после запуска исследования мы с Женей Финкельштейн подготовили доклад для DevRelConf #6, который мы готовили на основе ответов 72 респондентов. Благодаря этому за декабрь удалось собрать ответы ещё 17 специалистов. Они не учтены в нескольких объёмных вопросах — количество опрошенных я указываю отдельно.

Портрет участника

Прежде чем говорить о профессиональном развитии, давайте посмотрим на всё разнообразие внутри нашей профессии.

Распределение по полу (89 респондентов)

В этот раз женщин оказалось больше — три четверти против почти четверти мужчин. В прошлом году соотношение было примерно одинаковым. Я думаю, это связано с тем, что больше женщин решили принять участие в исследовании (потому что вряд ли гендерный состав профессии мог измениться так резко).

Распределение по возрасту (89 респондентов)

Больше 40% участников оказались достаточно молодыми — от 26 до 30 лет. На втором месте коллеги в возрасте от 31 до 35 лет, и на третьем — от 36 до 40 лет. Не оказалось среди респондентов людей младше 20 лет и старше 50. Я делаю вывод, что в профессию приходят уже с каким-то опытом, и готовы оставаться в ней достаточно долго.

Распределение по опыту в Developer Relations (89 респондентов)

Я решила разбить варианты ответов на более мелкий шаг, чтобы график стал более показательным.

Средний (среднее арифметическое взвешенное) опыт работы в области developer relations сейчас составляет примерно три года. Люди с опытом менее года по-прежнему слабо участвуют в исследовании — вероятно, потому, что не считают себя достаточно опытными в сфере.



Распределение по предыдущему опыту (89 респондентов)

В прошлом исследовании я объединяла PR и Маркетинг. Это было не очень правильно, теперь у нас есть более точная картинка.

Наиболее популярными сферами, откуда приходят участники исследования в деврел, остаются HR, IT и маркетинг, что неудивительно.

Некоторые респонденты указывали неожиданные области, такие как журналистика, книгоиздание и наука, они собраны в «Разном». Один респондент даже рассказал о том, что сразу стал деврелом, без предыдущего опыта.

Технический бэкграунд оказался необязателен (89 респондентов)

Я задала жёсткий вопрос об опыте работы в коммерческой разработке на полную ставку — хотя бы в течение года. Результаты показали, что у менее четверти опрошенных есть опыт написания кода. Это, конечно, заметная доля, но остальные 75% рассказали о том, что это не обязательно для начала работы.

Техническое образование — тоже (89 респондентов)

Женя Финкельштейн говорит, что она училась программированию, и это очень помогает в работе деврелом: можно проверить скобочки в коде или формулы написать. Но исследование показало, что большинство деврелов работают без технического образования.

В компании уже есть много высококвалифицированных инженеров, от деврела нужно верхнеуровневое понимание техники и прокачанные скилы в совершенно других специализациях. За счёт того, что в команде собираются люди с разным опытом и знаниями, выигрывают все. Дайверсити рулит)

Как отличить Developer Advocates от Developer Relations? (89 респондентов)

Была гипотеза, что вопрос «Являются ли разработчики основными клиентами для вашей компании?» поможет разделить респондентов на две группы: Developer Advocates и Developer Relations Managers.

Мы предоставляли два варианта ответа: «Да, разработчики являются клиентами нашей компании (Developer First)» и «Нет, разработчики не являются клиентами нашей компании (Developer Plus)». Но нам это не помогло.

Девадвокаты и деврелы оказались в обеих категориях. Люди без технического образования работают в компаниях, где разработчики являются клиентами, а люди с техническим образованием работают там, где не являются.

В общем и целом, мы не нашли никаких закономерностей. Профессия новая, и каждый — уникальная снежинка, которая находит нишу самостоятельно.

А вот вопрос «Какими задачами на внешнюю аудиторию вы занимаетесь большую часть своего рабочего времени?» как раз помог, особенно те варианты ответов, которые подкинул Антон Черноусов. Но об этом в следующей статье.

Распределение по профессиональному уровню (89 респондентов)

Разумеется, джуниоров по факту больше. Многие постеснялись участвовать в опросе, и даже мои пояснения в анонсах и предисловии не особо помогли. Если у вас есть идеи, как решить эту проблему, напишите в комментариях или мне лично.

Распределение по организационному уровню в компании (89 респондентов)

Мы выдвинули гипотезы о возможной корреляции между уровнем профессионализма именно в Developer Relations и позицией в компании, но ничего не вышло. В выборке оказались и сеньоры, которые не занимают руководящие должности, и руководители направлений, которые недавно начали отвечать за DevRel и находятся на entry-уровне.

Как деврелы официально записаны в трудовой книжке? (89 респондентов)

Нейтральные формулировки всё ещё лидируют: руководитель направления и менеджер проектов. Но появились и новые, повторяющиеся, должности: менеджер по работе с IT-сообществами и менеджер по развитию бренда работодателей в сегменте IT. Если ни одна из них вам не нравится, можете выбрать из длинного списка ниже 🙂

Полный список должностей тех, кто участвовал в исследовании Руководитель направления

Менеджер по работе с ИТ-сообществами

Менеджер по развитию бренда работодателя в сегменте IT

Менеджер проектов

Head of DevRel

Менеджер мероприятий

Менеджер по продвижению

Ведущий менеджер по обучению

Директор по взаимодействию с разработчиками

Главный IT-менеджер

Senior Community Manager

Контент-менеджер

Talent Brand & Internal Communications Lead

PR-менеджер

Global Speaker’s Support Lead

Менеджер по взаимодействию с внешними разработчиками

DevRel-менеджер

Специалист по маркетингу технологий

Старший специалист

Главный руководитель проекта

Эксперт по связям с сообществом

Специалист по внешним коммуникациям

Employer Branding Manage

Главный системный программис

Employer Branding Specialist

Технический писатель

Developer Advocate

Developer Relations Manager

Employer Branding Manager

Редактор ИТ-блога

Community Relations Director

Организатор встреч

Senior Developer Relations Manager

Главный эксперт по развитию ИТ-сообществ

Главный инженер по разработке

Управляющий директор

DevRel 1С

Продуктовый аналитик

Community Manager

CTO

Специалист по работе с экспертами

HR BP

Разработчик

Ведущий специалист

Старший специалист по развитию отношений в сообществе разработчиков

Business and Technical Consultant

Руководитель группы технического пиара

Senior Developer Relations Specialist

Руководитель отдела развития бренда работодателя и внутренних коммуникаций

Руководитель команды ИТ-бренда работодателя

DevRel Manager

LnD Specialist

Employment Brand Team Lead

HR Brand Manager

Руководитель группы Devrel

Главный IT-менеджер

HR Marketing Director

Директор по PR- и бренд-коммуникациям

DevRel

Менеджер по развитию направления HR-бренда

Менеджер проектов

Старший специалист по маркетингу

Специалист по развитию HR-бренда

Senior tech Community Manager

CHRO

Шароватов (консультант, ментор, дев адвокат, HR)

Специалист по обучению и развитию

Руководитель направления IT и корпоративных мероприятий

Менеджер по работе с брендом работодателя и профессиональными сообществами

Менеджер

Руководитель регионального ИТ-центра

Funemployee

PR manager

Распределение по странам (89 респондентов)

63 участника опроса находятся в России. Также у нас есть коллеги с Кипра, Грузии, Германии и других стран.

Распределение по городам (89 респондентов)

41 участник опроса находится в Москве. 48 — в других городах, в основном в Санкт-Петербурге, Тбилиси, Казань, Екатеринбург.

Где работаете сейчас? (58 респондентов)

Только 58 участников указали свою компанию, в том числе 1С, 2ГИС, EPAM, IT_One, JetBrains, Karuna, Quadcode, Skillbox, SkillFactory, Sytac, VK, Yandex.

Профессиональное развитие

Какие ресурсы наиболее эффективно помогают вам развиваться как DevRel-специалисту? (72 респондента)

В этом году мы изменили формулировку, поэтому сравнивать с прошлым напрямую не буду, но вижу, что по всем направлениям заметное снижение, кроме менторства и мастер-классов — их стало больше.

2021 год

2022 год

Какие именно телеграм-каналы помогают развиваться? (89 респондентов)

Дисклеймер: так как выборка смещена на те ресурсы, через которые я набирала респондентов, статистика — в мою пользу и наверняка искажает реальную картину.

Остальные ресурсы, которые помогали в развитии (36 респондентов)

Вопрос был необязательным и со свободным вводом, поэтому всего на него ответили 36 участников.

За кем из русскоговорящих экспертов в DevRel сообществе вы следите? (53 респондента)

В топ попали люди, за которых проголосовало больше одного человека. Вопрос был необязательным и со свободным вводом, поэтому всего на него ответили 53 участника.

Дисклеймер: так как выборка смещена на те ресурсы, через которые я набирала респондентов, статистика — в мою пользу и наверняка искажает реальную картину.

Какие DevRel команды вы считаете самыми сильными в 2022 году?

Вопрос был необязательным и со свободным вводом. Всего были упомянуты 106 компаний.

Кстати, сейчас нанимают:

Что беспокоило деврела в конце 2022 года?

Что самое сложное в работе деврела в 2022 году?

Искать докладчиков всегда было сложно, но в этом году стало труднее из-за кризиса, неопределённости и того, что нужно было поддерживать людей. Впервые стала заметной категория «Новые рынки».

Фан факт: в прошлом исследовании топ-темой был онлайн, а теперь наблюдаем проблемы с оффлайн мероприятиями.

Какие сложные профессиональные вопросы у вас возникали в 2022 году? На что не находилось очевидных ответов или было не у кого спросить? (72 респондента)

Категория новых рынков сразу же попала в топ. Ранее деврелы редко работали не только на внутренний рынок, но и на внешний, и в этом году ситуация изменилась.

Появились вопросы относительно карьеры. Отрасль взрослеет, и люди хотят заботиться о своём развитии и будущем.

Руководители команд начали задумываться о том, как измерять успех своих сотрудников и помогать им развиваться. Невозможно же с горящими глазами писать статьи или проводить ивенты в течение пяти лет подряд.

Новые вопросы:

С какого момента необходимо расширять команду? Какие роли и в какой конфигурации нужны? Перестройка структуры команды? Как «измерять сотрудников», чтобы у руководства не было вопросов и сотрудники понимали, за что они получают деньги и куда они могут дальше расти? Какую систему мотивации создать для адвокатов бренда работодателя?

Как вы видите своё дальнейшее развитие в профессии в ближайшие три года (72 респондента)

Оказалось, что вариантов у нас довольно много. Можно углубить экспертизу и понимание технологий, расширить зону влияния и отвечать не только за разработчиков, но и, например, за дизайнеров, или вообще начать управлять продуктом. Или стать менеджером, который управляет деврелами (некоторые уже успешно консультируют компании или менторят коллег). Или выйти на международный рынок. Есть и те, кто хочет сфокусироваться на собственной публичности (сапожники без сапог, привееееет!).

Что дальше?

Я планирую сделать цикл из 5 статей на основе проведённого исследования:

Профессиональное развитие деврела. Кое-что про метрики. Задачи и роли DevRel-специалистов. DevRel-команды: сокращаются, расширяются или качественно эволюционируют? Обезличенные зарплаты DevRel-специалистов.

Благодарности

Над этим материалом вместе со мной работали Даша Тиходеева, Илья Васильев, команда Tproger. Спасибо вам огромное, без вас этот проект не случился бы."'https://tproger.ru/articles/portret-i-professionalnoe-razvitie-russkojazychnyh-devrel-specialistov-v-2022-dannye-issledovanija/'https://media.tproger.ru/uploads/2023/03/Group-1321316364-cover-1.png'"['https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1456px"" viewBox=""0 0 1456 916""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1456px"" viewBox=""0 0 1456 1062""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1456px"" viewBox=""0 0 1456 624""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2021/07/money-cover.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1456px"" viewBox=""0 0 1456 910""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1456px"" viewBox=""0 0 1456 906""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1456px"" viewBox=""0 0 1456 550""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/07/logo-renessans-32x32.jpg', 'https://sun1-88.userapi.com/s/v1/if1/qOFqDZXwHIpfH1jeOEwJQunLigxSepYMSJeOEpkD9BC-RJT9GwAH8u7sL7Tn1fQQLv__eKhl.jpg?size=400x400&quality=96&crop=86,376,525,525&ava=1', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1456px"" viewBox=""0 0 1456 920""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2021/06/bootcamp-cover.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1456px"" viewBox=""0 0 1456 878""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2020/02/iconfinder-icon-38-cover.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1456px"" viewBox=""0 0 1456 784""%3E%3C/svg%3E', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1456px"" viewBox=""0 0 1456 802""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2019/12/iconfinder-icon-3-cover.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1456px"" viewBox=""0 0 1456 956""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1456px"" viewBox=""0 0 1456 756""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1456px"" viewBox=""0 0 1456 828""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2023/03/Group-1321316364-cover-icon-1-original.png', 'https://media.tproger.ru/uploads/2023/03/Group-1321316364-cover-1.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1456px"" viewBox=""0 0 1456 982""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1456px"" viewBox=""0 0 1456 578""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1456px"" viewBox=""0 0 1456 855""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1456px"" viewBox=""0 0 1456 870""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1456px"" viewBox=""0 0 1456 914""%3E%3C/svg%3E', 'https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg']"
35'56D4470DR'101 вопрос, на которые должен ответить Python-разработчик'"101 вопрос, на которые должен ответить Python-разработчик

1. Что такое python?

2. В каком году написана первая статья про python?

3. Какие типы данных есть в python? На какие классы делятся?

4. Что такое лямбда-функция? Какое у неё назначение?

5. Что такое PEP 8?

6. Как получить документацию по атрибутам объекта?

7. Что такое docstring?

8. В чём разница между типами list и tuple?

9. Может ли быть индекс списка отрицательным?

10. Что значит конструкция pass?

11. Чем отличаются многопоточное и многопроцессорное приложение?

12. Как просмотреть методы объекта?

13. Что такое *args и **kwargs в определении функции?

14. Python полностью поддерживает ООП?

15. Что такое globals() и locals()?

16. Что хранится в атрибуте __dict__?

17. Как проверить файл .py на синтаксические ошибки, не запуская его?

18. Зачем в python используется ключевое слово self?

19. Что такое декоратор? Как написать собственный?

20. Что может быть ключом в словаре?

21. В чём разница между пакетами и модулями?

22. Как перевести строку, содержащую двоичный код (1 и 0), в число?

23. Для чего используется функция __init__?

24. Что такое слайс(slice)?

25. Как проверить, что один кортеж содержит все элементы другого кортежа?

26. Почему пустой список нельзя использовать как аргумент по умолчанию?

27. Что такое @classmethod, @staticmethod, @property?

28. Что такое синхронный код?

29. Что такое асинхронный код? Приведите пример.

30. Каким будет результат следующего выражения?

>>> -30 % 10

31. Для чего нужен метод id()?

32. Что такое итератор?

33. Что такое генератор? Чем отличается от итератора?

34. Для чего используется ключевое слово yield?

35. Чем отличаются __iter__ и __next__?

36. Что такое контекстный менеджер?

37. Как сделать python-скрипт исполняемым в различных операционных системах?

38. Как сделать копию объекта? Как сделать глубокую копию объекта?

39. Опишите принцип работы сборщика мусора в python

40. Как использовать глобальные переменные? Это хорошая идея?

41. Для чего в классе используется атрибут __slots__?

42. Какие пространства имен существуют в python?

43. Как реализуется управление памятью в python?

44. Что такое метаклассы и в каких случаях их следует использовать?

45. Зачем нужен pdb?

46. Каким будет результат следующего выражения?

>>> [0, 1][10:]

47. Как создать класс без слова class?

48. Как перезагрузить импортированный модуль?

49. Напишите декоратор, который будет перехватывать ошибки и повторять функцию максимум N раз.

50. Каким будет результат следующего выражения?

>>> len(' '.join(list(map(str, [[0], [1]]))))

51. Python — легкий язык. Согласны?

52. Какие проблемы есть в python?

53. Когда будет выполнена ветка else в конструкции try…except…else?

54. Поддерживает ли python множественное наследование?

55. Как dict и set реализованы внутри? Какова сложность получения элемента? Сколько памяти потребляет каждая структура?

56. Что такое MRO? Как это работает?

57. Как аргументы передаются в функции: по значению или по ссылке?

58. С помощью каких инструментов можно выполнить статический анализ кода?

59. Что будет напечатано в результате выполнения следующего кода?

import sys arr_1 = [] arr_2 = arr_1 print(sys.getrefcount(arr_1))

60. Что такое GIL? Почему GIL всё ещё существует?

61. Опишите процесс компиляции в python.

62. Как тиражировать python код?

63. Что такое дескрипторы? Есть ли разница между дескриптором и декоратором?

64. Почему всякий раз, когда python завершает работу, не освобождается вся память?

65. Что будет напечатано в результате выполнения следующего кода?

class Variable: def __init__(self, name, value): self._name = name self._value = value @property def value(self): print(self._name, 'GET', self._value) return self._value @value.setter def value(self, value): print(self._name, 'SET', self._value) self._value = value var_1 = Variable('var_1', 'val_1') var_2 = Variable('var_2', 'val_2') var_1.value, var_2.value = var_2.value, var_1.value

66. Что такое интернирование строк? Почему это есть в python?

67. Как упаковать бинарные зависимости?

68. Почему в python нет оптимизации хвостовой рекурсии? Как это реализовать?

69. Что такое wheels и eggs? В чём разница?

70. Как получить доступ к модулю, написанному на python из C и наоборот?

71. Как ускорить существующий код python?

72. Что такое __pycache__? Что такое файлы .pyc?

73. Что такое виртуальное окружение?

74. Python — это императивный или декларативный язык?

75. Что такое менеджер пакетов? Какие менеджеры пакетов вы знаете?

76. В чём преимущества массивов numpy по сравнению с (вложенными) списками python?

77. Вам нужно реализовать функцию, которая должна использовать статическую переменную. Вы не можете писать код вне функции и у вас нет информации о внешних переменных (вне вашей функции). Как это сделать?

78. Что будет напечатано в результате выполнения следующего кода?

def f_g(): yield 43 return 66 print(f_g())

79. Как имплементировать словарь с нуля?

80. Напишите однострочник, который будет подсчитывать количество заглавных букв в файле.

81. Что такое файлы .pth?

82. Какие функции из collections и itertools вы используете?

83. Что делает флаг PYTHONOPTIMIZE?

84. Что будет напечатано в результате выполнения следующего кода?

arr = [[]] * 5 arr_1, arr_2 = arr, arr for k, arr in enumerate((arr_1, arr_2)): arr[0].append(k) arr = (arr_1, 5, arr_2) print(arr)

85. Какие переменные среды, влияющие на поведение интерпретатора python, вы знаете?

86. Что такое Cython? Что такое IronPython? Что такое PyPy? Почему они до сих пор существуют и зачем?

87. Как перевернуть генератор?

88. Приведите пример использования filter и reduce над итерируемым объектом.

89. Что будет напечатано в результате выполнения кода?

>>> print(_)

90. Чем фреймворк отличается от библиотеки?

91. Расположите функции в порядке эффективности, объясните выбор.

def f1(arr): l1 = sorted(arr) l2 = [i for i in l1 if i < .5] return [i * i for i in l2] def f2(arr): l1 = [i for i in arr if i < .5] l2 = sorted(l1) return [i * i for i in l2] def f3(arr): l1 = [i * i for i in arr] l2 = sorted(l1) return [i for i in l1 if i < (.5 * .5)]

92. Произошла утечка памяти в рабочем приложении. Как бы вы начали отладку?

93. В каких ситуациях возникает исключение NotImplementedError?

94. Что не так с этим кодом? Зачем это нужно?

if __debug__: assert False, (""error"")

95. Что такое магические методы(dunder)?

96. Объясните, почему такое возможно?

_MangledGlobal__mangled = ""^_^"" class MangledGlobal: def test(self): return __mangled assert MangledGlobal().test() == ""^_^""

97. Что такое monkey patching? Приведите пример использования.

98. Как работать с транзитивными зависимостями?

99. Что будет напечатано в окне браузера?

<html> <link rel=""stylesheet"" href=""https://pyscript.net/alpha/pyscript.css"" /> <script defer src=""https://pyscript.net/alpha/pyscript.js""></script> <body> <py-script> print(__name__) print(__file__) </py-script> </body> </html>

100. Какие новые функции добавлены в python 3.10?

101. Почему иногда python так долго запускается (в Windows)?"'https://tproger.ru/articles/101-vopros-python-razrabotchiku/'https://media.tproger.ru/uploads/2023/04/82c71ac5-76a5-45ff-9300-8cc8d1608594-cover.png'"['https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'https://media.tproger.ru/uploads/2023/04/82c71ac5-76a5-45ff-9300-8cc8d1608594-cover-icon-original.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'https://media.tproger.ru/uploads/2020/12/python-sorting-cover-3.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big-32x32.png', 'https://media.tproger.ru/uploads/2022/07/logo-renessans-32x32.jpg', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'https://tproger-media.s3.yandexcloud.net/telegram_users_avatars/tg_avatar_AQADtqcxG0B_HChn.jpg', 'https://media.tproger.ru/uploads/2019/07/iconfinder-icon-19-cover-1.jpg', 'https://media.tproger.ru/uploads/2018/07/learningPython.jpg', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2023/04/82c71ac5-76a5-45ff-9300-8cc8d1608594-cover.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2021/01/Python_regexp-cover.png', 'https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg']"
36'0WYNFLKZ1'9 способов разрядить атмосферу перед созвоном'"Все, наверное, были в такой ситуации: вы пришли на созвон на пару минут раньше и теперь сидите с такими же «пунктуальными» коллегами в неловкой тишине. С чего начать диалог? Как провести эти пару минут без кринжа? Вот вам 9 рабочих вариантов.

Ванила

Спросите «Как дела?». «Как дела» — неумирающая классика. Вам самим на этот вопрос отвечать не обязательно.

DDoS мемами

Просто начните кидать мемы в чат. Если не знаете, какие, то вот вам несколько штук для разгона:

Осуждение

Если вы пришли раньше, то просто начните осуждать тех, кто не пришёл вовремя.

Русская рулетка

Скидывайте в чат последний запрос из истории браузера. Мужайтесь, вы узнаете много нового о своих коллегах. Например, что они каждый день смотрят, как правильно задать массив в С++.

Интерактивчик

Предложите всем назвать их любимое матерное слово. Скажите, что вы только что уронили прод. Послушайте от коллег их РЕАЛЬНО любимые матерные слова.

Неждан

Включите камеру, когда будете в фуражке. Спросите: «Ребят, кто где сейчас? Я так, просто интересуюсь».

Расскажите анекдот

Команда готова показать сайт клиенту, но сайт еще не до конца готов. Тимлид инструктирует разработчиков:

— Что бы ни случилось, делайте вид, что так и должно быть.

Созвон с клиентом, он тестит сайт. Вдруг вылезает ошибка 503. Джун, радостно посмотрев на часы:

— Десять сорок пять. Точно по графику!

Смотрины

Покажите своего кота. Если у вас их больше, то предложите всем остаться после созвона и посмотреть на остальных пушистиков.

Караоке

Включите демонстрацию экрана с текстом песни. Прикиньте, как офигеет человек, который опоздает на встречу. Заходит, а там ребята горланят: «Первая причина это ты!»

P.S. Не делайте так перед созвоном с клиентом — есть риск не совпасть в музыкальных вкусах."'https://tproger.ru/articles/top-9-veshhej-pered-mitom/'https://media.tproger.ru/uploads/2023/03/e2e648e0-fdd1-49f6-a28c-7eadfd4a2e01-cover.png'"['https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2018/04/404_11-e1540984259671.jpg', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'https://media.tproger.ru/uploads/2018/05/antideadline.jpg', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big-32x32.png', 'https://media.tproger.ru/uploads/2023/03/35276599-ef26-4d8a-ba5a-62fc3c8b08ca.jpg', 'https://media.tproger.ru/uploads/2023/03/d76a1f1b-ca72-4e72-abf2-eee6a18b8fa3.jpg', 'https://sun1-88.userapi.com/s/v1/if1/qOFqDZXwHIpfH1jeOEwJQunLigxSepYMSJeOEpkD9BC-RJT9GwAH8u7sL7Tn1fQQLv__eKhl.jpg?size=400x400&quality=96&crop=86,376,525,525&ava=1', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2016/09/AgEXPK_P-xU.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2015/12/quotes.jpg', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2023/03/896a045a-a5ad-4888-8388-3f5d2825e166.jpg', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'https://media.tproger.ru/uploads/2023/03/e2e648e0-fdd1-49f6-a28c-7eadfd4a2e01-cover.png', 'https://media.tproger.ru/uploads/2023/03/e2e648e0-fdd1-49f6-a28c-7eadfd4a2e01-cover-icon-original.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg']"
37'A1B7JLS1B'Что вы делали на этой неделе? Пост хвастовства за 27-31 марта'"Что вы делали на этой неделе? Пост хвастовства за 27-31 марта

Предлагаем делиться в комментариях под этой записью, над чем вы работали на этой неделе, ведь нет ничего интереснее, чем задачи коллег!

Вот, чем вы занимались на прошлой неделе.

Не важно, разработчик вы или тестировщик, деврел или эйчар. Расскажите, какие задачи вы героически решили, и делитесь успехами.

Кидайте всё, чем хочется похвастаться: текст, скриншоты кода и даже ссылочки на видео.

Не забывайте про NDA: не указывайте названия компании или деликатные частности.

Итак, чем вы похвастаетесь на этой неделе?

Какой была для вас прошедшая неделя? Увешанной тасками: ничего не успеваю!

Нормальной, всё как обычно

Лёгкой: удалось отдохнуть и даже выспаться"'https://tproger.ru/articles/chto-vy-delali-na-etoj-nedele-post-hvastovstva-za-27-31-marta/'https://media.tproger.ru/uploads/2023/03/64140889-8a5a-49cd-bcb6-9f7320754e66-cover.png'"['https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2023/03/64140889-8a5a-49cd-bcb6-9f7320754e66-cover.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2023/03/64140889-8a5a-49cd-bcb6-9f7320754e66-cover-icon-original.png', 'https://media.tproger.ru/uploads/2022/07/logo-renessans-32x32.jpg', 'https://sun1-88.userapi.com/s/v1/if1/qOFqDZXwHIpfH1jeOEwJQunLigxSepYMSJeOEpkD9BC-RJT9GwAH8u7sL7Tn1fQQLv__eKhl.jpg?size=400x400&quality=96&crop=86,376,525,525&ava=1', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2020/03/hent-AI-changed.jpg', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://media.tproger.ru/uploads/2020/08/iconfinder_17_1280977-cover-3.png', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2020/07/iconfinder-icon-48-cover.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2023/03/c8fda684-767b-461d-89d4-75009ddcbee8.jpg', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2021/05/iconfinder-icon-cover-2.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg']"
38'E8W48RWKB'Дайджест Типичного программиста: GPT-4, сервер на смартфоне и пик Балмера'"Не думаю, что это противоречие, просто разные точки зрения, и я с вами не спорю) У меня личное представление ""Опыта ИТ-сферы"" и работы менеджеров. Менеджер, работающий с духами, и менеджер работающий со сложным техническим продуктом - разные вещи. Просто разные сферы и сотрудник должен быть подкован в узкоспециализированных вопросах для того, чтобы рассказать клиенту о преимуществах продукта. Я бы не продал духи, например.А в ситуации выбора между двумя менеджерами (работали в разных сферах) всегда будет преимущество у того, чей опыт больше в нужной специфике.Вообще, статья, как и название кликбейтное) Как будто, где-то внизу должна быть ссылка на курсы по этим профессиям."'https://tproger.ru/articles/dajdzhest-tipichnogo-programmista/'https://media.tproger.ru/uploads/2023/03/1181864_convertion_exchange_filter_funnel_graph_icon-cover-2.png'"['https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2023/03/1181864_convertion_exchange_filter_funnel_graph_icon-cover-2.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2022/07/logo-renessans-32x32.jpg', 'https://sun1-88.userapi.com/s/v1/if1/qOFqDZXwHIpfH1jeOEwJQunLigxSepYMSJeOEpkD9BC-RJT9GwAH8u7sL7Tn1fQQLv__eKhl.jpg?size=400x400&quality=96&crop=86,376,525,525&ava=1', 'https://media.tproger.ru/uploads/2023/03/1181864_convertion_exchange_filter_funnel_graph_icon-cover-icon-original.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'https://media.tproger.ru/uploads/2020/12/css-flexbox-animation-cover-1.png', 'https://media.tproger.ru/uploads/2019/07/iconfinder-icon-19-cover-1.jpg', 'https://media.tproger.ru/uploads/2018/07/learningPython.jpg', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2021/01/Python_regexp-cover.png', 'https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg']"
39'9JD5ND8D7'Фильм «Тетрис» про Алексея Пажитнова вышел на AppleTV+'"Фильм «Тетрис» основан на реальных событиях и рассказывает о моменте борьбы Пажитнова и Роджерса за права на компьютерную головоломку.

Подробности о сюжете, небольшой исторический экскурс и первый трейлер можно посмотреть в статье, которую выпускали раньше.

В новом трейлере появились комментарии Алексея Пажитнова, создателя Тетриса, и датского геймдизайнера и предпринимателя Хэнка Роджерса, которых сыграли Никита Ефремов и Тэрон Эджертон соответственно. Их комментарии тоже есть.

Фильм должен выйти сегодня, 31 марта на Apple TV+."'https://tproger.ru/articles/vywel-vtoroj-trejler-filma-tetris-s-kommentariyami-alekseya-pazhitnova/'https://tproger.ru/favicon.ico?v=2'"['https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://mc.yandex.ru/watch/27485085', 'https://tproger.ru/favicon.ico?v=2', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://sun1-88.userapi.com/s/v1/if1/qOFqDZXwHIpfH1jeOEwJQunLigxSepYMSJeOEpkD9BC-RJT9GwAH8u7sL7Tn1fQQLv__eKhl.jpg?size=400x400&quality=96&crop=86,376,525,525&ava=1', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""100%px"" viewBox=""0 0 100% 100%""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2023/03/77961a44-58b9-4893-8482-23b8b2f51b21-cover-icon-original.png']"
40'MLAEPXSN5'В МТС — глобальный ребрендинг. Рассказываем, как на него повлиял статус IT-компании'"В МТС — глобальный ребрендинг. Рассказываем, как на него повлиял статус IT-компании

Теперь у МТС новая архитектура, позиционирование, логотип и визуальный язык, а также уникальная айдентика для отдельных продуктов. Раскрываем подробности и рассказываем, при чём здесь IT.

Вячеслав Николаев Президент МТС

МТС взял курс на формирование цифровой экосистемы и начал активно запускать новые продукты с 2019 года. Два года назад началась активная трансформация компании в сторону ИТ, изменились многие процессы внутри: вырос штат ИТ-специалистов, расширились продуктовые команды, сократилась бюрократия, изменились корпоративные ценности. Ребрендинг стал логичным продолжением больших изменений в бизнесе, философии бренда и внутренней культуре. Мы поняли, что монолитный бренд больше не работает — не даёт нужной гибкости и не решает всех задач разных сервисов. Бизнесу стало тесно в существовавшем бренде. Поэтому в новой архитектуре МТС трансформировался из монолитного бренда в гибридный, была разработана система брендинга с множеством визуальных стилей внутри — для крупных бизнес-направлений и продуктов были созданы саббренды со своей яркой идентичностью и узнаваемым стилем, но с заметной преемственностью к материнскому бренду. Нам важно было, чтобы люди увидели МТС разным, а у отдельных сервисов появилась возможность выглядеть органично в своей категории и строить свою коммуникацию с клиентом.

Теперь основа нового фирменного стиля МТС — динамический и гибкий логотип, который вмещает в себя все продукты и становится фундаментом для визуальной системы. Его левый угол остаётся свободным для брендинга отдельных сервисов.

Узнаваемый красный цвет бренда сохранился, но к нему добавили и другие цветовые решения.

Бренд сохранил энергию, эмоциональность и стремление к изменениям, но стал легче, эмпатичнее и современнее. Философия и лозунг МТС «Быть лучше каждый день» не изменились.

В создании новой бренд-платформы помогали агентства Signal (part of ONY) и BBDO. Над новым концептом айдентики также работали агентства UtterDesign и Ony.

Внедрять новую айдентику в МТС будут постепенно. Первыми поменяются цифровые продукты и интернет-сайты. Вывески и оформление офисов будут менять по мере износа конструкций.

Реклама ПАО «МТС» LjN8KVWXC"'https://tproger.ru/articles/v-mts-globalnyj-rebrending-rasskazyvaem-kak-na-nego-povliyal-status-it-kompanii/'https://media.tproger.ru/uploads/2023/03/tool_trick_icon-cover.png'"['https://media.tproger.ru/uploads/2023/03/tool_trick_icon-cover.png', 'https://media.tproger.ru/uploads/2023/03/tool_trick_icon-cover-icon-original.png', 'https://mc.yandex.ru/watch/27485085', 'https://sun1-88.userapi.com/s/v1/if1/qOFqDZXwHIpfH1jeOEwJQunLigxSepYMSJeOEpkD9BC-RJT9GwAH8u7sL7Tn1fQQLv__eKhl.jpg?size=400x400&quality=96&crop=86,376,525,525&ava=1', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'https://media.tproger.ru/uploads/2023/03/e2861875-a486-4172-85a4-47c0b3f923cb-2.jpg', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000.png']"
41'3DA6XNFDF'Почему стоит использовать Babel в разработке. Инструкция по написанию Babel плагина'"Какую проблему решает Babel

В языке JavaScript изменения происходят ежегодно, а некоторые ECMAScript конвенции вносят даже слишком много дополнительного синтаксического сахара, настолько, что браузерные движки исполняющие JS код не успевают обновляться под изменения. В связи с этим у разработчиков стоит выбор:

1. Писать в legacy стиле, не пользуясь новыми фишками;

2. Писать в новом стиле, и код будет работать только на новых версиях движков;

3. Самый оптимальный вариант — писать код в современном стиле и транспилировать его с помощью Babel в более старые версии ECMAScript, чтобы его могли исполнять даже старые браузерные движки. В общем, Babel — это единый инструмент для того, чтобы ваш код поддерживался даже старыми браузерами.

Как работает Babel под капотом

Чтобы разобраться в том, что написал разработчик, и перевести это в более старую версию JS, Babel требуется максимально декомпозировать код. Делает он это с помощью составления AST дерева и его последующего анализа. Babel разбивает наш код на самые мелкие частицы, даже «‎;»‎ или «‎пробел»‎ — отдельная часть AST дерева. После того как Babel создал такое дерево, он может пройтись по каждому узлу и преобразовать его нужным образом.

Особая сила Babel

Особая сила Babel заключается в огромном количестве разнообразных плагинов, а самое главное — плагин можно написать самому. Плагины имеют доступ к абстрактному синтаксическому дереву AST и могут изменять его на этапе транспиляции кода перед выходом в итоговый бандл. Babel плагины работают по паттерну Visitor. Суть паттерна в том, что если у нас есть некая абстракция (в нашем случае это AST), мы не взаимодействуем с ней напрямую, а работаем с ней через посетителя, то есть Visitor. Наша абстракция будет иметь метод, задача которого простая – просто передать себя посетителю, а он уже будет работать с ним.

Пишем свой Babel плагин

Я напишу простой плагин в учебных целях, который будет менять все операторы «+»‎ на «-»‎. Он бесполезный, но на его примере можно понять, как пишутся плагины в целом.

Суть простая.

1. Вы смотрите в AST Explorer, как выглядят определённые ноды в абстрактном синтаксическом дереве;

2. Обрабатываете эти ноды в коде так, как вы хотите.

Я написал код в AST Explorer, после установки курсора на значок «+» увидел, что мне нужен BinaryExpression, и написал вот такой вот плагин, опираясь на паттерн Visitor:

Вот так подключил его:







В итоге мой код скомпилировался и на выходе в сближенном файле я получил вот такой консоль лог, где видно, что наш плагин работает и меняет «+»‎ на «-».

Исходный код можно найти: https://github.com/dacorm/test-babel-plugin

На примере этого простого плагина вы ознакомились с ещё одним нетривиальным способом решения некоторых проблем в коде. Иногда на работе случаются такие баги, что решать их приходится с помощью Babel плагина. Это буквально суперсила, которой владеют немногие."'https://tproger.ru/articles/pochemu-stoit-ispolzovat-babel-v-razrabotke-instrukciya-po-napisaniyu-babel-plagina/'https://media.tproger.ru/uploads/2023/03/bf0699ba-495f-4153-9668-2a3ba7a80a1c-cover.png'"['https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2023/03/232f2e33-9f53-4af3-93c4-328476d4592b.jpg', 'https://media.tproger.ru/uploads/2019/07/iconfinder-icon-16-cover-1.jpg', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big-32x32.png', 'https://media.tproger.ru/uploads/2022/07/logo-renessans-32x32.jpg', 'https://sun1-88.userapi.com/s/v1/if1/qOFqDZXwHIpfH1jeOEwJQunLigxSepYMSJeOEpkD9BC-RJT9GwAH8u7sL7Tn1fQQLv__eKhl.jpg?size=400x400&quality=96&crop=86,376,525,525&ava=1', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2021/03/iconfinder_Asset_94_3298611-cover.png', 'https://media.tproger.ru/uploads/2023/03/bf0699ba-495f-4153-9668-2a3ba7a80a1c-cover-icon-original.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2023/03/7932a68f-0a33-4e12-9392-19673d8ef3d7.jpg', 'https://media.tproger.ru/uploads/2021/03/iconfinder_017_treasure_chest_gold_wealth_jewel_money_2090267-cover.png', 'https://media.tproger.ru/uploads/2023/03/17835600-2a01-4a58-b55b-03f9a53fb0a3.jpg', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'https://media.tproger.ru/uploads/2023/03/e939abc8-3c02-4378-b73b-a7c6a1517e75.jpg', 'https://media.tproger.ru/uploads/2023/03/670a707c-4bcc-41e1-b16d-774ec332bec5.jpg', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2023/03/94a7ebaa-0173-447d-996e-f725e0a1a1c3.jpg', 'https://media.tproger.ru/uploads/2018/05/python-ides.jpg', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2023/03/bf0699ba-495f-4153-9668-2a3ba7a80a1c-cover.png', 'https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg']"
42'YAANS9PGP'Вопросы по программированию и IT: спрашивайте — отвечайте'"У вас есть вопрос по программированию, на который ищете ответ? В комментариях под этим постом вы можете помочь ответом другим или сами задать любой интересующий вас вопрос по разработке и IT в целом.

Например, «в какой вуз лучше поступить», «какой алгоритм сортировки подойдёт для этой задачи», «какую зарплату просить на собеседовании» или даже «как центрировать div».

Правила всего два:

Спрашивайте сами, но при этом не забывайте отвечать: задали вопрос — помогите ответом под любым другим вопросом. Будьте терпимы и постарайтесь ответить на любой вопрос, даже если вам кажется, что ответ на него очевиден. Ведь все мы с чего-то начинали.

Вопросы про программирование с ответами стартуют здесь. Поехали?"'https://tproger.ru/articles/post-vzaimopomoshhi-sprawivajte-otvechajte/'https://media.tproger.ru/uploads/2023/03/a1374137-e8ed-4c2d-bf3a-fd5c9d51dfd8-cover.png'"['https://mc.yandex.ru/watch/27485085', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://sun1-88.userapi.com/s/v1/if1/qOFqDZXwHIpfH1jeOEwJQunLigxSepYMSJeOEpkD9BC-RJT9GwAH8u7sL7Tn1fQQLv__eKhl.jpg?size=400x400&quality=96&crop=86,376,525,525&ava=1', 'https://media.tproger.ru/uploads/2023/03/a1374137-e8ed-4c2d-bf3a-fd5c9d51dfd8-cover-icon-original.png', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'https://media.tproger.ru/uploads/2023/03/a1374137-e8ed-4c2d-bf3a-fd5c9d51dfd8-cover.png']"
43'YRFU00H3H'Илон Маск и Стив Возняк призывают остановить обучение ИИ хотя бы на полгода'"Илон Маск и Стив Возняк призывают остановить обучение ИИ хотя бы на полгода

Future of Life опубликовала письмо, в котором Илон Маск, Стив Возняк и более тысячи исследователей ИИ призывают остановить обучение систем искусственного интеллекта мощнее, чем GPT-4.

Эксперты считают, что ИИ с уровнем интеллекта, конкурирующим с человеческим, могут представлять серьёзные риски для общества и человечества.

По их мнению, ИИ-системы должны разрабатываться только после того, как человечество будет уверено в позитивных последствиях такого развития и в том, что связанные с ними риски будут управляемыми.

Например, мы уже писали, как ChatGPT, интегрированный в Bing, начал сходить с ума. Это только одна из многих историй, когда искусственный интеллект ведёт себя не так, как задумывалось.

С одной стороны, оно верно: разработчики ИИ выкатывают новые модели быстрее, чем успевают понять возможные проблемы. С другой — GPT-4 внезапно стал конкурентом многим сферам бизнеса и такие призывы могут быть попытками лучше его контролировать или дать фору остальным разработчикам.

Хороший пример — Google. Искусственный интеллект внезапно стал угрозой для бизнеса компании. В компании увидели риски в быстром развитии чат-ботов и даже попытались выпустить своё решение. Но прорыва не вышло."'https://tproger.ru/articles/ilon-mask-i-stiv-voznyak-prizyvayut-ostanovit-obuchenie-ii-hotya-by-na-polgoda/'https://media.tproger.ru/uploads/2023/03/e424d71d-8bab-47e1-939b-867a8cf87429.png'"['https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://mc.yandex.ru/watch/27485085', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'https://media.tproger.ru/uploads/2023/03/e424d71d-8bab-47e1-939b-867a8cf87429.png', 'https://tproger-media.s3.yandexcloud.net/telegram_users_avatars/tg_avatar_AQADtqcxG0B_HChn.jpg', 'https://media.tproger.ru/uploads/2023/03/ff2561f2-286f-4b1d-ad06-9fbce780f225-cover-icon-original.png']"
44'S3GLAFIRB'SQL для начинающих: 10 правил построения «точных» запросов'"Денис Карпов Отдел автоматизации процессов информационных технологий

«Точный» SQL-запрос возвращает «чистые» данные в необходимом и достаточном количестве, при этом потребляет как можно меньше памяти и справляется за минимальное время. Скорость работы с базой влияет на производительность. Потребление памяти может негативно сказаться даже на безопасности. Всё это прямо и косвенно влияет на прибыль компании. В статье разберёмся, как не допускать ошибок.

Для наших целей понадобятся тестовые данные. Будем работать с базой данных Oracle Database. Примеры в статье будут приводиться на языке SQL, PL/SQL. Нам важен подход, который можно адаптировать под другую реляционную систему управления базами данных — РСУБД.

Тестовые данные

⚒ Создадим тестовую таблицу 1:

CREATE SEQUENCE TEST_DATA_1_SEQ NOMAXVALUE NOMINVALUE NOCYCLE / CREATE TABLE TEST_DATA_1 ( TEST_DATA_1_ID NUMBER DEFAULT TEST_DATA_1_SEQ.NEXTVAL NOT NULL ,TYPE VARCHAR2(64) NOT NULL ,VALUE VARCHAR2(128) NOT NULL ,PC_USR VARCHAR2(30) DEFAULT USER NOT NULL ,PC_DT TIMESTAMP(6) DEFAULT SYSTIMESTAMP NOT NULL ) / ALTER TABLE TEST_DATA_1 ADD CONSTRAINT TEST_DATA_1_PK PRIMARY KEY (TEST_DATA_1_ID) USING INDEX / ALTER TABLE TEST_DATA_1 ADD CONSTRAINT TEST_DATA_1_TYPE_CHK CHECK (TYPE in ('CITY', 'DATE', 'EMPLOYEE', 'STOCK MARKET')) / CREATE UNIQUE INDEX TEST_DATA_1_UIDX1 ON TEST_DATA_1 (VALUE) / COMMENT ON TABLE TEST_DATA_1 IS 'Тестовые данные 1' /

⚒ Заполним тестовую таблицу 1 данными:

/* Добавление данных */ INSERT INTO TEST_DATA_1 (TYPE, VALUE) VALUES ('CITY', 'МОСКВА'); INSERT INTO TEST_DATA_1 (TYPE, VALUE) VALUES ('CITY', 'САНКТ-ПЕТЕРБУРГ'); INSERT INTO TEST_DATA_1 (TYPE, VALUE) VALUES ('EMPLOYEE', 'СОТРУДНИК 1. ПОЛ М. ВОЗРАСТ 18'); INSERT INTO TEST_DATA_1 (TYPE, VALUE) VALUES ('EMPLOYEE', 'СОТРУДНИК 2. ПОЛ Ж. ВОЗРАСТ 19'); INSERT INTO TEST_DATA_1 (TYPE, VALUE) VALUES ('EMPLOYEE', 'СОТРУДНИК 3. ПОЛ Ж. ВОЗРАСТ 20'); INSERT INTO TEST_DATA_1 (TYPE, VALUE) VALUES ('DATE', '01 января 2000'); INSERT INTO TEST_DATA_1 (TYPE, VALUE) VALUES ('DATE', '02 января 2000'); INSERT INTO TEST_DATA_1 (TYPE, VALUE) VALUES ('DATE', '01.01.2001'); INSERT INTO TEST_DATA_1 (TYPE, VALUE) VALUES ('DATE', '02.01.2001'); INSERT INTO TEST_DATA_1 (TYPE, VALUE) VALUES ('DATE', '03.01.2001'); INSERT INTO TEST_DATA_1 (TYPE, VALUE) VALUES ('DATE', '04.01.2001'); /* Извлечение всех данных */ SELECT t1.* FROM TEST_DATA_1 t1;

/* Удаление всех данных без проверок */ TRUNCATE TABLE TEST_DATA_1;

⚒ Создадим тестовую таблицу 2:

CREATE SEQUENCE TEST_DATA_2_SEQ NOMAXVALUE NOMINVALUE NOCYCLE / CREATE TABLE TEST_DATA_2 ( TEST_DATA_2_ID NUMBER DEFAULT TEST_DATA_2_SEQ.NEXTVAL NOT NULL ,TEST_DATA_1_ID NUMBER NOT NULL ,TYPE VARCHAR2(64) NOT NULL ,VALUE VARCHAR2(128) NOT NULL ,PC_USR VARCHAR2(30) DEFAULT USER NOT NULL ,PC_DT TIMESTAMP(6) DEFAULT SYSTIMESTAMP NOT NULL ) / ALTER TABLE TEST_DATA_2 ADD CONSTRAINT TEST_DATA_2_PK PRIMARY KEY (TEST_DATA_2_ID) USING INDEX / ALTER TABLE TEST_DATA_2 ADD CONSTRAINT TEST_DATA_2_TYPE_CHK CHECK (TYPE in ('STREET', 'DATE', 'EMPLOYEE', 'STOCK MARKET')) / CREATE UNIQUE INDEX TEST_DATA_2_UIDX1 ON TEST_DATA_2 (TEST_DATA_1_ID, VALUE) / COMMENT ON TABLE TEST_DATA_2 IS 'Тестовые данные 2' /

⚒ Заполним тестовую таблицу 2 данными:

/* Добавление данных */ INSERT INTO TEST_DATA_2 (TEST_DATA_1_ID, TYPE, VALUE) VALUES (1 /*ID МОСКВА*/, 'STREET', 'УЛИЦА КАРЛА МАРКСА'); INSERT INTO TEST_DATA_2 (TEST_DATA_1_ID, TYPE, VALUE) VALUES (1 /*ID МОСКВА*/, 'STREET', 'УЛИЦА КРУПСКОЙ'); INSERT INTO TEST_DATA_2 (TEST_DATA_1_ID, TYPE, VALUE) VALUES (1 /*ID МОСКВА*/, 'STREET', 'МАЛЫЙ ПОЛУЯРОСЛАВСКИЙ ПЕРЕУЛОК'); INSERT INTO TEST_DATA_2 (TEST_DATA_1_ID, TYPE, VALUE) VALUES (2 /*ID САНКТ-ПЕТЕРБУРГ*/, 'STREET', 'УЛИЦА КАРЛА МАРКСА'); INSERT INTO TEST_DATA_2 (TEST_DATA_1_ID, TYPE, VALUE) VALUES (2 /*ID САНКТ-ПЕТЕРБУРГ*/, 'STREET', 'УЛИЦА КРУПСКОЙ'); INSERT INTO TEST_DATA_2 (TEST_DATA_1_ID, TYPE, VALUE) VALUES (3 /*ID СОТРУДНИК 1*/, 'EMPLOYEE', 'ПРОЖИВАЕТ В ГОРОДЕ МОСКВА'); INSERT INTO TEST_DATA_2 (TEST_DATA_1_ID, TYPE, VALUE) VALUES (4 /*ID СОТРУДНИК 2*/,'EMPLOYEE', 'ПРОЖИВАЕТ В ГОРОДЕ МОСКВА'); INSERT INTO TEST_DATA_2 (TEST_DATA_1_ID, TYPE, VALUE) VALUES (5 /*ID СОТРУДНИК 3*/,'EMPLOYEE', 'ПРОЖИВАЕТ В ГОРОДЕ САНКТ-ПЕТЕРБУРГ'); INSERT INTO TEST_DATA_2 (TEST_DATA_1_ID, TYPE, VALUE) VALUES (6 /*ID 01 января 2000*/, 'DATE', 'Формат день числом, месяц словом, год числом'); INSERT INTO TEST_DATA_2 (TEST_DATA_1_ID, TYPE, VALUE) VALUES (7 /*ID 02 января 2000*/, 'DATE', 'Формат день числом, месяц словом, год числом'); INSERT INTO TEST_DATA_2 (TEST_DATA_1_ID, TYPE, VALUE) VALUES (8 /*ID 01.01.2001*/, 'DATE', 'Формат день числом, месяц числом, год числом'); INSERT INTO TEST_DATA_2 (TEST_DATA_1_ID, TYPE, VALUE) VALUES (9 /*ID 02.01.2001*/, 'DATE', 'Формат день числом, месяц числом, год числом'); INSERT INTO TEST_DATA_2 (TEST_DATA_1_ID, TYPE, VALUE) VALUES (10 /*ID 03.01.2001*/, 'DATE', 'Формат день числом, месяц числом, год числом'); INSERT INTO TEST_DATA_2 (TEST_DATA_1_ID, TYPE, VALUE) VALUES (11 /*ID 04.01.2001*/, 'DATE', 'Формат день числом, месяц числом, год числом'); /* Извлечение всех данных */ SELECT t2.* FROM TEST_DATA_2 t2;

/* Удаление всех данных без проверок */ TRUNCATE TABLE TEST_DATA_2;

1. Объявляя имена таблиц, обращайся к записям через псевдонимы таблиц

Допустим, есть таблица с некоторым количество колонок. К ней можно обратиться двумя разными способами:

⚠️ Опасный подход:

SELECT TYPE ,VALUE FROM TEST_DATA_1;

✅ Безопасный подход заключается в обращении через псевдоним:

SELECT t1.TYPE AS TYPE ,t1.VALUE AS VALUE FROM TEST_DATA_1 t1;

Псевдоним (анг. Alias) — это имя, назначенное источнику данных в SQL-запросе при использовании выражения в качестве источника данных или для упрощения ввода и прочтения инструкции SQL. Это полезно, если имя источника слишком длинное или его трудно вводить.

Псевдонимы можно использовать для переименования таблиц и колонок. В отличие от настоящих имён, они могут не соответствовать ограничениям базы данных и содержать до 255 знаков (включая пробелы, цифры и специальные символы).

В случае извлечения данных из одной таблицы без псевдонимов можно обойтись. Рисков нет. Синтаксический анализатор базы данных однозначно знает, данные из какой колонки таблицы запрашиваются. Но рекомендуется всё же использовать их — чтобы выработать привычку.

В случае извлечения данных из нескольких таблиц отказ от использования псевдонимов увеличивает риск получения некорректного результата. Допустим, что у таблиц есть колонки с одинаковым именем. Когда данные извлекаются и SQL-запрос звучит как: «Получаю записи из таблиц колонку А», то о какой колонке «А» идёт речь: из первой или второй таблицы? Если для таблицы назначен псевдоним, то SQL-запрос может звучать уже так: «Получаю записи из таблицы Т1 колонку А».

К SQL-запросу, возможно, придётся вернуться через какое-то время, чтобы внести в него изменения. В таких случаях подсказки в виде псевдонима (alias) помогут определить нужную колонку. Практически со стопроцентной уверенностью будет понятно, из какой таблицы что извлекали.

⚠️ Опасный подход:

SELECT TEST_DATA_1.TYPE ,TEST_DATA_1.VALUE ,TEST_DATA_2.TYPE ,TEST_DATA_2.VALUE FROM TEST_DATA_1 ,TEST_DATA_2 WHERE TEST_DATA_1.TEST_DATA_1_ID = TEST_DATA_2.TEST_DATA_1_ID;

✅ Безопасный подход заключается в обращении через псевдоним:

SELECT t1.TYPE AS TYPE_1 /* Колонка TYPE из таблицы TEST_DATA_1 */ ,t1.VALUE AS VALUE_1 /* Колонка VALUE из таблицы TEST_DATA_1 */ ,t2.TYPE AS TYPE_2 /* Колонка TYPE из таблицы TEST_DATA_2 */ ,t2.VALUE AS VALUE_2 /* Колонка VALUE из таблицы TEST_DATA_2 */ FROM TEST_DATA_1 t1 ,TEST_DATA_2 t2 WHERE t1.TEST_DATA_1_ID = t2.TEST_DATA_1_ID;

2. Извлекай только те данные, которые планируешь использовать

База данных зачастую является неотъемлемой частью приложения. По мере усложнения функционала в отдельной взятой таблице может увеличиваться количество колонок.

Рассмотрим пример «Карточка сотрудника». У нас есть таблица «Сотрудник» с колонками ФИО, пол, возраст. Данные из них извлекаются и выводятся на форму «Карточка сотрудника». SQL-запрос можно написать следующим образом: «Извлекаю все колонки из таблицы по указанному сотруднику». В таком случае извлекаются все колонки.

⚠️ Опасный подход заключается в извлечении всех данных:

SELECT t1.* FROM TEST_DATA_1 t1 WHERE t1.TEST_DATA_1_ID = 3 /* ID EMPLOYEE = СОТРУДНИК 1 */;



В будущем могут появиться дополнительные колонки в базе данных — например, описание должностных обязанностей или адрес проживания — в рамках нового информационного потока использования базы данных. То есть вне «Карточки сотрудника».

/* Добавление новой колонки в таблицу */ ALTER TABLE TEST_DATA_1 ADD DESCRIPTION VARCHAR2(4000) / /* Обновление данных в таблице */ UPDATE TEST_DATA_1 t1 SET T1.DESCRIPTION = 'ДОПОЛНИТЕЛЬНЫЕ ДАННЫЕ ПО СОТРУДНИКУ 1' WHERE t1.TEST_DATA_1_ID = 3 /* ID EMPLOYEE = СОТРУДНИК 1 */; /* Извлечение данных из таблицы */ SELECT t1.* FROM TEST_DATA_1 t1 WHERE t1.TEST_DATA_1_ID = 3 /* ID EMPLOYEE = СОТРУДНИК 1 */;



В результате данные по новым полям заполняются уже не только формой «Карточки сотрудника». И SQL-запрос получения информации для формы начинает работать медленнее. Причина в том, что приходится извлекать данные из большего количества колонок.

Деградация скорости получения данных может происходить постепенно или резко — но в самый неподходящий момент. Зачастую это связано с тем, что поля свободного ввода данных могут быть большими. То есть база данных должна больше информации подгрузить в память и потом отдать клиенту, приложение которого не готово к такому потоку данных.

Рассмотрим пример «Телефон». На телефоне пользователя установлено приложение. Сам телефон старый. Пользователь не выполнял обновления программного обеспечения (ПО), но замечает, что с какого-то момента времени приложение начало работать медленнее. У другого пользователя на новом телефоне то же приложение работает быстро. Ошибка «плавающая», но для разработчика неприятная.

Как правило, дело в том, как написано приложение. Данных извлекается больше, чем надо, и более современный телефон, у которого памяти больше, этого не заметит. Но старый не может себе этого позволить.

Чтобы таких неожиданностей не возникало, нужно извлекать строго те данные, которые требуется использовать и показывать на форме. В данном случае нужно было написать: «Извлекаю колонки ФИО, возраст, пол из таблички сотрудника, с фильтрацией по сотруднику».

✅ Безопасный подход заключается в получении нужных данных:

SELECT t1.TYPE AS TYPE_1 /* Колонка TYPE из таблицы TEST_DATA_1 */ ,t1.VALUE AS VALUE_1 /* Колонка VALUE из таблицы TEST_DATA_1 */ FROM TEST_DATA_1 t1 WHERE t1.TEST_DATA_1_ID = 3 /* ID EMPLOYEE = СОТРУДНИК 1 */;

3. По максимуму используй данные, которые извлёк из таблицы

Каждый SQL-запрос к базе данных чего-то стоит. В тот момент, когда данные извлечены и находятся в памяти, надо по максимуму использовать то, что получено, чтобы оптимизировать время и ресурсы.

После обращения к таблице Table1, нужно постараться написать SQL-запрос так, чтобы не пришлось извлекать данные из неё несколько раз. Это не всегда возможно, но попытаться стоит.

⚠️ Опасный подход:

SELECT t1.TYPE AS TYPE_1 ,t1.VALUE AS VALUE_1 ,t2.VALUE AS VALUE_2 FROM TEST_DATA_1 t1 ,TEST_DATA_2 T2 WHERE T1.TEST_DATA_1_ID = T2.TEST_DATA_1_ID AND t2.VALUE = 'ПРОЖИВАЕТ В ГОРОДЕ МОСКВА' UNION ALL SELECT t1.TYPE AS TYPE_1 ,t1.VALUE AS VALUE_1 ,t2.VALUE AS VALUE_2 FROM TEST_DATA_1 t1 ,TEST_DATA_2 T2 WHERE T1.TEST_DATA_1_ID = T2.TEST_DATA_1_ID AND t2.VALUE = 'ПРОЖИВАЕТ В ГОРОДЕ САНКТ-ПЕТЕРБУРГ' ORDER BY VALUE_1;

/* План запроса */



✅ Безопасный подход заключается в использовании полученных данных максимально продуктивно:

SELECT t1.TYPE AS TYPE_1 ,t1.VALUE AS VALUE_1 ,t2.VALUE AS VALUE_2 FROM TEST_DATA_1 t1 ,TEST_DATA_2 T2 WHERE T1.TEST_DATA_1_ID = T2.TEST_DATA_1_ID AND t2.VALUE IN ('ПРОЖИВАЕТ В ГОРОДЕ МОСКВА', 'ПРОЖИВАЕТ В ГОРОДЕ САНКТ-ПЕТЕРБУРГ') ORDER BY VALUE_1;

/* План запроса */



Неоптимальный SQL-запрос может выполняться дольше, уронить инфраструктуру и даже повлиять на безопасность системы.

⚒ Рассмотрим тестовый пример:

/* * Тестовый пример * Каждый случай запроса выполняется 1 000 000 раз в “холостую” */ declare start_time pls_integer; end_time pls_integer; begin /* 1 Случай */ start_time := dbms_utility.get_time; for indx in 1 .. 1000000 loop for cur in (select t1.TYPE as TYPE_1 ,t1.VALUE as VALUE_1 ,t2.VALUE as VALUE_2 from TEST_DATA_1 t1 ,TEST_DATA_2 T2 where T1.TEST_DATA_1_ID = T2.TEST_DATA_1_ID and t2.VALUE = 'ПРОЖИВАЕТ В ГОРОДЕ МОСКВА' union all select t1.TYPE as TYPE_1 ,t1.VALUE as VALUE_1 ,t2.VALUE as VALUE_2 from TEST_DATA_1 t1 ,TEST_DATA_2 T2 where T1.TEST_DATA_1_ID = T2.TEST_DATA_1_ID and t2.VALUE = 'ПРОЖИВАЕТ В ГОРОДЕ САНКТ-ПЕТЕРБУРГ' order by VALUE_1) loop null; end loop; end loop; end_time := dbms_utility.get_time; dbms_output.put_line('execution time 1 --> ' || (end_time - start_time) / 100 || ' sec'); /* 2 Случай */ start_time := dbms_utility.get_time; for indx in 1 .. 1000000 loop for cur in (select t1.TYPE as TYPE_1 ,t1.VALUE as VALUE_1 ,t2.VALUE as VALUE_2 from TEST_DATA_1 t1 ,TEST_DATA_2 T2 where T1.TEST_DATA_1_ID = T2.TEST_DATA_1_ID and t2.VALUE in ('ПРОЖИВАЕТ В ГОРОДЕ МОСКВА', 'ПРОЖИВАЕТ В ГОРОДЕ САНКТ-ПЕТЕРБУРГ') order by VALUE_1) loop null; end loop; end loop; end_time := dbms_utility.get_time; dbms_output.put_line('execution time 2 --> ' || (end_time - start_time) / 100 || ' sec'); end; / /* * Результат выполнения * Важно не время, которое зависит от ресурсов на ПК, а разница выполнения */ /* Done in 64,516 seconds */ execution time 1 --> 46.83 sec execution time 2 --> 17.67 sec

Рассмотрим пример «Работа ЦОД». Есть Центр Обработки Данных (ЦОД). В нём, на одном из ресурсов внутри приложения, выполняется некий SQL-запрос, который постепенно использует всю доступную память без ограничений. И приложениям, которые стоят на том же ресурсе, со временем перестаёт хватать памяти на стабильную работу. Это может привести к их падению.

Конечно, многое будет зависеть от качества приложений. Например, если во время падения они закрываются нетипично, подвисают или не отвечают на запросы пользователя — и выходят за рамки границ безопасности — хакеры могут этим пользоваться для входа в систему. И тем самым её скомпрометировать.

4. Проверяй запросы SQL на индексы

SQL-запросы бывают простые и сложные. Иногда извлекается мало данных, иногда — много. Если таблица большая, и в ней очень разнообразные данные, то в зависимости от того, как обращаться к этим данным, использовать индекс или нет, можно потерять время.

Рассмотрим пример «Брокерская биржа». В рамках отдельного процесса извлекаются данные для покупки-продажи акций. Используя оптимизированный SQL-запрос, можно быстро получать информацию, по какой цене торгуется каждая акция. И делать прогноз — покупать или продавать.

Если SQL-запрос не оптимизирован, извлечение данных занимает больше времени. И пользователь вынужден ждать, хотя мог за это время сделать что-то, что принесло бы ему деньги.

Индексы — это инструмент оптимизации извлечения данных. Конечно, это не панацея, и если таблица маленькая, по ней проще пройти прямым перебором и получить данные.

Добавим в тестовую таблицу 1 новые данные:

/* Добавление новых данных */ INSERT INTO TEST_DATA_1 (TYPE, VALUE) VALUES ('STOCK MARKET', 'АКЦИЯ 1. СТОИМОСТЬ 101 РУБ'); INSERT INTO TEST_DATA_1 (TYPE, VALUE) VALUES ('STOCK MARKET', 'АКЦИЯ 2. СТОИМОСТЬ 102 РУБ'); INSERT INTO TEST_DATA_1 (TYPE, VALUE) VALUES ('STOCK MARKET', 'АКЦИЯ 3. СТОИМОСТЬ 103 РУБ'); INSERT INTO TEST_DATA_1 (TYPE, VALUE) VALUES ('STOCK MARKET', 'АКЦИЯ 4. СТОИМОСТЬ 104 РУБ');

⚠️ Опасный подход заключается в игнорировании использования индексов:

/* Извлечение всех данных TYPE = STOCK MARKET */ SELECT t1.TYPE AS TYPE_1 ,t1.VALUE AS VALUE_1 FROM TEST_DATA_1 t1 WHERE t1.TYPE = 'STOCK MARKET'; /* План запроса */



Добавим в тестовую таблицу 1 новый индекс

/* Добавление нового индекса */ CREATE INDEX TEST_DATA_1_IDX1 ON TEST_DATA_1 (TYPE) /

✅ Безопасный подход заключается в использовании индексов:

/* Извлечение всех данных TYPE = STOCK MARKET */ SELECT t1.TYPE AS TYPE_1 ,t1.VALUE AS VALUE_1 FROM TEST_DATA_1 t1 WHERE t1.TYPE = 'STOCK MARKET';

/* План запроса */



Рассмотрим пример «Доставка почты». Показательный пример работы индексов — доставка почты из точки А в одном городе, в точку Б в другом. Зная, куда конкретно нужно доставить посылку, мы можем идти по индексам и определить, где и когда повернуть, чтобы довезти посылку за максимально короткое время. Если везти посылку на машине, то это сокращает расход топлива — а значит, и материальные издержки на доставку.

В противном случае можно сворачивать не там, спрашивать дорогу у прохожих, которые знают её плохо. И, вместо того чтобы доставить посылку за Время Т1, опоздать на Время Т2. В итоге покупатель ждёт, а продавец теряет деньги.

Индексы помогают ускорить извлечение данных.

5. Начинай запрос SQL с таблицы с меньшим набором записей

Допустим, нам нужно соединить две таблицы: с маленьким количеством записей и с большим. Стоит сделать следующее:

начинать извлечение данных из таблицы с меньшим набором данных;

продолжать извлечение данных из таблицы с большим набором данных.

⚒ Добавим в тестовую таблицу 2 новые данные:

/* Добавление новых данных */ declare l_type test_data_2.type%type := 'STOCK MARKET'; l_value_2 test_data_2.value%type := ''; l_sql varchar2(128) := ''; begin /* Извлечение данных из тестовой таблицы 1 */ for cur_t1 in (select t1.test_data_1_id as test_data_1_id ,t1.type as type_1 ,t1.value as value_1 from TEST_DATA_1 t1 where type = l_type) loop /* Цикл до 1 000 000 на каждую полученную запись из тестовой таблицы 1 */ for indx in 1 .. 1000000 loop l_value_2 := cur_t1.value_1 || '. ' || 'ЗАПИСЬ ' || indx; l_sql := 'INSERT INTO TEST_DATA_2 (TEST_DATA_1_ID, TYPE, VALUE) VALUES (' || -- cur_t1.TEST_DATA_1_ID || ', ' || -- '''' || l_type || ''', ' || -- '''' || l_value_2 || ''')'; /* Выполнение динамического запроса */ execute immediate l_sql; end loop; end loop; end; / /* Общее число записей в таблице TEST_DATA_1 */ SELECT COUNT(1) AS CNT FROM TEST_DATA_1 /

/* Общее число записей в таблице TEST_DATA_2 */ SELECT COUNT(1) AS CNT FROM TEST_DATA_2 /

/* Добавление нового индекса для таблицы TEST_DATA_1 */ CREATE INDEX TEST_DATA_1_IDX2 ON TEST_DATA_1 (TEST_DATA_1_ID, TYPE) / /* Добавление нового индекса для таблицы TEST_DATA_2 */ CREATE INDEX TEST_DATA_2_IDX1 ON TEST_DATA_2 (TEST_DATA_1_ID, TYPE) / CREATE INDEX TEST_DATA_2_IDX2 ON TEST_DATA_2 (TEST_DATA_1_ID) / CREATE INDEX TEST_DATA_2_IDX3 ON TEST_DATA_2 (TYPE) / /* Сбор статистики после добавления данных */ declare l_user varchar2(30 char) := user; begin /* Для таблицы TEST_DATA_1 */ DBMS_STATS.GATHER_TABLE_STATS(ownname => l_user -- ,tabname => 'TEST_DATA_1' ,cascade => true); /* Для таблицы TEST_DATA_2 */ DBMS_STATS.GATHER_TABLE_STATS(ownname => l_user -- ,tabname => 'TEST_DATA_2' ,cascade => true); end; /

Если поступить наоборот, то мы потеряем время, потому что перебирать данные из большей таблицы дольше.

⚒ Рассмотрим тестовый пример:

/* * Тестовый пример * Каждый случай запроса выполняется 100 раз в “холостую” * Запросы усложнены и их можно упростить, добиваясь большей производительности и схожего результата * Попробуйте поэкспериментировать */ declare start_time pls_integer; end_time pls_integer; begin /* 1 Случай. От большего к меньшему */ start_time := dbms_utility.get_time; for indx in 1 .. 100 loop for cur in (select t1.type as type_1 ,t1.value as value_1 ,t2_.type_2 as type_2 ,t2_.value_2_min as value_2_min ,t2_.value_2_max as value_2_max ,t2_.value_2_cnt as value_2_cnt from (select t2.TEST_DATA_1_ID as TEST_DATA_1_ID ,t2.TYPE as TYPE_2 ,min(t2.VALUE) as VALUE_2_MIN ,max(t2.VALUE) as VALUE_2_MAX ,count(t2.VALUE) as VALUE_2_CNT from TEST_DATA_2 t2 where t2.type = 'STOCK MARKET' group by t2.TEST_DATA_1_ID ,t2.TYPE order by t2.TEST_DATA_1_ID) t2_ join TEST_DATA_1 t1 on t1.TEST_DATA_1_ID = t2_.TEST_DATA_1_ID and t1.type = 'STOCK MARKET' order by t1.value) loop null; end loop; end loop; end_time := dbms_utility.get_time; dbms_output.put_line('execution time 1 --> ' || (end_time - start_time) / 100 || ' sec'); /* 2 Случай. От меньшего к большему */ start_time := dbms_utility.get_time; for indx in 1 .. 100 loop for cur in (select t1_.type_1 as type_1 ,t1_.value_1 as value_1 ,t2.type as type_2 ,min(t2.value) as value_2_min ,max(t2.value) as value_2_max ,count(t2.value) as value_2_cnt from (select t1.TEST_DATA_1_ID as TEST_DATA_1_ID ,t1.TYPE as TYPE_1 ,t1.VALUE as VALUE_1 from TEST_DATA_1 t1 where t1.TYPE = 'STOCK MARKET' order by t1.value) t1_ join TEST_DATA_2 t2 on t2.TEST_DATA_1_ID = t1_.TEST_DATA_1_ID and t2.TYPE = 'STOCK MARKET' group by t1_.type_1 ,t1_.value_1 ,t2.type) loop null; end loop; end loop; end_time := dbms_utility.get_time; dbms_output.put_line('execution time 2 --> ' || (end_time - start_time) / 100 || ' sec'); end; / /* * Результат выполнения * Важно не время, которое зависит от ресурсов на ПК, а разница выполнения * Каждый вариант возвращает одинаковые данные */

/* Executed in 269,203 seconds */ execution time 1 --> 149.49 sec execution time 2 --> 119.68 sec

Рассмотрим пример «Очередь клиентов». Есть поток клиентов, каждого из которых нужно обслужить. Операторы, заполняя форму «Анкета» задают серию вопросов. Один из них, влияет на дальнейший ход общения: «Вам исполнилось 18 лет?». Если клиент отвечает нет, то оператор прекращает общение, иначе продолжает задавать вопросы.

Если оператор задаст вопрос про возраст в конце общения, то любой потенциальный клиент должен будет заполнить всю анкету, даже если в этом нет смысла. Рациональный подход в общении с клиентами помогает операторам за одно и то же время обслужить большее число клиентов. С базами данных всё так же.

6. Не допускай декартового произведения между таблицами

Результатом декартового — или перекрёстного — произведения множеств будет такое множество, элементами которого являются все возможные упорядоченные пары элементов исходных множеств. Рассмотрим пример «Адрес». Возьмём две таблицы «Город», «Улица». В первой таблице «Город» есть две записи: Москва и Санкт-Петербург. Во второй таблице «Улица» сохранены следующие записи:

улица Карла Маркса, которая одновременно есть и в Москве, и в Санкт-Петербурге;

улица Крупской аналогично и в Москве, и в Санкт-Петербурге;

Малый Полуярославский переулок только в Москве.

Пишем запрос: «Получаю из таблицы «Улица», которые принадлежат городу Москва».

⚠️ Опасный подход:

SELECT t1.TYPE AS TYPE_1 /* Колонка TYPE из таблицы TEST_DATA_1 */ ,t1.VALUE AS VALUE_1 /* Колонка VALUE из таблицы TEST_DATA_1 */ ,t2.TYPE AS TYPE_2 /* Колонка TYPE из таблицы TEST_DATA_2 */ ,t2.VALUE AS VALUE_2 /* Колонка VALUE из таблицы TEST_DATA_2 */ FROM TEST_DATA_1 t1 ,TEST_DATA_2 t2 WHERE t1.TYPE = 'CITY' AND t2.TYPE = 'STREET';



SQL-запрос написан без условия, то есть: «Извлекаю улицы, относящиеся к городам, без соединения таблиц». База данных, не понимая, по какому городу делается SQL-запрос, соединит со всеми улицами и Москву, и Санкт-Петербург. Всего вернётся 2* 5 = 10 записей.

✅ Безопасный подход заключается в наличии связей:

SELECT t1.TYPE AS TYPE_1 /* Колонка TYPE из таблицы TEST_DATA_1 */ ,t1.VALUE AS VALUE_1 /* Колонка VALUE из таблицы TEST_DATA_1 */ ,t2.TYPE AS TYPE_2 /* Колонка TYPE из таблицы TEST_DATA_2 */ ,t2.VALUE AS VALUE_2 /* Колонка VALUE из таблицы TEST_DATA_2 */ FROM TEST_DATA_1 t1 ,TEST_DATA_2 t2 WHERE t1.TEST_DATA_1_ID = t2.TEST_DATA_1_ID AND t1.TYPE = 'CITY' AND t2.TYPE = 'STREET';



Этот SQL-запрос написан с условием, то есть: «Извлекаю улицы, относящиеся к городу Москве, соединяя две таблицы условием». В нём указывается, по какому городу нужно выполнить фильтрацию. Поэтому возвращено 3 записи.

Когда данные извлекаются больше чем из одной таблицы, важно, как они соединяются между собой. Неправильное соединение будет возвращать неверные данные и не в ожидаемом количестве.

7. Проверяй, что имена параметров процедур не совпадают с именами колонок

Процедуры, функции могут использоваться для разных целей. Одно из возможных предназначений — обновление записей в таблице.

Допустим, есть строковый параметр А, который передаётся на вход процедуры с целью фильтрации. Можно сказать, что написано так: «Обновляю таблицу, задав новое значение для колонки, где выполняется фильтрация по колонке А равной параметру А». В этом случае наблюдается полное совпадение А = А. База данных обновит все записи в этой таблице.

Чтобы этого не было, параметру добавляют префикс или постфикс. Например, параметр будет называться не А, а РА. В изменённом виде можно сказать, что написано так: «Обновляю таблицу, задав новое значение для колонки, где выполняется фильтрация по колонке А равной параметру PА».

⚠️ Опасный подход:

/* 1 вариант процедуры с ошибкой */ create or replace procedure e_test_data_1_upd_description(test_data_1_id in TEST_DATA_1.TEST_DATA_1_ID%type ,description in TEST_DATA_1.DESCRIPTION%type) as begin update TEST_DATA_1 t1 – set t1.DESCRIPTION = description /* Обновление записи */ where t1.TEST_DATA_1_ID = test_data_1_id; exception when others then /* Блок перехвата ошибок */ null; end e_test_data_1_upd_description; / /* Пример вызова 1 варианта процедуры с ошибкой */ declare begin e_test_data_1_upd_description(test_data_1_id => 4 /* ID EMPLOYEE = СОТРУДНИК 2 */ ,description => 'ДОПОЛНИТЕЛЬНЫЕ ДАННЫЕ ПО СОТРУДНИКУ 2'); end; / /* * Результат изменений * Визуально изменений нет */ SELECT T1.TEST_DATA_1_ID AS TEST_DATA_1_ID ,T1.TYPE AS TYPE_1 ,T1.VALUE AS VALUE_1 ,T1.DESCRIPTION AS DESCRIPTION FROM TEST_DATA_1 T1;



⚠️ Опасный подход:

/* 2 вариант процедуры с ошибкой */ create or replace procedure e_test_data_1_upd_description(test_data_1_id in TEST_DATA_1.TEST_DATA_1_ID%type ,description_new in TEST_DATA_1.DESCRIPTION%type) as begin update TEST_DATA_1 t1 – set t1.DESCRIPTION = description_new /* Обновление записи */ where t1.TEST_DATA_1_ID = test_data_1_id; exception when others then /* Блок перехвата ошибок */ null; end e_test_data_1_upd_description; / /* Пример вызова 2 варианта процедуры с ошибкой */ declare begin e_test_data_1_upd_description(test_data_1_id => 4 /* ID EMPLOYEE = СОТРУДНИК 2 */ ,description_new => 'ДОПОЛНИТЕЛЬНЫЕ ДАННЫЕ ПО СОТРУДНИКУ 2'); end; / /* * Результат изменений * Изменены все записи */ SELECT T1.TEST_DATA_1_ID AS TEST_DATA_1_ID ,T1.TYPE AS TYPE_1 ,T1.VALUE AS VALUE_1 ,T1.DESCRIPTION AS DESCRIPTION FROM TEST_DATA_1 T1;



✅ Безопасный подход заключается в передаче параметра, имя которого не совпадает с именем колонки в таблице:

/* Вариант процедуры без ошибки */ create or replace procedure e_test_data_1_upd_description(p_test_data_1_id in TEST_DATA_1.TEST_DATA_1_ID%type ,p_description in TEST_DATA_1.DESCRIPTION%type) as begin update TEST_DATA_1 t1 – set t1.DESCRIPTION = p_description /* Обновление записи */ where t1.TEST_DATA_1_ID = p_test_data_1_id; exception when others then /* Блок перехвата ошибок */ null; end e_test_data_1_upd_description; / /* Пример вызова варианта процедуры без ошибки */ declare begin e_test_data_1_upd_description(p_test_data_1_id => 4 /* ID EMPLOYEE = СОТРУДНИК 2 */ ,p_description => 'ДОПОЛНИТЕЛЬНЫЕ ДАННЫЕ ПО СОТРУДНИКУ 2'); end; / /* * Результат изменений * Изменена 1 требуемая запись */ SELECT T1.TEST_DATA_1_ID AS TEST_DATA_1_ID ,T1.TYPE AS TYPE_1 ,T1.VALUE AS VALUE_1 ,T1.DESCRIPTION AS DESCRIPTION FROM TEST_DATA_1 T1;

8. Следи за временем выполнения SQL-запроса

Время, пожалуй, один из самых бесценных ресурсов. Пренебрежение за контролем времени выполнения SQL-запроса приведёт к трате усилий и денег.

Рассмотрим пример «Мониторинг времени выполнения». Допустим, на уровне базы данных продуктовой среды настроен специальный триггер. Его предназначение сводится к следующему:

прерывать сессию, которая выполняется дольше N-минут;

сохранить информацию об SQL-запросе в журнал для последующего анализа или постановки на мониторинг.

Вариант триггера на таблицу с искусственно генерируемой ошибкой в момент обновления данных:

/* Вариант триггера */ create or replace trigger TEST_DATA_1_AIUDR_PTCL after insert or update or delete on TEST_DATA_1 for each row begin if UPDATING then if (:old.test_data_1_id = 5 and :new.description is not null) then DBMS_OUTPUT.PUT_LINE('Log entry.'); raise_application_error(-20001, 'No Update with id 5 and new description.'); rollback; end if; end if; end; /

Специалисту рассказывали про этот триггер. Он проигнорировал это или забыл — и реализовал, поставленную задачу на непродуктовой среде таким образом, что одно из действий выполняется больше N-минут. Передал всё на установку в продуктовую среду. Получилось, что реализованный функционал не работает полностью или частично.

Вариант процедуры с искусственно завышенным временем выполнения

/* Вариант процедуры */ create or replace procedure e_test_data_1_upd_description(p_test_data_1_id in TEST_DATA_1.TEST_DATA_1_ID%type ,p_description in TEST_DATA_1.DESCRIPTION%type) as begin /* Цикл добавлен для увеличения времени выполнения блока программной логики */ for indx in 1 .. 1000000 loop for cur in (select t1.TYPE as TYPE_1 ,t1.VALUE as VALUE_1 ,t2.VALUE as VALUE_2 from TEST_DATA_1 t1 ,TEST_DATA_2 T2 where t1.TEST_DATA_1_ID = t2.TEST_DATA_1_ID and t1.TEST_DATA_1_ID = p_test_data_1_id) loop null; end loop; end loop; /* Блок программной логики */ update TEST_DATA_1 t1 – set t1.DESCRIPTION = p_description /* Обновление записи */ where t1.TEST_DATA_1_ID = p_test_data_1_id; end e_test_data_1_upd_description; / /* Пример вызова процедуры */ declare begin e_test_data_1_upd_description(p_test_data_1_id => 5 /* ID EMPLOYEE = СОТРУДНИК 3 */ ,p_description => 'ДОПОЛНИТЕЛЬНЫЕ ДАННЫЕ ПО СОТРУДНИКУ 3'); end; /



Задача специалиста смотреть на поставленную задачу шире, учитывая разные аспекты, применяя разные подходы. Можно попробовать оптимизировать SQL-запрос, например, добавляя индексы. Можно менять алгоритмы выполнения действий, добиваясь требуемого результата.

9. Используй копию данных для построения отчётности

Отчётность — это извлечение массива данных из базы для последующей обработки, аналитики, построения прогноза, прочее. Для неё может извлекаться значительный объём данных.

Рассмотрим пример «Отчёт о расходах за период». У нас есть промышленная среда, на которой развёрнуто приложение с подключением к базе данных. С приложением работают сотрудники. Задачей одних является внесение информации о приходе и расходе денежных средств. Задачей других — подготовка отчёта о расходе денежных средств за период. Информация вносится периодически и в небольшом объёме. Извлекается реже, но вся, что была внесена за конкретный период.

При ограниченных ресурсах базы данных извлечение может приводить к замедлению работы приложения. Потому что на стороне БД подключаются сотрудники из обеих групп, ресурсы делятся между ними, и отклик происходит медленнее. Избежать подобного эффекта можно при помощи копии базы данных с применением механизма репликации. Так, клон клон с определённой периодичностью синхронизируется с основной базой данных (их может быть несколько).

Создание копии базы данных — задача администраторов базы данных (Database administrator, DBA). Для большего погружения в механизм репликации можно обратиться к официальной справочной информации соответствующей базы данных. Например:

Взаимодействие с базой данных можно трансформировать следующим образом. Сотрудники, которые вводят информацию, так и продолжают работать с основной базой данных. Сотрудники, которые заняты отчётностью, работают с её копией. Информационные потоки разведены. Влияние устранено.

Подход использовать не основную базу данных для отчётности, а её клон (копию) — это рекомендация. И не для любой отчётности требуется создавать копию. Например, если с базой данных работает один сотрудник, который практически не загружает её. Или если у неё много свободных ресурсов.

10. Проверяй формат данных

Бывает, что отчёт, который обычно работает хорошо, возвращает ошибку, если ввести другие входные данные. Это связано с тем, что у новых входных данных другой формат.

Рассмотрим пример «Отчёт». У нас есть отчёт, строящийся на данных, которые заполняются внешним приложением. Одна из его колонок — дата. Поле ввода на форме, в которой происходит её заполнение — строковое. В подавляющем большинстве случаев формат: день числом, месяц числом, год числом, например, 01.01.2001. Изредка — день числом, месяц словом, год числом, например, «1 января 2001».

Приложение позволяет вводить в любом виде. Конечные пользователи ошибку не видят, но для отчёта это — потенциальная проблема. Она может заключаться в неверном предположении, что дата всегда заносится в базу данных в одном виде.

⚠️ Опасный подход заключается в игнорировании формата используемых данных:

SELECT t1.TYPE AS TYPE_1 /* Колонка TYPE из таблицы TEST_DATA_1 */ ,to_date(t1.VALUE, 'DD.MM.RRRR') AS VALUE_1 /* Колонка VALUE из таблицы TEST_DATA_1 */ ,t2.TYPE AS TYPE_2 /* Колонка TYPE из таблицы TEST_DATA_2 */ ,t2.VALUE AS VALUE_2 /* Колонка VALUE из таблицы TEST_DATA_2 */ FROM TEST_DATA_1 t1 ,TEST_DATA_2 t2 WHERE t1.TEST_DATA_1_ID = t2.TEST_DATA_1_ID AND t1.TYPE = 'DATE' AND t2.TYPE = 'DATE';



✅ Безопасный подход заключается в понимании формата используемых данных:

SELECT t1.TYPE AS TYPE_1 /* Колонка TYPE из таблицы TEST_DATA_1 */ ,to_date(t1.VALUE, 'DD.MM.RRRR') AS VALUE_1 /* Колонка VALUE из таблицы TEST_DATA_1 */ ,t2.TYPE AS TYPE_2 /* Колонка TYPE из таблицы TEST_DATA_2 */ ,t2.VALUE AS VALUE_2 /* Колонка VALUE из таблицы TEST_DATA_2 */ FROM TEST_DATA_1 t1 ,TEST_DATA_2 t2 WHERE t1.TEST_DATA_1_ID = t2.TEST_DATA_1_ID AND t1.TYPE = 'DATE' AND t2.TYPE = 'DATE' AND t2.VALUE = 'Формат день числом, месяц числом, год числом';



Наличие разных данных можно узнать заранее. Для этого, когда делается отчёт, можно выполнить проверку на всех данных, а не только на части. Это — залог стабильной работать и уверенность, что созданный отчёт будет работать.

Вспомним, что написано выше, и закрепим правила:

Объявляя имена таблиц, обращайся к записям через имена таблиц. Извлекай только те данные, которые планируешь использовать. По максимуму используй данные, которые извлёк из таблицы. Проверяй запросы SQL на индексы. Начинай запрос SQL с таблицы с меньшим набором записей. Не допускай декартового произведения между таблицами. Проверяй, что имена параметров процедур не совпадают с именами колонок. Следи за временем выполнения SQL-запроса. Используй копию данных для построения отчётности. Проверяй формат данных.

От автора

Подходов к оптимизации великое множество. Цель статьи — пробудить интерес искать и находить места роста производительности и снижения издержек. И помните Зако́н Ме́рфи: «Если что-нибудь может пойти не так, оно пойдёт не так»."'https://tproger.ru/articles/sql-dlja-nachinajushhih-10-pravil-postroenija-tochnyh-zaprosov/'https://media.tproger.ru/uploads/2023/03/5318284_digital_extension_file_format_sql_icon-cover.png'"['data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""752px"" viewBox=""0 0 752 245""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""337px"" viewBox=""0 0 337 84""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""774px"" viewBox=""0 0 774 245""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""775px"" viewBox=""0 0 775 246""%3E%3C/svg%3E', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1128px"" viewBox=""0 0 1128 84""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""447px"" viewBox=""0 0 447 34""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""683px"" viewBox=""0 0 683 242""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""520px"" viewBox=""0 0 520 182""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""672px"" viewBox=""0 0 672 59""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""750px"" viewBox=""0 0 750 35""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""773px"" viewBox=""0 0 773 261""%3E%3C/svg%3E', 'https://sun1-88.userapi.com/s/v1/if1/qOFqDZXwHIpfH1jeOEwJQunLigxSepYMSJeOEpkD9BC-RJT9GwAH8u7sL7Tn1fQQLv__eKhl.jpg?size=400x400&quality=96&crop=86,376,525,525&ava=1', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""107px"" viewBox=""0 0 107 36""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""491px"" viewBox=""0 0 491 134""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""671px"" viewBox=""0 0 671 364""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/07/logo-renessans.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""463px"" viewBox=""0 0 463 194""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2023/03/2019-06-15-05-41-15.jpg', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""74px"" viewBox=""0 0 74 36""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""753px"" viewBox=""0 0 753 241""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""577px"" viewBox=""0 0 577 84""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2023/03/5318284_digital_extension_file_format_sql_icon-cover-icon-original.png', 'https://mc.yandex.ru/watch/27485085', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""340px"" viewBox=""0 0 340 35""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""675px"" viewBox=""0 0 675 149""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""605px"" viewBox=""0 0 605 66""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2023/03/5318284_digital_extension_file_format_sql_icon-cover.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""520px"" viewBox=""0 0 520 101""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""601px"" viewBox=""0 0 601 67""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""675px"" viewBox=""0 0 675 78""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""486px"" viewBox=""0 0 486 241""%3E%3C/svg%3E']"
45'E5ZRAIPKQ'Весенний бум: 6 востребованных IT-специальностей'"На волне развития искусственного интеллекта топ востребованных IT специальностей претерпел изменения. Собрали для вас список из шести IT-профессий, где остро требуются толковые специалисты.

Computer Vision Engineer

Computer Vision Engineer обучает ИИ распознавать объекты и реагировать на них без необходимости в «глазах». Эта отрасль инженерии привлекает не только технарей, но и гуманитариев, ведь чтобы ИИ научился распознавать, большое количество видео и фото обрабатывается вручную, описывая изображенные на них объекты.

Разумеется, опыт работы с кодом, способность быстро адаптироваться к новым технологиям и задействовать алгоритмы помогают в достижении успеха в этой отрасли.

Инженер робототехники

Инженер-робототехник — это специалист, который разрабатывает архитектуру и вводит в эксплуатацию роботов, приборы и сложные робототехнические системы.

Они используются для:

производственных целей;

научно-исследовательских целей;

боевых действий;

развлечений;

бытового применения.

Роботы позволяют выполнять рутинную работу и сложные задачи практически без участия человека.

Инженеры-робототехники могут работать в автоконцернах, авиационных и космических предприятиях, инженерных компаниях и стартапах, занимающихся созданием роботов.

Заметили, что AI вакансии постепенно заполняют рынок? Да, и уже присматриваюсь к ним

Да, но мне всё равно

Нет, особых изменений не замечаю

Работа с данными

Компаниям, желающим обойти конкурентов и оптимизировать бизнес-процессы, чтобы получать большую прибыль, потребуются исследования данных. В связи с этим активно растёт спрос на профессионалов таких как аналитик BI, Data Scientist, аналитик данных, специалист Machine Learning, etc.

Data Analyst

Data аналитик собирает данные, на основе которых принимается решение. Он оценивает широкий спектр данных, после чего выбирает и обрабатывает те, которые важны для принятия решений. Далее аналитик визуализирует полученные данные, разрабатывает рекомендации и предлагает концепции ведения бизнеса.

Чтобы стать аналитиком данных, необходимо:

Обладать знаниями и навыками в области анализа данных. Иметь опыт работы с основными инструментами анализа данных. Уметь работать с большим объемом разнородной информации.

Data Engineer

Data engineer — это специалист, отвечающий за сбор, хранение и преобразование данных. Данные используются для создания и обучения моделей искусственного интеллекта (ИИ). При построении пирамиды потребностей ИИ в первую очередь на повестку дня выходят три основных этапа, делающиеся дата-инженером: извлечение, перенос/хранение и анализ/предварительная обработка данных.

Machine Learning Engineer

ML-инженер — это специалист, который работает в сфере Data Science. Задачи специалиста сводятся к практическому обучению компьютера поиску взаимосвязей в данных и принятию на их основе тех или иных решений.

Вот лишь некоторые примеры результатов ML-инженерии:

«умные ленты» в социальных сетях;

алгоритмы рекомендаций на музыкальных стримингах;

сервисы перевода типа Google Translate;

боты-помощники типа Олега банка «Тинькофф» и Алисы «Яндекса».

AI Ethicists (Этик ИИ)

Для того, чтобы ИИ мог действительно принимать правильные решения, необходимо наличие эксперта по этике ИИ. Он должен понимать и учитывать человеческие чувства, политические взгляды и привязанности, чтобы программировать ИИ так, чтобы тот был нейтральным и при этом понимал, что является правильным или неправильным.

Этика ИИ даёт нейросети понимание таких сложных этических понятий, как любовь, война, те или иные слова вежливости, etc.

Да, ИИ всё ещё лишён чувств, поэтому для принятия правильных решений и нужен эксперт по этике ИИ, который понимает и учитывает нюансы, недоступные искусственному интеллекту."'https://tproger.ru/articles/6-vostrebovannyh-it-specialnostej/'https://media.tproger.ru/uploads/2023/03/06fd3374-f24b-4890-8d0d-7251f0b5a340-cover.png'"['https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2023/03/77032fff-a414-4110-97b4-723e99683215.jpg', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'https://media.tproger.ru/uploads/2021/01/python_telegram_bot-cover.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2020/08/iconfinder_356_-Roadmap-_interaction_communication_essential_1451052-cover.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2022/07/logo-renessans-32x32.jpg', 'https://sun1-88.userapi.com/s/v1/if1/qOFqDZXwHIpfH1jeOEwJQunLigxSepYMSJeOEpkD9BC-RJT9GwAH8u7sL7Tn1fQQLv__eKhl.jpg?size=400x400&quality=96&crop=86,376,525,525&ava=1', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2023/03/d8d4dc43-c698-4cc3-a782-16ff510c3f89.png', 'https://media.tproger.ru/uploads/2021/03/iconfinder_Neural_network_2844558-cover.png', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'https://media.tproger.ru/uploads/2023/03/06fd3374-f24b-4890-8d0d-7251f0b5a340-cover.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2023/03/06fd3374-f24b-4890-8d0d-7251f0b5a340-cover-icon-original.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2023/03/d45ee3be-9108-4b05-92d9-45d56b16922a.jpg', 'https://media.tproger.ru/uploads/2021/05/iconfinder-icon-cover-2.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg']"
46'IZ2TQBXIU'Подключаемся к внутреннему протоколу iiko'"Относительно давно мне пришлось подразобраться во внутреннем протоколе работы сервера айко, т.к данных, даваемых публичным API мне не хватало. Плюс к этому, во времена когда я это делал, «биз» работал не стабильно и периодически падал.

Как я парсил данные?

С помощью burp, если коротко. Я сделал образ в virtualbox с чистой windows, установил туда Админку (iikoOffice), настроил прокси на компьютер, где установлен burp.

И так предположим, вы решили посмотреть, ну например, как получить товары: запустили анализатор; открыли Админку, в левом меню, в разделе «Товары и склады» щелкнули на пункт товары, открыв анализатор, вы увидите примерно следующую картину:

Непонятно! Я, например, ожидал увидеть путь похожий на «/goods/product/list». Более того, пройдясь по всем запросам, скорей всего в их ответах вы не найдёте вообще ничего похожего на список товаров. Но как так? В программе мы их же видим! Откуда они там берутся?

Давайте разбираться!

На самом деле, ответ прост: «админка» берёт данные из собственной БД! Да,да, каждый клиент имеет собственную БД, в которой хранит практически все данные.

Насколько я понял, только заказы (они же доставки в программе) не хранятся. По крайней мере, их и список терминалов можно получить отдельным запросом.

Но как данные попадают в локальную БД?

Синхронизация

Если посмотреть на список запросов, то можно увидеть:

Все данные передаются и принимаются в xml. Все запросы методом POST.

Также, если присмотреться,то увидите часто встречающийся post-запрос на url: «/services/update?methodName=waitEntitiesUpdate». Если посмотреть, что он возвращает, то опять же, вы вряд ли найдёте что-то интересное для себя.

Но вот если попробовать создать, например, товар, только не на отслеживаемом клиенте, а на каком-нибудь другом (чуть позже поймёте, почему на другом), и снова посмотреть, что он вернёт, то увидите, примерно следующий ответ:

<?xml version=""1.0"" encoding=""UTF-8""?> <result> <returnValue></returnValue> <success>true</success> <errorString null=""1""></errorString> <resultStatus>SUCCESS</resultStatus> <stackTrace null=""1""></stackTrace> <entitiesUpdate> <serverInstanceId>6308f3a9-298d-6b7d-0186-38a0563f0001</serverInstanceId> <revision>237070</revision> <items> <i> <id>97b00c04-beb1-4ddc-85cc-a2e43ae95e9a</id> <type>Product</type> <deleted>false</deleted> <xml null=""1""></xml> <r cls=""Product"" eid=""97b00c04-beb1-4ddc-85cc-a2e43ae95e9a""> <revision>237070</revision> <lastModifyNode null=""1""></lastModifyNode> <deleted>false</deleted> <modified>2023-02-26T10:38:32.410+04:00</modified> <created>2023-02-26T10:38:32.398+04:00</created> <deletedDate>1900-01-01T00:00:00.000+04:00</deletedDate> <userCreatedId null=""1""></userCreatedId> <userModifiedId null=""1""></userModifiedId> <localId>4386</localId> <name> <defaultResourceId null=""1""></defaultResourceId> <currentResourceId null=""1""></currentResourceId> <customValue>TestGoods</customValue> </name> <system>false</system> <description></description> <num>21000090000213124</num> <parent null=""1""></parent> <code>6095</code> <userCreated>008c6c5a-e7bf-4475-8a20-57b363dd94f1</userCreated> <userModified>008c6c5a-e7bf-4475-8a20-57b363dd94f1</userModified> <modifiers></modifiers> <modifierSchema null=""1""></modifierSchema> ......... </r> </i> </items> <fullUpdate>false</fullUpdate> <version null=""1""></version> </entitiesUpdate> <licenseInfo> <licenseHash>-724401794</licenseHash> <licenseData null=""1""></licenseData> <stateHash>3442</stateHash> <stateData null=""1""></stateData> <validTill>2023-05-29T10:38:32.413+04:00</validTill> </licenseInfo> <watchDogCheckResults> <i cls=""LicenseCheckResult""> <severity>ERROR</severity> <message>messge</message> <checkerId>LicenseChecker</checkerId> <expireSeconds>480096</expireSeconds> </i> </watchDogCheckResults> </result>

Заметили? Да, в entitiesUpdate->items лежат данные, которые необходимо обновить.

Так, а давайте создадим товар на текущей машине и посмотрим, как, в этом случае, нам ответит сервер. При создании товара «админка» отправляет post запрос на адрес:»/services/products?methodName=createProduct». В ответ мы получим примерно тот же самый ответ,что и получили выше при запросе на «/services/update?methodName=waitEntitiesUpdate». То есть, мы также получили в ответе (entitiesUpdate->items) данные, которые необходимо обновить. Вообще, какой бы вы запрос ни отправляли на сервер, вы будете получать одну и ту же структуру, в которой всегда будет entitiesUpdate.

Сервер при любом запросе всегда возвращает следующею структуру:

<result> <returnValue></returnValue> <success></success> <errorString></errorString> <resultStatus></resultStatus> <stackTrace></stackTrace> <entitiesUpdate></entitiesUpdate> <licenseInfo></licenseInfo> <watchDogCheckResults><watchDogCheckResults> </result>

Но как сервер понимает, что надо возвращать? Посмотрим, что мы отправляли на «/services/update?methodName=waitEntitiesUpdate»:

<?xml version=""1.0"" encoding=""utf-8""?> <args> <entities-version>237069</entities-version> <client-type>BACK</client-type> <enable-warnings>false</enable-warnings> <client-call-id>dc193feb-8bd6-4357-b945-2795769583d0</client-call-id> <license-hash>123133</license-hash> <restrictions-state-hash>3072</restrictions-state-hash> <obtained-license-connections-ids>4d7daff1-a070-45bf-928a-24d0a1c47f73</obtained-license-connections-ids> <request-watchdog-check-results>true</request-watchdog-check-results> <use-raw-entities>true</use-raw-entities> <fromRevision>237069</fromRevision> <timeoutMillis>30000</timeoutMillis> </args>

Обратите внимание, на число «entities-version», а теперь посмотрите в ответ entitiesUpdate->revision. В моем случае, в ответе revision,больше на 1. Более того, у продукта, который мы создали, также есть свой revision, в данном случае, он равен entitiesUpdate->revision.

Насколько я понял:

На сервере в БД у каждой таблицы есть колонка revision. Есть глобальная перемененная revision на сервере. В момент обновления или вставки мы сначала увеличиваем общий «revision», потом вставляем его в текущею таблицу.

Когда клиент запрашивает данные, то в «entities-version» указывает свой текущий revision.

Сервер в свою очередь проходится по всем таблицам и берет данные, где «revision» больше «entities-version», и возвращает их в ответе (items), где также возвращает свой revision.

Фух, почти всё! Остался последний пункт.

Аутентификация

Так пришло время разобраться, как сервер понимает, что мы это мы. Давайте взглянем на заголовок, который передаётся в каждом запросе:

POST /resto/services/update?methodName=waitEntitiesUpdate HTTP/1.1 Content-Type: text/xml X-Resto-CorrelationId: d0d3901c-d314-42cd-b363-81139698a229 X-Resto-LoginName: Login X-Resto-PasswordHash: {{sha1hash(pass)}} X-Resto-BackVersion: 8.2.7014.0 X-Resto-AuthType: BACK X-Resto-ServerEdition: IIKO_RMS Accept-Language: ru Host: {{you_host}} Content-Length: 654 Expect: 100-continue Accept-Encoding: gzip, deflate Connection: close

Кроме стандартных, мы видим заголовки, начинающиеся с «X-Resto-».

Давайте по порядку:

X-Resto-CorrelationId: генерируете любой uuidv4 при каждом запросе и вставляете сюда, а также в тело запроса в поле X-Resto-LoginName: тут думаю понятно. Логин, который вы прописываете в форме авторизации в iikoOffice. X-Resto-PasswordHash: sha1 хеш от вашего пароля. X-Resto-BackVersion: текущая версия, актуальную можно найти по адресу: /get_server_info.jsp. X-Resto-AuthType: всегда «BACK» X-Resto-ServerEdition: IIKO_RMS

Дальше обязательные поля в теле запроса:

entities-version: C этим мы разобрались ранее. client-type: BACK client-call-id: тоже самое, что и в X-Resto-CorrelationId license-hash: для /services/authorization?methodName=getCurrentFingerPrints можно ставить «0»,в остальных случаях берем актуальное значение (смотри ниже). restrictions-state-hash: для /services/authorization?methodName=getCurrentFingerPrints можно ставить «0», в остальных случаях берем актуальное значение (смотри ниже). obtained-license-connections-ids: Не понял зачем это нужно, но запросы работают без него, поэтому оставляем пустым. use-raw-entities: ставим «true». Не заметил, чтобы на что-то влияло.

По поводу «license-hash» и «restrictions-state-hash» можно получить, отправив запрос по адресу: «/services/authorization?methodName=getCurrentFingerPrints». Все! Как видите, все не так сложно:).

Итог

Возможно вам не хватает стандартных инструментов или вы хотите большей стабильности. Предугадать причины, по которым вы решите пойти по моему пути, я не могу. Я могу лишь пожелать вам удачи:). И да, также я подготовил демопроект на php."'https://tproger.ru/articles/podklyuchaemsya-k-vnutrennemu-protokolu-iiko/'https://media.tproger.ru/uploads/2023/04/eb80d537-7221-46d1-82b6-7b833398a8b0-cover.png'"['https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2023/03/f3bd0c05-bc92-4466-8e14-8d109191f395.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2023/03/09809c6c-2d46-4a1e-ad2b-d29488cc5f81.png', 'https://media.tproger.ru/uploads/2022/07/logo-renessans-32x32.jpg', 'https://sun1-88.userapi.com/s/v1/if1/qOFqDZXwHIpfH1jeOEwJQunLigxSepYMSJeOEpkD9BC-RJT9GwAH8u7sL7Tn1fQQLv__eKhl.jpg?size=400x400&quality=96&crop=86,376,525,525&ava=1', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2020/12/sql-commands-mysql-cover-1.png', 'https://media.tproger.ru/uploads/2023/04/eb80d537-7221-46d1-82b6-7b833398a8b0-cover-icon-original.png', 'https://media.tproger.ru/uploads/2021/03/iconfinder_017_treasure_chest_gold_wealth_jewel_money_2090267-cover.png', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'https://media.tproger.ru/uploads/2023/03/89716c10-d123-4245-a2f2-b8e3764decd6.png', 'https://media.tproger.ru/uploads/2017/09/postgres-tools.jpg', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2020/08/iconfinder__sql_2486249-cover-1.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2023/04/eb80d537-7221-46d1-82b6-7b833398a8b0-cover.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2023/03/43095b0f-58de-4c39-a3de-46e865347e41.png', 'https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg']"
47'L3HWYP009'Теперь с помощью GPT-4 можно создавать 3D-сцены в Blender'"Теперь с помощью GPT-4 можно создавать 3D-сцены в Blender

Энтузиаст разработал расширение, которое позволяет использовать Blender с командами на естественном языке с применением GPT-4 от OpenAI. Для этого достаточно просто ввести промт в текстовом поле, после чего нейросеть сгенерирует результат через Python.

Плагин будет полезен не только для того, чтобы сэкономить время на рутинном коде, но в целом, чтобы быстро понять, как работает Blender — «помощник» в виде нейросети, считайте, поможет сделать первые шаги.

Плагин поддерживает Blender версии 3.0.0, а подробная инструкция по установке есть в репозитории проекта."'https://tproger.ru/articles/tepr-s-pomoshhyu-gpt-4-mozhno-sozdavat-3d-sceny-v-blender/'https://tproger.ru/favicon.ico?v=2'"['https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://mc.yandex.ru/watch/27485085', 'https://tproger.ru/favicon.ico?v=2', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://sun1-88.userapi.com/s/v1/if1/qOFqDZXwHIpfH1jeOEwJQunLigxSepYMSJeOEpkD9BC-RJT9GwAH8u7sL7Tn1fQQLv__eKhl.jpg?size=400x400&quality=96&crop=86,376,525,525&ava=1', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'https://media.tproger.ru/uploads/2023/03/ecf2d22b-96ba-4537-a904-8873ad654c88-cover-icon-original.png']"
48'10LJC4YDB'На LinkedIn нашли резюме человека, «не созданного для работы»'"Не думаю, что это противоречие, просто разные точки зрения, и я с вами не спорю) У меня личное представление ""Опыта ИТ-сферы"" и работы менеджеров. Менеджер, работающий с духами, и менеджер работающий со сложным техническим продуктом - разные вещи. Просто разные сферы и сотрудник должен быть подкован в узкоспециализированных вопросах для того, чтобы рассказать клиенту о преимуществах продукта. Я бы не продал духи, например.А в ситуации выбора между двумя менеджерами (работали в разных сферах) всегда будет преимущество у того, чей опыт больше в нужной специфике.Вообще, статья, как и название кликбейтное) Как будто, где-то внизу должна быть ссылка на курсы по этим профессиям."'https://tproger.ru/articles/na-linkedin-nawli-rezyume-cheloveka-ne-sozdannogo-dlya-raboty/'https://media.tproger.ru/uploads/2023/03/f1fc5bab-cbc3-4f71-b5e0-db44a38feecf-cover.png'"['https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://mc.yandex.ru/watch/27485085', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://sun1-88.userapi.com/s/v1/if1/qOFqDZXwHIpfH1jeOEwJQunLigxSepYMSJeOEpkD9BC-RJT9GwAH8u7sL7Tn1fQQLv__eKhl.jpg?size=400x400&quality=96&crop=86,376,525,525&ava=1', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'https://media.tproger.ru/uploads/2023/03/f1fc5bab-cbc3-4f71-b5e0-db44a38feecf-cover-icon-original.png', 'https://media.tproger.ru/uploads/2023/03/f1fc5bab-cbc3-4f71-b5e0-db44a38feecf-cover.png', 'https://media.tproger.ru/uploads/2023/03/3f3019c9-baee-41b0-afc4-9436385663c8.jpg', 'https://media.tproger.ru/uploads/2023/03/3a1928d1-5987-41d9-8937-1aa3a011f97b.jpg']"
49'4P5JMOCJW'Стрессовое интервью: 8 фишек рекрутёров'"А вам устраивали стрессовое собеседование? Возможно, да, но вы могли об этом не догадываться. Представляем вашему вниманию фишки, которые используют рекрутёры, чтобы проверить кандидата на прочность.

Было ли у вас стрессовое собеседование? Да

Нет

1. Маринование

Вас приглашают пройти интервью, назначая встречу на определённое время. Вы приходите вовремя, но вас просят подождать. Иногда время ожидания может растянуться до часа. При этом к вам никто не подходит и ничего не говорит, в лучшем случае — «Ожидайте».

Что делать?

Не нервничайте и не спешите сматывать удочки: так работодатель проверяет, насколько сильно вы заинтересованы в данной вакансии.

2. Собеседование закончилось, так и не начавшись

Иногда сценарий усложняется тем, что вам предлагают заполнить некую анкету или пройти тест, на что уходит до получаса. А после просто говорят: «Спасибо. До свидания!»

Что делать?

Вежливо, но настойчиво попросите об интервью, ведь вы именно за этим пришли, верно?

3. Некомфортные условия

Некоторые рекрутёры заходят ещё дальше и создают отвратительные условия: чересчур маленький офис, где вас собеседуют, яркий свет или неудобная мебель. Разумеется, в IT-сфере, напротив, стараются показать кандидату все прелести места работы, но тоже могут использовать такую уловку.

Что делать?

Проходя к месту интервью, обращайте внимание на холл, лифт, коридоры — они скажут о комфорте гораздо больше. Если всё достаточно аккуратно, в отличие от конечного пункта, будьте уверены — это стрессовое собеседование.

4. Глупые вопросы

Почти все IT собеседования, стрессовые они или нет, пестрят различными вопросами на логику. И работодатели не меньше соискателей знают, насколько глупо сегодня звучат вопросы в стиле «Почему крышка канализационного люка круглая». Поэтому если вы слышите что-то подобное, скорее всего, проверяют ваше поведение, а не правильность ответа.

Что делать?

Не возмущайтесь. Если не знаете, как ответить, спокойно скажите об этом. Например: «Да, я знаю этот вопрос. Кажется, его задают кандидатам в Google? Но, увы, не помню правильного ответа». Так вы дадите понять, что интересовались заковыристыми вопросами с IT-собеседований, но на этот не можете ответить.

5. Добрый полицейский, злой полицейский

В качестве злых могут выступить сразу несколько интервьюеров. Их задача — разуверить вас в том, что вам нужна данная должность. Они будут рассказывать о чрезвычайно стрессовых ситуациях, заоблачных требованиях и низких зарплатах. При этом есть ещё один интервьюер, который станет всячески вас отговаривать, предлагая подумать о более достойном месте работы.

Что делать?

Предварительно следует почитать отзывы самих сотрудников о компании, а также отзывы тех, кто проходил собеседование. Если полученная на интервью информация никак не вяжется с этими отзывами — вас проверяют.

6. Вопросы личного характера

Это простейший способ выбить почву из-под ног, а потому он часто применяется в стрессовых собеседованиях. Вопросы о семье, отношениях и даже о сексе. Более уязвимая категория в данном случае — девушки. У них могут поинтересоваться насчёт планов на семью и детей. Хотя, будем откровенны, IT-компании грешат этим редко, поскольку проповедуют равные условия для всех.

Что делать?

Уважайте себя и не отвечайте на провокационные вопросы. Вы можете отказаться отвечать в вежливой форме. Мягко намекните интервьюеру, что личная жизнь к профессиональной деятельности никакого отношения не имеет.

7. Жертвенность

Поскольку это стрессовое интервью, вас могут попросить перекрасить волосы, выбросить свой кошелёк, разрезать сумку и многое другое.

Что делать?

Всё, что в действительности хочет узнать рекрутёр, — способны ли вы тактично отказать в ответ на непомерные требования. Никому не нужен бесхребетный сотрудник или откровенный подхалим.

8. По-настоящему стрессовое собеседование

Это может быть грубость, переход на крик и даже стакан воды в лицо. Будем честны, даже если кандидату известно, что это просто проверка, далеко не каждый согласится терпеть подобное отношение.

Что делать?

Если всё ещё хотите эту должность, не идите на поводу у эмоций, но и не отмалчивайтесь, дабы не создать впечатление безвольного человека. Обратитесь к политике компании, её идеалам, с которыми можно ознакомиться на сайте, и скажите, что в соответствии с ними интервьюер ведёт себя неподобающе.

Подытожим

В ряде случаев о стрессовом собеседовании предупреждают заранее, но далеко не всегда. Если вы действительно заинтересованы в вакансии, ведите себя сдержанно и вежливо, но при этом не позволяйте интервьюеру выходить за рамки дозволенного."'https://tproger.ru/articles/stressovoe-sobesedovanie-8-fishek-rekrutjorov/'https://media.tproger.ru/uploads/2021/08/4526872_emoji_emoticon_monkey_sticker_stress_icon-cover-80.png'"['https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://lh3.googleusercontent.com/a/AGNmyxZ0_zz2ixn5QOaxRQ86YmxLw0Sc_W5UtR41K-MVtr8=s96-c', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2015/10/whiteboard.jpg', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2022/07/logo-renessans-32x32.jpg', 'https://sun1-88.userapi.com/s/v1/if1/qOFqDZXwHIpfH1jeOEwJQunLigxSepYMSJeOEpkD9BC-RJT9GwAH8u7sL7Tn1fQQLv__eKhl.jpg?size=400x400&quality=96&crop=86,376,525,525&ava=1', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2021/08/4526872_emoji_emoticon_monkey_sticker_stress_icon-cover-icon-1-original.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2020/08/iconfinder_17_1280977-cover-3.png', 'https://lh3.googleusercontent.com/a/AGNmyxZzGgbyG4wnyUtBmFhSr1giAXTTdHU9jvMEQqlx=s96-c', 'https://media.tproger.ru/uploads/2015/10/sites-prog.jpg', 'https://media.tproger.ru/uploads/2021/08/4526872_emoji_emoticon_monkey_sticker_stress_icon-cover-80.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2020/08/iconfinder__sql_2486249-cover-1.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg']"
