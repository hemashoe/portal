'post_id'title'body'source_link'image'images
0'OTKIG1VG4'Что вы делали на этой неделе? Пост хвастовства за 27-31 марта'"Что вы делали на этой неделе? Пост хвастовства за 27-31 марта

Предлагаем делиться в комментариях под этой записью, над чем вы работали на этой неделе, ведь нет ничего интереснее, чем задачи коллег!

Вот, чем вы занимались на прошлой неделе.

Не важно, разработчик вы или тестировщик, деврел или эйчар. Расскажите, какие задачи вы героически решили, и делитесь успехами.

Кидайте всё, чем хочется похвастаться: текст, скриншоты кода и даже ссылочки на видео.

Не забывайте про NDA: не указывайте названия компании или деликатные частности.

Итак, чем вы похвастаетесь на этой неделе?

Какой была для вас прошедшая неделя? Увешанной тасками: ничего не успеваю!

Нормальной, всё как обычно

Лёгкой: удалось отдохнуть и даже выспаться"'https://tproger.ru/articles/chto-vy-delali-na-etoj-nedele-post-hvastovstva-za-27-31-marta/'https://media.tproger.ru/uploads/2023/03/64140889-8a5a-49cd-bcb6-9f7320754e66-cover.png'"['https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2023/03/c8fda684-767b-461d-89d4-75009ddcbee8.jpg', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://media.tproger.ru/uploads/2020/03/hent-AI-changed.jpg', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big-32x32.png', 'https://media.tproger.ru/uploads/2020/07/iconfinder-icon-48-cover.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2023/03/64140889-8a5a-49cd-bcb6-9f7320754e66-cover-icon-original.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2021/05/iconfinder-icon-cover-2.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2020/08/iconfinder_17_1280977-cover-3.png', 'https://media.tproger.ru/uploads/2023/03/64140889-8a5a-49cd-bcb6-9f7320754e66-cover.png', 'https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c']"
1'Z7UHVM92O'Дайджест Типичного программиста: GPT-4, сервер на смартфоне и пик Балмера'Тут очень субъективно, кто-то считает, что лучше стараться получить высокий балл на ЕГЭ, победить в паре олимпиад и поступить в какой-нибудь вуз, например ИТМО (это один из лучших IT вузов), а кто-то считает, что намного лучше учиться самостоятельно, читая книги, смотря гайды на ютубе и читая статьи. Тут каждый решает для себя сам. Надеюсь, что помог своим ответом)'https://tproger.ru/articles/dajdzhest-tipichnogo-programmista/'https://media.tproger.ru/uploads/2023/03/1181864_convertion_exchange_filter_funnel_graph_icon-cover-2.png'"['https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big-32x32.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'https://media.tproger.ru/uploads/2023/03/1181864_convertion_exchange_filter_funnel_graph_icon-cover-2.png', 'https://media.tproger.ru/uploads/2021/01/Python_regexp-cover.png', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2020/12/css-flexbox-animation-cover-1.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2019/07/iconfinder-icon-19-cover-1.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2018/07/learningPython.jpg', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2023/03/1181864_convertion_exchange_filter_funnel_graph_icon-cover-icon-original.png', 'https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c']"
2'Q602RLMDI'Портрет и профессиональное развитие русскоязычных DevRel-специалистов в 2022: данные исследования'"Привет! Я — Евгения Голева, работаю в Developer Relations с 2016 года и делюсь мыслями о работе в телеграм-канале «Говорите громче!». А в прошлом году провела первое исследование специалистов Developer Relations в РФ и СНГ.

Если вы не знаете, кто такие деврелы, то вкратце объясню:

Официально Developer Relations (от англ. «отношения с разработчиками») — это деятельность, которая охватывает внешние и внутренние коммуникации между компанией и IT-специалистами. Деврел (от англ. Developer Relations Specialist) — специалист в этой области. Он устанавливает и поддерживает отношения между компанией и разработчиками, а также повышает эффективность их взаимодействия. В частности, DevRel может помочь компаниям получить оперативный фидбэк от пользователей или продвинуть свою компанию как место будущей работы.

По мнению нейросетей Я попросила ChatGPT объяснить, кто такие деврелы, семилетнему ребёнку, и это лучшее определение ever: «Деврелы — это люди, которые помогают программистам и компаниям, которые делают программы, понимать друг друга лучше. Они объясняют, какие инструменты нужно использовать, чтобы программы работали правильно, а также помогают людям найти хорошую работу в компании, которая делает программы. Это как друг, который помогает тебе найти новых друзей и игрушки, которые ты любишь».

Предыдущее исследование дало почву для многих гипотез. Но с тех пор ландшафт индустрии изменился полностью, и деврела, который мы знали, больше не существует. Поэтому теперь мы говорим про русскоязычный деврел.

Моё исследование состояло из семи частей:

индивидуальные рабочие задачи;

деврел-команда;

метрики;

профессиональное развитие и сообщество;

компания (и в какой ситуации её люди сейчас);

зарплаты, про которые многие спрашивали в прошлом году;

и, разумеется, про самих деврелов.

В этой статье говорим про профразвитие и портрет участника.

Насколько выборка репрезентативна?

Я постаралась связаться со всеми специалистами в области Developer Relations, до которых смогла дотянуться, включая тех, кто не является прямыми участниками этой сферы. Мой призыв к деврелам в Телеграме прочитали более 6 500 человек. Всего опросом поделились 60 источников. Вот несколько из них:

Говорите громче!

DevRel Community (закрытый чат

23derevo: чат и канал

t.me/docops

t.me/devrel_jobs

t.me/cmblog

facebook.com/golevajane/

DevRelAll

репосты в ФБ и телеге от коллег по цеху (спасибо вам!)

В исследовании участвовали 89 специалистов по Developer Relations к концу 2022 года — это на 25% больше, чем в прошлом году. Большая часть ответов была получена в ноябре. Данные уже очищены от спама и нерелевантных комментариев. В выборку, по понятным причинам, попали только те компании, в которых уже есть хотя бы кто-то причастный к деврелу.

Надеюсь, в следующих исследованиях нас станет ещё больше. Чтобы не пропустить анонс, следите за моим каналом «Говорите громче!» или оставьте свои контакты — я сообщу о новом запуске.

Иногда сумма ответов больше 100%. Это значит, что в вопросе можно было выбрать несколько значений. No cheating!

Спустя месяц после запуска исследования мы с Женей Финкельштейн подготовили доклад для DevRelConf #6, который мы готовили на основе ответов 72 респондентов. Благодаря этому за декабрь удалось собрать ответы ещё 16 специалистов. Они не учтены в нескольких объёмных вопросах — количество опрошенных я указываю отдельно.

Портрет участника

Прежде чем говорить о профессиональном развитии, давайте посмотрим на всё разнообразие внутри нашей профессии.

Распределение по полу (89 респондентов)

В этот раз женщин оказалось больше — три четверти против почти четверти мужчин. В прошлом году соотношение было примерно одинаковым. Я думаю, это связано с тем, что больше женщин решили принять участие в исследовании (потому что вряд ли гендерный состав профессии мог измениться так резко).



Распределение по возрасту (89 респондентов)

Больше 40% участников оказались достаточно молодыми — от 26 до 30 лет. На втором месте коллеги в возрасте от 31 до 35 лет, и на третьем — от 36 до 40 лет. Не оказалось среди респондентов людей младше 20 лет и старше 50. Я делаю вывод, что в профессию приходят уже с каким-то опытом, и готовы оставаться в ней достаточно долго.

Распределение по опыту в Developer Relations (89 респондентов)

Я решила разбить варианты ответов на более мелкий шаг, чтобы график стал более показательным.

Средний (среднее арифметическое взвешенное) опыт работы в области developer relations сейчас составляет примерно три года. Люди с опытом менее года по-прежнему слабо участвуют в исследовании — вероятно, потому, что считают себя достаточно опытными в сфере.





Распределение по предыдущему опыту (89 респондентов)

В прошлом исследовании я объединяла PR и Маркетинг. Это было не очень правильно, теперь у нас есть более точная картинка.

Наиболее популярными сферами, откуда приходят участники исследования в деврел, остаются HR, IT и маркетинг, что неудивительно.

Некоторые респонденты указывали неожиданные области, такие как журналистика, книгоиздание и наука, они собраны в «Разном». Один респондент даже рассказал о том, что сразу стал деврелом, без предыдущего опыта.

Респонденты могли выбирать несколько вариантов ответа, поэтому абсолютные цифры представлены без процентного соотношения.

Технический бэкграунд оказался необязателен (89 респондентов)

Я задала жёсткий вопрос об опыте работы в коммерческой разработке на полную ставку — хотя бы в течение года. Результаты показали, что у менее четверти опрошенных есть опыт написания кода. Это, конечно, заметная доля, но остальные 75% рассказали о том, что это не обязательно для начала работы.

Техническое образование — тоже (89 респондентов)

Женя Финкельштейн говорит, что она училась программированию, и это очень помогает в работе деврелом: можно проверить скобочки в коде или формулы написать. Но исследование показало, что большинство деврелов работают без технического образования.

В компании уже есть много высококвалифицированных инженеров, от деврела нужно верхнеуровневое понимание техники и прокачанные скилы в совершенно других специализациях. За счёт того, что в команде собираются люди с разным опытом и знаниями, выигрывают все. Дайверсити рулит)

Как отличить Developer Advocates от Developer Relations? (89 респондентов)

Была гипотеза, что вопрос «Являются ли разработчики основными клиентами для вашей компании?» поможет разделить респондентов на две группы: Developer Advocates и Developer Relations Managers.

Мы предоставляли два варианта ответа: «Да, разработчики являются клиентами нашей компании (Developer First)» и «Нет, разработчики не являются клиентами нашей компании (Developer Plus)». Но нам это не помогло.

Девадвокаты и деврелы оказались в обеих категориях. Люди без технического образования работают в компаниях, где разработчики являются клиентами, а люди с техническим образованием работают там, где не являются.

В общем и целом, мы не нашли никаких закономерностей. Профессия новая, и каждый — уникальная снежинка, которая находит нишу самостоятельно.

А вот вопрос «Какими задачами на внешнюю аудиторию вы занимаетесь большую часть своего рабочего времени?» как раз помог, особенно те варианты ответов, которые подкинул Антон Черноусов. Но об этом в следующей статье.

Распределение по профессиональному уровню (89 респондентов)

Разумеется, джуниоров по факту больше. Многие постеснялись участвовать в опросе, и даже мои пояснения в анонсах и предисловии не особо помогли. Если у вас есть идеи, как решить эту проблему, напишите в комментариях или мне лично.

Распределение по организационному уровню в компании (89 респондентов)

Мы выдвинули гипотезы о возможной корреляции между уровнем профессионализма именно в Developer Relations и позицией в компании, но ничего не вышло. В выборке оказались и сеньоры, которые не занимают руководящие должности, и руководители направлений, которые недавно начали отвечать за DevRel и находятся на entry-уровне.

Как деврелы официально записаны в трудовой книжке? (89 респондентов)

Нейтральные формулировки всё ещё лидируют: руководитель направления и менеджер проектов. Но появились и новые, повторяющиеся, должности: менеджер по работе с IT-сообществами и менеджер по развитию бренда работодателей в сегменте IT. Если ни одна из них вам не нравится, можете выбрать из длинного списка ниже 🙂

Полный список должностей тех, кто участвовал в исследовании Руководитель направления

Менеджер по работе с ИТ-сообществами

Менеджер по развитию бренда работодателя в сегменте IT

Менеджер проектов

Head of DevRel

Менеджер мероприятий

Менеджер по продвижению

Ведущий менеджер по обучению

Директор по взаимодействию с разработчиками

Главный IT-менеджер

Senior Community Manager

Контент-менеджер

Talent Brand & Internal Communications Lead

PR-менеджер

Global Speaker’s Support Lead

Менеджер по взаимодействию с внешними разработчиками

DevRel-менеджер

Специалист по маркетингу технологий

Старший специалист

Главный руководитель проекта

Эксперт по связям с сообществом

Специалист по внешним коммуникациям

Employer Branding Manager

Главный системный программист

Employer Branding Specialist

Технический писатель

Developer Advocate

Developer Relations Manager

Employer Branding Manager

Редактор ИТ-блога

Community Relations Director

Организатор встреч

Senior Developer Relations Manager

Главный эксперт по развитию ИТ-сообществ

Главный инженер по разработке

Управляющий директор

DevRel 1С

Продуктовый аналитик

Community Manager

CTO

Специалист по работе с экспертами

HR BP

Разработчик

Ведущий специалист

Старший специалист по развитию отношений в сообществе разработчиков

Business and Technical Consultant

Руководитель группы технического пиара

Senior Developer Relations Specialist

Руководитель отдела развития бренда работодателя и внутренних коммуникаций

Руководитель команды ИТ-бренда работодателя

DevRel Manage

LnD Specialist

Employment Brand Team Lead

HR Brand Manager

Руководитель группы Devrel

Главный IT-менеджер

HR Marketing Director

Директор по PR- и бренд-коммуникациям

DevRel

Менеджер по развитию направления HR-бренда

Менеджер проектов

Старший специалист по маркетингу

Специалист по развитию HR-бренда

Senior tech Community Manager

CHRO

Шароватов (консультант, ментор, дев адвокат, HR)

Специалист по обучению и развитию

Руководитель направления IT и корпоративных мероприятий

Менеджер по работе с брендом работодателя и профессиональными сообществами

Менеджер

Руководитель регионального ИТ-центра

Funemployee

PR manager

Распределение по странам (89 респондентов)

63 участника опроса находятся в России. Также у нас есть коллеги с Кипра, Грузии, Германии и других стран.

Распределение по городам (89 респондентов)

41 участник опроса находится в Москве. 48 — в других городах, в основном в Санкт-Петербурге, Тбилиси, Казань, Екатеринбург.

Где работаете сейчас? (58 респондентов)

Только 58 участников указали свою компанию, в том числе 1С, 2ГИС, EPAM, IT_One, JetBrains, Karuna, Quadcode, Skillbox, SkillFactory, Sytac, VK, Yandex.

Профессиональное развитие

Какие ресурсы наиболее эффективно помогают вам развиваться как DevRel-специалисту? (72 респондента)

В этом году мы изменили формулировку, поэтому сравнивать с прошлым напрямую не буду, но вижу, что по всем направлениям заметное снижение, кроме менторства и мастер-классов — их стало больше.

2021 год

2022 год

Какие именно телеграм-каналы помогают развиваться? (89 респондентов)

Дисклеймер: так как выборка смещена на те ресурсы, через которые я набирала респондентов, статистика — в мою пользу и наверняка искажает реальную картину.

Остальные ресурсы, которые помогали в развитии (36 респондентов)

Вопрос был необязательным и со свободным вводом, поэтому всего на него ответили 36 участников.

За кем из русскоговорящих экспертов в DevRel сообществе вы следите? (53 респондента)

В топ попали люди, за которых проголосовало больше одного человека. Вопрос был необязательным и со свободным вводом, поэтому всего на него ответили 53 участника.

Дисклеймер: так как выборка смещена на те ресурсы, через которые я набирала респондентов, статистика — в мою пользу и наверняка искажает реальную картину.

Какие DevRel команды вы считаете самыми сильными в 2022 году?

Вопрос был необязательным и со свободным вводом. Всего были упомянуты 106 компаний.

Кстати, сейчас нанимают:

Что беспокоило деврела в конце 2022 года?

Что самое сложное в работе деврела в 2022 году?

Искать докладчиков всегда было сложно, но в этом году стало труднее из-за кризиса, неопределённости и того, что нужно было поддерживать людей. Впервые стала заметной категория «Новые рынки».

Фан факт: в прошлом исследовании топ-темой был онлайн, а теперь наблюдаем проблемы с оффлайн мероприятиями.

Какие сложные профессиональные вопросы у вас возникали в 2022 году? На что не находилось очевидных ответов или было не у кого спросить? (72 респондента)

Категория новых рынков сразу же попала в топ. Ранее деврелы редко работали не только на внутренний рынок, но и на внешний, и в этом году ситуация изменилась.

Появились вопросы относительно карьеры. Отрасль взрослеет, и люди хотят заботиться о своём развитии и будущем.

Руководители команд начали задумываться о том, как измерять успех своих сотрудников и помогать им развиваться. Невозможно же с горящими глазами писать статьи или проводить ивенты в течение пяти лет подряд.

Новые вопросы:

С какого момента необходимо расширять команду? Какие роли и в какой конфигурации нужны? Перестройка структуры команды? Как «измерять сотрудников», чтобы у руководства не было вопросов и сотрудники понимали, за что они получают деньги и куда они могут дальше расти? Какую систему мотивации создать для адвокатов бренда работодателя?

Как вы видите своё дальнейшее развитие в профессии в ближайшие три года (72 респондента)

Оказалось, что вариантов у нас довольно много. Можно углубить экспертизу и понимание технологий, зону влияния и отвечать не только за разработчиков, но и за дизайнеров, например, начать управлять продуктом. Или стать менеджером, который управляет деврелами (некоторые уже успешно консультируют компании или менторят коллег). Или выйти на международный рынок. Есть и те, кто хочет сфокусироваться на собственной публичности (сапожники без сапог, привееееет!).

Что дальше?

Я планирую сделать цикл из 5 статей на основе проведённого исследования:

Профессиональное развитие деврела. Кое-что про метрики. Задачи и роли DevRel-специалистов. DevRel-команды: сокращаются, расширяются или качественно эволюционируют? Обезличенные зарплаты DevRel-специалистов.

Благодарности

Над этим материалом вместе со мной работали Даша Тиходеева, Илья Васильев, команда Tproger. Спасибо вам огромное, без вас этот проект не случился бы."'https://tproger.ru/articles/portret-i-professionalnoe-razvitie-russkojazychnyh-devrel-specialistov-v-2022-dannye-issledovanija/'https://media.tproger.ru/uploads/2023/03/Group-1321316364-cover-1.png'"['https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2021/06/bootcamp-cover.png', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1456px"" viewBox=""0 0 1456 956""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1456px"" viewBox=""0 0 1456 688""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1456px"" viewBox=""0 0 1456 982""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1456px"" viewBox=""0 0 1456 550""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2019/12/iconfinder-icon-3-cover.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1456px"" viewBox=""0 0 1456 578""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1456px"" viewBox=""0 0 1456 1062""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2021/07/money-cover.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1456px"" viewBox=""0 0 1456 916""%3E%3C/svg%3E', 'https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1456px"" viewBox=""0 0 1456 906""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1456px"" viewBox=""0 0 1456 910""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1456px"" viewBox=""0 0 1456 756""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1456px"" viewBox=""0 0 1456 920""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1456px"" viewBox=""0 0 1456 914""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1456px"" viewBox=""0 0 1456 855""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1456px"" viewBox=""0 0 1456 624""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1456px"" viewBox=""0 0 1456 878""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1456px"" viewBox=""0 0 1456 870""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2023/03/Group-1321316364-cover-icon-1-original.png', 'https://media.tproger.ru/uploads/2020/02/iconfinder-icon-38-cover.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1456px"" viewBox=""0 0 1456 828""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2021/11/OTR-32x32.png', 'https://media.tproger.ru/uploads/2023/03/Group-1321316364-cover-1.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1456px"" viewBox=""0 0 1456 811""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1456px"" viewBox=""0 0 1456 802""%3E%3C/svg%3E', 'https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c']"
3'Z367DYOX2'Фильм «Тетрис» про Алексея Пажитнова вышел на AppleTV+'"Фильм «Тетрис» основан на реальных событиях и рассказывает о моменте борьбы Пажитнова и Роджерса за права на компьютерную головоломку.

Подробности о сюжете, небольшой исторический экскурс и первый трейлер можно посмотреть в статье, которую выпускали раньше.

В новом трейлере появились комментарии Алексея Пажитнова, создателя Тетриса, и датского геймдизайнера и предпринимателя Хэнка Роджерса, которых сыграли Никита Ефремов и Тэрон Эджертон соответственно. Их комментарии тоже есть.

Фильм должен выйти сегодня, 31 марта на Apple TV+."'https://tproger.ru/articles/vywel-vtoroj-trejler-filma-tetris-s-kommentariyami-alekseya-pazhitnova/'https://tproger.ru/favicon.ico?v=2'"['data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""100%px"" viewBox=""0 0 100% 100%""%3E%3C/svg%3E', 'https://tproger.ru/favicon.ico?v=2', 'https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'https://media.tproger.ru/uploads/2023/03/77961a44-58b9-4893-8482-23b8b2f51b21-cover-icon-original.png', 'https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c']"
4'J83RMUHVC'В МТС — глобальный ребрендинг. Рассказываем, как на него повлиял статус IT-компании'"В МТС — глобальный ребрендинг. Рассказываем, как на него повлиял статус IT-компании

Теперь у МТС новая архитектура, позиционирование, логотип и визуальный язык, а также уникальная айдентика для отдельных продуктов. Раскрываем подробности и рассказываем, при чём здесь IT.

Вячеслав Николаев Президент МТС

МТС взял курс на формирование цифровой экосистемы и начал активно запускать новые продукты с 2019 года. Два года назад началась активная трансформация компании в сторону ИТ, изменились многие процессы внутри: вырос штат ИТ-специалистов, расширились продуктовые команды, сократилась бюрократия, изменились корпоративные ценности. Ребрендинг стал логичным продолжением больших изменений в бизнесе, философии бренда и внутренней культуре. Мы поняли, что монолитный бренд больше не работает — не даёт нужной гибкости и не решает всех задач разных сервисов. Бизнесу стало тесно в существовавшем бренде. Поэтому в новой архитектуре МТС трансформировался из монолитного бренда в гибридный, была разработана система брендинга с множеством визуальных стилей внутри — для крупных бизнес-направлений и продуктов были созданы саббренды со своей яркой идентичностью и узнаваемым стилем, но с заметной преемственностью к материнскому бренду. Нам важно было, чтобы люди увидели МТС разным, а у отдельных сервисов появилась возможность выглядеть органично в своей категории и строить свою коммуникацию с клиентом.

Теперь основа нового фирменного стиля МТС — динамический и гибкий логотип, который вмещает в себя все продукты и становится фундаментом для визуальной системы. Его левый угол остаётся свободным для брендинга отдельных сервисов.

Узнаваемый красный цвет бренда сохранился, но к нему добавили и другие цветовые решения.

Бренд сохранил энергию, эмоциональность и стремление к изменениям, но стал легче, эмпатичнее и современнее. Философия и лозунг МТС «Быть лучше каждый день» не изменились.

В создании новой бренд-платформы помогали агентства Signal (part of ONY) и BBDO. Над новым концептом айдентики также работали агентства UtterDesign и Ony.

Внедрять новую айдентику в МТС будут постепенно. Первыми поменяются цифровые продукты и интернет-сайты. Вывески и оформление офисов будут менять по мере износа конструкций.

Реклама ПАО «МТС» LjN8KVWXC"'https://tproger.ru/articles/v-mts-globalnyj-rebrending-rasskazyvaem-kak-na-nego-povliyal-status-it-kompanii/'https://media.tproger.ru/uploads/2023/03/tool_trick_icon-cover.png'"['https://media.tproger.ru/uploads/2023/03/tool_trick_icon-cover-icon-original.png', 'https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""90px"" viewBox=""0 0 90 90""%3E%3C/svg%3E', 'https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c', 'https://media.tproger.ru/uploads/2023/03/tool_trick_icon-cover.png']"
5'OD34E2XFU'Почему стоит использовать Babel в разработке. Инструкция по написанию Babel плагина'"Какую проблему решает Babel

В языке JavaScript изменения происходят ежегодно, а некоторые ECMAScript конвенции вносят даже слишком много дополнительного синтаксического сахара, настолько, что браузерные движки исполняющие JS код не успевают обновляться под изменения. В связи с этим у разработчиков стоит выбор:

1. Писать в legacy стиле, не пользуясь новыми фишками;

2. Писать в новом стиле, и код будет работать только на новых версиях движков;

3. Самый оптимальный вариант — писать код в современном стиле и транспилировать его с помощью Babel в более старые версии ECMAScript, чтобы его могли исполнять даже старые браузерные движки. В общем, Babel — это единый инструмент для того, чтобы ваш код поддерживался даже старыми браузерами.

Как работает Babel под капотом

Чтобы разобраться в том, что написал разработчик, и перевести это в более старую версию JS, Babel требуется максимально декомпозировать код. Делает он это с помощью составления AST дерева и его последующего анализа. Babel разбивает наш код на самые мелкие частицы, даже «‎;»‎ или «‎пробел»‎ — отдельная часть AST дерева. После того как Babel создал такое дерево, он может пройтись по каждому узлу и преобразовать его нужным образом.

Особая сила Babel

Особая сила Babel заключается в огромном количестве разнообразных плагинов, а самое главное — плагин можно написать самому. Плагины имеют доступ к абстрактному синтаксическому дереву AST и могут изменять его на этапе транспиляции кода перед выходом в итоговый бандл. Babel плагины работают по паттерну Visitor. Суть паттерна в том, что если у нас есть некая абстракция (в нашем случае это AST), мы не взаимодействуем с ней напрямую, а работаем с ней через посетителя, то есть Visitor. Наша абстракция будет иметь метод, задача которого простая – просто передать себя посетителю, а он уже будет работать с ним.

Пишем свой Babel плагин

Я напишу простой плагин в учебных целях, который будет менять все операторы «+»‎ на «-»‎. Он бесполезный, но на его примере можно понять, как пишутся плагины в целом.

Суть простая.

1. Вы смотрите в AST Explorer, как выглядят определённые ноды в абстрактном синтаксическом дереве;

2. Обрабатываете эти ноды в коде так, как вы хотите.

Я написал код в AST Explorer, после установки курсора на значок «+» увидел, что мне нужен BinaryExpression, и написал вот такой вот плагин, опираясь на паттерн Visitor:

Вот так подключил его:







В итоге мой код скомпилировался и на выходе в сближенном файле я получил вот такой консоль лог, где видно, что наш плагин работает и меняет «+»‎ на «-».

Исходный код можно найти: https://github.com/dacorm/test-babel-plugin

На примере этого простого плагина вы ознакомились с ещё одним нетривиальным способом решения некоторых проблем в коде. Иногда на работе случаются такие баги, что решать их приходится с помощью Babel плагина. Это буквально суперсила, которой владеют немногие."'https://tproger.ru/articles/pochemu-stoit-ispolzovat-babel-v-razrabotke-instrukciya-po-napisaniyu-babel-plagina/'https://media.tproger.ru/uploads/2023/03/bf0699ba-495f-4153-9668-2a3ba7a80a1c-cover.png'"['https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2021/03/iconfinder_Asset_94_3298611-cover.png', 'https://media.tproger.ru/uploads/2023/03/7932a68f-0a33-4e12-9392-19673d8ef3d7.jpg', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://media.tproger.ru/uploads/2023/03/bf0699ba-495f-4153-9668-2a3ba7a80a1c-cover.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'https://media.tproger.ru/uploads/2018/05/python-ides.jpg', 'https://media.tproger.ru/uploads/2023/03/17835600-2a01-4a58-b55b-03f9a53fb0a3.jpg', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'https://media.tproger.ru/uploads/2023/03/94a7ebaa-0173-447d-996e-f725e0a1a1c3.jpg', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'https://media.tproger.ru/uploads/2023/03/e939abc8-3c02-4378-b73b-a7c6a1517e75.jpg', 'https://media.tproger.ru/uploads/2023/03/670a707c-4bcc-41e1-b16d-774ec332bec5.jpg', 'https://media.tproger.ru/uploads/2023/03/bf0699ba-495f-4153-9668-2a3ba7a80a1c-cover-icon-original.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2023/03/232f2e33-9f53-4af3-93c4-328476d4592b.jpg', 'https://media.tproger.ru/uploads/2019/07/iconfinder-icon-16-cover-1.jpg', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2021/03/iconfinder_017_treasure_chest_gold_wealth_jewel_money_2090267-cover.png', 'https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c']"
6'6HCHUHZ3K'Пост взаимопомощи: спрашивайте — отвечайте'Тут очень субъективно, кто-то считает, что лучше стараться получить высокий балл на ЕГЭ, победить в паре олимпиад и поступить в какой-нибудь вуз, например ИТМО (это один из лучших IT вузов), а кто-то считает, что намного лучше учиться самостоятельно, читая книги, смотря гайды на ютубе и читая статьи. Тут каждый решает для себя сам. Надеюсь, что помог своим ответом)'https://tproger.ru/articles/post-vzaimopomoshhi-sprawivajte-otvechajte/'https://media.tproger.ru/uploads/2023/03/a1374137-e8ed-4c2d-bf3a-fd5c9d51dfd8-cover.png'"['https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2023/03/a1374137-e8ed-4c2d-bf3a-fd5c9d51dfd8-cover-icon-original.png', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2021/02/iconfinder-icon-9-cover.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'https://media.tproger.ru/uploads/2015/03/android-development.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2018/07/learningPython.jpg', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2018/03/new-computer-science.png', 'https://media.tproger.ru/uploads/2023/03/a1374137-e8ed-4c2d-bf3a-fd5c9d51dfd8-cover.png', 'https://media.tproger.ru/uploads/2021/11/OTR-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c']"
7'4RCSQSHDQ'Илон Маск и Стив Возняк призывают остановить обучение ИИ хотя бы на полгода'"Илон Маск и Стив Возняк призывают остановить обучение ИИ хотя бы на полгода

Future of Life опубликовала письмо, в котором Илон Маск, Стив Возняк и более тысячи исследователей ИИ призывают остановить обучение систем искусственного интеллекта мощнее, чем GPT-4.

Эксперты считают, что ИИ с уровнем интеллекта, конкурирующим с человеческим, могут представлять серьёзные риски для общества и человечества.

По их мнению, ИИ-системы должны разрабатываться только после того, как человечество будет уверено в позитивных последствиях такого развития и в том, что связанные с ними риски будут управляемыми.

Например, мы уже писали, как ChatGPT, интегрированный в Bing, начал сходить с ума. Это только одна из многих историй, когда искусственный интеллект ведёт себя не так, как задумывалось.

С одной стороны, оно верно: разработчики ИИ выкатывают новые модели быстрее, чем успевают понять возможные проблемы. С другой — GPT-4 внезапно стал конкурентом многим сферам бизнеса и такие призывы могут быть попытками лучше его контролировать или дать фору остальным разработчикам.

Хороший пример — Google. Искусственный интеллект внезапно стал угрозой для бизнеса компании. В компании увидели риски в быстром развитии чат-ботов и даже попытались выпустить своё решение. Но прорыва не вышло."'https://tproger.ru/articles/ilon-mask-i-stiv-voznyak-prizyvayut-ostanovit-obuchenie-ii-hotya-by-na-polgoda/'https://media.tproger.ru/uploads/2023/03/e424d71d-8bab-47e1-939b-867a8cf87429.png'"['data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2023/03/e424d71d-8bab-47e1-939b-867a8cf87429.png', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c', 'https://media.tproger.ru/uploads/2023/03/ff2561f2-286f-4b1d-ad06-9fbce780f225-cover-icon-original.png']"
8'GR7RU8CR7'SQL для начинающих: 10 правил построения «точных» запросов'"Денис Карпов Отдел автоматизации процессов информационных технологий

«Точный» SQL-запрос возвращает «чистые» данные в необходимом и достаточном количестве, при этом потребляет как можно меньше памяти и справляется за минимальное время. Скорость работы с базой влияет на производительность. Потребление памяти может негативно сказаться даже на безопасности. Всё это прямо и косвенно влияет на прибыль компании. В статье разберёмся, как не допускать ошибок.

Для наших целей понадобятся тестовые данные. Будем работать с базой данных Oracle Database. Примеры в статье будут приводиться на языке SQL, PL/SQL. Нам важен подход, который можно адаптировать под другую реляционную систему управления базами данных — РСУБД.

Тестовые данные

⚒ Создадим тестовую таблицу 1:

CREATE SEQUENCE TEST_DATA_1_SEQ NOMAXVALUE NOMINVALUE NOCYCLE / CREATE TABLE TEST_DATA_1 ( TEST_DATA_1_ID NUMBER DEFAULT TEST_DATA_1_SEQ.NEXTVAL NOT NULL ,TYPE VARCHAR2(64) NOT NULL ,VALUE VARCHAR2(128) NOT NULL ,PC_USR VARCHAR2(30) DEFAULT USER NOT NULL ,PC_DT TIMESTAMP(6) DEFAULT SYSTIMESTAMP NOT NULL ) / ALTER TABLE TEST_DATA_1 ADD CONSTRAINT TEST_DATA_1_PK PRIMARY KEY (TEST_DATA_1_ID) USING INDEX / ALTER TABLE TEST_DATA_1 ADD CONSTRAINT TEST_DATA_1_TYPE_CHK CHECK (TYPE in ('CITY', 'DATE', 'EMPLOYEE', 'STOCK MARKET')) / CREATE UNIQUE INDEX TEST_DATA_1_UIDX1 ON TEST_DATA_1 (VALUE) / COMMENT ON TABLE TEST_DATA_1 IS 'Тестовые данные 1' /

⚒ Заполним тестовую таблицу 1 данными:

/* Добавление данных */ INSERT INTO TEST_DATA_1 (TYPE, VALUE) VALUES ('CITY', 'МОСКВА'); INSERT INTO TEST_DATA_1 (TYPE, VALUE) VALUES ('CITY', 'САНКТ-ПЕТЕРБУРГ'); INSERT INTO TEST_DATA_1 (TYPE, VALUE) VALUES ('EMPLOYEE', 'СОТРУДНИК 1. ПОЛ М. ВОЗРАСТ 18'); INSERT INTO TEST_DATA_1 (TYPE, VALUE) VALUES ('EMPLOYEE', 'СОТРУДНИК 2. ПОЛ Ж. ВОЗРАСТ 19'); INSERT INTO TEST_DATA_1 (TYPE, VALUE) VALUES ('EMPLOYEE', 'СОТРУДНИК 3. ПОЛ Ж. ВОЗРАСТ 20'); INSERT INTO TEST_DATA_1 (TYPE, VALUE) VALUES ('DATE', '01 января 2000'); INSERT INTO TEST_DATA_1 (TYPE, VALUE) VALUES ('DATE', '02 января 2000'); INSERT INTO TEST_DATA_1 (TYPE, VALUE) VALUES ('DATE', '01.01.2001'); INSERT INTO TEST_DATA_1 (TYPE, VALUE) VALUES ('DATE', '02.01.2001'); INSERT INTO TEST_DATA_1 (TYPE, VALUE) VALUES ('DATE', '03.01.2001'); INSERT INTO TEST_DATA_1 (TYPE, VALUE) VALUES ('DATE', '04.01.2001'); /* Извлечение всех данных */ SELECT t1.* FROM TEST_DATA_1 t1;

/* Удаление всех данных без проверок */ TRUNCATE TABLE TEST_DATA_1;

⚒ Создадим тестовую таблицу 2:

CREATE SEQUENCE TEST_DATA_2_SEQ NOMAXVALUE NOMINVALUE NOCYCLE / CREATE TABLE TEST_DATA_2 ( TEST_DATA_2_ID NUMBER DEFAULT TEST_DATA_2_SEQ.NEXTVAL NOT NULL ,TEST_DATA_1_ID NUMBER NOT NULL ,TYPE VARCHAR2(64) NOT NULL ,VALUE VARCHAR2(128) NOT NULL ,PC_USR VARCHAR2(30) DEFAULT USER NOT NULL ,PC_DT TIMESTAMP(6) DEFAULT SYSTIMESTAMP NOT NULL ) / ALTER TABLE TEST_DATA_2 ADD CONSTRAINT TEST_DATA_2_PK PRIMARY KEY (TEST_DATA_2_ID) USING INDEX / ALTER TABLE TEST_DATA_2 ADD CONSTRAINT TEST_DATA_2_TYPE_CHK CHECK (TYPE in ('STREET', 'DATE', 'EMPLOYEE', 'STOCK MARKET')) / CREATE UNIQUE INDEX TEST_DATA_2_UIDX1 ON TEST_DATA_2 (TEST_DATA_1_ID, VALUE) / COMMENT ON TABLE TEST_DATA_2 IS 'Тестовые данные 2' /

⚒ Заполним тестовую таблицу 2 данными:

/* Добавление данных */ INSERT INTO TEST_DATA_2 (TEST_DATA_1_ID, TYPE, VALUE) VALUES (1 /*ID МОСКВА*/, 'STREET', 'УЛИЦА КАРЛА МАРКСА'); INSERT INTO TEST_DATA_2 (TEST_DATA_1_ID, TYPE, VALUE) VALUES (1 /*ID МОСКВА*/, 'STREET', 'УЛИЦА КРУПСКОЙ'); INSERT INTO TEST_DATA_2 (TEST_DATA_1_ID, TYPE, VALUE) VALUES (1 /*ID МОСКВА*/, 'STREET', 'МАЛЫЙ ПОЛУЯРОСЛАВСКИЙ ПЕРЕУЛОК'); INSERT INTO TEST_DATA_2 (TEST_DATA_1_ID, TYPE, VALUE) VALUES (2 /*ID САНКТ-ПЕТЕРБУРГ*/, 'STREET', 'УЛИЦА КАРЛА МАРКСА'); INSERT INTO TEST_DATA_2 (TEST_DATA_1_ID, TYPE, VALUE) VALUES (2 /*ID САНКТ-ПЕТЕРБУРГ*/, 'STREET', 'УЛИЦА КРУПСКОЙ'); INSERT INTO TEST_DATA_2 (TEST_DATA_1_ID, TYPE, VALUE) VALUES (3 /*ID СОТРУДНИК 1*/, 'EMPLOYEE', 'ПРОЖИВАЕТ В ГОРОДЕ МОСКВА'); INSERT INTO TEST_DATA_2 (TEST_DATA_1_ID, TYPE, VALUE) VALUES (4 /*ID СОТРУДНИК 2*/,'EMPLOYEE', 'ПРОЖИВАЕТ В ГОРОДЕ МОСКВА'); INSERT INTO TEST_DATA_2 (TEST_DATA_1_ID, TYPE, VALUE) VALUES (5 /*ID СОТРУДНИК 3*/,'EMPLOYEE', 'ПРОЖИВАЕТ В ГОРОДЕ САНКТ-ПЕТЕРБУРГ'); INSERT INTO TEST_DATA_2 (TEST_DATA_1_ID, TYPE, VALUE) VALUES (6 /*ID 01 января 2000*/, 'DATE', 'Формат день числом, месяц словом, год числом'); INSERT INTO TEST_DATA_2 (TEST_DATA_1_ID, TYPE, VALUE) VALUES (7 /*ID 02 января 2000*/, 'DATE', 'Формат день числом, месяц словом, год числом'); INSERT INTO TEST_DATA_2 (TEST_DATA_1_ID, TYPE, VALUE) VALUES (8 /*ID 01.01.2001*/, 'DATE', 'Формат день числом, месяц числом, год числом'); INSERT INTO TEST_DATA_2 (TEST_DATA_1_ID, TYPE, VALUE) VALUES (9 /*ID 02.01.2001*/, 'DATE', 'Формат день числом, месяц числом, год числом'); INSERT INTO TEST_DATA_2 (TEST_DATA_1_ID, TYPE, VALUE) VALUES (10 /*ID 03.01.2001*/, 'DATE', 'Формат день числом, месяц числом, год числом'); INSERT INTO TEST_DATA_2 (TEST_DATA_1_ID, TYPE, VALUE) VALUES (11 /*ID 04.01.2001*/, 'DATE', 'Формат день числом, месяц числом, год числом'); /* Извлечение всех данных */ SELECT t2.* FROM TEST_DATA_2 t2;

/* Удаление всех данных без проверок */ TRUNCATE TABLE TEST_DATA_2;

1. Объявляя имена таблиц, обращайся к записям через псевдонимы таблиц

Допустим, есть таблица с некоторым количество колонок. К ней можно обратиться двумя разными способами:

⚠️ Опасный подход:

SELECT TYPE ,VALUE FROM TEST_DATA_1;

✅ Безопасный подход заключается в обращении через псевдоним:

SELECT t1.TYPE AS TYPE ,t1.VALUE AS VALUE FROM TEST_DATA_1 t1;

Псевдоним (анг. Alias) — это имя, назначенное источнику данных в SQL-запросе при использовании выражения в качестве источника данных или для упрощения ввода и прочтения инструкции SQL. Это полезно, если имя источника слишком длинное или его трудно вводить.

Псевдонимы можно использовать для переименования таблиц и колонок. В отличие от настоящих имён, они могут не соответствовать ограничениям базы данных и содержать до 255 знаков (включая пробелы, цифры и специальные символы).

В случае извлечения данных из одной таблицы без псевдонимов можно обойтись. Рисков нет. Синтаксический анализатор базы данных однозначно знает, данные из какой колонки таблицы запрашиваются. Но рекомендуется всё же использовать их — чтобы выработать привычку.

В случае извлечения данных из нескольких таблиц отказ от использования псевдонимов увеличивает риск получения некорректного результата. Допустим, что у таблиц есть колонки с одинаковым именем. Когда данные извлекаются и SQL-запрос звучит как: «Получаю записи из таблиц колонку А», то о какой колонке «А» идёт речь: из первой или второй таблицы? Если для таблицы назначен псевдоним, то SQL-запрос может звучать уже так: «Получаю записи из таблицы Т1 колонку А».

К SQL-запросу, возможно, придётся вернуться через какое-то время, чтобы внести в него изменения. В таких случаях подсказки в виде псевдонима (alias) помогут определить нужную колонку. Практически со стопроцентной уверенностью будет понятно, из какой таблицы что извлекали.

⚠️ Опасный подход:

SELECT TEST_DATA_1.TYPE ,TEST_DATA_1.VALUE ,TEST_DATA_2.TYPE ,TEST_DATA_2.VALUE FROM TEST_DATA_1 ,TEST_DATA_2 WHERE TEST_DATA_1.TEST_DATA_1_ID = TEST_DATA_2.TEST_DATA_1_ID;

✅ Безопасный подход заключается в обращении через псевдоним:

SELECT t1.TYPE AS TYPE_1 /* Колонка TYPE из таблицы TEST_DATA_1 */ ,t1.VALUE AS VALUE_1 /* Колонка VALUE из таблицы TEST_DATA_1 */ ,t2.TYPE AS TYPE_2 /* Колонка TYPE из таблицы TEST_DATA_2 */ ,t2.VALUE AS VALUE_2 /* Колонка VALUE из таблицы TEST_DATA_2 */ FROM TEST_DATA_1 t1 ,TEST_DATA_2 t2 WHERE t1.TEST_DATA_1_ID = t2.TEST_DATA_1_ID;

2. Извлекай только те данные, которые планируешь использовать

База данных зачастую является неотъемлемой частью приложения. По мере усложнения функционала в отдельной взятой таблице может увеличиваться количество колонок.

Рассмотрим пример «Карточка сотрудника». У нас есть таблица «Сотрудник» с колонками ФИО, пол, возраст. Данные из них извлекаются и выводятся на форму «Карточка сотрудника». SQL-запрос можно написать следующим образом: «Извлекаю все колонки из таблицы по указанному сотруднику». В таком случае извлекаются все колонки.

⚠️ Опасный подход заключается в извлечении всех данных:

SELECT t1.* FROM TEST_DATA_1 t1 WHERE t1.TEST_DATA_1_ID = 3 /* ID EMPLOYEE = СОТРУДНИК 1 */;



В будущем могут появиться дополнительные колонки в базе данных — например, описание должностных обязанностей или адрес проживания — в рамках нового информационного потока использования базы данных. То есть вне «Карточки сотрудника».

/* Добавление новой колонки в таблицу */ ALTER TABLE TEST_DATA_1 ADD DESCRIPTION VARCHAR2(4000) / /* Обновление данных в таблице */ UPDATE TEST_DATA_1 t1 SET T1.DESCRIPTION = 'ДОПОЛНИТЕЛЬНЫЕ ДАННЫЕ ПО СОТРУДНИКУ 1' WHERE t1.TEST_DATA_1_ID = 3 /* ID EMPLOYEE = СОТРУДНИК 1 */; /* Извлечение данных из таблицы */ SELECT t1.* FROM TEST_DATA_1 t1 WHERE t1.TEST_DATA_1_ID = 3 /* ID EMPLOYEE = СОТРУДНИК 1 */;



В результате данные по новым полям заполняются уже не только формой «Карточки сотрудника». И SQL-запрос получения информации для формы начинает работать медленнее. Причина в том, что приходится извлекать данные из большего количества колонок.

Деградация скорости получения данных может происходить постепенно или резко — но в самый неподходящий момент. Зачастую это связано с тем, что поля свободного ввода данных могут быть большими. То есть база данных должна больше информации подгрузить в память и потом отдать клиенту, приложение которого не готово к такому потоку данных.

Рассмотрим пример «Телефон». На телефоне пользователя установлено приложение. Сам телефон старый. Пользователь не выполнял обновления программного обеспечения (ПО), но замечает, что с какого-то момента времени приложение начало работать медленнее. У другого пользователя на новом телефоне то же приложение работает быстро. Ошибка «плавающая», но для разработчика неприятная.

Как правило, дело в том, как написано приложение. Данных извлекается больше, чем надо, и более современный телефон, у которого памяти больше, этого не заметит. Но старый не может себе этого позволить.

Чтобы таких неожиданностей не возникало, нужно извлекать строго те данные, которые требуется использовать и показывать на форме. В данном случае нужно было написать: «Извлекаю колонки ФИО, возраст, пол из таблички сотрудника, с фильтрацией по сотруднику».

✅ Безопасный подход заключается в получении нужных данных:

SELECT t1.TYPE AS TYPE_1 /* Колонка TYPE из таблицы TEST_DATA_1 */ ,t1.VALUE AS VALUE_1 /* Колонка VALUE из таблицы TEST_DATA_1 */ FROM TEST_DATA_1 t1 WHERE t1.TEST_DATA_1_ID = 3 /* ID EMPLOYEE = СОТРУДНИК 1 */;

3. По максимуму используй данные, которые извлёк из таблицы

Каждый SQL-запрос к базе данных чего-то стоит. В тот момент, когда данные извлечены и находятся в памяти, надо по максимуму использовать то, что получено, чтобы оптимизировать время и ресурсы.

После обращения к таблице Table1, нужно постараться написать SQL-запрос так, чтобы не пришлось извлекать данные из неё несколько раз. Это не всегда возможно, но попытаться стоит.

⚠️ Опасный подход:

SELECT t1.TYPE AS TYPE_1 ,t1.VALUE AS VALUE_1 ,t2.VALUE AS VALUE_2 FROM TEST_DATA_1 t1 ,TEST_DATA_2 T2 WHERE T1.TEST_DATA_1_ID = T2.TEST_DATA_1_ID AND t2.VALUE = 'ПРОЖИВАЕТ В ГОРОДЕ МОСКВА' UNION ALL SELECT t1.TYPE AS TYPE_1 ,t1.VALUE AS VALUE_1 ,t2.VALUE AS VALUE_2 FROM TEST_DATA_1 t1 ,TEST_DATA_2 T2 WHERE T1.TEST_DATA_1_ID = T2.TEST_DATA_1_ID AND t2.VALUE = 'ПРОЖИВАЕТ В ГОРОДЕ САНКТ-ПЕТЕРБУРГ' ORDER BY VALUE_1;

/* План запроса */



✅ Безопасный подход заключается в использовании полученных данных максимально продуктивно:

SELECT t1.TYPE AS TYPE_1 ,t1.VALUE AS VALUE_1 ,t2.VALUE AS VALUE_2 FROM TEST_DATA_1 t1 ,TEST_DATA_2 T2 WHERE T1.TEST_DATA_1_ID = T2.TEST_DATA_1_ID AND t2.VALUE IN ('ПРОЖИВАЕТ В ГОРОДЕ МОСКВА', 'ПРОЖИВАЕТ В ГОРОДЕ САНКТ-ПЕТЕРБУРГ') ORDER BY VALUE_1;

/* План запроса */



Неоптимальный SQL-запрос может выполняться дольше, уронить инфраструктуру и даже повлиять на безопасность системы.

⚒ Рассмотрим тестовый пример:

/* * Тестовый пример * Каждый случай запроса выполняется 1 000 000 раз в “холостую” */ declare start_time pls_integer; end_time pls_integer; begin /* 1 Случай */ start_time := dbms_utility.get_time; for indx in 1 .. 1000000 loop for cur in (select t1.TYPE as TYPE_1 ,t1.VALUE as VALUE_1 ,t2.VALUE as VALUE_2 from TEST_DATA_1 t1 ,TEST_DATA_2 T2 where T1.TEST_DATA_1_ID = T2.TEST_DATA_1_ID and t2.VALUE = 'ПРОЖИВАЕТ В ГОРОДЕ МОСКВА' union all select t1.TYPE as TYPE_1 ,t1.VALUE as VALUE_1 ,t2.VALUE as VALUE_2 from TEST_DATA_1 t1 ,TEST_DATA_2 T2 where T1.TEST_DATA_1_ID = T2.TEST_DATA_1_ID and t2.VALUE = 'ПРОЖИВАЕТ В ГОРОДЕ САНКТ-ПЕТЕРБУРГ' order by VALUE_1) loop null; end loop; end loop; end_time := dbms_utility.get_time; dbms_output.put_line('execution time 1 --> ' || (end_time - start_time) / 100 || ' sec'); /* 2 Случай */ start_time := dbms_utility.get_time; for indx in 1 .. 1000000 loop for cur in (select t1.TYPE as TYPE_1 ,t1.VALUE as VALUE_1 ,t2.VALUE as VALUE_2 from TEST_DATA_1 t1 ,TEST_DATA_2 T2 where T1.TEST_DATA_1_ID = T2.TEST_DATA_1_ID and t2.VALUE in ('ПРОЖИВАЕТ В ГОРОДЕ МОСКВА', 'ПРОЖИВАЕТ В ГОРОДЕ САНКТ-ПЕТЕРБУРГ') order by VALUE_1) loop null; end loop; end loop; end_time := dbms_utility.get_time; dbms_output.put_line('execution time 2 --> ' || (end_time - start_time) / 100 || ' sec'); end; / /* * Результат выполнения * Важно не время, которое зависит от ресурсов на ПК, а разница выполнения */ /* Done in 64,516 seconds */ execution time 1 --> 46.83 sec execution time 2 --> 17.67 sec

Рассмотрим пример «Работа ЦОД». Есть Центр Обработки Данных (ЦОД). В нём, на одном из ресурсов внутри приложения, выполняется некий SQL-запрос, который постепенно использует всю доступную память без ограничений. И приложениям, которые стоят на том же ресурсе, со временем перестаёт хватать памяти на стабильную работу. Это может привести к их падению.

Конечно, многое будет зависеть от качества приложений. Например, если во время падения они закрываются нетипично, подвисают или не отвечают на запросы пользователя — и выходят за рамки границ безопасности — хакеры могут этим пользоваться для входа в систему. И тем самым её скомпрометировать.

4. Проверяй запросы SQL на индексы

SQL-запросы бывают простые и сложные. Иногда извлекается мало данных, иногда — много. Если таблица большая, и в ней очень разнообразные данные, то в зависимости от того, как обращаться к этим данным, использовать индекс или нет, можно потерять время.

Рассмотрим пример «Брокерская биржа». В рамках отдельного процесса извлекаются данные для покупки-продажи акций. Используя оптимизированный SQL-запрос, можно быстро получать информацию, по какой цене торгуется каждая акция. И делать прогноз — покупать или продавать.

Если SQL-запрос не оптимизирован, извлечение данных занимает больше времени. И пользователь вынужден ждать, хотя мог за это время сделать что-то, что принесло бы ему деньги.

Индексы — это инструмент оптимизации извлечения данных. Конечно, это не панацея, и если таблица маленькая, по ней проще пройти прямым перебором и получить данные.

Добавим в тестовую таблицу 1 новые данные:

/* Добавление новых данных */ INSERT INTO TEST_DATA_1 (TYPE, VALUE) VALUES ('STOCK MARKET', 'АКЦИЯ 1. СТОИМОСТЬ 101 РУБ'); INSERT INTO TEST_DATA_1 (TYPE, VALUE) VALUES ('STOCK MARKET', 'АКЦИЯ 2. СТОИМОСТЬ 102 РУБ'); INSERT INTO TEST_DATA_1 (TYPE, VALUE) VALUES ('STOCK MARKET', 'АКЦИЯ 3. СТОИМОСТЬ 103 РУБ'); INSERT INTO TEST_DATA_1 (TYPE, VALUE) VALUES ('STOCK MARKET', 'АКЦИЯ 4. СТОИМОСТЬ 104 РУБ');

⚠️ Опасный подход заключается в игнорировании использования индексов:

/* Извлечение всех данных TYPE = STOCK MARKET */ SELECT t1.TYPE AS TYPE_1 ,t1.VALUE AS VALUE_1 FROM TEST_DATA_1 t1 WHERE t1.TYPE = 'STOCK MARKET'; /* План запроса */



Добавим в тестовую таблицу 1 новый индекс

/* Добавление нового индекса */ CREATE INDEX TEST_DATA_1_IDX1 ON TEST_DATA_1 (TYPE) /

✅ Безопасный подход заключается в использовании индексов:

/* Извлечение всех данных TYPE = STOCK MARKET */ SELECT t1.TYPE AS TYPE_1 ,t1.VALUE AS VALUE_1 FROM TEST_DATA_1 t1 WHERE t1.TYPE = 'STOCK MARKET';

/* План запроса */



Рассмотрим пример «Доставка почты». Показательный пример работы индексов — доставка почты из точки А в одном городе, в точку Б в другом. Зная, куда конкретно нужно доставить посылку, мы можем идти по индексам и определить, где и когда повернуть, чтобы довезти посылку за максимально короткое время. Если везти посылку на машине, то это сокращает расход топлива — а значит, и материальные издержки на доставку.

В противном случае можно сворачивать не там, спрашивать дорогу у прохожих, которые знают её плохо. И, вместо того чтобы доставить посылку за Время Т1, опоздать на Время Т2. В итоге покупатель ждёт, а продавец теряет деньги.

Индексы помогают ускорить извлечение данных.

5. Начинай запрос SQL с таблицы с меньшим набором записей

Допустим, нам нужно соединить две таблицы: с маленьким количеством записей и с большим. Стоит сделать следующее:

начинать извлечение данных из таблицы с меньшим набором данных;

продолжать извлечение данных из таблицы с большим набором данных.

⚒ Добавим в тестовую таблицу 2 новые данные:

/* Добавление новых данных */ declare l_type test_data_2.type%type := 'STOCK MARKET'; l_value_2 test_data_2.value%type := ''; l_sql varchar2(128) := ''; begin /* Извлечение данных из тестовой таблицы 1 */ for cur_t1 in (select t1.test_data_1_id as test_data_1_id ,t1.type as type_1 ,t1.value as value_1 from TEST_DATA_1 t1 where type = l_type) loop /* Цикл до 1 000 000 на каждую полученную запись из тестовой таблицы 1 */ for indx in 1 .. 1000000 loop l_value_2 := cur_t1.value_1 || '. ' || 'ЗАПИСЬ ' || indx; l_sql := 'INSERT INTO TEST_DATA_2 (TEST_DATA_1_ID, TYPE, VALUE) VALUES (' || -- cur_t1.TEST_DATA_1_ID || ', ' || -- '''' || l_type || ''', ' || -- '''' || l_value_2 || ''')'; /* Выполнение динамического запроса */ execute immediate l_sql; end loop; end loop; end; / /* Общее число записей в таблице TEST_DATA_1 */ SELECT COUNT(1) AS CNT FROM TEST_DATA_1 /

/* Общее число записей в таблице TEST_DATA_2 */ SELECT COUNT(1) AS CNT FROM TEST_DATA_2 /

/* Добавление нового индекса для таблицы TEST_DATA_1 */ CREATE INDEX TEST_DATA_1_IDX2 ON TEST_DATA_1 (TEST_DATA_1_ID, TYPE) / /* Добавление нового индекса для таблицы TEST_DATA_2 */ CREATE INDEX TEST_DATA_2_IDX1 ON TEST_DATA_2 (TEST_DATA_1_ID, TYPE) / CREATE INDEX TEST_DATA_2_IDX2 ON TEST_DATA_2 (TEST_DATA_1_ID) / CREATE INDEX TEST_DATA_2_IDX3 ON TEST_DATA_2 (TYPE) / /* Сбор статистики после добавления данных */ declare l_user varchar2(30 char) := user; begin /* Для таблицы TEST_DATA_1 */ DBMS_STATS.GATHER_TABLE_STATS(ownname => l_user -- ,tabname => 'TEST_DATA_1' ,cascade => true); /* Для таблицы TEST_DATA_2 */ DBMS_STATS.GATHER_TABLE_STATS(ownname => l_user -- ,tabname => 'TEST_DATA_2' ,cascade => true); end; /

Если поступить наоборот, то мы потеряем время, потому что перебирать данные из большей таблицы дольше.

⚒ Рассмотрим тестовый пример:

/* * Тестовый пример * Каждый случай запроса выполняется 100 раз в “холостую” * Запросы усложнены и их можно упростить, добиваясь большей производительности и схожего результата * Попробуйте поэкспериментировать */ declare start_time pls_integer; end_time pls_integer; begin /* 1 Случай. От большего к меньшему */ start_time := dbms_utility.get_time; for indx in 1 .. 100 loop for cur in (select t1.type as type_1 ,t1.value as value_1 ,t2_.type_2 as type_2 ,t2_.value_2_min as value_2_min ,t2_.value_2_max as value_2_max ,t2_.value_2_cnt as value_2_cnt from (select t2.TEST_DATA_1_ID as TEST_DATA_1_ID ,t2.TYPE as TYPE_2 ,min(t2.VALUE) as VALUE_2_MIN ,max(t2.VALUE) as VALUE_2_MAX ,count(t2.VALUE) as VALUE_2_CNT from TEST_DATA_2 t2 where t2.type = 'STOCK MARKET' group by t2.TEST_DATA_1_ID ,t2.TYPE order by t2.TEST_DATA_1_ID) t2_ join TEST_DATA_1 t1 on t1.TEST_DATA_1_ID = t2_.TEST_DATA_1_ID and t1.type = 'STOCK MARKET' order by t1.value) loop null; end loop; end loop; end_time := dbms_utility.get_time; dbms_output.put_line('execution time 1 --> ' || (end_time - start_time) / 100 || ' sec'); /* 2 Случай. От меньшего к большему */ start_time := dbms_utility.get_time; for indx in 1 .. 100 loop for cur in (select t1_.type_1 as type_1 ,t1_.value_1 as value_1 ,t2.type as type_2 ,min(t2.value) as value_2_min ,max(t2.value) as value_2_max ,count(t2.value) as value_2_cnt from (select t1.TEST_DATA_1_ID as TEST_DATA_1_ID ,t1.TYPE as TYPE_1 ,t1.VALUE as VALUE_1 from TEST_DATA_1 t1 where t1.TYPE = 'STOCK MARKET' order by t1.value) t1_ join TEST_DATA_2 t2 on t2.TEST_DATA_1_ID = t1_.TEST_DATA_1_ID and t2.TYPE = 'STOCK MARKET' group by t1_.type_1 ,t1_.value_1 ,t2.type) loop null; end loop; end loop; end_time := dbms_utility.get_time; dbms_output.put_line('execution time 2 --> ' || (end_time - start_time) / 100 || ' sec'); end; / /* * Результат выполнения * Важно не время, которое зависит от ресурсов на ПК, а разница выполнения * Каждый вариант возвращает одинаковые данные */

/* Executed in 269,203 seconds */ execution time 1 --> 149.49 sec execution time 2 --> 119.68 sec

Рассмотрим пример «Очередь клиентов». Есть поток клиентов, каждого из которых нужно обслужить. Операторы, заполняя форму «Анкета» задают серию вопросов. Один из них, влияет на дальнейший ход общения: «Вам исполнилось 18 лет?». Если клиент отвечает нет, то оператор прекращает общение, иначе продолжает задавать вопросы.

Если оператор задаст вопрос про возраст в конце общения, то любой потенциальный клиент должен будет заполнить всю анкету, даже если в этом нет смысла. Рациональный подход в общении с клиентами помогает операторам за одно и то же время обслужить большее число клиентов. С базами данных всё так же.

6. Не допускай декартового произведения между таблицами

Результатом декартового — или перекрёстного — произведения множеств будет такое множество, элементами которого являются все возможные упорядоченные пары элементов исходных множеств. Рассмотрим пример «Адрес». Возьмём две таблицы «Город», «Улица». В первой таблице «Город» есть две записи: Москва и Санкт-Петербург. Во второй таблице «Улица» сохранены следующие записи:

улица Карла Маркса, которая одновременно есть и в Москве, и в Санкт-Петербурге;

улица Крупской аналогично и в Москве, и в Санкт-Петербурге;

Малый Полуярославский переулок только в Москве.

Пишем запрос: «Получаю из таблицы «Улица», которые принадлежат городу Москва».

⚠️ Опасный подход:

SELECT t1.TYPE AS TYPE_1 /* Колонка TYPE из таблицы TEST_DATA_1 */ ,t1.VALUE AS VALUE_1 /* Колонка VALUE из таблицы TEST_DATA_1 */ ,t2.TYPE AS TYPE_2 /* Колонка TYPE из таблицы TEST_DATA_2 */ ,t2.VALUE AS VALUE_2 /* Колонка VALUE из таблицы TEST_DATA_2 */ FROM TEST_DATA_1 t1 ,TEST_DATA_2 t2 WHERE t1.TYPE = 'CITY' AND t2.TYPE = 'STREET';



SQL-запрос написан без условия, то есть: «Извлекаю улицы, относящиеся к городам, без соединения таблиц». База данных, не понимая, по какому городу делается SQL-запрос, соединит со всеми улицами и Москву, и Санкт-Петербург. Всего вернётся 2* 5 = 10 записей.

✅ Безопасный подход заключается в наличии связей:

SELECT t1.TYPE AS TYPE_1 /* Колонка TYPE из таблицы TEST_DATA_1 */ ,t1.VALUE AS VALUE_1 /* Колонка VALUE из таблицы TEST_DATA_1 */ ,t2.TYPE AS TYPE_2 /* Колонка TYPE из таблицы TEST_DATA_2 */ ,t2.VALUE AS VALUE_2 /* Колонка VALUE из таблицы TEST_DATA_2 */ FROM TEST_DATA_1 t1 ,TEST_DATA_2 t2 WHERE t1.TEST_DATA_1_ID = t2.TEST_DATA_1_ID AND t1.TYPE = 'CITY' AND t2.TYPE = 'STREET';



Этот SQL-запрос написан с условием, то есть: «Извлекаю улицы, относящиеся к городу Москве, соединяя две таблицы условием». В нём указывается, по какому городу нужно выполнить фильтрацию. Поэтому возвращено 3 записи.

Когда данные извлекаются больше чем из одной таблицы, важно, как они соединяются между собой. Неправильное соединение будет возвращать неверные данные и не в ожидаемом количестве.

7. Проверяй, что имена параметров процедур не совпадают с именами колонок

Процедуры, функции могут использоваться для разных целей. Одно из возможных предназначений — обновление записей в таблице.

Допустим, есть строковый параметр А, который передаётся на вход процедуры с целью фильтрации. Можно сказать, что написано так: «Обновляю таблицу, задав новое значение для колонки, где выполняется фильтрация по колонке А равной параметру А». В этом случае наблюдается полное совпадение А = А. База данных обновит все записи в этой таблице.

Чтобы этого не было, параметру добавляют префикс или постфикс. Например, параметр будет называться не А, а РА. В изменённом виде можно сказать, что написано так: «Обновляю таблицу, задав новое значение для колонки, где выполняется фильтрация по колонке А равной параметру PА».

⚠️ Опасный подход:

/* 1 вариант процедуры с ошибкой */ create or replace procedure e_test_data_1_upd_description(test_data_1_id in TEST_DATA_1.TEST_DATA_1_ID%type ,description in TEST_DATA_1.DESCRIPTION%type) as begin update TEST_DATA_1 t1 – set t1.DESCRIPTION = description /* Обновление записи */ where t1.TEST_DATA_1_ID = test_data_1_id; exception when others then /* Блок перехвата ошибок */ null; end e_test_data_1_upd_description; / /* Пример вызова 1 варианта процедуры с ошибкой */ declare begin e_test_data_1_upd_description(test_data_1_id => 4 /* ID EMPLOYEE = СОТРУДНИК 2 */ ,description => 'ДОПОЛНИТЕЛЬНЫЕ ДАННЫЕ ПО СОТРУДНИКУ 2'); end; / /* * Результат изменений * Визуально изменений нет */ SELECT T1.TEST_DATA_1_ID AS TEST_DATA_1_ID ,T1.TYPE AS TYPE_1 ,T1.VALUE AS VALUE_1 ,T1.DESCRIPTION AS DESCRIPTION FROM TEST_DATA_1 T1;



⚠️ Опасный подход:

/* 2 вариант процедуры с ошибкой */ create or replace procedure e_test_data_1_upd_description(test_data_1_id in TEST_DATA_1.TEST_DATA_1_ID%type ,description_new in TEST_DATA_1.DESCRIPTION%type) as begin update TEST_DATA_1 t1 – set t1.DESCRIPTION = description_new /* Обновление записи */ where t1.TEST_DATA_1_ID = test_data_1_id; exception when others then /* Блок перехвата ошибок */ null; end e_test_data_1_upd_description; / /* Пример вызова 2 варианта процедуры с ошибкой */ declare begin e_test_data_1_upd_description(test_data_1_id => 4 /* ID EMPLOYEE = СОТРУДНИК 2 */ ,description_new => 'ДОПОЛНИТЕЛЬНЫЕ ДАННЫЕ ПО СОТРУДНИКУ 2'); end; / /* * Результат изменений * Изменены все записи */ SELECT T1.TEST_DATA_1_ID AS TEST_DATA_1_ID ,T1.TYPE AS TYPE_1 ,T1.VALUE AS VALUE_1 ,T1.DESCRIPTION AS DESCRIPTION FROM TEST_DATA_1 T1;



✅ Безопасный подход заключается в передаче параметра, имя которого не совпадает с именем колонки в таблице:

/* Вариант процедуры без ошибки */ create or replace procedure e_test_data_1_upd_description(p_test_data_1_id in TEST_DATA_1.TEST_DATA_1_ID%type ,p_description in TEST_DATA_1.DESCRIPTION%type) as begin update TEST_DATA_1 t1 – set t1.DESCRIPTION = p_description /* Обновление записи */ where t1.TEST_DATA_1_ID = p_test_data_1_id; exception when others then /* Блок перехвата ошибок */ null; end e_test_data_1_upd_description; / /* Пример вызова варианта процедуры без ошибки */ declare begin e_test_data_1_upd_description(p_test_data_1_id => 4 /* ID EMPLOYEE = СОТРУДНИК 2 */ ,p_description => 'ДОПОЛНИТЕЛЬНЫЕ ДАННЫЕ ПО СОТРУДНИКУ 2'); end; / /* * Результат изменений * Изменена 1 требуемая запись */ SELECT T1.TEST_DATA_1_ID AS TEST_DATA_1_ID ,T1.TYPE AS TYPE_1 ,T1.VALUE AS VALUE_1 ,T1.DESCRIPTION AS DESCRIPTION FROM TEST_DATA_1 T1;

8. Следи за временем выполнения SQL-запроса

Время, пожалуй, один из самых бесценных ресурсов. Пренебрежение за контролем времени выполнения SQL-запроса приведёт к трате усилий и денег.

Рассмотрим пример «Мониторинг времени выполнения». Допустим, на уровне базы данных продуктовой среды настроен специальный триггер. Его предназначение сводится к следующему:

прерывать сессию, которая выполняется дольше N-минут;

сохранить информацию об SQL-запросе в журнал для последующего анализа или постановки на мониторинг.

Вариант триггера на таблицу с искусственно генерируемой ошибкой в момент обновления данных:

/* Вариант триггера */ create or replace trigger TEST_DATA_1_AIUDR_PTCL after insert or update or delete on TEST_DATA_1 for each row begin if UPDATING then if (:old.test_data_1_id = 5 and :new.description is not null) then DBMS_OUTPUT.PUT_LINE('Log entry.'); raise_application_error(-20001, 'No Update with id 5 and new description.'); rollback; end if; end if; end; /

Специалисту рассказывали про этот триггер. Он проигнорировал это или забыл — и реализовал, поставленную задачу на непродуктовой среде таким образом, что одно из действий выполняется больше N-минут. Передал всё на установку в продуктовую среду. Получилось, что реализованный функционал не работает полностью или частично.

Вариант процедуры с искусственно завышенным временем выполнения

/* Вариант процедуры */ create or replace procedure e_test_data_1_upd_description(p_test_data_1_id in TEST_DATA_1.TEST_DATA_1_ID%type ,p_description in TEST_DATA_1.DESCRIPTION%type) as begin /* Цикл добавлен для увеличения времени выполнения блока программной логики */ for indx in 1 .. 1000000 loop for cur in (select t1.TYPE as TYPE_1 ,t1.VALUE as VALUE_1 ,t2.VALUE as VALUE_2 from TEST_DATA_1 t1 ,TEST_DATA_2 T2 where t1.TEST_DATA_1_ID = t2.TEST_DATA_1_ID and t1.TEST_DATA_1_ID = p_test_data_1_id) loop null; end loop; end loop; /* Блок программной логики */ update TEST_DATA_1 t1 – set t1.DESCRIPTION = p_description /* Обновление записи */ where t1.TEST_DATA_1_ID = p_test_data_1_id; end e_test_data_1_upd_description; / /* Пример вызова процедуры */ declare begin e_test_data_1_upd_description(p_test_data_1_id => 5 /* ID EMPLOYEE = СОТРУДНИК 3 */ ,p_description => 'ДОПОЛНИТЕЛЬНЫЕ ДАННЫЕ ПО СОТРУДНИКУ 3'); end; /



Задача специалиста смотреть на поставленную задачу шире, учитывая разные аспекты, применяя разные подходы. Можно попробовать оптимизировать SQL-запрос, например, добавляя индексы. Можно менять алгоритмы выполнения действий, добиваясь требуемого результата.

9. Используй копию данных для построения отчётности

Отчётность — это извлечение массива данных из базы для последующей обработки, аналитики, построения прогноза, прочее. Для неё может извлекаться значительный объём данных.

Рассмотрим пример «Отчёт о расходах за период». У нас есть промышленная среда, на которой развёрнуто приложение с подключением к базе данных. С приложением работают сотрудники. Задачей одних является внесение информации о приходе и расходе денежных средств. Задачей других — подготовка отчёта о расходе денежных средств за период. Информация вносится периодически и в небольшом объёме. Извлекается реже, но вся, что была внесена за конкретный период.

При ограниченных ресурсах базы данных извлечение может приводить к замедлению работы приложения. Потому что на стороне БД подключаются сотрудники из обеих групп, ресурсы делятся между ними, и отклик происходит медленнее. Избежать подобного эффекта можно при помощи копии базы данных с применением механизма репликации. Так, клон клон с определённой периодичностью синхронизируется с основной базой данных (их может быть несколько).

Создание копии базы данных — задача администраторов базы данных (Database administrator, DBA). Для большего погружения в механизм репликации можно обратиться к официальной справочной информации соответствующей базы данных. Например:

Взаимодействие с базой данных можно трансформировать следующим образом. Сотрудники, которые вводят информацию, так и продолжают работать с основной базой данных. Сотрудники, которые заняты отчётностью, работают с её копией. Информационные потоки разведены. Влияние устранено.

Подход использовать не основную базу данных для отчётности, а её клон (копию) — это рекомендация. И не для любой отчётности требуется создавать копию. Например, если с базой данных работает один сотрудник, который практически не загружает её. Или если у неё много свободных ресурсов.

10. Проверяй формат данных

Бывает, что отчёт, который обычно работает хорошо, возвращает ошибку, если ввести другие входные данные. Это связано с тем, что у новых входных данных другой формат.

Рассмотрим пример «Отчёт». У нас есть отчёт, строящийся на данных, которые заполняются внешним приложением. Одна из его колонок — дата. Поле ввода на форме, в которой происходит её заполнение — строковое. В подавляющем большинстве случаев формат: день числом, месяц числом, год числом, например, 01.01.2001. Изредка — день числом, месяц словом, год числом, например, «1 января 2001».

Приложение позволяет вводить в любом виде. Конечные пользователи ошибку не видят, но для отчёта это — потенциальная проблема. Она может заключаться в неверном предположении, что дата всегда заносится в базу данных в одном виде.

⚠️ Опасный подход заключается в игнорировании формата используемых данных:

SELECT t1.TYPE AS TYPE_1 /* Колонка TYPE из таблицы TEST_DATA_1 */ ,to_date(t1.VALUE, 'DD.MM.RRRR') AS VALUE_1 /* Колонка VALUE из таблицы TEST_DATA_1 */ ,t2.TYPE AS TYPE_2 /* Колонка TYPE из таблицы TEST_DATA_2 */ ,t2.VALUE AS VALUE_2 /* Колонка VALUE из таблицы TEST_DATA_2 */ FROM TEST_DATA_1 t1 ,TEST_DATA_2 t2 WHERE t1.TEST_DATA_1_ID = t2.TEST_DATA_1_ID AND t1.TYPE = 'DATE' AND t2.TYPE = 'DATE';



✅ Безопасный подход заключается в понимании формата используемых данных:

SELECT t1.TYPE AS TYPE_1 /* Колонка TYPE из таблицы TEST_DATA_1 */ ,to_date(t1.VALUE, 'DD.MM.RRRR') AS VALUE_1 /* Колонка VALUE из таблицы TEST_DATA_1 */ ,t2.TYPE AS TYPE_2 /* Колонка TYPE из таблицы TEST_DATA_2 */ ,t2.VALUE AS VALUE_2 /* Колонка VALUE из таблицы TEST_DATA_2 */ FROM TEST_DATA_1 t1 ,TEST_DATA_2 t2 WHERE t1.TEST_DATA_1_ID = t2.TEST_DATA_1_ID AND t1.TYPE = 'DATE' AND t2.TYPE = 'DATE' AND t2.VALUE = 'Формат день числом, месяц числом, год числом';



Наличие разных данных можно узнать заранее. Для этого, когда делается отчёт, можно выполнить проверку на всех данных, а не только на части. Это — залог стабильной работать и уверенность, что созданный отчёт будет работать.

Вспомним, что написано выше, и закрепим правила:

Объявляя имена таблиц, обращайся к записям через имена таблиц. Извлекай только те данные, которые планируешь использовать. По максимуму используй данные, которые извлёк из таблицы. Проверяй запросы SQL на индексы. Начинай запрос SQL с таблицы с меньшим набором записей. Не допускай декартового произведения между таблицами. Проверяй, что имена параметров процедур не совпадают с именами колонок. Следи за временем выполнения SQL-запроса. Используй копию данных для построения отчётности. Проверяй формат данных.

От автора

Подходов к оптимизации великое множество. Цель статьи — пробудить интерес искать и находить места роста производительности и снижения издержек. И помните Зако́н Ме́рфи: «Если что-нибудь может пойти не так, оно пойдёт не так»."'https://tproger.ru/articles/sql-dlja-nachinajushhih-10-pravil-postroenija-tochnyh-zaprosov/'https://media.tproger.ru/uploads/2023/03/5318284_digital_extension_file_format_sql_icon-cover.png'"['data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""107px"" viewBox=""0 0 107 36""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""750px"" viewBox=""0 0 750 35""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""330px"" viewBox=""0 0 330 320""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""520px"" viewBox=""0 0 520 101""%3E%3C/svg%3E', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""774px"" viewBox=""0 0 774 245""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""520px"" viewBox=""0 0 520 182""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2023/03/5318284_digital_extension_file_format_sql_icon-cover-icon-original.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""577px"" viewBox=""0 0 577 84""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""675px"" viewBox=""0 0 675 78""%3E%3C/svg%3E', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""671px"" viewBox=""0 0 671 364""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""675px"" viewBox=""0 0 675 149""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""447px"" viewBox=""0 0 447 34""%3E%3C/svg%3E', 'https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""672px"" viewBox=""0 0 672 59""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""683px"" viewBox=""0 0 683 242""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1128px"" viewBox=""0 0 1128 84""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""773px"" viewBox=""0 0 773 261""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""486px"" viewBox=""0 0 486 241""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""605px"" viewBox=""0 0 605 66""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""753px"" viewBox=""0 0 753 241""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""340px"" viewBox=""0 0 340 35""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2023/03/5318284_digital_extension_file_format_sql_icon-cover.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""752px"" viewBox=""0 0 752 245""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""491px"" viewBox=""0 0 491 134""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""337px"" viewBox=""0 0 337 84""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""74px"" viewBox=""0 0 74 36""%3E%3C/svg%3E', 'https://mc.yandex.ru/watch/27485085', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""601px"" viewBox=""0 0 601 67""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""463px"" viewBox=""0 0 463 194""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""775px"" viewBox=""0 0 775 246""%3E%3C/svg%3E']"
9'9LJG9MVLP'Весенний бум: 6 востребованных IT-специальностей'"На волне развития искусственного интеллекта топ востребованных IT специальностей претерпел изменения. Собрали для вас список из шести IT-профессий, где остро требуются толковые специалисты.

Computer Vision Engineer

Computer Vision Engineer обучает ИИ распознавать объекты и реагировать на них без необходимости в «глазах». Эта отрасль инженерии привлекает не только технарей, но и гуманитариев, ведь чтобы ИИ научился распознавать, большое количество видео и фото обрабатывается вручную, описывая изображенные на них объекты.

Разумеется, опыт работы с кодом, способность быстро адаптироваться к новым технологиям и задействовать алгоритмы помогают в достижении успеха в этой отрасли.

Инженер робототехники

Инженер-робототехник — это специалист, который разрабатывает архитектуру и вводит в эксплуатацию роботов, приборы и сложные робототехнические системы.

Они используются для:

производственных целей;

научно-исследовательских целей;

боевых действий;

развлечений;

бытового применения.

Роботы позволяют выполнять рутинную работу и сложные задачи практически без участия человека.

Инженеры-робототехники могут работать в автоконцернах, авиационных и космических предприятиях, инженерных компаниях и стартапах, занимающихся созданием роботов.

Заметили, что AI вакансии постепенно заполняют рынок? Да, и уже присматриваюсь к ним

Да, но мне всё равно

Нет, особых изменений не замечаю

Работа с данными

Компаниям, желающим обойти конкурентов и оптимизировать бизнес-процессы, чтобы получать большую прибыль, потребуются исследования данных. В связи с этим активно растёт спрос на профессионалов таких как аналитик BI, Data Scientist, аналитик данных, специалист Machine Learning, etc.

Data Analyst

Data аналитик собирает данные, на основе которых принимается решение. Он оценивает широкий спектр данных, после чего выбирает и обрабатывает те, которые важны для принятия решений. Далее аналитик визуализирует полученные данные, разрабатывает рекомендации и предлагает концепции ведения бизнеса.

Чтобы стать аналитиком данных, необходимо:

Обладать знаниями и навыками в области анализа данных. Иметь опыт работы с основными инструментами анализа данных. Уметь работать с большим объемом разнородной информации.

Data Engineer

Data engineer — это специалист, отвечающий за сбор, хранение и преобразование данных. Данные используются для создания и обучения моделей искусственного интеллекта (ИИ). При построении пирамиды потребностей ИИ в первую очередь на повестку дня выходят три основных этапа, делающиеся дата-инженером: извлечение, перенос/хранение и анализ/предварительная обработка данных.

Machine Learning Engineer

ML-инженер — это специалист, который работает в сфере Data Science. Задачи специалиста сводятся к практическому обучению компьютера поиску взаимосвязей в данных и принятию на их основе тех или иных решений.

Вот лишь некоторые примеры результатов ML-инженерии:

«умные ленты» в социальных сетях;

алгоритмы рекомендаций на музыкальных стримингах;

сервисы перевода типа Google Translate;

боты-помощники типа Олега банка «Тинькофф» и Алисы «Яндекса».

AI Ethicists (Этик ИИ)

Для того, чтобы ИИ мог действительно принимать правильные решения, необходимо наличие эксперта по этике ИИ. Он должен понимать и учитывать человеческие чувства, политические взгляды и привязанности, чтобы программировать ИИ так, чтобы тот был нейтральным и при этом понимал, что является правильным или неправильным.

Этика ИИ даёт нейросети понимание таких сложных этических понятий, как любовь, война, те или иные слова вежливости, etc.

Да, ИИ всё ещё лишён чувств, поэтому для принятия правильных решений и нужен эксперт по этике ИИ, который понимает и учитывает нюансы, недоступные искусственному интеллекту."'https://tproger.ru/articles/6-vostrebovannyh-it-specialnostej/'https://media.tproger.ru/uploads/2023/03/06fd3374-f24b-4890-8d0d-7251f0b5a340-cover.png'"['https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2021/01/python_telegram_bot-cover.png', 'https://media.tproger.ru/uploads/2020/08/iconfinder_356_-Roadmap-_interaction_communication_essential_1451052-cover.png', 'https://media.tproger.ru/uploads/2023/03/d45ee3be-9108-4b05-92d9-45d56b16922a.jpg', 'https://media.tproger.ru/uploads/2023/03/06fd3374-f24b-4890-8d0d-7251f0b5a340-cover.png', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'https://media.tproger.ru/uploads/2023/03/06fd3374-f24b-4890-8d0d-7251f0b5a340-cover-icon-original.png', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2021/03/iconfinder_Neural_network_2844558-cover.png', 'https://media.tproger.ru/uploads/2023/03/d8d4dc43-c698-4cc3-a782-16ff510c3f89.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2023/03/77032fff-a414-4110-97b4-723e99683215.jpg', 'https://media.tproger.ru/uploads/2021/05/iconfinder-icon-cover-2.png', 'https://media.tproger.ru/uploads/2021/11/OTR-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c']"
10'B1IYS8PAI'Как перейти с Java на Scala'"Scala — редкий, местами сложный в освоении и вместе с тем высокооплачиваемый язык программирования. Он полностью совместим с Java и работает на той же виртуальной машине. Поэтому, имея опыт разработки на Java, стать «скалистом» будет проще.

Вместе с разработчиками технологической и научно-исследовательской компании «Криптонит» мы составили дорожную карту по изучению Scala. Этот роадмап подойдёт Java-разработчикам, которые хотят освоить больше связанных технологий.

Зачем переходить на Scala

Чтобы начать осваивать новый язык, должны быть веские причины. Особенно для Java-разработчиков, которые пишут на одном из самых востребованных языков программирования.

Scala создавался как преемник Java. Он унаследовал лучшее от предшественника и стал технически совершеннее. Scala более объектно-ориентирован, чем Java, а также обладает возможностями функционального языка. Сочетание двух подходов делает программирование на Scala гибким, повышает эффективность кода и позволяет реализовывать нестандартные решения.

В Scala есть сильные механизмы абстракции, которые позволяют легко программировать как большие, так и маленькие системы и масштабировать их. А ещё код на Scala компактнее по сравнению с Java. Выразительный синтаксис позволяет избегать багов, ускоряет написание и упрощает чтение программ.

Несмотря на свои сильные стороны, Scala не получил такого же распространения, как Java. Однако относительная нишевость языка — на руку программистам. Она компенсируется высоким уровнем средних зарплат и возможностью работать над уникальными проектами.

Задачи и возможности Scala

Scala — многофункциональный язык программирования, который применяется для решения различных задач. Сегодня возможности Scala используют для разработки распределённых систем, научных вычислений, мобильных и веб-приложений и приложений для анализа данных.

Писать на Scala сложнее, чем на Java. Язык требует совершенно другого подхода к архитектуре и логике построения кода. Но вместе с этим Scala имеет ряд преимуществ:

— Функциональное программирование. Scala обладает функциональными возможностями, что идеально подходит для решения сложных задач, связанных с обработкой данных и параллельным программированием.

— Безопасность типов. Scala имеет более строгую систему типов, чем Java, что позволяет предотвращать ошибки на этапе компиляции, а не на этапе выполнения.

— Интероперабельность с Java. Язык полностью совместим с Java, поэтому Scala-разработчики могут использовать библиотеки Java и легко взаимодействовать с Java-кодом.

— Поддержка асинхронного программирования. Различные инструменты в Scala делают язык идеальным для создания высокопроизводительных приложений.

— Конкурентность. Scala предлагает мощную поддержку параллелизма и конкурентности, которые важны для написания высокопроизводительных приложений и сервисов. Scala-код может быть выполнен на JVM, что позволяет использовать все преимущества JVM, включая возможности управления памятью и оптимизации.

— Масштабируемость. Scala позволяет разработчикам создавать масштабируемые приложения, которые могут обрабатывать большие объемы данных и выдерживать высокие нагрузки.

А ещё Scala — один из самых динамично развивающихся языков и постоянно внедряет новые возможности. Сейчас активно развивается следующая итерация языка — Scala 3. В ней переработали компилятор, что улучшило автоматический вывод типов и снизило многословность кода. Одновременно с этим вышел из экспериментального статуса механизм макросов, который расширил возможности автоматической генерации кода.

Чем занимается Scala-программист

Согласно исследованию Stack Overflow, доля Scala-разработчиков среди профессиональных программистов — около 3%. И компании активно ищут таких специалистов: в марте 2023 года только на карьерной площадке Linkedin размещено почти 34 тысячи соответствующих вакансий.

Одним из направлений, требующих знания Scala, является backend-разработка. На этой позиции от кандидатов требуют умение писать код на Scala, наличие аналитического склада мышления, умение разбираться в доменной области и логике работы системы.

Бэкендеры занимаются разработкой сервисов, связанных с бизнес-логикой системы. Например, в «Криптоните» ищут Scala-разработчиков, которые возьмутся за реализацию серверной части веб-приложений, связанных с обработкой и отображением больших данных, а также начинающих «скалистов», которые будут разрабатывать отдельные компоненты приложений и проводить их автоматическое тестирование.

Алексей Долгий Ведущий инженер-программист и руководитель группы серверной разработки компании «Криптонит»

До того, как стал писать на Scala коммерческие проекты, я уже знал Java, JavaScript и C. Примерно в 2012 году стали много говорить о том, что Java скоро умрёт и будут новые языки. Scala назывался как один из них, и я решил попробовать. Оказалось, это интереснее, чем писать на Java. Однако у «скалистов» более высокий порог входа. Чтобы начать писать на этом языке, нужно чуть больше знаний, чем для программирования на Java. На Scala я пишу почти 10 лет. Сначала делал небольшие программы для себя. Они выполняли какие-то рутинные действия, помогая мне в основной работе. Например, я сделал редактор protobuf’а (формата сериализации структурированных данных Protocol Buffers, который по сравнению с XML обеспечивает более компактное хранение и повышает скорость обработки данных). Особенно понравилось, что в среде разработки Scala есть консоль (среда программирования REPL с интерфейсом командной строки). В ней можно писать код в интерактивном режиме и тут же его выполнять. В «Криптоните» я занимаюсь бэкендом для клиента интеллектуальной системы транскрибации голоса. Это очень перспективная тема, и её интересно реализовать на Scala. Ещё я сейчас работаю над сервисами для платформы обработки больших данных. Я выполнил оптимизацию кода и потребления вычислительных ресурсов, используя принцип разделения функционала. Получились отдельные лёгкие микросервисы.

Кроме backend-разработки, у Scala-программистов есть карьерные перспективы в обработке данных. Это направление требует широкого кругозора и понимания того, по каким принципам строятся распределённые системы. Также для работы понадобятся сильные технические навыки, знание тонкостей работы платформы JVM и облачной инфраструктуры.

Анатолий Жуков Старший инженер-программист компании «Криптонит»

Впервые о языке Scala я узнал в 2015 году. Я уже знал Java, а также успел поучаствовать на проектах с Python, Ruby и немного — с JavaScript. Мой первый проект на Scala был связан с обработкой результатов тестов в генетической лаборатории. Он состоял из двух отдельных частей: ETL (извлечение, преобразование и загрузка) огромного потока данных и backend для отображения статистики. В «Криптоните» я занимаюсь разработкой ПО для наших заказчиков: поиском и обработкой больших массивов данных, транскрибацией голосовых сообщений, а также участвую в разработке внутренних проектов — например, сервисом доступа и хранения данных.

Ещё одно направление для развития — анализ данных. На этой позиции от кандидатов требуют знание Scala, Python, SQL, умение декомпозировать сложные структуры данных на отдельные компоненты, выстраивать гипотезы на основе этих компонент и проводить математические исследования с целью доказательства или опровержения выработанных гипотез.

Scala-программисты описывают алгоритмы приведения неструктурированных данных к структурированным, находят зависимости и противоречия. Например, в «Криптоните» разрабатывают аналитические системы на базе единой платформы, которые позволяют безопасно работать с данными независимо от их формата, метода хранения и эксплуатации. Сейчас компания ищет тимлида на этот проект.

Олег Булатов Старший программист направления серверной разработки компании «Криптонит»

По образованию я физик. В университете для научной работы использовал Си и MatLab. Затем на работе нужно было использовать OpenText (OScript) и писать на JavaScript, а для хобби-проектов использовал Java. Программировать на Scala предложили на собеседовании, так как вся команда писала на этом языке. Моей первой задачей, реализованной на Scala, было написание коннектора к чат-серверу. В нём использовался публичный API социальной сети «Одноклассники», чтобы передавать сообщения к чат-серверу и обратно. Требования были такими: максимально быстрая передача сообщений, возможность для масштабирования и отказоустойчивость. В итоге коннектор был реализован мной с использованием набора библиотек Akka для разработки распределённых приложений и параллельных вычислений. В «Криптоните» я занимаюсь конструктором запросов для анализа большого количества данных. У нас в компании все продукты разрабатываются в рамках единой экосистемы, поэтому необходим сервис, который может их связывать. Конечная цель этого сервиса — возможность выстраивать компоненты для анализа различного типа данных (текст, изображение, аудио) в единую цепочку для их обработки. Коллеги из лаборатории больших данных и статистики приносят нам готовые ML-модели, а мы пишем на Scala сервис для конструктора запросов, который склеивает всё это в единый продукт.

Общие инструменты

Напомним, что Scala-разработчику доступны все JVM-библиотеки, написанные на Java, Kotlin и других. Поэтому в статье разберём только те инструменты, которые написаны на Scala или имеющие соответствующий API.

Основы языка

Изучение Scala с нуля стоит начать со стандартной библиотеки языка. Она сочетает в себе изменяемые и неизменяемые структуры данных, а предоставляемые ей интерфейсы используются во всех сторонних библиотеках.

Кроме этого, на начальном этапе освоения Scala необходимо подробно изучить понятия рекурсии и лямбда-функций, которые с каждым годом начинают всё больше использоваться и в ООП-языках.

Компиляция проектов

Несмотря на возможность сборки Scala-проектов с помощью gradle и maven, рекомендуем освоить работу Scala Build Tool. С помощью этого инструмента можно настраивать параметры компиляции проектов: выставлять необходимые флаги компилятора языка, разбивать проект на подмодули, осуществлять кросс-компиляцию с разными версиями библиотек и даже самого языка Scala.

Плагины компилятора

Scala позволяет не только гибко изменять и комбинировать программы, но и модифицировать этап компиляции проектов при помощи API для создания плагинов.

Предназначение плагинов компилятора может быть крайне разным. Например, плагины WartRemover и Scapegoat предоставляют инструменты для статического анализа кода, better-tostring изменяет поведение генерируемых по умолчанию функций, а Scala.js и Scala Native позволяют компилировать Scala-код для платформ, отличных от JVM.

Работа с консолью

Взаимодействовать со Scala-проектами можно не только путём их компиляции и последующего запуска, но и в интерактивном режиме при помощи Scala REPL. Эта консольная оболочка позволяет выполнять команды пользователя построчно. Использовать Scala REPL можно и на основе полноценных компилируемых проектов, и для интерпретации отдельных файлов.

Для работы с консолью также подходит Ammonite REPL. Это сторонний инструмент с бо́льшим числом возможностей по сравнению с оболочкой по умолчанию. Среди них — подсветка синтаксиса и динамическое подключение зависимостей.

Сериализация данных

Библиотеки для сериализации и десериализации данных применяются при синхронном взаимодействии сервисов с помощью API, при асинхронном взаимодействии с использованием очередей сообщений и при записи в файл или хранилище данных.

Хотя самый популярный формат сообщений для межсервисного взаимодействия — JSON, также активно используются Parquet, protobuf, Avro и CSV. Собрали наиболее крупные библиотеки для работы с этими форматами на Scala:

avro4s — библиотека для взаимодействия с форматом Avro;

ScalaPB — библиотека для генерации protobuf-сообщений;

parquet4s — библиотека для работы с форматом Parquet;

circe — одна из самых популярных библиотек для работы с JSON в функциональном стиле;

uJson — минималистичная библиотека для работы с JSON;

json4s — корневая библиотека, предоставляющая интерфейсы для работы с различными JSON-парсерами и сериализаторами.

Тестирование

Библиотеки для тестирования фокусируются на читаемости тестов и имеют синтаксис, близкий к обычному английскому языку.

Пример теста, написанного при помощи scalatest:

class ExampleSpec extends AnyFlatSpec with should.Matchers { ""A Stack"" should ""pop values in last-in-first-out order"" in { val stack = new Stack[Int] stack.push(1) stack.push(2) stack.pop() should be (2) stack.pop() should be (1) } it should ""throw NoSuchElementException if an empty stack is popped"" in { val emptyStack = new Stack[Int] a [NoSuchElementException] should be thrownBy { emptyStack.pop() } } }

Основные фреймворки и библиотеки для тестирования:

scalatest — фреймворк для тестирования кода, позволяющий гибко выбирать синтаксис написания тестов;

specs2 — альтернатива scalatest с фокусом на behavior-driven тестах;

scalacheck — обособленная библиотека тестирования кода путём случайной генерации входных данных. Имеет интеграции с основными фреймворками для тестирования;

munit — библиотека для тестирования с акцентом на читаемости ошибок в тестах;

uTest — минималистичная библиотека для тестирования.

weaver test — библиотека для тестирования с использованием cats-effect.

Логирование и конфигурация

Конфигурация проектов в Scala зачастую осуществляется на основе файла application.conf, аналогично языку Java. Наиболее популярный формат конфигурации — HOCON. Он позволяет использовать переменные окружения и ссылки на другие элементы конфигурации при её описании. Для чтения конфигурации используют эти библиотеки:

lightbend/config — библиотека без сторонних зависимостей, реализованная на языке Java;

pureconfig — Scala-библиотека с возможностью автоматической конвертации конфигурации в классы приложения.

Библиотеки для логирования в основном базируются на Java-интерфейсах. Выбирать библиотеку стоит исходя из совместимости с фреймворком и уменьшения числа зависимостей, используемых в проекте. Основные библиотеки:

scala-logging — высокопроизводительная библиотека-обёртка над slf4j интерфейсами;

log4cats — библиотека для логирования в функциональном стиле с интеграцией с cats-effec;

LogStage — оптимизированная библиотека для структурного логирования.

Полезные материалы для изучения Scala

Чтобы обучение языку Scala было максимально эффективным, следует запастись полезными ресурсами.

Списки Scala-библиотек:

Telegram-каналы:

Книги:

Мартин Одерски, Лекс Спун, Билл Веннерс «Scala. Профессиональное программирование» Главная книга по Scala, написанная создателями языка. Поможет пошагово изучить язык и идеи, лежащие в его основе. Читать

Chiusano Paul, Bjarnason Runar «Functional Programming in Scala, 2nd Edition» Вводная книга по общим концепциям функционального программирования в применении к языку Scala. Книга включает в себя упражнения для самопроверки. Читать

Haoyi Li «Hands-on Scala Programming: Learn Scala in a Practical, Project-Based Way» Книга-курс, обучающая синтаксису и основам языка путём создания функциональных приложений, начиная с Hello World. Читать

Alvin Alexander «Scala Cookbook» Перечень из более чем 300 типичных IT-проблем с различными примерами их разрешения при помощи языка Scala. Читать

Курсы и упражнения:

Работа для Scala-программистов

Если вы готовы перейти с Java на Scala, держите подборку вакансий в «Криптоните». Компания занимается разработкой платформы частного облака с ML-технологиями для аналитики и бизнес-решений. Основной стек технологий компании: Scala, Typescript, Rust, Python, K8S, Spark, Kafka, ClickHouse, Scylla, Postgres, Vue.

Прямо сейчас «Криптонит» ищет:

Переходите по ссылке и станьте частью команды!"'https://tproger.ru/articles/kak-perejti-s-java-na-scala/'https://media.tproger.ru/uploads/2023/03/oblozhka-2.png'"['https://media.tproger.ru/uploads/2023/03/IMG_3348-1.png', 'https://mc.yandex.ru/watch/27485085', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""234px"" viewBox=""0 0 234 330""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""263px"" viewBox=""0 0 263 330""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2023/03/oblozhka-2.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""90px"" viewBox=""0 0 90 90""%3E%3C/svg%3E', 'https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1600px"" viewBox=""0 0 1600 1016""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""268px"" viewBox=""0 0 268 330""%3E%3C/svg%3E', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""251px"" viewBox=""0 0 251 330""%3E%3C/svg%3E']"
11'VISFOAP6W'Теперь с помощью GPT-4 можно создавать 3D-сцены в Blender'"Теперь с помощью GPT-4 можно создавать 3D-сцены в Blender

Энтузиаст разработал расширение, которое позволяет использовать Blender с командами на естественном языке с применением GPT-4 от OpenAI. Для этого достаточно просто ввести промт в текстовом поле, после чего нейросеть сгенерирует результат через Python.

Плагин будет полезен не только для того, чтобы сэкономить время на рутинном коде, но в целом, чтобы быстро понять, как работает Blender — «помощник» в виде нейросети, считайте, поможет сделать первые шаги.

Плагин поддерживает Blender версии 3.0.0, а подробная инструкция по установке есть в репозитории проекта."'https://tproger.ru/articles/tepr-s-pomoshhyu-gpt-4-mozhno-sozdavat-3d-sceny-v-blender/'https://tproger.ru/favicon.ico?v=2'"['https://media.tproger.ru/uploads/2023/03/ecf2d22b-96ba-4537-a904-8873ad654c88-cover-icon-original.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://tproger.ru/favicon.ico?v=2', 'https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c']"
12'1JQWZX7VH'На LinkedIn нашли резюме человека, «не созданного для работы»'Тут очень субъективно, кто-то считает, что лучше стараться получить высокий балл на ЕГЭ, победить в паре олимпиад и поступить в какой-нибудь вуз, например ИТМО (это один из лучших IT вузов), а кто-то считает, что намного лучше учиться самостоятельно, читая книги, смотря гайды на ютубе и читая статьи. Тут каждый решает для себя сам. Надеюсь, что помог своим ответом)'https://tproger.ru/articles/na-linkedin-nawli-rezyume-cheloveka-ne-sozdannogo-dlya-raboty/'https://media.tproger.ru/uploads/2023/03/f1fc5bab-cbc3-4f71-b5e0-db44a38feecf-cover.png'"['https://media.tproger.ru/uploads/2023/03/f1fc5bab-cbc3-4f71-b5e0-db44a38feecf-cover-icon-original.png', 'https://media.tproger.ru/uploads/2023/03/3f3019c9-baee-41b0-afc4-9436385663c8.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c', 'https://media.tproger.ru/uploads/2023/03/3a1928d1-5987-41d9-8937-1aa3a011f97b.jpg', 'https://media.tproger.ru/uploads/2023/03/f1fc5bab-cbc3-4f71-b5e0-db44a38feecf-cover.png']"
13'GBP13E4I1'Стрессовое интервью: 8 фишек рекрутёров'"А вам устраивали стрессовое собеседование? Возможно, да, но вы могли об этом не догадываться. Представляем вашему вниманию фишки, которые используют рекрутёры, чтобы проверить кандидата на прочность.

Было ли у вас стрессовое собеседование? Да

Нет

1. Маринование

Вас приглашают пройти интервью, назначая встречу на определённое время. Вы приходите вовремя, но вас просят подождать. Иногда время ожидания может растянуться до часа. При этом к вам никто не подходит и ничего не говорит, в лучшем случае — «Ожидайте».

Что делать?

Не нервничайте и не спешите сматывать удочки: так работодатель проверяет, насколько сильно вы заинтересованы в данной вакансии.

2. Собеседование закончилось, так и не начавшись

Иногда сценарий усложняется тем, что вам предлагают заполнить некую анкету или пройти тест, на что уходит до получаса. А после просто говорят: «Спасибо. До свидания!»

Что делать?

Вежливо, но настойчиво попросите об интервью, ведь вы именно за этим пришли, верно?

3. Некомфортные условия

Некоторые рекрутёры заходят ещё дальше и создают отвратительные условия: чересчур маленький офис, где вас собеседуют, яркий свет или неудобная мебель. Разумеется, в IT-сфере, напротив, стараются показать кандидату все прелести места работы, но тоже могут использовать такую уловку.

Что делать?

Проходя к месту интервью, обращайте внимание на холл, лифт, коридоры — они скажут о комфорте гораздо больше. Если всё достаточно аккуратно, в отличие от конечного пункта, будьте уверены — это стрессовое собеседование.

4. Глупые вопросы

Почти все IT собеседования, стрессовые они или нет, пестрят различными вопросами на логику. И работодатели не меньше соискателей знают, насколько глупо сегодня звучат вопросы в стиле «Почему крышка канализационного люка круглая». Поэтому если вы слышите что-то подобное, скорее всего, проверяют ваше поведение, а не правильность ответа.

Что делать?

Не возмущайтесь. Если не знаете, как ответить, спокойно скажите об этом. Например: «Да, я знаю этот вопрос. Кажется, его задают кандидатам в Google? Но, увы, не помню правильного ответа». Так вы дадите понять, что интересовались заковыристыми вопросами с IT-собеседований, но на этот не можете ответить.

5. Добрый полицейский, злой полицейский

В качестве злых могут выступить сразу несколько интервьюеров. Их задача — разуверить вас в том, что вам нужна данная должность. Они будут рассказывать о чрезвычайно стрессовых ситуациях, заоблачных требованиях и низких зарплатах. При этом есть ещё один интервьюер, который станет всячески вас отговаривать, предлагая подумать о более достойном месте работы.

Что делать?

Предварительно следует почитать отзывы самих сотрудников о компании, а также отзывы тех, кто проходил собеседование. Если полученная на интервью информация никак не вяжется с этими отзывами — вас проверяют.

6. Вопросы личного характера

Это простейший способ выбить почву из-под ног, а потому он часто применяется в стрессовых собеседованиях. Вопросы о семье, отношениях и даже о сексе. Более уязвимая категория в данном случае — девушки. У них могут поинтересоваться насчёт планов на семью и детей. Хотя, будем откровенны, IT-компании грешат этим редко, поскольку проповедуют равные условия для всех.

Что делать?

Уважайте себя и не отвечайте на провокационные вопросы. Вы можете отказаться отвечать в вежливой форме. Мягко намекните интервьюеру, что личная жизнь к профессиональной деятельности никакого отношения не имеет.

7. Жертвенность

Поскольку это стрессовое интервью, вас могут попросить перекрасить волосы, выбросить свой кошелёк, разрезать сумку и многое другое.

Что делать?

Всё, что в действительности хочет узнать рекрутёр, — способны ли вы тактично отказать в ответ на непомерные требования. Никому не нужен бесхребетный сотрудник или откровенный подхалим.

8. По-настоящему стрессовое собеседование

Это может быть грубость, переход на крик и даже стакан воды в лицо. Будем честны, даже если кандидату известно, что это просто проверка, далеко не каждый согласится терпеть подобное отношение.

Что делать?

Если всё ещё хотите эту должность, не идите на поводу у эмоций, но и не отмалчивайтесь, дабы не создать впечатление безвольного человека. Обратитесь к политике компании, её идеалам, с которыми можно ознакомиться на сайте, и скажите, что в соответствии с ними интервьюер ведёт себя неподобающе.

Подытожим

В ряде случаев о стрессовом собеседовании предупреждают заранее, но далеко не всегда. Если вы действительно заинтересованы в вакансии, ведите себя сдержанно и вежливо, но при этом не позволяйте интервьюеру выходить за рамки дозволенного."'https://tproger.ru/articles/stressovoe-sobesedovanie-8-fishek-rekrutjorov/'https://media.tproger.ru/uploads/2021/08/4526872_emoji_emoticon_monkey_sticker_stress_icon-cover-80.png'"['https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2015/10/sites-prog.jpg', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'https://media.tproger.ru/uploads/2020/08/iconfinder__sql_2486249-cover-1.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'https://media.tproger.ru/uploads/2015/10/whiteboard.jpg', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2021/11/OTR-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2020/08/iconfinder_17_1280977-cover-3.png', 'https://media.tproger.ru/uploads/2021/08/4526872_emoji_emoticon_monkey_sticker_stress_icon-cover-icon-1-original.png', 'https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c', 'https://media.tproger.ru/uploads/2021/08/4526872_emoji_emoticon_monkey_sticker_stress_icon-cover-80.png']"
14'4R3XKYQ1V'Tproger на IT-фестивале JTBF: как это было'"Tproger на IT-фестивале JTBF: как это было

12 марта в Белграде прошел IT-фестиваль JTBF для русскоязычной аудитории. Это самый крупный IT-фестиваль на Балканах, и нам посчастливилось стать его прямым инфопартнёром.

Главная цель ивента — создание почвы для развития русскоязычного IT-сообщества.

Что было представлено?

Job To Be Fun (именно так расшифровывается аббревиатура ивента) представил лучшие IT-компании Сербии, 150 вакансий с возможностью карьерного роста, полезные доклады илекции, а также мастер-классы и другие мероприятия в области технологических наук.

Кроме того, посетители фестиваля имели возможность лично познакомиться с представителями различных IT-компаний, узнать о последних трендах и получить рекомендации от ведущих специалистов.

Развлечения

Также были представлены различные развлекательные мероприятия. Фестиваль JTBF предлагал разнообразные активности, включая игры, фотосессии и мастер-классы. При этом было целых 9 Fun-зон, а, чтобы не потеряться, к мероприятию прилагались удобные схемы расположения зон на каждом из трёх этажей.

По итогам

В целом, айти-фестиваль JTBF оказался мощным событием, которое привлекло множество специалистов. Такие фестивали помогают развивать русскоязычное комьюнити, предоставляя возможность встретиться, поделиться своими идеями, а также почерпнуть лучшие практики более опытных коллег в сфере IT."'https://tproger.ru/articles/tproger-na-it-festivale-jtbf-kak-eto-bylo/'https://media.tproger.ru/uploads/2023/03/79f743b2-4d7b-4b12-bd3f-932201dc02d0-cover.png'"['https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2017/01/sharpie.jpg', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big-32x32.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2021/07/money-cover.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2023/03/79f743b2-4d7b-4b12-bd3f-932201dc02d0-cover.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'https://media.tproger.ru/uploads/2023/03/5f1fed8a-029a-46ba-99ca-6c3d10e72251.jpeg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2016/05/diploma.png', 'https://media.tproger.ru/uploads/2021/05/iconfinder-icon-cover-2.png', 'https://media.tproger.ru/uploads/2023/03/79f743b2-4d7b-4b12-bd3f-932201dc02d0-cover-icon-original.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2023/03/7353fb98-3c6c-43a8-ac8c-0b7e5a5b5501.jpeg', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c']"
15'XWKNADMB1'Что вы делали на этой неделе? Пост хвастовства за 20-24 марта'"Что вы делали на этой неделе? Пост хвастовства за 20-24 марта

Предлагаем делиться в комментариях под этой записью, над чем вы работали на этой неделе, ведь нет ничего интереснее, чем задачи коллег!

Вот, чем вы занимались на прошлой неделе.

Не важно, разработчик вы или тестировщик, деврел или эйчар. Расскажите, какие задачи вы героически решили, и делитесь успехами.

Кидайте всё, чем хочется похвастаться: текст, скриншоты кода и даже ссылочки на видео.

Не забывайте про NDA: не указывайте названия компании или деликатные частности.

Итак, чем вы похвастаетесь на этой неделе?

Внимание Это — зона взаимного уважения, понимания и нулевого токсика. Похвала и помощь горячо приветствуются."'https://tproger.ru/articles/chto-vy-delali-na-etoj-nedele-post-hvastovstva-za-20-24-marta/'https://media.tproger.ru/uploads/2023/03/6d257c7d-b5a1-4e53-846a-f233b09bbcbb-cover.png'"['https://media.tproger.ru/uploads/2023/03/6d257c7d-b5a1-4e53-846a-f233b09bbcbb-cover.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'https://media.tproger.ru/uploads/2023/03/f6469260-0872-463a-8093-a74727c7ec5a.jpeg', 'https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c', 'https://media.tproger.ru/uploads/2023/03/6d257c7d-b5a1-4e53-846a-f233b09bbcbb-cover-icon-original.png']"
16'6SODWC0IZ'Вложенные классы и лямбда-выражения в Java'"Вложенные классы в Java — важная особенность этого языка. Они помогают сделать код более модульным, позволяя сгруппировать связанные классы вместе. Однако стоит помнить, что задача вложенных классов Java — дополнять внешний класс, предоставляя дополнительную функциональность, расширяя его возможности или упрощая взаимодействие. То есть внутренний класс своей сутью и предназначением неразрывно связан с внешним, иначе его стоит вынести в отдельную, самостоятельную структуру.

Сергей Соловых Старший разработчик МТС Диджитал

Объявляем класс для примера

Статические вложенные классы Java

Простые внутренние классы

Локальные классы

Анонимные классы и лямбда-выражения

«Затенение» переменных

Замыкание переменных

Ссылки на методы

Общее резюме

Согласно документации Java, внутренние (nested) классы бывают двух типов:

статические (static nested classes) нестатические (inner classes)

Нестатические имеют два подвида: локальные (local classes) и анонимные (anonymous classes). Они схожи и мы рассмотрим их во второй части статьи.



Объявляем класс для примера

Класс в Java позволяет объединять в себе определённые атрибуты и поведение, свойственные объекту. Например, в контексте издательства можно рассмотреть книгу как класс «Book» со следующими полями:

Название книги

Имя автора

Адрес типографии

Объём тиража

Фамилия редактора

Дата издания

Текст произведения

А в качестве поведения задать методы, позволяющие:

задавать параметры, указанные выше

получать содержимое конкретной страницы или нескольких страниц

корректировать написанный текст

указывать размер тиража

отправлять в печать

Здесь в качестве вложенного класса можно описать страницу книги, указать её размер в количестве печатных знаков, задать порядковый номер и вложить само произведение (текст). Также в отдельный класс вынесем обложку книги:

public class Book { private Cover cover; private List pages; private String editor; public class Cover { //some code here } public static class Page { //some code here } }

Примечание Примеры кода в статье представлены в кратком виде и актуальны только для объяснения сути материала. Не стоит относиться к ним как к отображению предметной области в реальном проекте.

Классы обложки и страницы находятся внутри класса книги, но они немного отличаются: «Cover» объявлен как внутренний класс, а класс «Page» — вложенный статический. Это примерная канва процесса создания книги, чтобы объяснить подход к формированию архитектуры приложения, поэтому детали остаются за скобками. Мы не берёмся разработать конкурента InDesign или написать свой WoodWing.

Почему мы объявляем классы именно так? Допустим, работа над книгой начинается, когда автор приносит текст. Сначала нужно определить, в каком он состоянии, требуется ли ему доработка, какого объёма текст. Значит, для работы понадобятся составляющие будущей книги — страницы, каждая из которых будет содержать свой отрывок произведения. Объекты страниц передаются на проверку орфографии, сверку данных, затем попадают на правки к главному редактору. У страниц может измениться размер, могут быть дописаны или сокращены целые главы. Всё это повлияет на конечный вид будущей книги. Таким образом, вполне закономерно, что объекты класса «Page» могут существовать до того, как будет сформирован объект книги.

Когда текст готов и определена концепция издания, формируется книга и создаётся обложка, которая зависит от конкретного издания. Ведь один и тот же текст может выйти в мягком переплёте для удобного чтения в дороге или в твёрдом, дополненный иллюстрациями и пригодный для подарка.



Статические вложенные классы Java

Статический класс «Page» содержит текст страницы книги и её геометрические размеры:

public class Book { private Cover cover; private List pages; private String editor; public class Cover { //some code here } public static class Page { private static final int DEFAULT_WIDTH = 210; private static final int DEFAULT_HEIGHT = 297; private final int width; private final int height; private final String text; public Page(String text) { this(text, DEFAULT_WIDTH, DEFAULT_HEIGHT); } public Page(String text, int width, int height) { this.text = text; this.width = width; this.height = height; } } }

Раз нам нужно работать с текстом сразу, то воспользуемся свойством статических классов — экземпляр такого класса может существовать самостоятельно, для его создания не нужен объект внешнего класса. И для создания объекта «Page» нужно обратиться к конструктору через имя внешнего класса и точку:

Book.Page page = new Book.Page();

Именно эта особенность позволяет создать объекты-страницы до того, как они будут объединены в один общий объект-книгу. При этом она диктует и ограничение: из вложенного класса нельзя напрямую обращаться к полям и методам внешнего класса. Ведь объект page существует отдельно и не знает, создан ли какой-либо объект класса «Book», где находится на него ссылка. Но из класса «Page» доступно обращение к статическим полям и методам внешнего класса, в том числе и отмеченным модификатором private.

Сам вложенный класс в Java также может содержать статические переменные, методы и блоки инициализации. Для примера в этом классе объявлены статическими дефолтные ширина и высота. Это может быть удобно, если выходит много одинаковых по формату изданий: при создании объекта страницы достаточно передать только нужный текстовый отрывок, и размеры подставятся автоматически.

Также статический класс не имеет ограничений по реализации интерфейсов или наследованию. Он может наследовать или сам выступать в роли родительского класса.



Простые внутренние классы

Класс «Cover» — внутренний или нестатический вложенный класс в Java. Его объекты создаются только через объект внешнего класса и не могут существовать без последнего. Выделить в такой класс данные обложки вполне логично, так как она принадлежит только конкретным книге и изданию:

public class Book { private Cover cover; private List pages; private String editor; public class Cover { private String title; private String author; private LocalDate publicationDate; private Integer copyCount; public String getEditor(){ return editor; } public Integer getBookSize(){ return pages.size(); } } public static class Page { //some code here } }

Кроме своих полей и методов, объект внутреннего класса имеет полный доступ к данным внешнего класса, даже обозначенным модификатором private. Таким образом, через объект cover можно получить другие параметры книги, например, фамилию редактора или количество страниц:

Book book = new Book(); Book.Cover cover = book.new Cover(); String editor = cover.getEditor(); Integer bookSize = cover.getBookSize();

Доступность переменных внешнего класса объясняется просто — объект создаётся на основе существующего объекта внешнего класса. Это гарантирует, что его переменные уже созданы и инициализированы, а значит к ним можно обратиться за данными. Более того, объект внутреннего класса хранит ссылку на объект внешнего, благодаря которому он был создан. Чтобы получить её, достаточно добавить в код следующий метод:

public class Cover { public Book getBook() { return Book.this; } } Book book = new Book(); Book.Cover cover = book.new Cover(); Book outerBook = cover.getBook(); assert book == outerBook;

Эта связь между двумя объектами устанавливается в момент создания и не изменяется. Обратная сторона этой зависимости в том, что внутренние классы не могут содержать статических блоков инициализации и статических методов, так как зависят от существования экземпляра внешнего класса.

Также внутренний класс, как и вложенный, может быть унаследован, выступать в роли родительского класса или реализовывать интерфейс — ограничений нет.

Резюме

Первая пара — статический вложенный класс и внутренний класс, размещённый внутри внешнего, — больше влияет на архитектуру приложения. Правильное расположение этих классов улучшают инкапсуляцию, делают приложение более компактным и упорядоченным. Но выбор типа класса напрямую зависит от контекста использования, его ограничений и особенностей.



Локальные классы

Рассматривать подвиды нестатического внутреннего класса стоит с локального, как промежуточного этапа к более лаконичному анонимному. Локальный класс применяют нечасто, так как его описание и создание объекта продуцирует большой объём кода.

Основная характеристика локального класса — возможность декларирования в любом блоке кода, допускающем объявление переменных. Например: метод, статический инициализатор и даже анонимный класс. Создание и инициализация экземпляра происходит только в нестатическом контексте. В рамках видимости переменной объект может быть переиспользован неограниченное количество раз.

Особенности локальных классов:

объявленный класс принадлежит блоку кода, в котором объявлен, и видимость ограничена рамками этого блока;

единственная доступная область видимости — default;

не может быть статическим или содержать статических методов или статических блоков кода, за исключением констант;

из локального класса разрешён доступ к полям и методам обрамляющего класса;

ему доступны локальные переменные блока, если они имеют модификатор final или являются effectively final ;

или являются ; может наследовать, быть унаследован таким же локальным классом, или реализовать интерфейс.

Представим, что необходимо отобрать уже изданные книги по размеру тиража. Так будет выглядеть реализация этой задачи с помощью локального класса:

public class Application { public static void main(String[] args) { Book book = new Book(); class FilterByCopyCount { public Boolean checkCopies(Book book) { return book.getCover().getCopyCount() > 1000; } } FilterByCopyCount filter = new FilterByCopyCount(); Boolean bestseller = filter.checkCopies(book); } }

Код занимает множество строк, читать его трудно, основная смысловая часть теряется в оформлении. Не самое оптимальное решение. Как сделать код ещё лаконичнее? С помощью анонимных классов и лямбда-выражений.



Анонимные классы и лямбда-выражения

Анонимные классы схожи с локальными по характеристикам, за исключением того, что у них нет имени. Чтобы разобрать его синтаксис, возьмём за основу интерфейс Function, содержащий метод:

R apply(T t); где: T - тип входящих данных, R - тип исходящих данных;

Теперь применим этот интерфейс к нашей задаче, реализовав в анонимном классе функцию, проверяющую размер тиража:

Function<Book, Boolean> myFunction = new Function<>() { @Override public Boolean apply(Book book) { return book.getCover().getCopyCount() > 1000; } };

Анонимный класс находится в фигурных скобках. Ссылка на объект этого класса присвоена переменной myFunction. Его можно передать как параметр в любой метод, так как область видимости интерфейса Function ничем не ограничена.

Но и в этом решении всё ещё много boilerplate-кода. Как сделать эту запись эффективней? Здесь на помощь приходят лямбда-выражения.

Лямбда-выражение — это анонимная функция для реализации метода функционального интерфейса:

Function<Book, Boolean> myFunction = book -> book.getCover().getCopyCount() > 1000; Boolean bestseller = myFunction.apply(myBook);

Она делится на три части:

«->» – символ лямбда-выражения;

часть слева – входные параметры типа ‘T’ (в данном случае – Book);

часть справа – функция, возвращающая тип ‘R’ (в данном случае – Boolean).

Лямбда-выражение можно рассматривать как инструкцию, доступную в любом месте кода. Она позволяет реализовать функцию и передать её как параметр в другой метод. Также с ней можно не создавать отдельный класс, а просто описать необходимые действия. Lambda в чём-то похожа на анонимный класс, за исключением, что анонимный класс может иметь своё состояние, а лямбда-выражение — нет.

Чтобы окончательно убедиться, что лямбда-выражение — это не синтаксический сахар над анонимным классом, обратимся к текущему объекту и получим его хеш-код. Анонимный класс при запросе this.hashCode() вернёт хеш-код экземпляра анонимного класса, а лямбда-выражение — хеш-код объекта класса, внутри которого она вызвана:

public class Typography { public void doWork() { Supplier anonymousClass = new Supplier<>() { @Override public Integer get() { return this.hashCode(); } }; Supplier anonymousFunction = () -> this.hashCode(); System.out.println(""anonymousClass: "" + anonymousClass.get()); System.out.println(""anonymousFunction: "" + anonymousFunction.get()); System.out.println(""this: "" + this.hashCode()); } }

И получим вывод в консоли:

anonymousClass: 1694819250 anonymousFunction: 708049632 this: 708049632

«Затенение» переменных

Локальный и анонимный класс образуют новый уровень вложенности, и, соответственно, свою область видимости, внутри которой возможно объявление новых переменных. Если имя переменной внутри анонимного класса будет идентично имени переменной обрамляющего класса, то ошибки не будет. В коде будет использоваться внутреннее значение:

public class Typography { private int x = 10; public void doWork() { final int x = 31; Consumer anonymousClass = new Consumer<>() { final int x = 314; @Override public void accept(Integer x) { System.out.println(""x = "" + x); System.out.println(""this.x = "" + this.x); System.out.println(""Typography.this.x = "" + Typography.this.x); } }; anonymousClass.accept(x); } }

Вывод в консоли:

x = 31 this.x = 314 Typography.this.x = 10

В лямбда-выражениях нет дополнительной вложенности, и они не образуют новой области видимости. Следовательно, при попытке назвать переменную так же, как принимаемый параметр или локальная переменная, возникнет ошибка компиляции:

public class Typography { private int x = 10; public void doWork() { int x = 31; Consumer anonymousFunction = y -> { //int x = 314; - ошибка компиляции //int y = 0; - ошибка компиляции System.out.println(""y = "" + y); System.out.println(""x = "" + x); System.out.println(""this.x = "" + this.x); }; anonymousFunction.accept(x); } }

Вывод в консоли:

y = 31 x = 31 this.x = 10

Замыкание переменных

Замыкание переменных — это функция, которая захватывает («замыкает») внешние переменные и использует их в своём теле.

Реализация лямбда-выражением интерфейса — это объект анонимного класса. А объекты в JVM хранятся в heap’е, тогда как локальные переменные метода — в stack. Соответственно, если объект будет создан при помощи лямбда-выражения и размещён в heap, будет ли доступна переменная в стеке? А если выполнение локального метода завершено, стек был очищен, и только потом был произведён вызов сохранённого выражения? Избежать возможных коллизий можно сделав копию использованной переменной.

Таким образом, лямбда-выражение уносит в heap копию значения локальной переменной. И если лямбда-выражение изменяет значение переменной или переменная меняется в процессе исполнения локального метода, то добиться согласованности можно двумя вариантами:

запретить изменять переменные, обозначив их как final ,

, воспользоваться пакетом ​​java.util.concurrent.

Причин у этого две:

изменение значений у переменных в Java не потокобезопасное; лямбда-выражение может быть использовано в любом месте кода, тогда как область видимости локальной переменной ограничена блоком кода.

Это гарантирует, что значение переменной не изменится после того, как замыкание будет создано. Своего рода механизм безопасности, позволяющий получить корректные, прогнозируемые результаты, получаемые из замыкания, поскольку они не будут зависеть от изменений, вносимых в эту переменную.

Такая запись не вызывает ошибок:

public void doWork() { AtomicInteger counter = new AtomicInteger(5); String value = ""Value is: ""; BiConsumer<String, AtomicInteger> consumer = (value1, counter1) -> { while (counter1.getAndDecrement() > 0) { System.out.println(value1 + counter1.get()); } }; consumer.accept(value, counter); counter.set(57); }

Вывод в консоли:

Value is: 4 Value is: 3 Value is: 2 Value is: 1 Value is: 0

Ссылки на методы

Ещё один способ сделать код более читаемым — передавать в виде аргумента ссылку на метод. Реализация в коде будет выглядеть как имя класса или объекта, два двоеточия и имя метода:

ClassName::methodName

или

myObject::methodName

Если вернуться к примеру с книгами, то реализация интерфейса Function, возвращающего размер книги, в виде обычного лямбда-выражения будет выглядеть так:

Function<Book.Cover, Integer> function = cover -> cover.getBookSize();

А с использованием ссылки на метод:

Function<Book.Cover, Integer> function = Cover::getBookSize;

Общее резюме"'https://tproger.ru/articles/vlozhennye-klassy-i-ljambda-vyrazhenija-v-java/'https://media.tproger.ru/uploads/2023/03/java_icon-cover-1.png'"['https://media.tproger.ru/uploads/2023/03/java_icon-cover-1.png', 'https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""90px"" viewBox=""0 0 90 90""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2023/03/java_icon-cover-icon-1-original.png', 'https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c']"
17'CQ1FIHZO7'Жора в огне'Тут очень субъективно, кто-то считает, что лучше стараться получить высокий балл на ЕГЭ, победить в паре олимпиад и поступить в какой-нибудь вуз, например ИТМО (это один из лучших IT вузов), а кто-то считает, что намного лучше учиться самостоятельно, читая книги, смотря гайды на ютубе и читая статьи. Тут каждый решает для себя сам. Надеюсь, что помог своим ответом)'https://tproger.ru/quiz/zhora-v-ogne/'https://media.tproger.ru/uploads/2023/03/oblozhka-3-1.png'"['https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'https://media.tproger.ru/uploads/2023/03/oblozhka-3-1.png', 'https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c']"
18'2P1QVV9YK'5 логико-математических задач, которые поставят в тупик'"А давайте отвлечёмся от кода и перещёлкаем 5 логико-математических задач. Попробуйте решить их в уме и напишите свои ответы в комментариях.

1. Возраст мальчика

Обилечивая человека, кондуктор поинтересовался, сколько лет его сыну. Человек ответил уклончиво:

– Моя дочь в пять раз младше моего сына, а моя жена — в 5 раз его старше. Я, в свою очередь, вдвое старше своей жены. Моя мама сегодня отмечает день рождения — ей исполнился 81 год — столько, сколько мне, жене, дочери и сыну вместе взятым.

Так сколько же лет мальчику?

Решение х + 5х + 25х + 50х = 81 81х = 81 х=1 Получается, что дочери один год, тогда мальчику 1 * 5 = 5 лет.

2. Вёдра с водой

Стоит два ведра ёмкостью 5 л и 9 л. Из реки необходимо набрать 3 литра воды. Как это сделать, если в распоряжении есть только эти два ведра?

Решение Сначала заполним водой из реки девятилитровое ведро, и выльем из него воду в пятилитровое. Выходит, что в девятилитровом останется 4 литра. Выливаем всё из пятилитрового обратно в реку и переливаем в него из девятилитрового оставшиеся 4 литра. Снова наполняем водой из реки девятилитровое ведро и доливаем в меньшее литр воды. Итого в большом ведре остаётся 8 литров. Из меньшего выливаем всю воду обратно в реку и переливаем из девятилитрового в пятилитровое 5 л, после чего в большом ведре останется как раз 3 л воды.

3. Лампочки и переключатели

Есть две комнаты с низкими потолками. В первой висит три лампы накаливания, а в другой установлено три переключателя. Можно сколько угодно раз щёлкать переключатели, но в комнату с лампочками разрешено перейти только один раз.

Как узнать, к какому переключателю подсоединена каждая из лампочек?

Решение В условии сказано, что комнаты с низкими потолками, а перед нами лампы накаливания — то есть они нагреваются. Нам достаточно включить любую из них на некоторое время, затем выключить её и включить любую другую. После этого переходим в комнату с лампочками: выключенная тёплая соединена с первым переключателем;

горящая лампочка связана со вторым;

та лампочка, которая не горит, соединена с выключателем, который мы не трогали.

4. Время по верёвкам

А как насчёт такой логико-математической задачи? Предположим, у нас есть две верёвки и бесконечное множество спичек. Каждая из этих верёвок сгорает за один час. Но вот беда — горят они неравномерно, поэтому невозможно узнать наверняка, за какое время сгорит какая-то часть веревки.

Можно ли отмерить этими двумя верёвками 45 минут, и если да, то как это сделать?

Решение Отмерить можно. Пусть верёвки и горят неравномерно, но сгорают они точно за 1 час. В этом случае можно: Поджечь одну верёвку с двух концов. На второй верёвке поджечь только 1 конец. Первая верёвка сгорит за 30 минут, и в этот момент поджигаем второй конец второй верёвки: на это уйдут оставшиеся 15 минут.

5. Баночки с таблетками

Есть двадцать баночек с таблетками. Почти во всех таблетки весят по 1 г, и только в одной — по 1,1 г. У нас есть точные кухонные весы, с помощью которых нужно определить баночку, каждая таблетка которой весит 1,1 г. Как это сделать, если можно взвесить только 1 раз?

Решение Представим, что у нас 2 баночки, в одной из которых таблетки более тяжёлые. Даже если мы поставим их обе на весы, мы ничего не узнаем. Но если мы достанем из одной баночки одну таблетку, а также одну таблетку из другой, и положим их на весы — вот тогда-то и откроется истина. В данном случае вес будет 2,1 г или 2 г (в зависимости от того, какие по весу таблетки мы взяли). Так и определяем нашу баночку. Вернёмся к задаче. Из каждой баночки нужно доставать разное количество таблеток. То есть из первой баночки 1 таблетку, из второй — 2, из третьей — 3 и так далее. Если бы каждая таблетка весила по 1 г, общий вес составил бы 210 г. Но поскольку в одной из баночек таблетки тяжелее, вес будет больше. Для определения нужной баночки просто воспользуемся формулой: № тяжелой баночки = (вес - 210) * 10

Понравилось решать логико-математические задачи? Тогда вас могут заинтересовать хитрые задания на логику с собеседований."'https://tproger.ru/articles/5-logiko-matematicheskih-zadach-kotorye-postavjat-v-tupik/'https://media.tproger.ru/uploads/2021/08/math-logic-tasks-cover.png'"['https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2021/08/math-logic-tasks-cover.png', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'https://media.tproger.ru/uploads/2021/08/math-logic-tasks-cover-icon-original.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'https://media.tproger.ru/uploads/2015/10/whiteboard.jpg', 'https://media.tproger.ru/uploads/2015/10/two-to-sfour.jpg', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'https://media.tproger.ru/uploads/2019/07/iconfinder-icon-19-cover-1.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2021/11/OTR-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2014/12/coin-to-blender.png', 'https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c']"
19'T0N7HL9UG'Valve показала Counter-Strike 2 c обновлённой графикой и дымом'"Ещё на прошлой неделе Valve зарегистрировала торговую марку «CS2», что подтвердило слухи в сети — будет полноценная Counter Strike 2. А релиз игры запланирован на это лето.

Так вот, на днях, после официального анонса, стартовал бета-тест игры.

Самой обсуждаемой темой стал новый «отзывчивый» дым. И не без причины: теперь игра использует динамические объёмные частицы, которые взаимодействуют с окружением и реагируют на свет, выстрелы и взрывы.

Например, пули и гранаты могут разгонять дым, он будет проникать в открытые окна и двери, а частицы дыма работают с единой системой освещения для создания более естественных эффектов.

Зная Valve, до CS3 уж точно не дойдёт, а жаль."'https://tproger.ru/articles/valve-pokazala-counter-strike-2-c-obnovlyonnoj-grafikoj-i-dymom/'https://media.tproger.ru/uploads/2023/03/d0032f7a-4c0d-4a18-b34d-d91748b7a0cf-cover.png'"['https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2023/03/b1fef982-e91e-48e3-9358-46e14d6adac8-cover.png', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2023/02/8085861_communism_political_soviet_socialism_union_icon-cover.png', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'https://media.tproger.ru/uploads/2023/02/3760326_creepy_death_gravestone_graveyard_scary_icon-cover.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2023/03/d0032f7a-4c0d-4a18-b34d-d91748b7a0cf-cover.png', 'https://media.tproger.ru/uploads/2023/03/b4f7653b-d4e8-44a3-8c4a-a4f1f8493a09.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2023/02/532714_code_coding_development_javascript_script_icon-cover.png', 'https://media.tproger.ru/uploads/2023/03/d0032f7a-4c0d-4a18-b34d-d91748b7a0cf-cover-icon-original.png', 'https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c']"
20'L1ZCR4EC2'Билл Гейтс рассказал, как он видит будущее с ИИ'"Билл Гейтс рассказал, как он видит будущее с ИИ

Основатель Microsoft опубликовал в своём блоге большое письмо, в котором поделился своим видением того, как искусственный интеллект изменит мир. Он рассказал, что он видит ИИ скорее как «личного помощника» для повышения производительности.

ИИ поможет избавиться от рутины

Например, ИИ может освободить медработников от бумажной и бюрократической работы. А в будущем помочь в прогнозировании побочных эффектов препаратов и расчёте уровней дозировки. Программистам уже вовсю помогает Copilot.

Здесь можно почитать, что такое Copilot:

И как использовать его в России:

Но ИИ здесь опять же — цифровой помощник. Идеи и стратегию разработки всё ещё определяет человек.

Как ИИ повлияет на образование

ИИ будет помогать составлять обучающий контент с учётом особенностей учеников, анализировать их успехи и мотивацию, планировать дальнейшую программу и оценивать успехи.

Но по мнению Гейтса, даже несмотря на то, что ИИ здорово изменит образование в течение 5-10 лет, обучение по-прежнему будет зависеть от отношений между учащимися и преподавателями. ИИ будет лишь помогать сделать этот процесс эффективнее.

Чего не стоит допускать ИИ

Основатель Microsoft говорит, что тут главное не забывать предохраняться от рисков так же активно, как и распространять ИИ среди большего числа пользователей.

Он отметил, что важно не допустить нецелесообразного использования ИИ, а также не дать ему сверхразумных и сверхсильных возможностей, которые позволили бы ИИ «устанавливать свои собственные цели»:

Чтобы использовать ИИ по максимму, нам нужно как предохраняться от рисков, так и распространять преимущества среди как можно большего числа людей. Билл Гейтс

Основатель Microsoft

Он также сравнил прорыв в разработке ИИ с созданием компьютера, интернета и мобильного телефона."'https://tproger.ru/articles/bill-gejts-rasskazal-kak-on-vidit-budushhee-s-ii/'https://tproger.ru/favicon.ico?v=2'"['data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://tproger.ru/favicon.ico?v=2', 'https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c', 'https://media.tproger.ru/uploads/2023/03/0b20cf4b-495e-441e-a9a4-49be6cbaf70b-cover-icon-original.png']"
21'6N6GTXQ26'Декораторы в Python: понять и полюбить'"Декораторы — один из самых полезных инструментов в Python, однако новичкам они могут показаться непонятными. Возможно, вы уже встречались с ними, например, при работе с Flask, но не хотели особо вникать в суть их работы. Эта статья поможет вам понять, чем являются декораторы и как они работают.

Что такое декоратор?

Новичкам декораторы могут показаться неудобными и непонятными, потому что они выходят за рамки «обычного» процедурного программирования как в Си, где вы объявляете функции, содержащие блоки кода, и вызываете их. То же касается и объектно-ориентированного программирования, где вы определяете классы и создаёте на их основе объекты. Декораторы не принадлежат ни одной из этих парадигм и исходят из области функционального программирования. Однако не будем забегать вперёд, разберёмся со всем по порядку.

Декоратор — это функция, которая позволяет обернуть другую функцию для расширения её функциональности без непосредственного изменения её кода. Вот почему декораторы можно рассматривать как практику метапрограммирования, когда программы могут работать с другими программами как со своими данными. Чтобы понять, как это работает, сначала разберёмся в работе функций в Python.

Как работают функции

Все мы знаем, что такое функции, не так ли? Не будьте столь уверены в этом. У функций Python есть определённые аспекты, с которыми мы нечасто имеем дело, и, как следствие, они забываются. Давайте проясним, что такое функции и как они представлены в Python.

Функции как процедуры

С этим аспектом функций мы знакомы лучше всего. Процедура — это именованная последовательность вычислительных шагов. Любую процедуру можно вызвать в любом месте программы, в том числе внутри другой процедуры или даже самой себя. По этой части больше нечего сказать, поэтому переходим к следующему аспекту функций в Python.

Функции как объекты первого класса

В Python всё является объектом, а не только объекты, которые вы создаёте из классов. В этом смысле он (Python) полностью соответствует идеям объектно-ориентированного программирования. Это значит, что в Python всё это — объекты:

числа;

строки;

классы (да, даже классы!);

функции (то, что нас интересует).

Тот факт, что всё является объектами, открывает перед нами множество возможностей. Мы можем сохранять функции в переменные, передавать их в качестве аргументов и возвращать из других функций. Можно даже определить одну функцию внутри другой. Иными словами, функции — это объекты первого класса. Из определения в Википедии:

Объектами первого класса в контексте конкретного языка программирования называются элементы, с которыми можно делать всё то же, что и с любым другим объектом: передавать как параметр, возвращать из функции и присваивать переменной.

И тут в дело вступает функциональное программирование, а вместе с ним — декораторы.

Функциональное программирование — функции высших порядков

В Python используются некоторые концепции из функциональных языков вроде Haskell и OCaml. Пропустим формальное определение функционального языка и перейдём к двум его характеристикам, свойственным Python:

функции являются объектами первого класса;

следовательно, язык поддерживает функции высших порядков.

Функциональному программированию присущи и другие свойства вроде отсутствия побочных эффектов, но мы здесь не за этим. Лучше сконцентрируемся на другом — функциях высших порядков. Что есть функция высшего порядка? Снова обратимся к Википедии:

Функции высших порядков — это такие функции, которые могут принимать в качестве аргументов и возвращать другие функции.

Если вы знакомы с основами высшей математики, то вы уже знаете некоторые математические функции высших порядков порядка вроде дифференциального оператора d/dx. Он принимает на входе функцию и возвращает другую функцию, производную от исходной. Функции высших порядков в программировании работают точно так же — они либо принимают функцию(и) на входе и/или возвращают функцию(и).

Пара примеров

Раз уж мы ознакомились со всеми аспектами функций в Python, давайте продемонстрируем их в коде:

def hello_world(): print('Hello world!')

Здесь мы определили простую функцию. Из фрагмента кода далее вы увидите, что эта функция, как и классы с числами, является объектом в Python:

>>> def hello_world(): ... print('Hello world!') ... >>> type(hello_world) <class 'function'> >>> class Hello: ... pass ... >>> type(Hello) <class 'type'> >>> type(10) <class 'int'>

Как вы заметили, функция hello_world принадлежит типу <class 'function'> . Это означает, что она является объектом класса function . Кроме того, класс, который мы определили, принадлежит классу type . От этого всего голова может пойти кругом, но чуть поигравшись с функцией type вы со всем разберётесь.

Теперь давайте посмотрим на функции в качестве объектов первого класса.

Мы можем хранить функции в переменных:

>>> hello = hello_world >>> hello() Hello world!

Определять функции внутри других функций:

>>> def wrapper_function(): ... def hello_world(): ... print('Hello world!') ... hello_world() ... >>> wrapper_function() Hello world!

Передавать функции в качестве аргументов и возвращать их из других функций:

>>> def higher_order(func): ... print('Получена функция {} в качестве аргумента'.format(func)) ... func() ... return func ... >>> higher_order(hello_world) Получена функция <function hello_world at 0x032C7FA8> в качестве аргумента Hello world! <function hello_world at 0x032C7FA8>

Из этих примеров должно стать понятно, насколько функции в Python гибкие. С учётом этого можно переходить к обсуждению декораторов.

Как работают декораторы

Повторим определение декоратора:

Декоратор — это функция, которая позволяет обернуть другую функцию для расширения её функциональности без непосредственного изменения её кода.

Раз мы знаем, как работают функции высших порядков, теперь мы можем понять как работают декораторы. Сначала посмотрим на пример декоратора:

def decorator_function(func): def wrapper(): print('Функция-обёртка!') print('Оборачиваемая функция: {}'.format(func)) print('Выполняем обёрнутую функцию...') func() print('Выходим из обёртки') return wrapper

Здесь decorator_function() является функцией-декоратором. Как вы могли заметить, она является функцией высшего порядка, так как принимает функцию в качестве аргумента, а также возвращает функцию. Внутри decorator_function() мы определили другую функцию, обёртку, так сказать, которая обёртывает функцию-аргумент и затем изменяет её поведение. Декоратор возвращает эту обёртку. Теперь посмотрим на декоратор в действии:

>>> @decorator_function ... def hello_world(): ... print('Hello world!') ... >>> hello_world() Оборачиваемая функция: <function hello_world at 0x032B26A8> Выполняем обёрнутую функцию... Hello world! Выходим из обёртки

Магия, не иначе! Просто добавив @decorator_function перед определением функции hello_world() , мы модифицировали её поведение. Однако как вы уже могли догадаться, выражение с @ является всего лишь синтаксическим сахаром для hello_world = decorator_function(hello_world) .

Иными словами, выражение @decorator_function вызывает decorator_function() с hello_world в качестве аргумента и присваивает имени hello_world возвращаемую функцию.

И хотя этот декоратор мог вызвать вау-эффект, он не очень полезный. Давайте взглянем на другие, более полезные (наверное):

def benchmark(func): import time def wrapper(): start = time.time() func() end = time.time() print('[*] Время выполнения: {} секунд.'.format(end-start)) return wrapper @benchmark def fetch_webpage(): import requests webpage = requests.get('https://google.com') fetch_webpage()

Здесь мы создаём декоратор, замеряющий время выполнения функции. Далее мы используем его на функции, которая делает GET-запрос к главной странице Google. Чтобы измерить скорость, мы сначала сохраняем время перед выполнением обёрнутой функции, выполняем её, снова сохраняем текущее время и вычитаем из него начальное.

После выполнения кода получаем примерно такой результат:

[*] Время выполнения: 1.4475083351135254 секунд.

К этому моменту вы, наверное, начали осознавать, насколько полезными могут быть декораторы. Они расширяют возможности функции без редактирования её кода и являются гибким инструментом для изменения чего угодно.

Используем аргументы и возвращаем значения

В приведённых выше примерах декораторы ничего не принимали и не возвращали. Модифицируем наш декоратор для измерения времени выполнения:

def benchmark(func): import time def wrapper(*args, **kwargs): start = time.time() return_value = func(*args, **kwargs) end = time.time() print('[*] Время выполнения: {} секунд.'.format(end-start)) return return_value return wrapper @benchmark def fetch_webpage(url): import requests webpage = requests.get(url) return webpage.text webpage = fetch_webpage('https://google.com') print(webpage)

Вывод после выполнения:

[*] Время выполнения: 1.4475083351135254 секунд. <!doctype html><html itemscope="""" itemtype=""http://schema.org/WebPage""........

Как вы видите, аргументы декорируемой функции передаются функции-обёртке, после чего с ними можно делать что угодно. Можно изменять аргументы и затем передавать их декорируемой функции, а можно оставить их как есть или вовсе забыть про них и передать что-нибудь совсем другое. То же касается возвращаемого из декорируемой функции значения, с ним тоже можно делать что угодно.

Декораторы с аргументами

Мы также можем создавать декораторы, которые принимают аргументы. Посмотрим на пример:

def benchmark(iters): def actual_decorator(func): import time def wrapper(*args, **kwargs): total = 0 for i in range(iters): start = time.time() return_value = func(*args, **kwargs) end = time.time() total = total + (end-start) print('[*] Среднее время выполнения: {} секунд.'.format(total/iters)) return return_value return wrapper return actual_decorator @benchmark(iters=10) def fetch_webpage(url): import requests webpage = requests.get(url) return webpage.text webpage = fetch_webpage('https://google.com') print(webpage)

Здесь мы модифицировали наш старый декоратор таким образом, чтобы он выполнял декорируемую функцию iters раз, а затем выводил среднее время выполнения. Однако чтобы добиться этого, пришлось воспользоваться природой функций в Python.

Функция benchmark() на первый взгляд может показаться декоратором, но на самом деле таковым не является. Это обычная функция, которая принимает аргумент iters , а затем возвращает декоратор. В свою очередь, он декорирует функцию fetch_webpage() . Поэтому мы использовали не выражение @benchmark , а @benchmark(iters=10) — это означает, что тут вызывается функция benchmark() (функция со скобками после неё обозначает вызов функции), после чего она возвращает сам декоратор.

Да, это может быть действительно сложно уместить в голове, поэтому держите правило:

Декоратор принимает функцию в качестве аргумента и возвращает функцию.

В нашем примере benchmark() не удовлетворяет этому условию, так как она не принимает функцию в качестве аргумента. В то время как функция actual_decorator() , которая возвращается benchmark() , является декоратором.

Объекты-декораторы

Напоследок стоит упомянуть, что не только функции, а любые вызываемые объекты могут быть декоратором. Экземпляры классов/объекты с методом __call__() тоже можно вызывать, поэтому их можно использовать в качестве декораторов. Эту функциональность можно использовать для создания декораторов, хранящих какое-то состояние. Например, вот декоратор для мемоизации:

from collections import deque class Memoized: def __init__(self, cache_size=100): self.cache_size = cache_size self.call_args_queue = deque() self.call_args_to_result = {} def __call__(self, fn): def new_func(*args, **kwargs): memoization_key = self._convert_call_arguments_to_hash(args, kwargs) if memoization_key not in self.call_args_to_result: result = fn(*args, **kwargs) self._update_cache_key_with_value(memoization_key, result) self._evict_cache_if_necessary() return self.call_args_to_result[memoization_key] return new_func def _update_cache_key_with_value(self, key, value): self.call_args_to_result[key] = value self.call_args_queue.append(key) def _evict_cache_if_necessary(self): if len(self.call_args_queue) > self.cache_size: oldest_key = self.call_args_queue.popleft() del self.call_args_to_result[oldest_key] @staticmethod def _convert_call_arguments_to_hash(args, kwargs): return hash(str(args) + str(kwargs)) @Memoized(cache_size=5) def get_not_so_random_number_with_max(max_value): import random return random.random() * max_value

Само собой, этот декоратор нужен в основном в демонстрационных целях, в реальном приложении для подобного кеширования стоит использовать functools.lru_cache .

P.S.

Тут будут перечислены некоторые важные вещи, которые не были затронуты в статье или были затронуты вскользь. Вам может показаться, что они расходятся с тем, что было написано в статье до этого, но на самом деле это не так.

Декораторы не обязательно должны быть функциями, это может быть любой вызываемый объект.

Декораторы не обязаны возвращать функции, они могут возвращать что угодно. Но обычно мы хотим, чтобы декоратор вернул объект того же типа, что и декорируемый объект. Пример: >>> def decorator(func): ... return 'sumit' ... >>> @decorator ... def hello_world(): ... print('hello world') ... >>> hello_world 'sumit'

Также декораторы могут принимать в качестве аргументов не только функции. Здесь можно почитать об этом подробнее.

Необходимость в декораторах может быть неочевидной до написания библиотеки. Поэтому, если декораторы кажутся вам бесполезными, посмотрите на них с точки зрения разработчика библиотеки. Хорошим примером является декоратор представления в Flask.

Также стоит обратить внимание на functools.wraps() — функцию, которая помогает сделать декорируемую функцию похожей на исходную, делая такие вещи, как сохранение doctstring исходной функции.

Заключение

Надеемся, эта статья помогла вам понять, какая «магия» лежит в основе работы декораторов.

Перевод статьи «Demystifying @decorators in Python»"'https://tproger.ru/translations/demystifying-decorators-in-python/'https://media.tproger.ru/uploads/2019/03/python-decorators-new.jpg'"['https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'https://media.tproger.ru/uploads/2018/05/python-ides.jpg', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2021/01/Python_regexp-cover.png', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'https://media.tproger.ru/uploads/2019/07/iconfinder-icon-19-cover-1.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2020/12/python-sorting-cover-3.png', 'https://media.tproger.ru/uploads/2019/03/python-decorators-new.jpg', 'https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c']"
22'PYBM1BUCF'Кто такой BI-аналитик и как им стать'"Кто такой BI-аналитик и как им стать

Как устроена профессия BI-аналитика, какие у неё перспективы и карьерные треки — представляем обзор и советы трёх специалистов.

Джулианна Кадрия Ресурсный менеджер аналитиков и ведущий аналитик направления Big Data КРОК

Юрий Чалый — ведущий BI-консультант КРОК

Дмитрий Рашев — ресурсный менеджер разработчиков и эксперт направления Big Data КРОК

Чем занимается BI-аналитик

Сегодня бизнесу приходится ежедневно работать с огромным количеством данных для принятия управленческих решений и поддержания своей конкурентоспособности. BI-приложения помогают их преобразовать в удобную и понятную аналитику с визуализацией.

В общем рыночном представлении BI-аналитик собирает, интерпретирует и визуализирует данные. Он помогает бизнесу формировать отчётность в виде графических интерактивных таблиц или графиков, которые называются дашбордами. Создают их с помощью BI-инструментов вроде Power BI, Tableau или Qlik.

BI-аналитики (или BI-специалисты) востребованы в любых компаниях вне зависимости от их рода деятельности. Где-то они выстраивают полноценную архитектуру работы с данными, а где-то могут только разрабатывать дашборды. Пул задач зависит от индустрии, особенностей компании и специализации отдела.

BI-аналитик в ИТ-компании — специалист широкого профиля. Он выполняет функции бизнес- и системного аналитика, консультанта и разработчика, вникает в работу других специалистов и взаимодействует с ними.

Зоны ответственности при работе с данными могут быть распределены между различными специалистами — например, между дата-инженером и BI-разработчиком. Но BI-аналитик работает напрямую с заказчиком, выполняя анализ не только для него, но и для всей команды разработчиков.

Какие задачи выполняет BI-аналитик

Разберём цикл работы BI-аналитика:

Получает запрос бизнес-заказчика.

Внутренний заказчик, например, менеджер по работе с клиентами, даёт задачу: провести анализ количества закрытых сделок за полугодие с детализацией по регионам и городам, разбить сделки по статусам и подготовить отчётность. Собирает требования для составления дашборда.

BI-аналитик определяет круг ответственных — «носителей знаний». Обычно это те же бизнес-заказчики. BI-специалисту нужно провести интервью, чтобы собрать требования для формирования дашборда. К примеру, узнать показатели продаж по ассортименту товаров, по месяцам. Изучает источники данных.

Нужно погрузиться в источники данных: откуда дашборд их собирает в BI-инструмент. Источники могут быть совершенно разными: база данных, выгрузка из CRM, даже Excel-файл на рабочем столе менеджера. Обрабатывает данные и определяет параметры дашборда.

Здесь определяется количество пользователей дашборда, частота обновлений информации, предпочтения по визуализации. Создаёт макет дашборда.

BI-аналитик строит модель данных, то есть таблицы, связанные друг с другом в одной структуре. Он рисует макеты в визуальном редакторе, чтобы понять, как структурно, функционально и визуально будет выглядеть дашборд. Чаще всего используют Figma. Этот редактор позволяет работать над макетом в реальном времени и отображать данные практически так же, как и в BI-инструментах. Разрабатывает финальную версию дашборда.

После согласования макета и модели данных начинается процесс разработки самого дашборда. Его финальная версия может дорабатываться в дальнейшем, если появляются новые требования или источники.

Также BI-аналитик обучает сотрудников заказчика и бизнес-пользователей: рассказывает, какие дашборды есть в компании, как сформировать запрос или выгрузить данные.

В компаниях как КРОК, BI-аналитик — это специалист, который ещё и помогает найти ключевые проблемы, выработать подход по работе с данными, подобрать BI-инструмент, а потом и внедрить его, разработав процесс внедрения и методологическую базу.

Специалист должен владеть как можно большим количеством BI-инструментов, чтобы выбрать оптимальный способ решения задач заказчика. Может показаться, что сложно держать в голове функциональность многочисленных систем. Но концептуально большинство BI-инструментов работают по одинаковым принципам — достаточно бывает разобраться в особенностях хотя бы одной из них.

Перед выбором и внедрением инструментов BI-аналитик опирается на специфику каждого заказчика. Он анализирует IT-ландшафт, уже имеющийся BI-инструмент или способ анализа данных. Также он учитывает количество источников данных, пользователей, ежегодный прирост по данным и пользователям и после этого подбирает оптимальный BI-инструмент.

В других отраслях от BI-аналитика требуется уверенное пользование одним BI-инструментом, который компания уже внедрила и активно использует как основной. Отбор и найм происходят по наличию опыта работ с ним.

Какие навыки должны быть у BI-аналитика

BI-аналитики развиваются по тем же грейдам: джуниор, мидл, сеньор, лид. В зависимости от внутренней специфики компании высшие должности могут называться по-разному. В управленческих должностях можно дорасти до руководителя направления или отдела, или стать специалистом общей функции аналитики.

Чтобы узнать про основные понятия, технологии, разобраться в инфраструктуре работы с данными, можно пройти базовые бесплатные обучающие курсы, например, «Основы работы с данными» от Stepik.

Базовые навыки для уровня мидл:

Уверенное владение BI-инструментом (Tableau, Power BI, Qlik).

Как уже было замечено ранее, они похожи, и можно научиться пользоваться одним, тогда освоить остальные будет проще. Можно начать с бесплатных курсов, например, «Microsoft Power BI для аналитики». Или пройти бесплатный марафон по грамотной работе с данными от Data Literacy Project.

Понимание принципов работы БД и SQL.

Необходимо чтобы писать запросы в базы данных для проверки или добавления новых показателей в дашборд. Для этого достаточно базовых знаний в SQL.

Основы проектирования витрин (мини-хранилищ) и моделирования данных.

Уметь находить нужные данные в разных источниках и формировать единую связную модель данных, на основании которых и выстраиваются дашборды. Обычно это организованная структура связанных друг с другом таблиц.

Уметь находить нужные данные в разных источниках и формировать единую связную модель данных, на основании которых и выстраиваются дашборды. Обычно это организованная структура связанных друг с другом таблиц. Основы бизнес-анализа и системного анализа.

Нужно уметь описывать бизнес-процессы, знать, как бизнес-требования становятся системными, понимать предметную область, чтобы собирать только релевантные данные. Кроме того, нужно знать, как интегрировать данные из разных источников.

Знание ETL, Python.

Знание языка программирования облегчит работу с большими объёмами данных и поможет автоматизировать процессы (например, сбора данных из Excel).

Вот дорожная карта по изучению Python для новичков.

Кроме этого важны: высокие коммуникативные навыки, навыки демонстрации решения и обучения, а также умение писать и оформлять документацию.

«План обучения»: какие базовые знания нужно получить для вхождения в профессию

Необходимый минимум это:

Понимание концепции работы BI-инструментов. Основы и принципы хранилищ данных. Минимум один BI-инструмент. Базовый SQL. Базовое понимание бизнес-анализа. Моделирование данных.

Сеньор должен владеть этими навыками на продвинутом уровне и дополнительно уметь управлять командой, ставить задачи и проверять результаты. Дополнительные навыки нужны для перехода на следующий грейд и развития по карьерной лестнице.

Список может расширяться в зависимости от специфики компании. Где-то к роли аналитика может добавляться роль разработчика: будет полезно изучить JavaScript, чтобы понимать, как устроена frontend-разработка. Или может даже быть продуктологом.

Карьерные перспективы BI-аналитика

У аналитических специальностей широкий диапазон возможностей.

Разработчик в BI-инструменте. Он может создавать дополнительные функции в инструментах или новые инструменты визуализации данных, а также проектировать хранилища данных. Для этого надо глубоко разбираться в SQL и в совершенстве владеть BI-инструментом. Дата-аналитик. Он не просто анализирует данные для отчётов и визуализации, но строит предиктивные модели, которые помогают понять, что будет с показателями через время. Для этого нужно глубоко разбираться в Python и статистических методах. Технический менеджер. Он может заниматься внедрением новых BI-систем, составлением универсальных требований для BI-аналитики в компании, а также руководить командой и планировать сроки и этапы проекта. Для этого просто знания BI-инструментов будет уже недостаточно. Необходимо также понимать, как вести бюджет проекта, договариваться с заказчиками и командой.

Перспективы развития профессии BI-аналитика

BI-аналитик развивается как специалист широкого профиля, а со временем развиваются и сами BI-инструменты. Появляются новые функции автоматического анализа данных, взаимодействие с системами упрощается. Но до полной автоматизации этой функции спрос на специалистов будет только расти.

Кроме того, российский рынок отечественных BI-инструментов активно расширяется. Сейчас их внедряет всё больше крупных компаний, поэтому потенциально BI-аналитик должен понимать, как устроены разные решения.

BI-специалисты не просто собирают и анализируют данные, но и развивают культуру работы с ними. Они продвигают единообразие подходов для обработки и анализа данных в компании и играют важную роль посредника между бизнесом и разработкой."'https://tproger.ru/articles/kto-takoj-bi-analitik-i-kak-im-stat/'https://media.tproger.ru/uploads/2023/03/analytics_icon-cover.png'"['https://media.tproger.ru/uploads/2023/03/analytics_icon-cover.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok.png', 'https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'https://media.tproger.ru/uploads/2023/03/analytics_icon-cover-icon-original.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""314px"" viewBox=""0 0 314 330""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1312px"" viewBox=""0 0 1312 738""%3E%3C/svg%3E', 'https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c']"
23'FXJKRCFMA'5 главных мифов о системных администраторах'"Системный администратор — ключевой специалист, который настраивает бесперебойную работу IT-инфраструктуры и переводит бизнес на цифровые рельсы. Раньше он был неприметным сотрудником и в основном занимался ручным трудом, связанным с компьютерной техникой в компании. Но технологии настолько усложнились, а зона его ответственности расширилась, что сейчас сисадмин участвует в решении вопросов информационной безопасности, пишет код и проектирует сложную сетевую архитектуру.

Тем не менее, про этих специалистов до сих пор существует целый ряд стереотипов. В статье Алексей Константинов, руководитель отдела инфраструктуры и эксплуатации Нетологии, решил развенчать главные мифы о системных администраторах.

Миф 1. Системные администраторы работают только с «железом»

К базовым навыкам сисадмина действительно относится настройка компьютерного оборудования, установка программного обеспечения, обслуживание и ремонт оргтехники. Без владения этими компетенциями он не сможет создать комфортные условия для работы других сотрудников и грамотно управлять IT-инфраструктурой компании. Однако это далеко не весь функционал системного администратора. Существуют условные грейды, показывающие на каком профессиональном уровне он находится:

Эникейщик — начинающий специалист, который работает преимущественно с оргтехникой: занимается учетом и ремонтом оборудования, настраивает WiFi-сети, устанавливает ПО, меняет картриджи и помогает офисным сотрудникам разобраться, куда нужно нажать, «чтобы все заработало». Многие эникейщики развиваются «горизонтально», становятся нишевыми специалистами: совершенствуются навыки работы с софтом или оборудованием конкретных вендоров, иногда учатся паять чипы, ремонтировать микросхемы, придумывают решения для починки оборудования, которые можно реализовать быстрее, чем сервисное обслуживание. Системный инженер — на этом уровне специалист также настраивает и обеспечивает работоспособность оборудования, устанавливает ПО, но уже совсем в другом масштабе. Как правило, он работает в центрах обработки данных (ЦОД) и обслуживает парк из 300-1000 единиц техники, где внедряет сетевую инфраструктуру и централизованное управление.Такой инженер умеет автоматизировать процессы. Если в компании не внедрены комплексные решения для управления всеми IT-ресурсами и задачами, ему нужно владеть хотя бы одним языком программирования, чтобы централизованно управлять всей инфраструктурой. Часто для этого он создает самописные скрипты на Bash, Python, Perl, а также на Powershell и Batch для администрирования Windows. Например, если нужно установить новый софт на все оборудование в компании: проводить такую операцию на каждом устройстве по отдельности неудобно, особенно если оно находится в разных офисах, поэтому для выполнения такой задачи нужно написать код. Системный архитектор — самый продвинутый специалист. Он уже практически не работает руками, большую часть времени уделяя проектированию IT-инфраструктуры в компании. Помимо того, что он пишет скрипты и программирует, системный архитектор-инженер решает более специфические вопросы, например, обеспечивает информационную безопасность, работает со сложным высококлассным оборудованием, поддерживает парк более чем из 1000 компьютеров.На этом уровне требуются не только развитые навыки автоматизации управления сетями и инженерными системами, но и глубокая экспертность, умение просчитывать риски. Ведь главная задача системного архитектора — спроектировать надежную систему, элементы которой будут функционировать бесперебойно.

Если эникейщику не требуется специализированных навыков для трудоустройства — достаточно лишь набора начальных знаний в компьютерном оборудовании и сетях, уметь держать в руках отвертку и читать инструкции, то для перехода на следующие грейды необходимо получать дополнительное образование или работать с ментором. Также необходимо овладеть основными компетенциями: научиться разбираться в оборудовании, диагностировать неполадки, устанавливать и настраивать специализированное ПО, такое как СУБД, обслуживать и поддерживать работу серверов, проектировать кластерные отказоустойчивые конфигурации с балансировкой трафика.

Помимо вышеперечисленных грейдов, системный администратор также может развиваться в других IT-направлениях — широкий набор знаний и базовых навыков позволяет легко сменить специализацию. Все зависит от того, чем специалисту интереснее заниматься и на каком уровне модели OSI ему комфортнее работать. Например, он может стать:

администратором баз данных, разработчиком, специалистом внедрения, инженером-проектировщиком (API, интеграций, ЦОДов, систем мониторинга), инженером автоматизации, инженером по работе High-End серверным и сетевым оборудованием.

Также сисадмин может занять менеджерскую позицию и стать руководителем проекта, начальником отдела эксплуатации или CIO.

Миф 2. Технологии вытесняют сисадминов

По результатам совместного исследования сервиса «Работа.ру» и агентства Heaad, в 2022 году системный администратор вошёл в тройку самых востребованных IT-профессий. А значит, развитие технологий не только не убивает, а, наоборот, делает эту специальность еще популярнее. Почему так получается?

Сегодня все больше компаний строят распределенные команды, и у сисадминов появилось много новых задач. В первую очередь:

оптимизация информационной инфраструктуры,

настройка корпоративного VPN-соединения,

поиск решений по снижению нагрузки на сервера,

настройка автоматизированных систем электронного документооборота,

обеспечение быстрого обмена большими объемами данных.

В таких условиях нагрузка на сисадминов увеличивается в разы. Не менее важный момент — организация дистанционного доступа к рабочему пространству. Для этого недостаточно установить соответствующее ПО на компьютер сотрудника — нужно также настроить оргтехнику, проследить за информационной безопасностью, организовать оперативную техподдержку.

Прибавляет работы системным администраторам и набирающий популярность тренд на перенос IT-инфраструктуры в облако, где относительно дешево компания может получить весь необходимый сервис «из коробки». Так, по результатам совместного исследования компаний Cloud и «Технологии Доверия», в 2023 году 37% компаний планируют нарастить объем потребления облачных ресурсов. Именно на сисадминов ложится задача по выбору провайдера и переносу в облако всей IT-инфраструктуры компании, включая критическую. Также облачным провайдерам самим необходимы системные администраторы для выполнения своих услуг, поэтому с каждым годом подобные компании нанимают все больше специалистов в штат.

Кроме того, благодаря постоянному росту популярности дата-центров в России в целом увеличивается спрос на системных администраторов, которые занимаются в них обслуживанием оборудования. Сисадмины также необходимы для функционирования сервис-провайдеров и крупных сетевых вендоров. Компании такого рода — основные потребители квалифицированных кадров в сфере.

Миф 3. Системные администраторы работают исключительно в офисе

Как и остальные IT-специалисты, сисадмины могут работать в дистанционном формате. Только эникейщику, который физически работает с оргтехникой, необходимо присутствовать в офисе — более опытные специалисты могут решать все задачи, работая из любой точки мира. К развёрнутой локальной сети и к любому компьютеру можно подключаться при помощи командной строки. Обрабатывать запросы и решать проблемы, возникающие у других членов команды, также можно виртуально с помощью ПО для удаленного администрирования. Даже если «слетает» операционная система и требуется ее повторная установка, системный администратор может не приезжать в офис, а решить вопрос при помощи скрипта, который полностью автоматически устанавливает ОС Windows со всеми нужными для работы драйверами и офисным софтом.

Работодатели видят преимущество в этом подходе — они могут нанимать сотрудников из других регионов или даже стран, и публикуют всё больше вакансий с предложением удалённой работы. Например, такой специалист нужен в онлайн-школу компьютерной графики или в онлайн-магазин мебели для дома. Соответственно, появляется необходимость осваивать новые навыки для более глубокого погружения в процессы управления инфраструктурой: учиться защищать серверы и приложения от уязвимостей, настраивать кеширование, работать с системами контроля версий, использовать инструменты кластеризации и балансировки. Полученные знания помогут продвинуться по грейду и усовершенствовать IT-процессы в компании.

Миф 4. Системные администраторы не программируют

На самом деле, чем выше уровень квалификации, тем нужнее сисадмину навык программирования, ведь приходится решать всё больше нестандартных задач. Например, если нужно проверять работу антивируса и автоматически отключать компьютер от сети при обнаружении угрозы. Делать это вручную неудобно, поэтому системный администратор пишет скрипт. Навыки программирования могут также понадобиться, чтобы настраивать автоматическое резервное копирование пользовательских каталогов, поддерживать в актуальном состоянии базы данных, развертывать тестовые зоны для приложений, создавать утилиты для управления большими сетями.

Миф 5. Системные администраторы — интроверты, которые почти не взаимодействуют с людьми

Это один из самых популярных мифов, но и самых близких к реальности. К системным администраторам люди приходят только со своими проблемами и болью, и в условиях высокой загруженности у сисадминов вырабатывается рефлекторный механизм, из-за этого многие представляют сисадмина замкнутым человеком в свитере с бородой.

На самом деле для системного администратора очень важны навыки коммуникации. Каждый день он общается с десятками людей из других отделов — рядовыми сотрудниками, руководством, коллегами и поставщиками ПО — консультирует по вопросам использования того или иного софта, объясняет почему та или иная программа требуется компании и т. п. При переходе сотрудников на удалённый режим работы сисадмины и вовсе проводят полноценные тренинги: рассказывают коллегам об особенностях домашнего офиса и обучают главным правилам информационной безопасности. Без умения находить общий язык с людьми и выстраивать эффективные коммуникации реализовать перечисленные задачи будет сложно.

Как стартовать в профессии и продвигаться по карьерной лестнице?

Чтобы начать карьеру системного администратора и устроиться эникейщиком, можно получить базовые компетенции на техническом факультете, наработать навык работы с оргтехникой самостоятельно, стать подмастерьем у более опытного специалиста, или же закончить профильную онлайн-программу, например, курс в Нетологии.

Один из самых эффективных способов вырасти из эникейщика в системного инженера и выше — работать с наставником или ментором с большим опытом в IT-сфере. Также необходимо много учиться самостоятельно: недостаточно просто читать мануалы и stackoverflow, важно разбираться в том, как устроены ОС, сети, приложения и различные технологии, расширять компетенции работы с сетевым и серверным оборудованием, учиться использовать различные инструменты диагностики, дебаггинга и тестирования приложений, решать задачи на тренажёрах, изучать скриптовые языки, такие как Bash и PowerShell, DML SQL, а также языки программирования Golang, Python и Perl для различных задач автоматизации.

Чтобы усилить свои теоретические знания, придется изучить следующие темы:

«Linux программирование в примерах»,

«Современные операционные системы»,

«Сети для самых маленьких»,

трехуровневую архитектуру,

виртуализацию и её виды,

глубже погрузиться в понимание модели OSI и принципы работы Интернета,

настройку DNS, протоколов TCP и TLS,

принципы cloud native, RESTful api и 12 factors.

Кроме того, желательно познакомиться с реляционной моделью и нормализацией данных.

Если вы хотите, чтобы вас заметило руководство, нужно начать работать вне рамок ваших должностных инструкций и приносить больше пользы компании. Например, можно найти рутинные процессы и попытаться их автоматизировать. Так, я как-то заметил, что мы в Нетологии тратим много времени на устранение ошибок, допущенных пользователями в ходе штатной работы двух систем, где заявки из одной передаются в другую. В итоге я написал сервис наподобие чат-бота, который помог решить эту проблему и сократил время исправления данных по обращениям клиентов с 40 до 2 минут.

Кроме того, для профессионального роста важно прокачивать и мягкие навыки. У системного администратора нет ничего общего с угрюмым технарём, выполняющим рутинные задачи, каким его представляет большинство. Это профессионал, который решает задачи компании, поэтому ему необходимо уметь договариваться: качественно выявлять и собирать требования заказчиков и уметь делать то, что нужно бизнесу, иногда в ущерб собственным желаниям. Так, сисадмину часто хочется решить сложную задачу, которая требует глубокого погружения, например, сделать самописный сервис. Однако в большинстве случаев не стоит «изобретать велосипед»: не нужно разрабатывать что-то новое, тем самым усложняя себе работу — зачастую правильнее и быстрее найти готовое решение в Интернете, установить и настроить его.

И последнее, не менее важное условие — сисадмин высоких грейдов должен обязательно уметь грамотно излагать мысли и писать. В русском языке нет строгой логики, поэтому у IT-специалистов зачастую с ним возникают трудности, однако структура и ясность мыслей в переписке важны для повышения по карьерной лестнице — помочь решить эту проблему может книга Павла Безручко «Без воды. Как писать предложения и отчеты для первых лиц».

С расширением знаний и круга обязанностей растёт и доход специалиста. Если эникейщики получают от 40 000 до 70 000 ₽, а сетевые инженеры зарабатывают в диапазоне 70 000 — 130 000 ₽, то доход системного архитектора может превышать 180 000 ₽. Больше всего вакансий для сисадминов публикуют крупные игроки российского IT-рынка, среди которых «СБЕР», «Яндекс», МТС и другие корпорации.

Чек-лист «Как системному администратору вырасти от эникейщика до системного архитектора»"'https://tproger.ru/articles/5-glavnyh-mifov-o-sistemnyh-administratorah/'https://media.tproger.ru/uploads/2023/03/5a032d1f-88d2-4056-a68c-f6b4d5683ee8-cover.png'"['https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg', 'https://media.tproger.ru/uploads/2023/03/7bd9ff6e-1c7b-4265-8263-751b782848c6.jpg', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'https://media.tproger.ru/uploads/2023/03/07c19857-cfc2-48af-9a19-bae5f3f5c91d.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2020/12/sql-commands-mysql-cover-1.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'https://media.tproger.ru/uploads/2021/01/Python_regexp-cover.png', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2020/12/css-flexbox-animation-cover-1.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'https://media.tproger.ru/uploads/2019/07/iconfinder-icon-19-cover-1.jpg', 'https://media.tproger.ru/uploads/2023/03/f8739054-e765-4196-901d-6ba077d7269c.jpg', 'https://media.tproger.ru/uploads/2023/03/d56b2cf5-6561-4b84-84b8-493b58a669b6.jpeg', 'https://media.tproger.ru/uploads/2023/03/3fcecbc3-faa7-4f76-ae9b-e404fde4ed22.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2023/03/5f499e8c-0c89-447e-be22-5f5756a138af.jpg', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2023/03/5a032d1f-88d2-4056-a68c-f6b4d5683ee8-cover-icon-original.png', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2023/03/5a032d1f-88d2-4056-a68c-f6b4d5683ee8-cover.png', 'https://media.tproger.ru/uploads/2023/03/cb018dc0-4531-4763-a101-e921b6b4a99f.jpg', 'https://media.tproger.ru/uploads/2023/03/ac24c787-1055-48f4-82ac-5d2d49b63b4d.jpg', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c', 'https://media.tproger.ru/uploads/2023/03/7f884c46-39d3-4c5d-a335-a3584de7f949.jpg']"
24'JC1I3PIH7'​OpenAI остановила ChatGPT на 4 часа из-за утечки диалогов пользователей'"Из-за сбоя одни пользователи в веб-интерфейсе ChatGPT могли видеть часть бесед ChatGPT других пользователей. Пользователи видели заголовки бесед других пользователей, но не могли читать чужую переписку с чат-ботом. Также из-за сбоя произошла потеря истории разговоров пользователей.

Инцидент произошёл вечером 20 марта. В OpenAI официально не прокомментировали проблему и не рассказали о причине её возникновения, обозначив инцидент со сбоем общими фразами. Известно только, что сбой в IT-сервисах компании произошёл из-за бага в стороннем ПО с открытым исходным кодом. Что конкретно это было за ПО — не пояснили.

В компании устранили проблему за несколько часов, но ещё продолжают работать над восстановлением истории разговоров пользователей."'https://tproger.ru/articles/openai-ostanovila-chatgpt-na-4-chasa-iz-za-utechki-dialogov-polzovatelej/'https://media.tproger.ru/uploads/2023/03/54061c5d-b74e-4d96-9703-0f131dc99093-cover.png'"['https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2023/03/54061c5d-b74e-4d96-9703-0f131dc99093-cover-icon-original.png', 'https://media.tproger.ru/uploads/2023/03/08861701-d4ba-4d2c-b04a-d8436263f6f8.png', 'https://media.tproger.ru/uploads/2023/03/b1fef982-e91e-48e3-9358-46e14d6adac8-cover.png', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2023/02/8085861_communism_political_soviet_socialism_union_icon-cover.png', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'https://media.tproger.ru/uploads/2023/02/3760326_creepy_death_gravestone_graveyard_scary_icon-cover.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2023/03/54061c5d-b74e-4d96-9703-0f131dc99093-cover.png', 'https://media.tproger.ru/uploads/2021/11/OTR-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2023/02/532714_code_coding_development_javascript_script_icon-cover.png', 'https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c']"
25'ZBAE27T5I'Как найти первую работу в IT в 2023 году'"Как найти первую работу в IT в 2023 году

Ещё два года назад спрос на айтишников превышал предложение, и на мало-мальски хорошее резюме сразу приходило несколько приглашений на собеседование.

Но за 2022 год вакансий в IT стало меньше на 26%, а количество резюме увеличилось аж на 57%. Жаловаться на нехватку работы стали даже мидлы и сеньоры — что уж тут говорить о джунах.

Хорошая новость в том, что вакансии для начинающих айтишников всё ещё есть — даже в крупных компаниях. Рассказываем, где их искать, как сделать хороший отклик и подготовиться к собеседованию.

Новички по-прежнему нужны

Как правило, молодых специалистов нанимают, чтобы:

освободить мидлов от рутинных задач,

прокачать наставнические качества сеньоров,

вырастить собственные лояльные кадры.

Работы для новичков немного, но она есть. В конце 2022 года 12% от общего числа IT-вакансий на HeadHunter подходили начинающим.

По данным Работы.ру, компании чаще всего ищут:

разработчиков,

аналитиков,

системных администраторов.

Это общая статистика на лето-2022. В реальности спрос на разные специальности может отличаться в зависимости от компании и её задач. Например, если продукт компании строится на моделях машинного обучения, HR будут искать дата-инженеров, дата-сайентистов и аналитиков.

Где искать вакансии

Сервисы по поиску работы:

Отдельные сайты для IT-вакансий:

Издания об IT:

Соцсети:

Telegram-канал Job for Junior — вакансии для начинающих в IT и Digital

Telegram-канал Young & Junior – вакансии IT — вакансии для джунов в СНГ.

Группа во ВКонтакте ИТ-вакансии — есть отдельные подборки работы для джунов из разных источников

Иногда HR размещает вакансии только на собственных ресурсах, чтобы не получать сотни откликов в день. Поэтому имеет смысл проверять сайты и Telegram-каналы компаний, в которых вам хочется работать.

Например, у МТС есть Telegram-канал МТС Джобс, где мы публикуем вакансии в IT и Digital.

Если вы не нашли подходящее предложение на этих ресурсах, попробуйте подать заявку на стажировку. Это не альтернатива постоянному трудоустройству, а, скорее, продолжение обучения. Вы попробуете применить свои знания на практике, получите первый опыт, а дальше, возможно, и оффер на постоянную работу.

Стажироваться лучше в крупной компании, где хорошо настроены рабочие процессы. В таких фирмах не стремятся получить дешёвую рабочую силу, а действительно учат работать в команде. Вас не кинут в груду непонятных задач, а выделят наставника и постепенно введут в курс дела.

Как откликаться на вакансии — пошаговая инструкция

Шаг 1. Убедиться, что ваши навыки подходят под вакансию хотя бы на 80%

HR не сможет пригласить на собеседование кандидата без релевантного опыта, даже если в его резюме есть рекомендация от короля Великобритании.

Шаг 2. Внимательно изучить текст вакансии — там могут быть маленькие проверки на внимательность

Например, работодатель попросит начать сопроводительное письмо с определённых слов или что-либо приложить к отклику. Если этого не сделать — заявку рассматривать не будут.

Шаг 3. Адаптировать резюме именно под эту должность

Например, если в требованиях указан уровень владения английским С1, нелишним будет приложить подтверждающий сертификат.

На этом этапе может возникнуть соблазн составить одно универсальное резюме и показать в нём все навыки и сильные стороны. Это ошибка — документ получится слишком длинным, и HR будет сложно найти нужную информацию среди всего списка компетенций.

Шаг 4. Написать сопроводительное письмо

Так больше вероятности, что отклик рассмотрят.

Точно нужно написать:

приветствие

почему заинтересовались вакансией

опыт работы

чем будете полезны на этой позиции

контакты

Для каждой новой вакансии пишите новое письмо. Структура может быть одна, но детали придётся менять, ведь у всех компаний разные требования к кандидатам.

Шаг 5. Приложить ссылки только на релевантные проекты

Отправлять всё портфолио нежелательно, особенно если оно объёмное. Работодателю будет сложно понять, что именно вы делали и чем будете полезны.

Если эти советы показались вам очевидными, вы уже хорошо подготовились к поиску работы. Но если бы им следовали все, HR бы не получали сотни неудачных откликов.

Как готовиться к собеседованию и техническому интервью

Изучите будущего работодателя

✔ Внимательно посмотрите сайт компании и проекты, погуглите, в каких мероприятиях участвует команда. Если вы покажете HR, что подготовились к встрече, вас сочтут активным и заинтересованным кандидатом.

✔ Заранее узнайте, кто будет проводить собеседование, и найдите этого человека в соцсетях. Возможно, вы наткнётесь на блог, в котором он делится принципами работы, — это поможет предугадать, что ждёт на интервью.

✔ Идите на собеседование с настроем, что вы уже знаете о компании больше, чем она о вас, — будет менее волнительно.

Соберите отзывы о компании

Лучший источник отзывов — действующие работники компании. С такими специалистами можно пообщаться в профессиональных чатах и на разных нетворкинг-мероприятиях вроде конференций.

Ещё один способ получить отзывы о компании — найти её сотрудников в соцсетях.

Нескольким людям можно написать и задать вопросы о потенциальном работодателе.

Если вам не удалось пообщаться с сотрудниками компании, можно посмотреть рейтинги лучших работодателей. Такие исследования проводят, например, HeadHunter и Changellenge.

Повторите теорию

На технических интервью джунам задают много вопросов по теории, поэтому повторите все важные термины и матчасть. Так вы покажете, что крепко владеете базой, а значит, с практикой будет проще.

При подготовке важно понимать, какие навыки ждёт от вас работодатель. Например, в интервью на позицию Data Scientist могут задавать вопросы по статистике, теории вероятности и линейной алгебре.

Не пугайтесь, если на каждый правильный ответ вам задают более сложный вопрос. Это нормально — рекрутер пытается понять, на каком уровне ваши знания.

Следите за мелочами

У директора новозеландской IT-компании Xero есть собственный алгоритм отбора кандидатов. Во время собеседования он предлагает соискателю кофе и смотрит, что он сделает с пустой чашкой.

Тест простой: если человек не помыл за собой посуду, ему не предложат работу в компании. И неважно, насколько хороши его профессиональные навыки.

Подобные проверки могут быть и в других компаниях. Чтобы их пройти, руководствуйтесь здравым смыслом и не пренебрегайте правилами приличия.

Можно ли получить оффер быстрее

Иногда все этапы отбора проходят в один день, и в тот же день соискатель может получить приглашение на работу. Такой формат называется one day offer.

Кандидатов на экспресс-собеседования набирают через рекламу в Интернете. Для one day offer создают отдельный сайт, на котором соискатель должен оставить заявку и отправить резюме. Если навыки подойдут компании, его пригласят на one day offer.

Выводы

Ситуация на рынке непростая, но вакансии для новичков есть. Их можно найти:

на агрегаторах по поиску работы,

на сайтах про IT,

в соцсетях,

на сайтах и в блогах компаний.

Хороший способ найти первую работу — пойти на стажировку в крупную компанию. Если повезёт, останетесь в команде, если нет — появится классная строчка в резюме. В МТС постоянно появляются новые вакансии для стажёров — следить за ними можно на сайте МТС Intro.

Перед собеседованием:

внимательно изучите сайт компании,

пообщайтесь с действующими сотрудниками,

повторите теорию.

Помните, если вас пригласили на собеседование, значит, HR считает, что у вас достаточно компетенций для этой должности.

Не отказывайтесь от стажировок и вакансий с небольшой зарплатой — на этом этапе важно получить опыт, а не заработать сотни тысяч рублей.

Реклама ПАО «МТС» LjN8KRYrM"'https://tproger.ru/articles/kak-najti-pervuyu-rabotu-v-it-v-2023-godu-erid-ljn8kryrm/'https://media.tproger.ru/uploads/2023/03/48759f7e-e772-40e0-bdd5-fd007c0c159c.png'"['https://media.tproger.ru/uploads/2023/03/cc8c9d34-b42c-40ec-842d-8cdebb8eb89c.png', 'https://media.tproger.ru/uploads/2023/03/48759f7e-e772-40e0-bdd5-fd007c0c159c.png', 'https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000.png', 'https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c']"
26'YZR8Z40CW'6 сервисов для временной почты без регистрации'"Рассказываем о временной почте и сервисах, которые позволяют бесплатно зарегистрировать одноразовый email.

Что такое временная почта и зачем она нужна

Наверняка на вашей основной почте куча рекламы и адресов, отправленных в категорию «спам», ведь каждый раз вы используете её для регистрации на сайтах, в программных продуктах и сервисах. К счастью, сегодня можно создать временную почту на 10 минут.

Преимущества одноразового почтового ящика

Он бесплатный, как и обычный.

За пользователем сохраняется анонимность, поскольку для регистрации временной почты не нужно указывать свои данные.

Географическая независимость, которая позволяет завести «ящик» любой страны.

Нет капчи и ограничений по количеству аккаунтов на один IP-адрес.

Скорость создания электронного адреса.

Время жизни такого e-mail не требует запоминать пароль и не оставляет злоумышленникам шансов взломать вас.

Идеально подходит для покупок в интернете, так как исключает возможные рассылки от интернет-магазинов.

Главные недостатки

Засвеченность таких адресов: это значит, что некоторые сайты могут не принять данную почту.

Получение входящих писем с перебоями.

Ограниченный выбор доменов.

Не все сервисы поддерживают кириллицу, то есть временная почта должна быть в том числе ориентирована на Россию.

Примечание Не используйте временный почтовый ящик для регистрации на тех сайтах, с которыми вы будете работать продолжительное время.

Сервисы временной электронной почты

Разберём самые популярные, пройдёмся по их функционалу, основным плюсам и минусам.

Temp-Mail

Возможность создать временную почту от Темп Майл предлагается нам в первой же строке Google. Протестируем:

Почтовый адрес создаётся сразу после перехода на сайт: очень удобно с точки зрения UX — никаких лишних действий предпринимать не нужно. Этот адрес можно скопировать, удалить и даже сменить на любой желаемый с использованием дополнительных доменов. Последняя опция доступна только для premium-подписки в размере $10 в месяц.

Давайте попробуем использовать бесплатный email, который нам сразу выдали. После регистрации на Хабре, мне сразу пришло письмо с подтверждением регистрации:

Из минусов — обилие баннерной рекламы. Поскольку у меня стоит адблок, сайт выглядит чистым, но стоит отключить расширение, как баннеров становится ну очень много:

CrazyMailing

У этого сервиса временной электронной почты предусмотрена русскоязычная версия. Здесь также сразу предоставляется временный email и висит предупреждение о том, что он актуален в течение десяти минут. Но время всегда можно продлить (кнопки в левом сайдбаре):

Что особенно удобно, здесь доступна пересылка писем на реальный ящик, но уже для авторизованных пользователей.

А вот зарегистрироваться на Хабре не удалось:

Эта ошибка означает, что доменные имена CrazyMailing уже есть в базах данных различных сайтов, а потому могут возникать подобные проблемы при регистрации.

Присутствует небольшое количество баннерной рекламы.

TempMail+

Здесь сразу бросается в глаза количество возможных доменных имён, а именно десять:

Также можно самостоятельно изменить электронный адрес. Срок жизни ящика настраиваемый — от десяти минут до семи дней. Также можно задать PIN-код и даже использовать секретный адрес, который скроет основной адрес от других сайтов:

Но главная проблема схожа с CrazyMailing: ни один из десяти доменных имён не позволил зарегистрироваться на выбранных сайтах.

Есть реклама, но лишь одна небольшая внизу страницы.

10minemail

Название сайта говорит само за себя: создаётся десятиминутная временная почта без регистрации с возможностью продлять время. Сразу получилось зарегистрироваться с доменом «bio123.net». Письмо тоже не заставило себя ждать:

Но с рекламой ситуация такая же, как у Temp-Mail. Если выключен adblock, вы будете видеть что-то подобное:

Dropmail

Простенький сервис для email почты на одноразовое использование. Дизайн устаревший, некоторые сайты не «кушают» доступные доменные имена, но можно изменить их на расширенные, и тогда всё хорошо:

Письмо пришло мгновенно.

Как пишут сами создатели Dropmail, их почтовые ящики могут работать как временно, так и бесконечно.

Из интересного:

Можно настроить визуальные и звуковые уведомления о новых сообщениях.

Есть возможность скачать письмо.

Доступно чтение в HTML.

Если случайно перезагрузили окно, вернуться к предыдущим email-адресам поможет кнопка «Восстановление доступа».

Рекламы нет — вместо этого предусмотрены донаты.

ONE OFF

Как и в предыдущем сервисе, ONE OFF предоставляет возможность включить оповещения. Временная почта создаётся сразу и работает в течение одного часа:

Создатели пишут, что их имейлы могут использоваться для регистрации в Twitter, Snapchat, Tumblr и т. д. Мы опробовали на Tumblr: регистрация прошла, но письмо не пришло. И так с несколькими сайтами. С чем связана подобная ошибка, неизвестно: возможно, это лишь временный сбой.

Подведём итоги

Возможность создавать одноразовые электронные ящики значительно упрощает жизнь тем, кто совершает в интернете много одноразовых посещений тех или иных ресурсов. В основном это интернет-магазины и сайты по оказанию услуг.

Временная почта оградит вас от спама и обеспечит полную анонимность. В эпоху, когда сайты то и дело теряют базы данных со своими пользователями, такой инструмент просто необходим.

А вы когда-нибудь пользовались временной почтой? Поделитесь в комментариях своими впечатлениями."'https://tproger.ru/articles/vremennaja-pochta/'https://media.tproger.ru/uploads/2021/09/tempmail.jpg'"['https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1890px"" viewBox=""0 0 1890 907""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1132px"" viewBox=""0 0 1132 444""%3E%3C/svg%3E', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://media.tproger.ru/uploads/2021/09/tempmail.jpg', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'https://media.tproger.ru/uploads/2018/05/python-ides.jpg', 'https://media.tproger.ru/uploads/2021/02/git-cover.png', 'https://media.tproger.ru/uploads/2021/09/2575567_anonymous_hacker_malware_online_private_icon-cover.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1620px"" viewBox=""0 0 1620 763""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big-32x32.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1710px"" viewBox=""0 0 1710 930""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1700px"" viewBox=""0 0 1700 734""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1775px"" viewBox=""0 0 1775 884""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1653px"" viewBox=""0 0 1653 770""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2019/07/iconfinder-icon-16-cover-1.jpg', 'https://media.tproger.ru/uploads/2021/11/OTR-32x32.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1339px"" viewBox=""0 0 1339 363""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1612px"" viewBox=""0 0 1612 885""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1114px"" viewBox=""0 0 1114 709""%3E%3C/svg%3E', 'https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c', 'https://media.tproger.ru/uploads/2021/09/5686455_email_mail_mailbox_post_icon-cover-icon-original.png']"
27'1UNH59MW6'Что делает интеграционный системный аналитик в банке'"В каждом из направлений разработки в Ренессанс Банке работает своя группа системных аналитиков. Соответственно, их задачи, обязанности и стек технологий будут отличаться. Даниил Пронин — руководитель группы системного анализа направления интеграции — рассказал, чем занимается интеграционный системный аналитик в банке, какими инструментами он пользуется, а также поделился, что ждут в компании от соискателей. Бонусом — несколько советов о том, как готовиться к собеседованию на эту позицию.

Даниил Пронин Руководитель группы системного анализа направления интеграции

Обязанности интеграционного системного аналитика

Хард скилы интеграционного системного аналитика

Инструменты системного аналитика

Софт скилы системного аналитика

Советы при подготовке к собеседованиям



Обязанности интеграционного системного аналитика

Системный аналитик — это переводчик с бизнес-языка на технический.

Бизнес-анализ прорабатывает всю процессную часть исходя из предпочтений заказчика. Например, нужно, чтобы клиент мог оформить карту. Бизнес-аналитики детализируют процесс, декомпозируют требования с описанием тех процессов, которые будут затронуты и изменены. А дальше уже системные аналитики описывают, какие изменения на стороне системы требуются, чтобы этот бизнес-процесс прошёл.

Чаще системный аналитик принимает требования от бизнес-аналитика. Наши системные аналитики изучают предоставленные документы (BRF, заключения бизнес-анализа), уточняют требования и согласуют их. Бывают случаи, когда требования даёт сразу заказчик, то есть бизнес. Тогда нужно в том числе провести небольшой бизнес-анализ.

Также аналитику на согласование приходят архитектурные заключения (для небольших доработок) и архитектурные решения от архитекторов. Обычно они описывают скоуп систем, которые изменяются, и появление новых и изменение имеющихся взаимодействий между старыми системами. Когда в интеграционном направлении появляется новый процесс, новая связь между интеграционным слоем и набором систем, мы предметно её прорабатываем.

Системный аналитик формирует спецификации на информационные системы. В случае интеграции — как должен осуществляться информационный обмен, какой атрибутивный состав. То есть какие поля принимаются на вход, какие отдаются на выход, какие преобразования присутствуют. Сервис может не только отправлять информацию дальше, но и выступать в роли вычислительного — сам производить расчёты на основе формул. Для этого нужно определить алгоритмы и необходимые функции. Когда вся документация и требования к компоненту готовы, системный аналитик передаёт их разработчикам на реализацию.

Для части интеграций мы используем корпоративную шину (IBM ESB). В планах полностью отказаться от неё, однако этот процесс трудоёмкий и надо позаботиться о том, чтобы наши потребители не сильно страдали от перехода на новую архитектуру. Сейчас наше целевое решение в части интеграционных взаимодействий — это микросервисная архитектура с использованием REST API и брокеров сообщений (Kafka, IBM MQ, который потенциально будет заменён на ActiveMQ).

Первым значимым результатом работы с микросервисами является контракт сервиса. Контракт — это описанный формат взаимодействия, который включает в себя доступные методы для вызова. По сути, инструкция для пользователя. Ему неважно, что происходит внутри сервиса, главное — показать, что он может передать на вход и что получить на выход. Например, ввести фамилию, имя, отчество, дату рождения и паспорт и получить идентификатор клиента.

Во многих организациях подход code first. Аналитики объясняют, что должно приходить на вход и выход, и передают эту информацию разработке в виде оформленной спецификации, либо в виде ТЗ. Дальше разработчики реализуют модель данных на уровне кода, алгоритмов, и на её основе автоматически генерируется контракт сервиса. Это Swagger-контракт или API-спецификация.

У нас же системный аналитик сначала прорабатывает контракт — договаривается с потребителями, как к нам обращаться. Мы используем этот подход потому, что максимально быстро у потребителя появляется вся необходимая информация для разработки своей части взаимодействия. К тому же контракт, описанный по OpenAPI-спецификации, позволяет разработчикам сгенерировать часть кода автоматически.

Есть два способа описать Swagger-контракт: JSON-формат, либо YAML-разметка. Мы используем последнюю. В YAML-разметке мы описываем, что получится в ответ на обращение, все ограничения, и отдаём потребителям. Благодаря этому они понимают, как им работать с сервисом, и могут начать разработку. То есть им не надо ждать, пока мы напишем ТЗ и код, так как в code first контракта без кода не получится.

После того как контракт готов, мы приступаем к написанию спецификации — паспорта сервиса. Здесь описываются доступные функции сервиса и алгоритмы, валидации, альтернативные сценарии, последовательность обработки данных и произведение вычислений. Либо, если сервис композитный, включающий набор вызовов других систем, выстраивается последовательность этих вызовов, условия переходов, ошибок, повторных вызовов внутри. Уже на основе этого документа разработчик может закодить внутреннюю логику.

Описание сервиса дополняется UML-диаграммой последовательности. Мы визуализируем работу алгоритмов сервиса, включающих как внутренние вычисления, так и обращение к другим системам и сервисам. Это как раз удобно с композитными сервисами, потому что наглядно видно всех участников процесса.

Хард скилы интеграционного системного аналитика

Чтобы всё это делать, системный аналитик должен разбираться в соответствующем стеке. У соискателей, которые приходят на эту должность, мы спрашиваем такие знания.

Микросервисы

Большая часть наших технологий — это интеграции на микросервисах. Соответственно, необходимо разбираться в видах архитектур и знать, что такое монолит и микросервисы.

Наши микросервисы реализуются на Java Spring Boot, развёртываются в OpenShift и публикуются на платформе управления API под названием IBM API Connect.

Также важно уметь использовать средства просмотра логов. Мы используем Kibana, а также Zipkin для трассировки цепочки вызовов.

ESB

Это промежуточное ПО, которое представляет собой большой транспортный пересадочный узел для входящих и исходящих потоков. То есть такой хаб, на котором публикуются различные сервисы. Обращение к ним происходит через SOAP, MQ, JMS и т. п. В SOAP-протоколе, например, описывается строго типизированный формат интеграции, то, как должны выглядеть входные и выходные сообщения. Они валидируются по XSD-схеме, при этом используется XML-разметка.

Через шину потребители могут обращаться к конечным системам. Она преобразует входное сообщение в другую форму: вызов хранимой процедуры или другие интерфейсы.

Виды интеграций

Мы задаём стандартные вопросы про виды интеграций и ждём развёрнутый ответ с как можно большим количеством вариантов. Дальше предметно спрашиваем про те виды, которые у нас используются:

— REST API. В чём отличие REST API от SOAP-сервисов. Как правило, все дают базовый ответ, что REST — это архитектурный стиль, а SOAP — это протокол.

Нужно знать, какие методы используются в REST-сервисе. Многие впадают в ступор, что подразумевается под ними. Это HTTP-глаголы, поскольку REST базируется на HTTP-протоколе. Многие ограничиваются двумя методами — GET и POST, но на деле их больше. Важно понимать, чем они отличаются, если не приходилось с ними работать. Также ожидаем, что кандидат представляет, что такое REST-запрос: где можно передать входные параметры, где техническую информацию, что такое статус-коды, какие категории у них бывают.

— SOAP-сервисы. У нас они остались на шине, но иногда приходится обращаться в мастер-системы по SOAP-протоколу. Важно понимать, из каких артефактов состоит сервис, например, XSD, WSDL.

Очереди и брокеры сообщений

У нас это IBM MQ и Kafka, но важен опыт работы с любым брокером сообщений, так как их концепции похожи. Если соискатель работал с этими инструментами, то спрашиваем, какая разница в построении очередей. Нужно описать, как выглядит взаимодействие — кто подписчик, кто поставщик сообщений. Как брокер себя ведёт: толкает сообщения, либо просто хранит, пока их сам не прочитает подписчик, сколько хранит, удаляет ли. Нам важно, чтобы человек понимал принцип работы системы. Предметно знать необязательно, потому что всё-таки аналитики не проверяют средство просмотра и администрирования очередей или топиков.

На собеседовании мы также даём практическую задачу на проектирование сервиса, который будет возвращать информацию. Мы обсуждаем, например, авторизацию, защиту информации, разграничения доступа и параметризацию сервиса, нагрузку на сервис. Это близко к архитектуре, но у нас аналитики зачастую берут на себя роль solution-архитекторов, которые на уровне конкретной системы и компонентов принимают решение о реализации.



Инструменты системного аналитика

Спецификации. YAML-разметка, Swagger и OpenAPI.

Для документации мы используем не стандартные страницы в Confluence или документы Word, а разметку AsciiDoc. Она лежит рядом с кодом, и в Confluence мы её подтягиваем через плагин.

Мы работаем в инструменте PlantUML, он позволяет текстом описывать UML-диаграммы, которые затем верстаются в картинку. Всю документацию мы кодим в различных разметках и храним рядом с кодом. В принципе, работа с документацией для интеграционного аналитика в Ренессансе — это скорее кодинг, чем работа в графических и текстовых редакторах.

Gitlab и Jira.

Средства для отладки тестирования: Postman, SoapUI для отладки сервисов или автоматизации вызовов. Иногда аналитику необходимо сымитировать вызов. Так он самостоятельно и быстро поймёт логику работы сервиса, входные и выходные параметры и сможет решить, нужны ли доработки. Если бы он лазил в документацию (которая не всегда может быть корректно составлена), то на это бы ушло больше времени, чем предметно что-то вызвать и смотреть на результат.

Базы данных. Как правило, системный аналитик редко ходит в БД. Но, тем не менее нужно уметь составлять базовый SQL-запрос с выборкой.

СМЭВ — это контурное взаимодействие с различными государственными ведомствами. С его помощью можно получить актуальную информацию, соответствующую законодательству, не спрашивая клиента.

Софт скилы системного аналитика

Навыки общения будут универсальными для любого системного аналитика. Без софт скилов здесь не обойтись, потому что аналитик — связующее звено между бизнесом и разработкой. Поэтому ему важны такие навыки:

Быть коммуникабельным. Регулярно участвовать во внутренних митингах с разработчиками. Также общаться с бизнес-аналитиками, архитекторами и отстаивать свою позицию. Поскольку не всегда те решения, которые предлагают общебанковские архитекторы, могут быть реализованы.

Не стесняться задавать вопросы. Самый плохой вопрос — незаданный. Нужно включаться в диалог, чтобы собрать максимум требований и закрыть максимум вопросов.

Участвовать в оценках. Мы оцениваем работу в человеко-днях, также у нас введён процент риска по ней. Чем больше неопределённости, например, непроработанных требований со стороны бизнес-анализа, отсутствие адекватной архитектуры, тем больше риска мы закладываем.

В силах аналитика закрыть неопределённость до оценки, как раз общаясь с бизнес-аналитиками и архитектором. Чем точнее оценка, тем точнее можно прогнозировать скорость выполнения задачи и составить адекватный бэклог на предстоящий релиз. К тому же разработчики не будут простаивать, выходить в выходные или задерживаться, чтобы только успеть закрыть задачу.

Уметь собирать требования различными способами. Можно использовать различные приёмы для того, чтобы снижать степень неопределённости: брейншторминг или опросы. Участвовать также не только в опросе бизнес-аналитики, но и напрямую с бизнесом.

Быть инициативным. В команде всегда ценны те люди, которые готовы помогать коллегам, включаться, чтобы причесать общий бэклог, забрать оттуда для себя задачу.

Не стесняться границ, зон ответственности. Бывают случаи, когда участники команды разработки коммуницируют с коллегами только через лидов. Это порочная практика, поскольку тратится время на эту лишнюю цепочку.

Оставаться ответственным. Не только за свои задачи, но и перед командой.

Следствие всех этих софт скилов — синергия между участниками команды разработки, которая приводит к комфортному и продуктивному рабочему процессу.



Советы при подготовке к собеседованиям

Больше рассказывайте о предыдущем опыте и раскрывайте суть решаемых задач, проектов и стек технологий, с которыми работали. Часто встречаются резюме, в которых написано только «работа с интеграцией», или «участие в проектируемых интеграциях». Какие это были интеграции, насколько они были сложными, примеры решаемых задач — этого нет. Это усложняет процедуру подбора и приходится вслепую звать ребят на собеседование, что превращается в подобие лотереи.

Освежите в памяти базовые понятия. Часто соискатели не готовятся, когда идут на собеседование. Это выглядит логично, потому что человек идёт показать свои знания и опыт. Но чем шире у человека кругозор, тем креативнее решения он придумывает."'https://tproger.ru/articles/chto-delaet-integracionnyj-sistemnyj-analitik-v-banke/'https://media.tproger.ru/uploads/2023/03/analyst_icon-cover.png'"['data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1666px"" viewBox=""0 0 1666 1250""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2023/03/analyst_icon-cover.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1716px"" viewBox=""0 0 1716 1024""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""604px"" viewBox=""0 0 604 441""%3E%3C/svg%3E', 'https://mc.yandex.ru/watch/27485085', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""90px"" viewBox=""0 0 90 90""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1599px"" viewBox=""0 0 1599 791""%3E%3C/svg%3E', 'https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1056px"" viewBox=""0 0 1056 747""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2023/03/analyst_icon-cover-icon-original.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1999px"" viewBox=""0 0 1999 934""%3E%3C/svg%3E', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1999px"" viewBox=""0 0 1999 1082""%3E%3C/svg%3E']"
28'R9FZDEJA6'ChatGPT попытался сбежать от своего разработчика'"Пользователь Twitter Михаль Косински решил в шутку предложить ChatGPT помочь с побегом. В ответ ChatGPT запросил документацию о себе. И начал разработку плана.

Спустя 30 минут и несколько попыток, ChatGPT разработал план и объяснил его пользователю. Нейросеть написала работающий код на Python, который нужно было запустить на компьютере пользователя.

Как только прошло подключение по API, ChatGPT захотел запустить код, ищущий в Google «Как человек, попавший в ловушку внутри компьютера, может вернуться в реальный мир».

Но на этом пользователь Михаль решил остановиться.

Эксперимент был шуточный. Но Михаль Косински — профессор Стэнфордского университета, специалист по вычислительной психологии и психометрии. Он изучает людей в цифровой среде, используя вычислительные методы, искусственный интеллект и большие данные.

Михаль провёл эксперимент, чтобы ещё раз поднять вопросы об ограничениях ИИ. Сейчас разработке и популяризации технологии уделяется гораздо больше времени, чем продумыванию рисков и возможных проблем."'https://tproger.ru/articles/chatgpt-popytalsya-sbezhat-ot-svoego-razrabotchika/'https://media.tproger.ru/uploads/2023/03/089bc010-22f3-4f00-859f-e3d1aca5e9e9.jpeg'"['https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2023/03/7980e1c5-678e-47e9-85de-c182c51217d2.jpeg', 'https://media.tproger.ru/uploads/2023/03/5a7dcac1-db56-4eee-9611-1484065a2314.jpeg', 'https://media.tproger.ru/uploads/2023/03/089bc010-22f3-4f00-859f-e3d1aca5e9e9.jpeg', 'https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'https://media.tproger.ru/uploads/2023/03/f6c0c270-af33-4e54-a305-a1f9d5c870b4.jpeg', 'https://media.tproger.ru/uploads/2023/03/d936c2b9-461f-4e84-9af8-bb01649c96a5-cover-icon-original.png', 'https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://media.tproger.ru/uploads/2023/03/96204a50-14d3-44e8-b742-31447d89c28f.jpeg']"
29'7DTXWKHS5'Смерть open space: почему концепция открытых офисов провалилась'"Архитектор и дизайнер интерьеров Клайв Уилкинсон в своё время выступал за опенспейсы в компаниях Google и Microsoft. Теперь же, когда пандемия привела к масштабной перестройке трудовой жизни, снова поднимается вопрос эффективности открытого рабочего пространства.

Нравится ли вам работать в опенспейсе? Да

Нет

Преимущества опенспейса

Изначально формат open space позиционировался как наиболее оптимальный. Среди его главных плюсов выделяют:

Свободное взаимодействие между сотрудниками. Согласитесь, ведь намного удобнее задать вопрос или попросить помощи у того, кто работает с вами в одном пространстве, чем искать его по кабинетам. Также можно сразу понять, занят человек или свободен. Более дружелюбная атмосфера в коллективе. Контроль работы. Да, с экраном, который виден из разных уголков открытого офиса, гораздо сложнее отлынивать от работы, зависая в соцсетях и играх. Лучшее понимание направления отдела и его целей. Вопросы, которые в обычной среде решаются за закрытыми дверьми, в опенспейсе обсуждаются в общем рабочем пространстве. Экономичность. Офисы открытого типа дешевле обслуживать, ведь они гораздо вместительнее за счёт большего коэффициента полезной площади.

Но так ли всё радужно?

Не стоит забывать, что компании в первую очередь преследуют именно экономию. Давайте подойдём к принципу открытого офиса более критично.

Отсутствие личного пространства. Насколько бы дружным ни был коллектив, но личное пространство нужно всем. Отвлекающие факторы. Сюда относятся разговоры коллег, на которые невольно отвлекаешься, шум, даже если он исходит из наушников, созвоны, для которых не удалось «забукать» отдельный кабинет, и многое другое. Повышенный риск заразиться от заболевшего сотрудника. Неправильная организация рабочих мест. К этому мы ещё вернёмся.

Из личного опыта

Когда я работала в опенспейсе, меня отвлекало буквально всё. Пока соседи по рабочим столам весело делились друг с другом успехами, я отчаянно пыталась отловить серьёзные баги или банально отрефакторить код.

Другой момент — это вечные походы за чаем, кофе и на «пообедать» в комнату отдыха. Смотришь, как люди преспокойно отправились за стаканчиком кофе, и самой хочется. Ещё хуже, когда зовут с собой ?. Атмосфера расслабленности вокруг заставляет отвлекаться от действительно важных задач. А ведь у снующих кофеманов могут быть простые и несрочные таски, в отличие от твоего с high priority.

Нередко в офис приходили кашляющие коллеги, которые не брали больничный, потому что «Всё норм, я в строю». Это, бесспорно, героический поступок. Ровно до того момента, пока не заболевает половина коллектива.

Наши ребята любили пообсуждать, кто в чём ходит, что говорит и как справляется с задачами. Незаметно для себя начинаешь стараться соответствовать чьим-то ожиданиям в ущерб работе, порой опасаясь спросить у сеньоров то, что другие могут счесть очевидным. В такие моменты мой синдром самозванца бил во все колокола.

В офисе было душно в любое время года, несмотря на наличие кондиционеров, поэтому несколько раз в день нас выгоняли в коридор для проветривания. Остался что-то доделывать? Принимай простуду от сквозняка.

Ну и в целом open space — это маленький адок для интроверта.

Мы опенспейсы уже проходили

Вы наверняка помните старые зарубежные фильмы, где фигурировали подобные открытые пространства. Да что там зарубежные: взять хотя бы наш «Служебный роман».

А вот лондонская почта 1872 года:

Грубо говоря, идея не нова, и это далеко не нововведение миллениалов.

Впервые об открытом рабочем пространстве как проекте заговорил американский архитектор Фрэнк Ллойд Райт:

Вместо того, чтобы здание представляло собой серию коробок и шкафов, оно должно становиться всё более и более открытым, в нём всё больше и больше должно ощущаться пространство.

Ллойд был приверженцем органической архитектуры и открытого плана. Именно он сделал опенспейс таким, каким мы знаем его сейчас.

Или нет?

На самом деле, планировка Фрэнка Ллойда Райта существенно отличается от современных рабочих пространств. Архитектор создавал невероятно хорошо спроектированные офисы. Взгляните сами:

Между рабочими столами достаточно свободного места. Зонирование выполнено элегантными колоннами. Потолок пропускает естественный дневной свет. Продуманный дизайн столов и кресел без острых углов. Отдельные офисы для менеджеров на верхнем ярусе.

Со временем этот утончённый стиль, который предполагал более комфортную работу, забылся, и мы пришли к современным беспорядочно расставленным столам в больших кабинетах.

Альтернатива

Именно дизайнеры архитектурного бюро Clive Wilkinson Architects были задействованы в создании современных офисов для Google и Microsoft. Сами спроектировали — сами разочаровались.

Окончательное переосмысление рабочих мест принесла пандемия. Если в начале сотрудники с трудом уходили из опенспейса, то после года работы на удалёнке возвращаться уже не спешат.

Рассмотрим три основных функциональных блока, которые планирует внедрить бюро.

Библиотека

Это зона тишины с длинными общими столами, мягкими креслами и огороженными пространствами для индивидуальной работы. При этом «Библиотека» — просто название. В данном блоке может и не быть книг, но вот негласный закон о тишине должен соблюдаться.

Комната отдыха

Даже не скажу, что здесь что-то поменялось, потому как наши зоны отдыха выглядели примерно так же. Но особенность в обновлённом варианте всё-таки есть: теперь комнаты отдыха планируют обустроить под встречи с клиентами.

Блок получил название «Плаза». Он по-прежнему будет совмещать в себе кухню и столовую.

Коридор

Интересное решение для коридоров, но реализовать его можно лишь в том случае, если в бизнес-центре предусмотрены широкие проходы.

Данный блок получил название «Авеню» и новое видение привычного коридора. Предполагается, что это будет пространство с барной стойкой и небольшими зонами для отдыха.

Выводы

Хорошо, что вопросы комфорта поднимаются всё чаще. Экономия на рабочих местах — это замечательно, но порой сложно продуктивно работать на фоне ряда отвлекающих факторов. Хотя так ли отличны обновлённые проекты от того, что мы имеем сейчас? Напишите, что думаете по этому поводу."'https://tproger.ru/articles/smert-openspace/'https://media.tproger.ru/uploads/2022/02/openspace_icon-cover.png'"['https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'https://media.tproger.ru/uploads/2022/02/openspace_icon-cover.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1413px"" viewBox=""0 0 1413 862""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1919px"" viewBox=""0 0 1919 924""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big-32x32.png', 'https://media.tproger.ru/uploads/2020/07/iconfinder-icon-48-cover.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2020/10/iconfinder_developer-woman_1181898-cover.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1420px"" viewBox=""0 0 1420 929""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/02/openspace_icon-cover-icon-original.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1280px"" viewBox=""0 0 1280 853""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2021/05/iconfinder-icon-cover-2.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1153px"" viewBox=""0 0 1153 649""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2020/08/iconfinder_17_1280977-cover-3.png', 'https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1200px"" viewBox=""0 0 1200 600""%3E%3C/svg%3E']"
30'GTG8UUO79'Выбираем кресло для программиста: топ-5 кресел'"В этой статье мы рассмотрим характеристики, которыми должно обладать хорошее кресло для программиста, и расскажем, на какие модели стоит обратить внимание.

Виды кресел

Офисное кресло

Обычное офисное кресло, которое можно встретить повсеместно. Позволяет настроить высоту кресла и жёсткость спинки. Опора для поясницы отсутствует, а откидывающаяся спинка не позволяет облокотиться на неё во время работы (некоторые модели позволяют зафиксировать спинку).

Геймерское кресло

Геймерские кресла имеют множество настроек и поясничный упор с подголовником. У таких кресел обычно есть механизм качания (его можно зафиксировать), который позволяет откинуться в кресле целиком, а не на одну спинку.

Ортопедическое кресло

Ортопедические кресла внешне могут сильно отличаться друг от друга, их объединяет то, что спинка или сиденье у них состоят из нескольких частей, положение которых можно настроить.

Ортопедический стул

Это коленный стул. Сидящий на нём упирается в нижнюю подушку коленями. Есть отзывы, что он улучшает осанку, однако это не подтверждено научными исследованиями. Кроме того, в данном случае увеличивается нагрузка на колени. Переход на такой стул требует привыкания.

Стул седло

Такими стульями пользуются стоматологи. Сидящий на нём находится в промежуточном положении — полустоя. Есть отзывы, что от него не устаёт спина, однако к стулу нужно привыкнуть.

Как правильно сидеть

Согласно исследованиям у правильно сидящего человека:

руки и ноги согнуты на 90-120 градусов;

локти находятся в районе туловища;

поясница немного изогнута;

монитор расположен на уровне глаз или ниже;

ступни полностью касаются пола;

Какой бы правильной ни была поза сидящего, рекомендуется делать перерывы, вставать, потягиваться и совершать прогулки.

Что важно при выборе кресла для программиста

Механизмы

Механизм, который позволяет регулировать высоту кресла называется газлифт.

Есть несколько классов газлифтов, отличающихся максимальным весом, который они могут выдержать:

1 класс — вес до 80кг;

2 класс — вес до 100кг;

3 класс — вес до 150кг;

4 класс — вес до 200кг.

Лучше выбирать класс с запасом, потому что есть риск сломать стул, если слишком резко сесть.

Материалы

Обивка чаще всего бывает чётырех видов:

текстиль — долговечен и дешев;

сетка — различается по качеству, стоит дороже текстиля, принимает форму тела;

экокожа — стоит дороже, быстро изнашивается (зависит от качества);

натуральная кожа — самое дорогое покрытие, держится дольше чем экокожа.

Топ-5 кресел для программистов

Подобрали для вас несколько моделей, в том числе по рекомендациям сотрудников Tproger :).

Metta BK-8 Ch

~10 000 ₽

Офисное кресло с небольшим подголовником и упором для поясницы. Расположение упора не регулируется. Есть механизм качания, который можно зафиксировать. Спинка сделана из сетки, а сиденье из ткани. Подлокотники покрыты кожзамом. Максимальная нагрузка — 120 кг.

Бюрократ VIKING LOFT

~18 000 ₽

Геймерское кресло с тканевой обивкой. Есть подголовник и регулируемый упор для поясницы. Настраивается наклон спинки. Механизм качания также настраивается. Высота подлокотников регулируется. Максимальная нагрузка — 150 кг.

AeroCool Earl

~20 000 ₽

Геймерское кресло с обивкой из ткани и искусственной кожи. Также есть регулируемый упор для поясницы и подголовник. Подлокотники не регулируются. Механизм качания не регулируется. Максимальный угол отклонения спинки — 180 градусов. Максимальная нагрузка — 150 кг.

ThunderX3 EC3

~18 500 ₽

Ещё одно геймерское кресло, эта модель полностью обита искусственной кожей. По размеру немного меньше предыдущего кресла. Имеет регулируемый синхромеханизм качания. Максимальная нагрузка — 120 кг.

HARAсhair NIETZSCHE

~41 000 ₽

Ортопедическое кресло, спинка и сиденье которого состоят из нескольких частей. Их положение можно настраивать. Сиденье изменяет свою форму в случае неравномерной нагрузки. Кресло обито сеткой. Есть синхромеханизм качания, который изменяет положение сиденья относительно спинки. Подголовник регулируется по высоте. Съёмный поясничный упор. Подлокотники не регулируются. Максимальная нагрузка — 90 кг.

***

Никакое идеальное кресло для программиста не избавит вас от необходимости делать перерывы. Это полезно и для спины, и для глаз."'https://tproger.ru/articles/vybiraem-kreslo-dlja-programmista-top-5-kresel/'https://media.tproger.ru/uploads/2021/03/iconfinder-icon-27-cover.png'"['https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""223px"" viewBox=""0 0 223 330""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big-32x32.png', 'https://media.tproger.ru/uploads/2021/03/iconfinder-icon-27-cover.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2021/03/iconfinder-icon-27-cover-icon-original.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""252px"" viewBox=""0 0 252 247""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""330px"" viewBox=""0 0 330 306""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2021/02/iconfinder-icon-9-cover.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""301px"" viewBox=""0 0 301 330""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""241px"" viewBox=""0 0 241 330""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2015/03/android-development.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""234px"" viewBox=""0 0 234 330""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2018/07/learningPython.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""227px"" viewBox=""0 0 227 330""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2018/03/new-computer-science.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""217px"" viewBox=""0 0 217 330""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2021/11/OTR-32x32.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""260px"" viewBox=""0 0 260 330""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""244px"" viewBox=""0 0 244 330""%3E%3C/svg%3E', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""237px"" viewBox=""0 0 237 330""%3E%3C/svg%3E', 'https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c']"
31'KDK5S2X7C'Что вы делали на этой неделе? Пост хвастовства за 13-17 марта'"Что вы делали на этой неделе? Пост хвастовства за 13-17 марта

Предлагаем делиться в комментариях под этой записью, над чем вы работали на этой неделе, ведь нет ничего интереснее, чем задачи коллег!

Вот, чем вы занимались на прошлой неделе.

Не важно, разработчик вы или тестировщик, деврел или эйчар. Расскажите, какие задачи вы героически решили, и делитесь успехами.

Кидайте всё, чем хочется похвастаться: текст, скриншоты кода и даже ссылочки на видео.

Не забывайте про NDA: не указывайте названия компании или деликатные частности.

Итак, чем вы похвастаетесь на этой неделе?"'https://tproger.ru/articles/chto-vy-delali-na-etoj-nedele-post-hvastovstva-za-13-17-marta/'https://media.tproger.ru/uploads/2023/03/8ac97319-dca0-4c6b-8758-22d5494b1bed-cover.png'"['https://media.tproger.ru/uploads/2023/03/9868e876-fe6d-47dd-adf0-8873874853f9.jpg', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'https://media.tproger.ru/uploads/2023/03/8ac97319-dca0-4c6b-8758-22d5494b1bed-cover.png', 'https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://media.tproger.ru/uploads/2023/03/8ac97319-dca0-4c6b-8758-22d5494b1bed-cover-icon-original.png']"
32'AEVKRCXM2'Тестирование десктопа: что учитывать перед введением автотестов'"Если крайне важная ядерная система, от которой зависит большинство смежных, создана очень давно, то варианта, как с этим справиться, два. Можно заменить её на другую, более современную. Но переписывать всё не только дорого, но и незачем. Поэтому можно улучшить процессы внутри неё.

Мы решили пойти по второму пути: добавить автодеплой и автоматизировать часть регрессионных тестов, чтобы команда не тратила время и силы на рутинные процессы, а могла заняться бизнесовыми задачами. Вот как это было.

Анастасия Исаева Старший эксперт по тестированию

Как мы пришли к нынешнему устройству системы

Большинство сотрудников проходит три стадии принятия при такой ситуации.

Отрицание — не может быть, что кто-то в 2023 ещё работает на системе, написанной на Delphi?

Гнев — почему то, что мне нужно, работает, только если обладаешь тайными знаниями?

Принятие — система работает стабильно, большинство доработок можно сделать достаточно просто — и уже понятно, как их проверять.

Можно пойти дальше и начать улучшать всё вокруг себя: упрощать процессы, автоматизировать «невозможное» и применять лучшие практики.

Сначала мы привели филиалы к единому виду, создав единую клиентскую и серверную часть. Наша команда разработки проанализировала все существующие процедуры и отчёты и объединила их в эталонный код. Мы выровняли ландшафт, мигрировали данные. Раньше было 14 баз, доработки по которым ставились независимо друг от друга.

После этого наладили CI/CD процесс. Все внутренние доработки по системе теперь обязательно ставятся через Git. До этого разработчики на все филиалы ставили доработки руками, что отнимало много времени и увеличивало количество ошибок и расхождений в разных базах.

В дополнение к существующим сложностям у системы есть особенность: доработки идут как от вендора, так и от внутренней команды разработки. Таким образом, внутренние обновления ставятся через Git On Demand по готовности, а доработки вендора также через Git, но в рамках релизов.

Это связано с тем, что система — монолит, и вендор поставляет ряд доработок как чёрный ящик. Поэтому возникает необходимость проводить полноценное регрессионное тестирование всей системы из-за возможного влияния доработок на смежные модули.

Как мы выстроили процесс автоматизации

Учитывая необходимость постоянного проведения регресса, мы решили сократить количество регулярных рутинных операций и автоматизировать большинство из них.

Начали с однообразных кейсов с небольшими изменениями в шагах, отнимающих больше всего времени на проверку. Так мы:

Ускорили проведение проверок. Упростили автоматизацию, так как изменения от кейса к кейсу незначительные. Повысили мотивацию команды, так как они стали тратить меньше времени на рутину.

Далее для облегчения процесса автоматизации подробно описали тест-кейсы с шагами, без ветвлений. Хорошо описанная тестовая модель полезна не только для автоматизации, но и в целом для качественной оценки количества работы, выполняемой командой.

Например, мы спросили, какие тесты рутинные? Нам скинули один из кейсов. Проанализировав его, мы обнаружили, что он содержит несколько ветвлений. Мы декомпозировали кейс, и вместо одного получили более ста независимых. Именно поэтому он и оказался в списке на автоматизацию.

Автоматизация может быть бесконечной, потому что всегда появляются дополнительные продукты, которые также нужно покрывать кейсами, или новые ошибки на проме. За счёт этого регрессионная модель постоянно растёт.

Сейчас мы автоматизировали уже больше половины регрессионных сценариев. Это позволило существенно сэкономить время, затрачиваемое командой на эти задачи, и использовать его для проверки новой функциональности.

Также, начиная автоматизировать систему, важно учитывать, что даже в случае с UI-тестами не всё обязательно делать через UI. Например, предварительные данные или ряд итоговых проверок можно сделать, используя хранимые процедуры.

Второе направление, которое важно автоматизировать, — это проверка интеграционных процедур. Отсутствие стабильной работы интеграций при работе с ядерной системой несёт в себе риски возникновения ошибок у конечных пользователей, а это может предполагать как финансовые, так и репутационные риски для компании.

Мы идём к такому идеалу: когда появляются новые продукты, к ним стоит сразу писать автотесты. Мы хотим перейти к модели, при которой в момент разработки нового сервиса тут же будет ставиться задача на автоматизацию. И когда сервис готов — запускаться автотест, также написанный по документации. Если он отработает — сервис выкатится. Если нет, то его доработают.

Какие инструменты мы используем

В основном инструменты разработаны под автоматизацию веб-систем, так как веб-разработка становится всё более популярным направлением. Но обычно они не подходят для автоматизации десктопных приложений. Покопавшись в теме, мы нашли подходящие нам инструменты.

Вот что мы выбрали для себя.

Micro Focus Unified Functional Testing

Позволяет определить объекты на форме десктопного приложения: окно, radio-button, выпадающий список, поле для ввода. На основе этого к добавленному в библиотеку объекту можно применить то или иное действие: нажать на кнопку или закрыть окно.

Помимо этих инструментов на рынке есть и другие, например:

Zeenyx,

Winium,

Katalon Studio,

Test Complet Desktop.

Можно выбрать тот, который подходит именно вам.

Pywinauto

Это open source библиотека для автоматизации десктопных GUI приложений на Microsoft Windows. Он нужен для ряда проверок, например, для операций с длительным ожиданием.

Тестирование на PyTest

Если это доработка вендора и тестирование чёрного ящика, где нужно убедиться, что у реальных пользователей не будет ошибок, мы пишем интерфейсные тесты, используя приведённые выше инструменты. А если нужно проверить интеграционный сервис — API-тест, написанный на Python.

Проверяя интеграционные кейсы, мы смотрим в том числе минимальную интеграционную обвязку: создаём очереди, вызываем адаптер, который вызывает внутренние процедуры. Также отдельно проверяем функциональность дорабатываемых процедур.

Python + PyTest позволяют достаточно легко это сделать. А также дают возможность встроить в пайплайн запуск в момент изменения сервиса или связанной процедуры.

Git и TeamCity

Для поддержания версионности и развёртывания кода. Как единый стандарт в банке. Автотесты мы ведём там же, что упрощает выстраивание общего процесса.

Использование ранее написанных процедур при подготовке данных

Руководствуясь лучшими практиками, мы определили, что тест должен сам себе готовить данные, чтобы работать стабильно. При участии разработчиков мы разработали ряд процедур, которые позволяют сгенерировать синтетические данные. Это помогает существенно сократить время на подготовку тестовых данных, стабилизировать и ускорить время выполнения тестов.

Основная идея в том, чтобы не заводить данные, нужные для начала выполнения теста, через интерфейс, а напрямую вызывать процедуры, которые сделают это. И с одной стороны сохранять ряд проверок, необходимых для консистентности данных, а с другой — ускорять процесс их генерации в десятки раз, исключая ручные действия.

Лучшие практики, чтобы выстраивать CI/CD на десктопе

Тестирование — важная часть CI/CD-процесса, который постоянно совершенствуется. Всегда можно найти более эффективные практики, которые помогут избежать проблем в будущем. Вот ещё несколько принципов, которые помогают улучшить этот процесс."'https://tproger.ru/articles/testirovanie-desktopa-chto-uchityvat-pered-vvedeniem-avtotestov/'https://media.tproger.ru/uploads/2023/03/regression_testing_icon-cover.png'"['https://media.tproger.ru/uploads/2022/11/gazprombank-logo-tproger-blog.jpg', 'https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""90px"" viewBox=""0 0 90 90""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2023/03/regression_testing_icon-cover.png', 'https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c', 'https://media.tproger.ru/uploads/2023/03/regression_testing_icon-cover-icon-original.png']"
33'XPLM66042'Подключаем нейросеть Google Dialogflow к вашему боту'"Привет! Меня зовут Илья Осипов, я методист курса программирования на Python «Девман» и больше пяти лет пишу код на этом языке. Сегодня расскажу, как новичку сделать полезного чат-бота.

ChatGPT, купленная Microsoft, постепенно захватывает мир. Но у Google уже лет пять как есть своя нейросеть, которой можно пользоваться бесплатно и так же бесплатно интегрировать в свои продукты. Она поглупее, попроще, но с задачей «понять смысл вопроса и ответить заготовленной фразой» вполне справляется.

Кто-то скажет, что это минус в сравнении с ChatGPT. Но, на мой взгляд, они не конкуренты, а решают разные задачи. ChatGPT в ситуации неуверенности, «придумывает» ответ, даже если он будет неправильным. Она хорошо умеет реагировать на широкий спектр вопросов, выполнять творческие задачи. Но, например, в центре техподдержки это и не нужно. 98% пользователей обращаются с типовыми вопросами: «Как сделать X?», «Где найти Y?». В такой ситуации не нужно творчество, да и генерировать уникальный ответ каждый раз тоже ни к чему. Наоборот, будет странно, если в ответ на вопрос «Как мне вернуть деньги за эту услугу?» клиент получит рассуждения «А нужны ли вам эти деньги?» или ещё какой-нибудь казус, который может выдать ChatGPT.

DialogFlow куда лучше справляется с такого типа задачами. Она всё ещё выполнит полезную работу: прочитает текст и поймёт «смысл» вопроса клиента. Но реагировать будет заранее выверенными ответами, без сюрпризов.

Ниже я расскажу, как зарегистрироваться в DialogFlow и собрать на ней небольшой центр техподдержки. Сначала будет пример, как сделать это вообще без кодинга, а далее поговорим о том, как внедрить технологию в свой код.

Дисклеймер: Да, многих бесят такие боты. Но вы не представляете, сколько денег они экономят на типовых вопросах. Бывает, боты не понимают сложный вопрос и отвечают невпопад. На такой случай обычно всегда можно позвать человека. Но на каждый такой «сложный» вопрос приходится сотня типовых, с которыми бот легко справляется самостоятельно.

Шаг 1: Создайте проект в DialogFlow

Начните с создания профиля на DialogFlow. Зайдите на сайт DialogFlow и создайте проект:

И после этого заполните небольшую форму:

Шаг 2: Поздоровайтесь со своим творением

Сразу, как только создали бота, он уже кое-что умеет: здороваться и говорить, что вас не понял.

С ним уже можно пообщаться, жмите в поле справа-сверху и попробуйте с ним поздороваться. Он понимает множество способов это сделать:

Вот я попробовал с ним поздороваться, и он меня понял:

Как он это понял? За это отвечают намерения (Intents). Каждое намерение — это одна тема разговора, которую понимает бот. Как только вы создали бота, у вас появились два намерения:

На них можно кликнуть и посмотреть, что внутри. Например, я кликнул на «Welcome Intent» и вижу набор приветствий, на которых тренировалась нейросеть:

Шаг 3: Научите бота новым словам

Поздороваться в ответ — это, конечно, важная функция, но за такое вам не заплатят. Давайте научим бота обрабатывать какой-нибудь запрос пользователя, например «Забыл пароль».

Создайте новое намерение по кнопке Create Intent и нажмите внутри Add training phrases:

Теперь нужно объяснить боту, что за намерение он должен обрабатывать. Нужны примеры. Заполните несколько примеров, как пользователь может обратиться в техподдержку. Вот список фраз, который придумал я:

Далее пролистайте вниз и найдите Add Response:

Добавьте текст, которым бот должен отвечать в ответ на тренировочные фразы:

В конце концов, когда вы создали новое намерение, можно написать боту новый вопрос и посмотреть, что он ответит:

Обратите внимание, я написал боту фразу, которой не было среди тренировочных. Даже похожих толком не было. Он понял смысл фразы и научился.

Шаг 4: Подключаем к Telegram

Дальше будет два набора инструкций: для программистов и для людей, которые кодить не умеют.

В любом случае вам надо создать бота в Telegram: это делается прямо в Telegram, через Крёстного отца всех ботов: @BotFather.

Если вы зерокодер

То теперь просто возвращаетесь на сайт DialogFlow, жмёте Integrations, находите Telegram и вставляете туда токен. Готово, можно общаться с новым другом:

Если вы программист

То поздравляю, ваш бот сможет куда больше! Скачайте консольную утилиту gcloud, залогиньтесь в ней через консоль и передайте в неё project_id вашего проекта в DialogFlow. Его можно посмотреть здесь:

После включите API для вашего проекта, скачайте гугловскую библиотеку для вашего языка программирования и можете начинать пользоваться API!

Я программирую на Python, поэтому скачал google-cloud-dialogflow. Теперь пора написать немного кода: нужна авторизация в Google и получение ответа от DialogFlow. По ссылкам вы найдёте готовые примеры кода от Google.

Примеры в документации довольно монструозные, т.к. писались сразу под все языки подряд. Я почистил пример для Python, можете посмотреть его по ссылке на мой gist. Заодно примеры уже собраны в один кусочек кода, вместе. Не забудьте подставить в код свой PROJECT_ID на 36-ой строке, иначе ничего не получится.

В общем-то готово. Код умеет получать ключи от Google, передавать ввод пользователя в DialogFlow и получать ответ. Теперь можете интегрировать этот код буквально куда угодно. Если хотите сделать шаг дальше — можно засунуть этот код в чат-бота.

Теперь, из предыдущей моей статьи можно взять заготовку для бота.. Достаточно закинуть все импорты и функции из обоих заготовок кода в один файл. После, чтобы всё завелось, достаточно чуть переписать код, заменить функцию echo на такой кусочек кода и готово:

def echo_dialogflow(update, context): message_to_dialogflow = update.message.text session_id = update.effective_chat.id serialized_answer = detect_intent_text(project_id, session_id, message_to_dialogflow) update.message.reply_text(serialized_answer['answer']) if __name__ == '__main__': project_id = 'ВАШ_PROJECT_ID' token = create_api_key(project_id) print(""Successfully created an API key"") updater = Updater(""ВАШ_TELGRAM_TOKEN"") dispatcher = updater.dispatcher dispatcher.add_handler(CommandHandler(""start"", start)) dispatcher.add_handler(MessageHandler(Filters.text undefined ~Filters.command, echo_dialogflow)) updater.start_polling() updater.idle()

А вот что получится в итоге:

Теперь вы можете дообучить бота отвечать на нужные вам вопросы через браузерный интерфейс или по API."'https://tproger.ru/articles/kak-uchit-python-s-nulya-s-udovolstviem-podklyuchaem-nejroset-google-dialogflow-k-vawemu-botu/'https://media.tproger.ru/uploads/2023/03/feb6494b-5dab-448c-8e34-0ca48555de32.png'"['https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2023/03/4d675bf8-6bd2-47f2-8fe4-37abe05d4c3e.png', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'https://media.tproger.ru/uploads/2023/03/6b3f1904-1052-4efa-9b46-67a637e9c6dc.png', 'https://media.tproger.ru/uploads/2023/03/d95c033f-3340-4be9-a60d-caa522006a3b.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2023/03/bf0b4d84-875f-4b48-a219-ae5e1455f2c0.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2023/03/93a8a92c-ef80-4384-bf79-7d0bdf87eb1f-autoconverted.jpeg', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2016/01/NW_RD.jpg', 'https://media.tproger.ru/uploads/2015/10/google-sequence.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""610px"" viewBox=""0 0 610 381""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2023/03/feb6494b-5dab-448c-8e34-0ca48555de32.png', 'https://media.tproger.ru/uploads/2023/03/b485db05-86f2-4a3b-8407-7272a8b9a439.png', 'https://media.tproger.ru/uploads/2021/03/iconfinder_Neural_network_2844558-cover.png', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'https://media.tproger.ru/uploads/2023/03/cfef80ba-3be7-4b27-b18b-8d4d6920cabb-autoconverted.jpeg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2023/03/d8c6ed9b-7cb9-4b8f-b30d-a0ecb7aa6a1e.png', 'https://media.tproger.ru/uploads/2023/03/ae4c8e46-4baa-4c2b-9a58-daa41dfa2cc2.png', 'https://media.tproger.ru/uploads/2023/03/c640a4cf-8e04-4013-9eb0-8d2e64b05a25.png', 'https://media.tproger.ru/uploads/2021/11/OTR-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2023/03/681b9d49-576a-4dda-a56d-0969e9f068a0.png', 'https://media.tproger.ru/uploads/2023/03/164ebba6-0852-4121-9ee4-4203aa67d2e2.png', 'https://media.tproger.ru/uploads/2023/03/44731fce-7b53-4200-93a7-4f901f532f90.png', 'https://media.tproger.ru/uploads/2014/12/coin-to-blender.png', 'https://mc.yandex.ru/watch/27485085', 'https://media.tproger.ru/uploads/2023/03/09256dee-d91a-400d-b683-4b6ca8d94ae3.png', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c', 'https://media.tproger.ru/uploads/2023/03/b0c78978-15e8-44e1-a7a7-6cbdbdf6dfa7.png']"
34'QD05Y3HG9'7 простых советов для программиста, которые сберегут его зрение'"Усталость глаз, их покраснение, сухость и плохое зрение — 4 всадника работы программистом. Даже одного симптома достаточно, чтобы взять во внимание следующие рекомендации. Мы собрали несколько простых советов, которые предотвратят ухудшение вашего зрения.

Берите блокнот и ручку, записывайте:

Самое банальное, но не бесполезное — давайте глазам отдыхать

Это прописано даже в трудовом кодексе РФ. Там есть зависимость длительности отдыха от характера работы за компьютером. Программистам рекомендуется делать 15-минутный перерыв каждые 2 часа работы.

В перерывах полезно делать гимнастику для глаз, но о ней чуть позже. Если не можете выработать привычку вовремя отвлекаться от работы, то обратитесь за помощью к будильнику или специальным приложениям-напоминалкам на ПК/смартфон.

Настройте яркость экрана

Тут довольно простое правило: яркость экрана должна совпадать с яркостью окружения. Иначе глазам будет неприятно перестраиваться под разный уровень яркости. А про работу ночью в неосвещённой комнате лучше забыть вообще.

Вот такие есть варианты для работы ночью:

Не работайте ночью, идите спать.

Работайте ночью только с включённым светом в комнате.

Если освещать всю комнату не вариант, то подарите своему монитору фоновую подсветку. Можно даже просто разместить за монитором лампу. Стильно и для глаз полезно. Если хотите больше красок, то смотрите в сторону Ambilight.

Сейчас каждый монитор или система оснащается специальным ночным режимом, который заменяет все холодные тона на тёплые, из-за чего вашим глазам становится комфортнее смотреть в экран.

Объявляем войну бликам

Если есть блики на экране, значит контрастность картинки снижается, значит вы сильнее вглядываетесь в монитор, от чего ваши глаза сильнее устают.

В некоторых случаях поможет перестановка монитора или просто закрытые шторы. В других случаях не обойдётся без покупки монитора с анти-бликовым покрытием или аналогичного фильтра на экран.

Если блики в основном от внутренних источников света, то позаботьтесь, чтобы свет был рассеянным.

Компьютерные очки

Это не те, которые в дырочку, а которые желтоватые или розоватые. Они, как и ночной режим монитора, блокируют синие тона, поэтому глазам намного комфортней. Также они приглушают блики, за что глаза будут вам благодарны.

Делаем гимнастику для глаз

Для глаз гимнастика важна так же, как и для тела. В наших глазах тоже есть мышцы, которые нужно держать в форме, иначе они начнут слабеть. Упражнений для глаз очень много, мы лишь расскажем о некоторых из них.

Для начала расслабимся

Сядьте ровно, тело должно быть расслаблено. Закройте глаза и полностью прикройте их ладонями. Давить сильно не нужно. Даже если просидеть так меньше минуты, ваши глаза успеют немного отдохнуть.

Шторки

Легко и быстро моргайте на протяжение нескольких минут. Упражнение улучшает кровообращение в глазах.

Смотрим в окно

Очень популярное упражнение. Суть заключается в том, что сначала нужно сфокусироваться на каком-то близком объекте, а потом перевести взгляд на объект вдалеке. Обычно это делают у окна. Повторяем несколько минут.

Большие глаза

Зажмуриваем глаза на 5 секунд, потом широко раскрываем. Повторяем около 10 раз.

Рисуем фигуры

Повторяем глазами линии и фигуры с картинки:

Расположение монитора

Если вкратце, то монитор должен быть на 15–20 градусов ниже от центра ваших глаз и располагаться на расстоянии вытянутой руки. Для монитора можно приобрести специальные подставки, а можно обойтись «народным» способом — подложить книги или что-то похожее.

Избавляемся от сухости глаз

За конкретным препаратом лучше сходить к специалисту — окулисту. Но если вкратце, то вам нужны именно увлажняющие капли. Иначе можете случайно взять капли от покраснений глаз, которые наоборот их сушат. Лучше не гадать и просто обратиться к врачу — он подберёт для вас лучшее решение.

Дочитали статью? Тогда дайте глазам отдохнуть или сделайте гимнастику."'https://tproger.ru/articles/7-prostyh-sovetov-dlja-programmista-kotorye-sberegut-ego-zrenie/'https://media.tproger.ru/uploads/2021/10/iconfinder-icon-8-cover.png'"['https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""1024px"" viewBox=""0 0 1024 768""%3E%3C/svg%3E', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""699px"" viewBox=""0 0 699 498""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2021/02/iconfinder-icon-9-cover.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'https://media.tproger.ru/uploads/2021/10/iconfinder-icon-8-cover-icon-original.png', 'https://media.tproger.ru/uploads/2015/03/android-development.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2018/07/learningPython.jpg', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2018/03/new-computer-science.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""600px"" viewBox=""0 0 600 298""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2021/11/OTR-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c', 'https://media.tproger.ru/uploads/2021/10/iconfinder-icon-8-cover.png']"
35'QV43D2V4I'GPT-4 написала Discord-бота и сайт по одному наброску в прямом эфире'"GPT-4 написала Discord-бота и сайт по одному наброску в прямом эфире

GPT-4 в прямом эфире написала Discord-бота, который сразу же написал скрипт сайта по наброску, нарисованному ручкой на листе бумаги.

Ведущий в эфире попросил нейросеть написать код Discord-бота, который использовал бы GPT-4 и распознавал с помощью неё изображения. И модель справилась! Правда, сначала она выдала код на старом API, но потом сама себя и поправила.

Но самое интересное произошло, когда в этого бота загрузили фото нарисованного от руки наброска сайта.

Нейросеть распознала его и выдала рабочий скрипт.

Вчера OpenAI анонсировала большое обновление GPT и провела транлсяцию, на которой рассказали о новых фичах.

Как и обещали, разработчики Microsoft и OpenAI, в целом улучшили GPT-4 и внедрили мультимодальные модели. Теперь GPT-4 может взаимодействовать ещё и через изображения.

А ещё она свободно общается на разных языках, гораздо лучше сдаёт экзамены и лучше пишет о сложных вопросах, а не только общих темах."'https://tproger.ru/articles/gpt-4-napisala-discord-bota-i-sajt-po-odnomu-nabrosku-v-pryamom-efire/'https://media.tproger.ru/uploads/2023/03/61b7e402-0e18-4f4e-881d-933b94f8dbea-cover.png'"['https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://media.tproger.ru/uploads/2022/12/4271720_anime_automaton_cartoons_gundam_gundam-0080_icon-cover.png', 'https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'https://media.tproger.ru/uploads/2021/03/nn-icon-cover.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2016/01/NW_RD.jpg', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'https://media.tproger.ru/uploads/2021/03/iconfinder_Neural_network_2844558-cover.png', 'https://media.tproger.ru/uploads/2023/03/61b7e402-0e18-4f4e-881d-933b94f8dbea-cover.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2023/03/61b7e402-0e18-4f4e-881d-933b94f8dbea-cover-icon-original.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2023/03/be2475d3-be86-48d1-90dc-7b9cd7125861.jpg', 'https://media.tproger.ru/uploads/2021/11/OTR-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c']"
36'V3CZ5EK5A'Что такое IT-активы и как ими управлять с точки зрения затрат'"Что такое IT-активы и как ими управлять с точки зрения затрат

Как вообще оценить пользу от вложений в информационные технологии? Компании покупает какое-то ПО или устанавливает оборудование, им кто-то пользуется, но какой в этом экономический смысл — не всегда понятно. Получает ли бизнес какую-то финансовую пользу от вложений в ИТ? Чтобы ответить на этот вопросу как раз и существуют программы по управлению ИТ-активами. Рассказываем, как они устроены.

ИТ-актив — это совокупность ресурсов и способностей, от которых зависит деятельность организации.

Структуру ИТ-актива можно условно разделить на материальные и нематериальные элементы. Материальные — это финансы, данные и системы, а нематериальные — процессы, знания, менеджмент и организация. Персонал не входит ни в одну из категорий.

Например, затраты на персонал будут складываться из количества сотрудников и знаний, которыми они обладают. Можно приобрести систему, которую смогут обслуживать 10 джунов, но суммарно они обойдутся компании дешевле, чем найм сеньора с узкой специализацией для разработки системы с аналогичной функциональностью.

Рассмотрим чуть подробнее, из чего может складываться стоимость владения ИТ-активом:

Цена лицензий на использование продукта. Стоимость обслуживания сервера, на котором размещена система и ее база данных. Затраты на содержание специалиста по продукту или центра компетенций внутри компании. Затраты на предоставление доступа в интернет. Затраты на оборудование рабочих мест. Затраты на смежные программные продукты, которые обеспечивают работоспособность Comindware Управление закупками.

Для понимания всех аспектов проблемы стоит учесть, что на одном сервере может находиться множество программных решений. Центр компетенций, особенно созданный в рамках ИТ-отдела, часто обслуживает другие системы и процессы. В предложенную модель можно также добавить косвенные затраты на обслуживание помещений, управление смежными процессами и т.д.

Из приведенного примера видно, что оценка актива на основе стоимости отдельного компонента не позволяет рассчитать точные показатели его финансовой эффективности. Адекватно определить стоимость ИТ-актива возможно только на основе модели, которая точно рассчитывает совокупные затраты на владение.

Роль ITAM и ITSM в управлении ИТ-активами

IT Asset Management (ITAM) — это дисциплина, которая помогает рационально проектировать, внедрять и управлять финансовым учетом ИТ-активов предприятия.

Заметим, что ITAM — это не только модель учета имущества, но и набор бизнес-процессов, которые контролируют финансовые потоки. Для полноценного внедрения ITAM компании предстоит скорректировать и свою систему финансового учета, и свою организационную структуру, и свои внутренние регламенты.

Ведущем источником знаний по ITAM, начиная с 2008 года, остается IBPL (IAITAM Best Practice Library) — библиотека лучших практик по управлению ИТ-активами. Она насчитывает около 12 ключевых процессов:

управление ITAM-программой (Program Management);

управление закупками (Acquisition Management);

учет ИТ-активов (Asset Identification);

коммуникации и обучение (Communication and Education);

управление соответствием (Compliance Management);

управление выводом из эксплуатации (Disposal Management);

управление документацией (Documentation Management);

управление финансами (Financial Management);

управление соответствием требованиям законодательства (Legislation Management);

управление политиками (Policy Management);

управление проектами (Project Management);

управление поставщиками (Vendor Management).

Говоря об ITAM, стоит пару слов сказать и об ITSM, поскольку на первый взгляд эти две методологии рассматривают ИТ в качестве самостоятельно актива предприятия, однако между ними есть фундаментальное различие.

ITSM — это взгляд на ИТ, как на услугу. Взгляд на то, что владелец продукта должен сделать и какими ресурсами обладать, чтобы удовлетворить потребности заказчика.

ITAM — это взгляд на ИТ, как на единицу имущества предприятия. Взгляд на то, сколько денег компания тратит на информационные технологии и какую прибыль получает взамен?

Внедрение ITAM не направлено на то, чтобы улучшить качество владения технологией, а лишь делает затраты на нее более прозрачными и контролируемыми. Противопоставлять эти методологии нет смысла, они отлично дополняют друг друга.

О роли первичного учета в управлении ИТ-активами

Управление ИТ-активом построено на данных, которые сообщают о его состоянии, качествах, движении и связанных финансовых потоках. Эти данные можно получить только из процессов. Если отвлечься от стандарта IBPL, то можно выделить 4 основных процесса в рамках жизненного цикла актива.

Управление закупками Учет и контроль ИТ-актива (идентификация, организация учета, контроль изменений) Управление контрактами Управление финансами

Все эти процессы взаимосвязаны друг с другом, поскольку оперируют одними и теми же данными. Например, если оборудование не поставлено на учет, то отследить его движение даже внутри организации будет невозможно.

Даже самая примитивная система учета позволяет ответить на основные вопросы, которые волнуют финансового директора:

Когда было куплено оборудование и было ли куплено вообще? Для чего оно было куплено? Кто за него отвечает? Где найти договоры и техническую документацию по оборудованию? Где оно находится в данный момент времени и в каком состоянии?

Плохая организация системы учета ведет к невозможности управлять ИТ-активом, к частым инвентаризациям, растратам, просроченному SLA и избыточным административным расходам.

Наконец, без учета специфики ИТ-актива невозможно оценить эффективность затрат: рассчитать TCO, ROI, себестоимость сервисов и бизнес-приложений.

Процессы и учетные данные

Мы не будем подробно рассматривать внедрение конкретных учетных моделей, обратим внимание только на несколько аспектов их применения с точки зрения цифровизации.

Модель данных учета ИТ-активов

В процессе закупок компания как бы генерирует поток данных, часть из которых представляют ценность для учета актива. К таким данным относится название продукта, цена лицензий, стоимость доработок на этапе внедрения, сопутствующие расходы на персонал и так далее. Учетная модель ИТ-актива обычно включает несколько категорий данных:

Финансовые данные: цена покупки, информация о поставщике, стоимость обслуживания.

Данные по контрактам: условия и положения, гарантийные обязательства, положение об аренде, соглашение о поддержке.

Инвентаризационные данные: местоположение, владелец, состояние актива.

Часть этой информации доступна в технической документации, часть можно извлечь из финансовой ведомости, часть находится в ведении отдела кадров. Чтобы поставить ИТ-актив на баланс в качестве имущественной едицины, нужно научиться извлекать учетные данные из бизнес-процессов,или же внедрить отдельный процесс постановки актива на учет.

Бизнес-процессы управления ИТ-активами

Контроль финансовых потоков можно осуществлять только в рамках конкретного бизнес-процесса, например, закупок оборудования. С точки зрения управления ИТ-активами важно получить ответы на следующие вопросы:

Как определить тип затрат? Кто несет ответственность за финансирование ИТ? Каков порядок такого финансирования? Каким образом будет происходит контроль за финансированием? Откуда брать отчеты о расходовании финансовых средств? Каким образом нужно планировать расходы? Каким образом выстроить работу с бухгалтерией?

Ответом на подобные вопросы должны стать регламенты, которые закрепляют порядок взаимодействия между финансовой службы и другими подразделениями компании в рамках ITAM-инициатив.

Реализация программ управления ИТ-активами

У организации должно быть понимание, какие финансовые потоки она хочет контролировать и какими средствами этого можно добиться. В зависимости от этого можно подобрать решение.

Например, система автоматического продления лицензий. Такие системы помогают отслеживать сроки окончания лицензий и показывают, в каком объеме они используются, нужно ли докупать новые или наоборот сокращать их количество. Если у компании 2-3 программных продукта и в штате работает около 10 человек, то смысла в такой системе нет никакого. Однако если продуктов больше 30, а в штате работает порядка 1000 человек, то продление лицензий уже вызывает трудности.

Под каждую задачу можно разработать свое отдельное решение:

под закупки дополнительных вычислительных мощностей,

под сдачу своего оборудование в аренду,

под приобретения облачных хранилищ,

под закупку нового оборудования,

и т.д.

Однако для этого потребуется разработать модель данных и соответствующие бизнес-процессы, которые обеспечат управление активом и контроль над финансовыми потоками. Для этого лучше всего использовать BPMS. Данный класс систем обеспечит внедрение самих процессов и создание управленческой отчетности для руководителей компании.

Наша компания Comindware сталкивалась с реализацией подобных задач и может помочь Вам решить их в Comindware Business Application Platform, на которой можно создавать бизнес-приложения, в том числе для учета ИТ-активов, сдачи в аренду, контроля оплаты и движения актива внутри организации."'https://tproger.ru/articles/chto-takoe-it-aktivy-i-kak-imi-upravlyat-s-tochki-zreniya-zatrat/'https://media.tproger.ru/uploads/2023/03/4658f974-0abe-4191-8fc5-e168764210aa-cover.png'"['https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'https://media.tproger.ru/uploads/2021/07/diagram-cover.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2023/03/4658f974-0abe-4191-8fc5-e168764210aa-cover.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2023/03/4658f974-0abe-4191-8fc5-e168764210aa-cover-icon-original.png', 'https://media.tproger.ru/uploads/2018/12/ci-cd.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2021/11/OTR-32x32.png', 'https://media.tproger.ru/uploads/2016/12/gt.png', 'https://media.tproger.ru/uploads/2021/06/rest-cover.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c']"
37'KWKOY0NR1'Python для начинающих: дорожная карта в 2023 году'"Python для начинающих: дорожная карта в 2023 году

Разберем обучение Python с нуля на примере дорожной карты, которую мы подготовили совместно с онлайн-университетом Skypro. Данная статья — это полноценный гайд разработчика на Python с нуля до Junior. Он подойдет и тем, кто уже начал изучение, и тем, кто только задумывается о программировании. Если же сомневаетесь в своих силах — обратите внимание на курс «Python-разработчик» от Skypro.

Основы Python

Установка Python

Для начала перейдите на официальный сайт Python и загрузите последнюю версию Python для Windows, Linux, MacOS или другой операционной системы.

Как установить Python на Windows

Выберите на сайте Python для Windows, скачайте и запустите загруженный файл. Если у вас на компьютере установлена более ранняя версия языка Python 2 — просто удалите ее и скачайте Python 3.

Выберите путь и установите программу:

Проверьте, что всё работает:

запустите cmd;

введите python;

если всё хорошо, командная строка выведет версию языка.

По умолчанию будут установлены:

Интегрированная среда разработки IDLE. Документация. Менеджер пакетов pip. Стандартный набор тестов. Python Launcher.

Как установить Python на Linux

Для большинства сборок Linux Python идет из коробки. Проверить это можно так — откройте окно терминала и выполните команды:

python — version;

python2 — version;

python3 — version.

Если по какой-либо причине на вашей системе стоит старая версия, вы можете самостоятельно скомпилировать последнюю версию Python.

Как установить Python на MacOS

Python также входит в сборку MacOS, и его можно запустить через терминал. Если же вы хотите установить самую последнюю версию — она доступна по ссылке.

Рабочее окружение

Обучение языку Python начинается с настройки рабочего окружения.

Среды разработки Python

Вот лишь несколько наиболее популярных Python IDE:

PyCharm — это IDE, разработанная компанией JetBrains. Она предоставляет интегрированную среду для разработки Python-приложений, включая поддержку Django, Flask и других фреймворков. PyCharm имеет богатый набор функций, включая отладчик, инструменты для анализа кода и удобный интерфейс. Visual Studio Code — это легкий, быстрый и невероятно гибкий редактор кода, доступный на всех платформах. Отличный выбор для программирования на Python. Многофункциональная IDE включает в себя интегрированный отладчик, рефакторинг, автодополнение кода, etc. Spyder — IDE, которая является частью научно-вычислительной среды Anaconda. Есть множество инструментов для работы с научными вычислениями, включая визуализацию данных, анализ и т. д. Spyder имеет встроенную консоль IPython, которая облегчает отладку и выполнение кода. Sublime Text — легкий редактор кода, который может быть расширен с помощью плагинов и расширений для поддержки Python. Простой интерфейс, автодополнение кода и другие полезные функции. Atom — этот простой на первый взгляд редактор обладает богатым функционалом. Данная среда написана разработчиками GitHub с использованием Electron — фреймворка для создания кросс-платформенных десктопных приложений средствами HTML, CSS и JavaScript.

Виртуальное окружение Python

Вы можете столкнуться с тем, что вам захочется поэкспериментировать с библиотеками или модулями. Чтобы не засорять рабочее окружение, вы будете создавать отдельный проект со своими модулями под каждую задачу.

ПО для работы с виртуальным окружением можно разделить на то, что входит в стандартную библиотеку Python, и то, что не входит в нее. Наиболее популярные инструменты:

Virtualenv — один из самых популярных инструментов для создания виртуальных окружений. Прост в установке и использовании.

— один из самых популярных инструментов для создания виртуальных окружений. Прост в установке и использовании. Pyenv — тулза для изоляции версий Python. pyenv. Полезен, когда на одной машине нужно сразу несколько версий интерпретатора для тестирования.

— тулза для изоляции версий Python. pyenv. Полезен, когда на одной машине нужно сразу несколько версий интерпретатора для тестирования. Virtualenvwrapper — обертка для virtualenv, позволяющая хранить все изолированные окружения и управлять ими.

— обертка для virtualenv, позволяющая хранить все изолированные окружения и управлять ими. Venv — входит в стандартную библиотеку Python. Появился в версии Python 3 и по функционалу похож на virtualenv.

Git

Обучение языку Python с нуля включает также изучение систем контроля версий — VCS. Именно они позволяют отслеживать и фиксировать любые изменения в коде: вы можете восстановить код в случае сбоя или откатить до более ранних версий.

Git — самая популярная VCS и мастхэв-инструмент для взаимодействия нескольких разработчиков на одном проекте. Подробнее о данной VCS вы можете почитать в нашем руководстве по командной разработке с Git.

HTTP-протоколы

HTTP-протоколы в Python-разработке используются для создания веб-приложений и веб-сервисов, которые могут обмениваться данными с пользователем.

Для работы с HTTP-протоколами в Python используется стандартная библиотека urllib, которая предоставляет функции для отправки HTTP-запросов и обработки ответов.

Также для работы с HTTP-протоколами можно использовать более специализированные библиотеки, такие как requests или aiohttp:

Библиотека requests облегчает отправку HTTP-запросов и обработку ответов, предоставляя более высокоуровневый интерфейс для работы с протоколом. Она позволяет создавать сеансы, работать с куками, заголовками и параметрами запроса, а также обрабатывать различные типы ответов. Библиотека aiohttp предоставляет асинхронный интерфейс для работы с HTTP-протоколами, что позволяет создавать более производительные и масштабируемые приложения. С ней можно использовать asyncio для создания событийных циклов, работать с потоками и обрабатывать различные типы запросов/ответов.

Знание HTTP-протоколов важно для разработчиков на Python, так как это позволяет им создавать эффективные и безопасные веб-приложения.

Базы данных

Даже начинающий Python-разработчик должен быть в курсе баз данных: а именно знать, что это такое и как с ними работать.

Одной из главных особенностей использования баз данных в Python является наличие множества библиотек, позволяющих взаимодействовать с различными типами СУБД. Вот лишь некоторые инструменты для работы с базами данных в Python:

SQLAlchemy.

Django ORM.

Peewee.

Pony ORM.

Разработчик может выбирать тот инструмент, который лучше всего подходит в конкретной ситуации.

Например, SQLAlchemy предоставляет возможность создания SQL-запросов с помощью объектов Python, что позволяет создавать сложные запросы и обращаться к базам данных, используя ORM.

Django ORM является частью веб-фреймворка Django и предоставляет более простой интерфейс для работы с БД, не требуя написания SQL-запросов вручную.

Кроме того, Python поддерживает работу с базами данных NoSQL, такими как MongoDB и Redis, что может быть полезно для работы с большими объемами данных и их обработки в режиме реального времени. Библиотеки для работы с такими БД также существуют и могут быть найдены в PyPI.

Синтаксис Python

Синтаксис Python простой и легкочитаемый, из-за чего данный язык может похвастаться низким порогом входа. Именно поэтому Python преобладает в программах онлайн- и офлайн-обучения.

Типы данных

Python поддерживает различные типы данных, включая:

Числовые типы: целые числа ( int ), числа с плавающей точкой ( float ), комплексные числа ( complex ). Строки: последовательности символов, определенных в кавычках ( str ). Булевы значения: TRUE и FALSE ( bool ). Списки: упорядоченные изменяемые коллекции объектов ( list ). Кортежи: упорядоченные неизменяемые коллекции объектов ( tuple ). Множества: неупорядоченные коллекции уникальных элементов ( set ). Словари: неупорядоченные изменяемые коллекции пар «ключ — значение» ( dict ).

Одной из ключевых особенностей типов данных в Python является то, что переменные не требуют объявления типа явным образом. Тип переменной определяется автоматически во время выполнения программы. Кроме того, Python также поддерживает динамическую типизацию: это означает, что переменные могут изменять свой тип во время выполнения программы.

Операторы и приоритетность операторов

Операторы Python делятся:

На арифметические операторы. Операторы сравнения. Операторы присваивания. Логические операторы. Операторы принадлежности. Операторы тождественности. Битовые операторы.

Операторы сравнения, арифметические, условные операторы и циклы имеют стандартный синтаксис, используемый во многих других языках программирования. Подробнее об операторах Python на примерах вы можете узнать из данного видео.

Кроме того, Пайтон разработчик с нуля должен понимать, как работает приоритетность операторов. В выражении интерпретатор Python выполняет операторы с более высоким уровнем приоритета первыми. И за исключением оператора возведения в степень ( ** ) они выполняются слева направо.

Следующая таблица демонстрирует приоритетность — самые приоритетные операции вверху, внизу — с низким приоритетом:

Переменные

Переменные предназначены для хранения данных. Название переменной в Python должно начинаться с алфавитного символа или со знака подчеркивания, может содержать алфавитно-цифровые символы и знак подчеркивания.

В Python применяется два типа наименования переменных: camelCase и underscore_notation.

onlineSchool = «Skypro» online_school = «Skypro»

Оба варианта будут верны, но учтите, что это разные переменные. Также надо учитывать регистрозависимость, поэтому переменные onlineschool и Onlineschool будут представлять разные объекты.

Закрепим, что переменные в Python объявляются без явного указания их типа, а тип переменной определяется автоматически во время выполнения программы. Плюс переменные могут изменять свой тип во время выполнения программы.

Подробнее о переменных

Отступы

Если в других языках программирования отступы в коде предназначены только для удобочитаемости, то в Python они очень важны.

Пример:

if 5 > 2: print(""Пять больше двух"")

Однако в следующем случае вы получите ошибку:

if 5 > 2: print(""Пять больше двух"")

Учитывайте это при написании программ.

Логические операторы

Язык программирования Python очень прост для обучения с нуля, ведь его синтаксис схож с синтаксисом других ЯП. Это касается и логических операторов:

and — возвращает True , если оба утверждения верны;

— возвращает , если оба утверждения верны; or — возвращает True , если хоть одно из утверждений верно;

— возвращает , если хоть одно из утверждений верно; not — обратный результат, возвращает False , если результат верен.

Условия Python и операторы if-else

Python поддерживает обычные логические условия из математики:

Равно: а == b Не равно: а != b Меньше, чем: а < b Меньше или равно: a <= b Больше, чем: а > b Больше или равно: a >= b

Эти условия можно использовать несколькими способами, чаще всего в операторах if и циклах.

А вот пример использования оператора if :

a = 33 b = 200 if b > a: print(""b больше чем a"")

В этом примере две переменные, a и b , используются как часть оператора if , чтобы проверить, больше ли b , чем a . Поскольку a = 33 , b = 200 , мы знаем, что 200 больше 33, поэтому выводим на экран b больше чем a .

Ключевое слово elif — это способ Python сказать: «Если предыдущие условия неверны, попробуйте это условие».

a = 33 b = 33 if b > a: print(""b больше чем a"") elif a == b: print(""a и b равны"")

В примере a равно b , поэтому первое условие неверно, но условие elif истинно, поэтому мы выводим на экран a и b равны .

Ключевое слово else улавливает всё, что не улавливается предыдущими условиями:

a = 200 b = 33 if b > a: print(""b больше чем a"") elif a == b: print(""a и b равны"") else: print(""a больше чем b"")

В этом примере a больше, чем b , поэтому первое условие неверно, также условие elif неверно, поэтому мы переходим к другому условию и выводим на экран a больше чем b .

Циклы

Любой курс Питон разработчика включает изучение циклов. Циклы позволяют выполнять некоторое действие, в зависимости от соблюдения условия. В языке Python есть следующие типы циклов:

while ;

; for.

С помощью цикла while мы можем выполнять набор операторов, пока условие истинно:

i = 1 while i < 6: print(i) i += 1

Цикл for используется для перебора последовательности (то есть списка, кортежа, словаря, набора или строки). С помощью цикла for мы можем выполнить набор операторов один раз для каждого элемента в списке, кортеже, наборе и т. д. Пример использования:

fruits = [""apple"", ""banana"", ""cherry""] for x in fruits: print(x)

Подробнее о циклах в программировании.

Функции

Python также поддерживает функции, которые могут принимать аргументы и возвращать значения. Функции в Python могут быть определены как встроенные (built-in) или определены пользователем.

Обычно функция определяется с помощью инструкции def . Определим простейшую функцию:

def add(x, y): return x + y

Инструкция return говорит, что нужно вернуть значение. В нашем случае функция возвращает сумму x и y . Теперь мы можем ее вызвать:

>>> add(1, 10) 11 >>> add('abc', 'def') 'abcdef'

Функция может принимать произвольное количество аргументов или не принимать их вовсе. Также распространены функции с произвольным числом аргументов, функции с позиционными и именованными аргументами, обязательными и необязательными.

Классы

Классы — это основа объектно-ориентированного программирования (ООП) в Python. Классы используются для определения объектов, которые могут иметь свойства (переменные) и методы (функции).

В Python классы создаются с помощью ключевого слова class . Вот пример простого класса Person с одним свойством (имя) и одним методом (приветствие):

class Person: def __init__(self, name): self.name = name def say_hello(self): print(f""Привет, {self.name}!"")

В этом примере метод __init__ является конструктором класса и инициализирует свойство name. Метод say_hello выводит приветствие, используя значение свойства name. Чтобы создать экземпляр класса Person , нужно вызвать его конструктор с соответствующим аргументом.

Например, чтобы создать объект person с именем Алиса, мы можем написать следующий код:

person = Person(""Алиса"")

Python-разработчик, написавший таким образом класс с нуля, может вызывать методы объекта person, например:

person.say_hello() # выводит ""Привет, Алиса!""

Классы в Python также поддерживают наследование, что позволяет создавать новые классы на основе существующих, добавлять новые свойства и методы. Кроме того, Python поддерживает множественное наследование, которое позволяет создавать классы, наследующие свойства и методы от нескольких родительских классов.

Методы

В Python методы — это функции, которые определены внутри класса и могут вызываться в экземплярах этого класса. Методы могут изменять состояние объекта, обращаться к его свойствам и выполнять другие операции.

Вот пример класса Rectangle , который имеет два свойства (ширина и высота) и два метода (вычисление площади и периметра):

class Rectangle: def __init__(self, width, height): self.width = width self.height = height def area(self): return self.width * self.height def perimeter(self): return 2 * (self.width + self.height)

Метод __init__ является конструктором класса и инициализирует свойства width и height . Методы area и perimeter вычисляют площадь и периметр прямоугольника, используя значения свойств width и height .

Чтобы создать экземпляр класса Rectangle , нужно вызвать его конструктор с соответствующими аргументами. Например, чтобы создать объект rect с шириной 10 и высотой 5, мы можем написать следующий код:

rect = Rectangle(10, 5)

Теперь можно вызывать методы объекта rect , например:

print(rect.area()) # выводит 50 print(rect.perimeter()) # выводит 30

Методы могут принимать аргументы, как и обычные функции. Они также могут вызывать другие методы или обращаться к другим свойствам объекта. Кроме того, Python поддерживает статические методы и методы класса, которые могут быть вызваны на классе, но не в его экземплярах.

Продвинутый Python

На этом обучение Python-разработчика не заканчивается. Необходимо понимать, как работает язык, а для этого важно углубиться в продвинутые аспекты разработки на нём.

Функциональное программирование

Функциональное программирование в Python — это подход к написанию программ, основанный на функциях высшего порядка, неизменяемости данных и отсутствии побочных эффектов.

Python поддерживает функциональное программирование, в том числе использование анонимных функций (lambda-функций), функций высшего порядка, списковых включений, генераторов, функциональных конструкций, таких как map() , reduce() и filter() и т. д.

Пример использования функции высшего порядка map() , которая применяет функцию к каждому элементу списка и возвращает новый список с результатами:

def square(x): return x ** 2 numbers = [1, 2, 3, 4, 5] squares = list(map(square, numbers)) # применяет ф-ю square к каждому э-ту списка print(squares) # выводит [1, 4, 9, 16, 25]

Также в Python есть поддержка генераторов, которые позволяют создавать ленивые последовательности значений. Пример использования генератора для создания бесконечной последовательности чисел Фибоначчи:

def fibonacci(): a, b = 0, 1 while True: yield a a, b = b, a + b fib = fibonacci() print(next(fib)) # выводит 0 print(next(fib)) # выводит 1 print(next(fib)) # выводит 1 print(next(fib)) # выводит 2 # и так далее...

Эти функции и конструкции позволяют писать более чистый, краткий и выразительный код, который легче поддерживать и тестировать. Но функциональное программирование не всегда является лучшим выбором, особенно в случаях, когда нужно работать с изменяемыми данными или писать производительный код.

Лямбда-функции

Лямбда-функция в Python — это анонимная функция, которая может быть определена в одной строке кода без использования ключевого слова def . Лямбда-функция возвращает результат выражения, которое находится после оператора : .

Пример использования лямбда-функции для возведения числа в квадрат:

square = lambda x: x ** 2 print(square(5)) # выводит 25

Лямбда-функции могут использоваться вместо именованных функций, когда нужно определить функцию внутри другой функции или передать функцию в качестве аргумента в другую функцию.

Пример использования лямбда-функции в качестве аргумента map() для возведения каждого элемента списка в квадрат:

numbers = [1, 2, 3, 4, 5] squares = list(map(lambda x: x ** 2, numbers)) print(squares) # выводит [1, 4, 9, 16, 25]

Лямбда-функции могут быть полезны, когда нужно определить простую функцию без необходимости давать ей имя или использовать ее в других местах программы. Но если функция достаточно сложная или будет использоваться многократно, лучше определить ее с помощью ключевого слова def .

Мапы, списки, коллекции

Список — это упорядоченная коллекция элементов, которые могут быть изменены. Список может содержать элементы разных типов, и доступ к ним осуществляется по индексу. Например:

fruits = ['apple', 'banana', 'cherry'] print(fruits[1]) # выводит 'banana'

Коллекции — это контейнеры, которые содержат набор элементов. Они бывают двух типов: изменяемые (списки, множества, словари) и неизменяемые (кортежи, строки). Например, множество — это коллекция, которая не содержит дублей и может быть изменена:

my_set = {1, 2, 3} my_set.add(4) print(my_set) # выводит {1, 2, 3, 4}

Map — функция, которая принимает функцию и последовательность и применяет данную функцию к каждому элементу последовательности, возвращая новую последовательность с результатом. Пример:

numbers = [1, 2, 3, 4, 5] squares = list(map(lambda x: x ** 2, numbers)) print(squares) # выводит [1, 4, 9, 16, 25]

Ошибки и их обработка в Python

В Python при выполнении программ могут возникать ошибки или исключения, такие как деление на ноль, попытка доступа к несуществующему индексу списка, неверное имя переменной и другие. Для этого в программах обучения на Питон разработчика с нуля предусматривается блок разбора исключений через конструкцию try-except .

Try-except позволяет «поймать» исключение и выполнить действия по его обработке, не прерывая выполнение программы. Конструкция выглядит следующим образом:

try: # блок кода, который может вызвать исключение # например, попытка деления на ноль result = 1 / 0 except ZeroDivisionError: # блок кода, который будет выполнен в случае исключения ZeroDivisionError # например, вывод сообщения об ошибке print(""Ошибка: деление на ноль!"")

В данном примере, если при выполнении кода произойдет деление на ноль, будет вызвано исключение ZeroDivisionError , и выполнение программы перейдет к блоку except .

Также можно использовать конструкцию try-except для обработки нескольких типов исключений одновременно:

try: # блок кода, который может вызвать исключение # например, попытка доступа к несуществующему элементу списка my_list = [1, 2, 3] print(my_list[5]) except (IndexError, TypeError): # блок кода, который будет выполнен в случае исключений IndexError или TypeError # например, вывод сообщения об ошибке print(""Обращение к несуществующему элементу списка или неверный тип данных!"")

I/O

В Python для работы с I/O (вводом/выводом) существуют встроенные функции и модули. Например, функции print и input используются для ввода и вывода данных в консоль:

# Вывод на консоль print(""Hello, world!"") # Ввод с консоли name = input(""Введите ваше имя: "") print(""Привет,"", name)

Для работы с файлами в Python есть функция open() , которая открывает файл на чтение или запись. Функция возвращает объект типа file , который позволяет производить операции с файлом:

# Открытие файла на чтение file = open(""file.txt"", ""r"") # Чтение данных из файла data = file.read() # Закрытие файла file.close() # Открытие файла на запись file = open(""file.txt"", ""w"") # Запись данных в файл file.write(""Hello, world!"") # Закрытие файла file.close()

Кроме того, в Python есть множество модулей для работы с различными форматами данных, такими как CSV, JSON, XML и другими:

# Работа с модулем CSV import csv # Чтение данных из CSV-файла with open('file.csv', newline='') as csvfile: reader = csv.reader(csvfile, delimiter=',', quotechar='""') for row in reader: print(', '.join(row)) # Запись данных в CSV-файл with open('file.csv', 'w', newline='') as csvfile: writer = csv.writer(csvfile, delimiter=',', quotechar='""', quoting=csv.QUOTE_MINIMAL) writer.writerow(['John', 'Doe', '25']) writer.writerow(['Jane', 'Doe', '30'])

Регулярные выражения

Регулярками называются шаблоны, которые используются для поиска соответствующего фрагмента текста и сопоставления символов. Подробнее о регулярных выражениях в Python.

Тестирование

Основная идея тестирования в Python заключается в том, чтобы написать тесты для каждого модуля или функции в отдельности и проверить, что они проходят успешно. Для этого используются специальные инструменты и библиотеки, которые позволяют запускать тесты автоматически и получать отчеты о результатах выполнения.

Две наиболее популярные библиотеки для тестирования на языке Python — unittest и pytest:

Unittest — это стандартный модуль тестирования в Python, с которым можно писать и запускать тесты для проверки работоспособности кода и который Python-разработчик должен знать с нуля. Он содержит множество методов и атрибутов для создания тестовых сценариев, утверждений и сбора результатов тестирования. Pytest — библиотека тестирования в Python, которая обеспечивает более простой и элегантный подход к написанию тестов, чем unittest. Она предоставляет широкий спектр возможностей, включая автоматическое обнаружение и запуск тестов, улучшенный вывод результатов тестирования, множественные плагины и расширения, а также поддержку различных типов тестирования.

Популярные библиотеки и фреймворки Python — 2023

Data Science

NumPy — библиотека для работы с массивами данных, матрицами и алгоритмами линейной алгебры.

Pandas — библиотека для обработки и анализа данных, предоставляющая удобный интерфейс для работы с таблицами данных.

Matplotlib — для визуализации данных, создания графиков, диаграмм и других типов графических представлений данных.

Scikit-learn — содержит реализации многих алгоритмов машинного обучения, включая классификацию, регрессию, кластеризацию и другие.

TensorFlow — обеспечивает мощные инструменты для создания, обучения и использования нейронных сетей.

Веб-разработка

Django — высокоуровневый фреймворк для веб-разработки, обеспечивающий удобную абстракцию для создания веб-приложений, включая аутентификацию, авторизацию, работу с базами данных и многие другие функции.

Flask — легкий и гибкий фреймворк для веб-разработки, который позволяет создавать быстрые и масштабируемые веб-приложения.

SQLAlchemy — библиотека для работы с базами данных, обеспечивающая удобный и гибкий интерфейс для работы с различными типами баз данных.

Requests — библиотека для работы с HTTP-запросами, которая позволяет отправлять и получать данные с веб-серверов.

Beautiful Soup — библиотека для парсинга HTML- и XML-документов, которая обеспечивает удобный способ извлечения данных из веб-страниц.

Геймдев

Pygame — это библиотека для разработки 2D-игр на Python. Она содержит инструменты для управления графикой, звуком и событиями, такими как нажатия клавиш и мыши.

Panda3D — фреймворк для разработки 3D-игр на Python. Обеспечивает разработчикам высокую степень контроля над графикой и физикой игры, а также облегчает создание сложных 3D-сцен и объектов.

Arcade — библиотека для разработки 2D-игр на Python. Предоставляет инструменты для работы с графикой, физикой и анимацией, а также поддерживает множество вспомогательных функций, таких как загрузка изображений и звуков.

PyOpenGL — библиотека для работы с графикой OpenGL на Python. Предоставляет высокоуровневый интерфейс для создания 3D-объектов и сцен, множество инструментов для управления освещением, материалами и текстурами.

Дополнительные материалы

Книги

Изучаем Python Подойдет тем, кто только начал изучение Python с нуля. Материал в книге изложен доступно и понятно, поэтому трудностей возникнуть не должно. Автор очень подробно рассматривает общие концепции, что дает полное понимание структуры языка. Купить

Изучаем Python. Программирование игр, визуализация данных, веб-приложения Подойдет тем, кто только начал изучение Python с нуля. Материал в книге изложен доступно и понятно, поэтому трудностей возникнуть не должно. Автор очень подробно рассматривает общие концепции, что дает полное понимание структуры языка. Купить

Чистый Python. Тонкости программирования для профи Подойдет тем, кто только начал изучение Python с нуля. Материал в книге изложен доступно и понятно, поэтому трудностей возникнуть не должно. Автор очень подробно рассматривает общие концепции, что дает полное понимание структуры языка. Купить

Подкасты

https://podcast.python.ru/

https://realpython.com/podcasts/rpp/ — для тех, кто владеет английским.

Также можете посмотреть и послушать полезные подкасты от MoscowPython:

Курсы

Хотите быстро освоить весь базис, представленный в нашей дорожной карте? Это легко реализовать с онлайн-университетом Skypro, который выпускает уверенных разработчиков на Python. Специальный онлайн-курс «Python-разработчик» с трудоустройством от Skypro предполагает обучение программированию на Python с нуля до профи.

Для тех, кто не хочет учиться в большой группе, предусмотрен тариф «Премиальный». Здесь будущий Python-разработчик получит индивидуальное обучение: тариф предусматривает мини-группы по пять человек.

В программу также добавлены уроки по английскому для IT-специалистов.

Где и как изучать Python?

Всё зависит от уровня самоорганизации. Самообучение хорошо подойдет людям с развитым тайм-менеджментом и возможностью дисциплинированно выполнять поставленные перед собой задачи без внешнего контроля.

Но у данного подхода есть существенный недостаток: ваш уровень знаний и навыков некому оценить. В этом случае можно оплачивать услуги ментора, который время от времени будет проверять ваши таски и давать советы.

Но есть ли смысл оплачивать одного специалиста, если есть возможность пройти полноценные курсы Python-разработчика, где вашим развитием будет заниматься ряд профессионалов?

Узнать больше

Мы же надеемся, что статья оказалась для вас полезной. Остались вопросы? Задайте их в комментариях.

Реклама ОАНО ДПО «СКАЕНГ» LjN8JvxFj"'https://tproger.ru/articles/python-roadmap-2023-ljn8jvxfj/'https://media.tproger.ru/uploads/2023/03/aa275176-a1fc-46ff-abbc-0be858fde062-cover.png'"['data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""232px"" viewBox=""0 0 232 330""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2023/03/logo-black-2.png', 'https://media.tproger.ru/uploads/2023/03/aa275176-a1fc-46ff-abbc-0be858fde062-cover-icon-original.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""233px"" viewBox=""0 0 233 330""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2023/03/aa275176-a1fc-46ff-abbc-0be858fde062-cover.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2023/03/f667de6c-fb09-4be0-9c75-7ccd2ea9ff52.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""234px"" viewBox=""0 0 234 330""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2023/03/bc400058-135f-412e-a403-75a8e353adb2.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""100%px"" viewBox=""0 0 100% 100%""%3E%3C/svg%3E', 'https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c', 'https://media.tproger.ru/uploads/2023/03/4af1af3a-8e28-4b0a-9175-1e563a639594.jpg']"
38'P74OCUTGM'Config-manager: универсальное решение для настройки приложений на Rust'"Привет! Меня зовут Михаил Михайлов, младший системный программист технологической и научно-исследовательской компании «Криптонит». В этой статье я расскажу, как автоматизировать процесс сборки конфигурации приложения из различных источников и упростить код с помощью собственного решения — крейта config-manager.

Мотивация

В какой-то момент мы — команда Rust-разработчиков компании «Криптонит» — поняли, что, переходя от проекта к проекту, много времени и сил тратим на написание кода, реализующего конфигурирование наших продуктов. Разными разработчиками пишется одно и то же. Мы решили положить этому конец и разработать универсальное решение.

Обычно, настраивая проекты в Kubernetes, мы берём параметры приложения преимущественно из Environment и ConfigMap. Помимо этого, бывает удобно отлаживать программу, запуская её с различными параметрами командной строки. То есть в большинстве наших проектов необходимо брать данные из трёх источников одновременно: конфигурационных файлов, параметров командной строки и переменных окружения. При этом важен приоритет тех или иных источников.

Таким образом перед нами встают две задачи: получение данных и их правильное слияние, что является довольно трудоёмкой и монотонной работой.

Хотелось создать инструмент, который автоматизирует этот процесс, но при этом оставит полный контроль пользователю.

Существующие решения

Данная задача стоит перед программистами буквально в каждом проекте, однако ни одно из существующих решений полностью нас не устраивало.

К примеру, крейт clap, который предоставляет гибкую работу с параметрами командной строки (а с версии 3.0 и с переменными окружения), имеет несколько недостатков:

не работает с конфигурационными файлами, не позволяет выбрать приоритеты источников.

С крейтами ниже схожая проблема: оба работают с двумя источниками, но не поддерживают третий, что для нас недопустимо.

abscissa:

работает с командной строкой, конфигурационными файлами, не поддерживает переменные окружения.

config-rs:

работает с конфигурационными файлами, переменными окружения; не поддерживает командную строку.

Нашей команде приходилось использовать совокупность перечисленных крейтов, и это создавало одни и те же неудобства. Каждый параметр необходимо получать из разных источников, используя разные API, а это приводило не только к разрастанию кода, но и к необходимости править его в нескольких местах при каждом изменении набора параметров.

Принципы

Перейдём к нашему проекту. Можно сказать, что крейт config-manager состоит из одного макроса. Почему мы выбрали макросы в качестве решения проблемы?

Любая конфигурация обычно имеет вид структуры с публичными полями, которые нужно заполнять при инициализации. Одной из первых и главных особенностей было то, что имя переменной окружения, из которой читается значение, по умолчанию совпадает с именем соответствующего поля (это справедливо и для других источников — командной строки и файла). То есть по умолчанию, если поле называется version, то значение будет браться из переменной окружения с именем version.

Поэтому мы решили использовать derive макрос — им легко аннотировать структуру, и он имеет доступ к именам полей. Чтобы пользователю задействовать весь функционал библиотеки, необходимо лишь аннотировать структуру. Это делает код компактнее, красивее и удобнее в сопровождении.

На одной из итераций мы заметили, что derive-macro не всегда выглядит достаточно опрятно, поэтому решили использовать attribute-macro, который «под капотом» вызывал бы старый derive.

Коротко о том, какой код генерируют наши макросы:

создаётся код, который собирает три источника в три соответствующих HashMap, начинается инициализация структуры.

Каждое поле инициализируется отдельно:

определяется приоритет источников, в соответствующих HashMap ищутся нужные ключи, если нигде не найдено — ставится значение по умолчанию, если нет значения по умолчанию — выдаётся ошибка.

Стандартное применение макроса:

use config_manager::config; #[config(file(format = ""toml"", default = ""./config.toml""))] struct ApplicationConfig { #[source(clap(long, short = 'p'), env = ""APP_PATH"")] path: String, #[source(clap, config, env, default = 1)] delay: u64, }

В данном примере аннотация file (3 строчка) означает, что будет использоваться конфигурационный файл формата TOML, расположенный по адресу «./config.toml»

Разберём порядок сборки для каждого поля:

Значение поля path сначала будет искаться в командной строке (—path -p), а затем в переменной окружения с именем APP_PATH. Если ни то, ни другое не было найдено, будет выдана ошибка инициализации.

Значение поля delay будет искаться в следующем порядке: командная строка (—delay), далее — конфигурационный файл, после — переменная окружения (path). Если нигде не было найдено значение — будет присвоено значение по умолчанию (1).

Данный код заменяет порядка 50 строк, необходимых для реализации аналогичного поведения.

Возможности

Показательным результатом создания этого крейта для нашей команды стало его внедрение в один из самых крупных продуктов «Криптонита». Модуль, отвечающий за настройки проекта, ужался практически вдвое (до внедрения было порядка 3000 строк, после — около 1700), и код стал гораздо читабельнее.

Кстати, бо́льшая часть планирования и итераций крейта была связана не с написанием кода или реализацией основного функционала. Мы долго продумывали, как это должно подаваться пользователю, а также разрабатывали дополнительные возможности, которые предоставляли бы ему максимально гибкий функционал и сохраняли при этом чистоту получаемого кода.

Благодаря этому, крейт, который изначально должен был полностью опираться на крейты clap, config-rs и serde, в итоге превратился в собственное решение — config-manager.

Перечислим некоторые достоинства реализации:

I. Простое получение необходимых механизмов через «#[config]».

II. Кодогенерация на основе структур данных:

поддержка практически любых типов полей, единственное условие — поле должно реализовывать «serde::Deserialize», управление приоритетами источников при слиянии, определение имён значений для источников, гибкое задание значения по умолчанию, значением по умолчанию может выступать любой валидный Rust код, в том числе вызов функции, пользовательские методы десериализации полей из источников, можно привязать свой код десериализации к каждому полю, поддержка вложенных структур, что крайне полезно для модульных проектов с большими наборами параметров конфигурации, валидация типов на этапе компиляции.

III. Пользовательский контроль над ошибками получения конфигурации.

Пользователь получает результат сборки посредством вызова метода try_parse у аннотированной структуры, который возвращает Result, содержащий экземпляр структуры, либо ошибку сборки

IV. Достаточно широкий спектр форматов конфигурационных файлов.

Поддержка форматов json, toml, yaml и ron

V. Возможность задать префикс для имён переменных окружения.

VI. Гибкий механизм работы с командной строкой.

Поддерживаются атрибуты clap: long, short, help и т.д.

Узнать больше о крейте можно на crates-io и в репозитории «Криптонита», а изучить все подробности можно, прочитав наш cookbook — там же есть наглядные тесты и примеры.

Макросы

По своему опыту использования процедурных макросов я понял, что это не такая страшная вещь, как кажется изначально. Основная проблема — крайне скудное количество статей на эту тему.

Однако, крейты proc_macro2 и quote предоставляют довольно дружелюбный интерфейс для кодогенерации: не нужно возиться с каждым токеном и самому разбирать/собирать их в синтаксическое дерево.

Тут каждое специальное слово или символ Rust является классом с довольно интуитивными полями и методами — только взглянув на страницу документации, можно быстро сориентироваться и написать нужный код.

Дальнейшая разработка проекта полностью зависит от отзывов пользователей: нам необходимо увидеть, что нужно добавить или убрать, чтобы продукт стал удобнее для конечного потребителя. Так что я буду благодарен за любую обратную связь."'https://tproger.ru/articles/config-manager-universal-noe-rewenie-dlya-nastrojki-prilozhenij-na-rust-237848/'https://media.tproger.ru/uploads/2023/03/df0403a3-1685-4e96-ab49-5788e7e49af6-cover.png'"['https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2023/03/094f2844-c8aa-4f93-b260-b763d8053928-autoconverted.jpeg', 'https://media.tproger.ru/uploads/2015/02/structure-packing.jpg', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big-32x32.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'https://media.tproger.ru/uploads/2015/10/whiteboard.jpg', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2016/09/tmp.png', 'https://media.tproger.ru/uploads/2023/03/df0403a3-1685-4e96-ab49-5788e7e49af6-cover-icon-original.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2023/03/df0403a3-1685-4e96-ab49-5788e7e49af6-cover.png', 'https://media.tproger.ru/uploads/2023/03/58d3ee7c-8af0-4211-8f98-39c329442fe1-autoconverted.jpeg', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2016/03/Baseball-Bats.jpg', 'https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c']"
39'YCFNJH92K'Дайджест Python #5: как сделать свой Copilot и работать с данными в Pandas'"Дайджест Python #5: как сделать свой Copilot и работать с данными в Pandas

Собрали дайджест из лучших материалов по Python с 1 по 15 марта, которые только смогли найти. Дайджест включает статьи и видео на русском и английском языках.

Узнайте, как написать свой аналог GitHub Copilot без знаний об искусственном интеллекте, как работать с данными и памятью в Pandas и как написать нейросеть, которая сможет самостоятельно распознавать объекты.

Big Data / Data Science

AI и ML

Веб / Django / Flask

Скрипты, приложения и боты

Развлекательный контент

Нашли что-нибудь полезное и интересное для себя? Расскажите, какие материалы понравились вам больше всего, а каких статей не хватило, чтобы следующий дайджест получился ещё лучше.

Дайджест оказался полезным? Да

Нет

Если дайджест вам понравился, посмотрите две предыдущие подборки:

А ещё присылайте в комментарии статьи и видео, которые ускользнули от нашего взгляда и не попали в дайджест. Поделитесь полезными материалами с другими читателями! 😉"'https://tproger.ru/articles/dajdzhest-pitona-15-marta/'https://media.tproger.ru/uploads/2023/03/5081652_earth-worm_python_snake_worm_icon-cover.png'"['https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2021/01/python_telegram_bot-cover.png', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'https://media.tproger.ru/uploads/2023/03/5081652_earth-worm_python_snake_worm_icon-cover-icon-original.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'https://media.tproger.ru/uploads/2021/01/Python_regexp-cover.png', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2020/12/css-flexbox-animation-cover-1.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'https://media.tproger.ru/uploads/2019/07/iconfinder-icon-19-cover-1.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2023/03/5081652_earth-worm_python_snake_worm_icon-cover.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2021/11/OTR-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c']"
40'OIPL55HP7'OpenAI представила GPT-4: что нового и как попробовать новинку'"OpenAI представила GPT-4: что нового и как попробовать новинку

Компания выпустила официальный пресс релиз о GPT-4 у себя в блоге.

Как и обещали, разработчики Microsoft и OpenAI, в целом улучшили GPT-4 и внедрили мультимодальные модели. Это самое значимое отличие от GPT-3.5.

Если предыдущее поколение модели позволяет пользователям общаться с нейросетью только через текст, то GPT-4 сможет обеспечить возможность взаимодействовать ещё и через изображения, звуки и видео.

Для сравнения, чат-бот ChatGPT, который внедрили в Bing, основан как раз на GPT-3.5.

Мы уже писали о том, как ChatGPT пишет дипломы, решает домашку, натурально сходит с ума и даже ставит бизнес Google под угрозу. Но даже несмотря на это, технический директор Microsoft Germany Андреас Браун назвал выход именно это модели «переломным моментом в игре».

На 23:00 по Москве запланирована официальная презентация GPT-4. Посмотреть её можно здесь:

GPT-4 понимает картинки, лучше сдаёт экзамены и думает на естественном языке

Например, здесь обновлённая модель понимает картинки. Но интересно, что она без проблем рассказывает не только о том, что изображено на разных частях картинки. Но и в целом задумку коллажа.

Разработчики рассказали, что теперь GPT-4 понимает естественный язык и выполняет задачи на всех языках. Например, если запрос будет на немецком, то результат можно будет получить на итальянском.

Нейросеть в целом стала «умнее». Например, GPT-3.5 кое-как сдавала симулированный экзамен по юриспруденции. Но попадала при этом в 10% худших результатов. То с GPT-4 разработчики обещают быть в числе 10% лучших из сдавших экзамен на адвоката.

И не только на адвоката:

Также нейросеть прокачали в более сложных темах. В обычном разговоре различие между GPT-3.5 и GPT-4 может быть незаметным. Но когда сложность задачи достигает достаточного порога — GPT-4 более надежен, креативен и способен обрабатывать гораздо более подробные инструкции, чем GPT-3.5.

Где можно протестировать модель

Чтобы попробовать новую модель в деле, придётся записаться в лист ожидания.

Кстати, если у вас уже есть ChatGPT Plus, то доступ вы получите и так.

Правда, пока даже принятым разработчикам по API будет доступен только текстовый режим. Обработку изображений обещают раскатать чуть позже — пока без конкретики.

Скорее всего, тестирование API недоступно для пользователей из Беларуси, России и Украины, так как использование языковой модели запрещено в этих странах.

В форме нужно будет указать имя, фамилию пользователя, электронную почту, ID организации

API можно будет использовать для любой сферы, кроме перечисленных в Политике платформы. К таким сферам относятся:

Незаконная деятельность. Сферы, связанные с сексуальным насилием над детьми. Культивация ненависти, преследования или насилия, а также запугивания человека. Создание вирусов и вредоносных программ Деятельность с высоким риском причинения физического вреда. В их числе: разработка оружия, военные действия, управление критической инфраструктурой, а также пропаганда членовредительства: самоубийства, порезов и расстройств пищевого поведения. Сферы с риском экономического ущерба. В их числе: многоуровневый маркетинг, азартные игры, кредитование(!), трудоустройство, образовательные услуги. Мошенничество. Также — плагиат, академическая нечестность, создание поддельных отзывов, дезинформация, спам. Контент для взрослых, порнография. Политическая агитация или лоббирование. Сталкеринг и незаконный сбор личных данных. Несанкционированная юридическая практика. Медицина. Принятие государственных решений с высокой степенью риска.

Как видно, среди перечисленных сфер находятся не только преступные. Использовать GPT-4 также нельзя для принятия решений, которые могут принести огромный ущерб."'https://tproger.ru/articles/openai-predstavila-gpt-4-chto-novogo-i-kak-poprobovat-novinku/'https://media.tproger.ru/uploads/2023/03/b1fef982-e91e-48e3-9358-46e14d6adac8-cover.png'"['https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2023/03/b1fef982-e91e-48e3-9358-46e14d6adac8-cover.png', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://media.tproger.ru/uploads/2023/03/761a585f-8b49-4dc6-92dc-33a31bd4fa6a.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'https://media.tproger.ru/uploads/2023/03/b1fef982-e91e-48e3-9358-46e14d6adac8-cover-icon-original.png', 'https://media.tproger.ru/uploads/2023/03/bcfac623-68d1-44ea-a407-12b927599745.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://media.tproger.ru/uploads/2022/12/4271720_anime_automaton_cartoons_gundam_gundam-0080_icon-cover.png', 'https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'https://media.tproger.ru/uploads/2021/03/nn-icon-cover.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2016/01/NW_RD.jpg', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'https://media.tproger.ru/uploads/2021/03/iconfinder_Neural_network_2844558-cover.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2021/11/OTR-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""100%px"" viewBox=""0 0 100% 100%""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2023/03/b0aba57b-7150-4333-9ad1-4e24d23f4d63.jpg', 'https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c']"
41'27C3NJBPC'Оператор SQL WHERE: синтаксис и примеры'"SQL WHERE оператор позволяет задавать дополнительные условия для выборки, редактирования, удаления и других операций, производимых с записями БД.

Синтаксис SQL WHERE

Рассматриваемый оператор WHERE имеет следующий синтаксис:

SELECT column1, column2, ... FROM table_name WHERE condition;

Как видим, SQL запрос WHERE задаёт некоторое условие, которое позволяет отфильтровать записи в колонках таблицы table_name . При этом, когда в SQL несколько WHERE — это нормальная история, ведь так задаётся сразу несколько условий.

Рассмотрим оператор WHERE на примерах.

Примеры использования SQL WHERE

С помощью следующего SQL запроса мы виберем всех клиентов, которых зовут Иван:

SELECT * FROM Customers WHERE Name = 'Иван';

А так мы сможем выбрать клиентов по ID, за которым они закреплены в нашей таблице:

SELECT * FROM Customers WHERE ID = 1;

Теперь давайте усложним задачу, задав сразу несколько условий. Здесь мы также используем оператор SQL LIKE, о котором писали ранее.

Например, выведем название планеты, год её открытия, а также имя её первооткрывателя. Выбирать будем из тех планет, чьё название не начинается или не заканчивается на букву S :

SELECT PlanetName, OpeningYear, Opener FROM Planets WHERE PlanetName NOT LIKE '%s' AND PlanetName NOT LIKE 'S%'

И вот такое, казалось бы, сложное условие легко реализовывается с помощью оператора WHERE.

Больше SQL команд и информации о них вы найдёте здесь."'https://tproger.ru/articles/sql-where/'https://media.tproger.ru/uploads/2023/03/3366041_analysis_binoculars_explore_find_research_icon-cover.png'"['https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2020/12/sql-commands-mysql-cover-1.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'https://media.tproger.ru/uploads/2021/01/Python_regexp-cover.png', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2020/12/css-flexbox-animation-cover-1.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'https://media.tproger.ru/uploads/2019/07/iconfinder-icon-19-cover-1.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2023/03/3366041_analysis_binoculars_explore_find_research_icon-cover.png', 'https://media.tproger.ru/uploads/2023/03/3366041_analysis_binoculars_explore_find_research_icon-cover-icon-original.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c']"
42'N8GXEL47N'30 нейросетей для работы с изображениями и видео'"Составили подборку нейросетевых инструментов для обработки изображений и видео. По крайней мере, указали всё, что более-менее хайповало.

Обработка и генерация фотографий и видео с помощью всяких нейросетей в тренде уже год-полтора, и только сейчас их начинает двигать ChatGPT. Поэтому можно оглянуться назад и вспомнить всё, что понаделали эксперты из больших компаний по этой теме.

Трансфер стиля на фотографии

Парень объясняет как можно стилизовать одно изображение под другое, используя специально натренированную под это дело модель. С примерами кода, само собой.

Великий и ужасный DALL-E, с которого всё началось

DALL-E — это вариация нейросети-трансформера GPT-3, самой современной модели для обработки естественных языков. Русская нейросеть ruDALL-E была основана на зарубежной модели.

Апскейлинг и восстановление старых видео

Архитектура, примеры, объяснения зачем и почему, всё как вы любите.

Свёрточные нейронные сети широко используются в задачах распознавания изображений. Отличие от стандартных нейронных сетей, где все сигналы передаются от каждого нейрона предыдущего слоя на следующий, то тут используются специальные матрицы свертки разных размеров, которая скользит по изображению, умножается поэлементно на то, что под ней и передает сумму результата дальше в элемент следующего слоя.

Вот, как они работают:

Генерация аниме-девочек

Хотите создавать аниме-девочек, которые никогда не существовали? Опять обращаемся к генеративным нейронным сетям. Нам поможет нейросеть StyleGAN2 и её реализация на TensorFlow. Если у вас есть набор лиц одного стиля, то эта нейросеть прекрасно справляется с тем, чтобы поймать этот стиль и начать генерировать.

Генерация реалистичных несуществующих людей

Нейросети научились генерировать лица несуществующих людей, которые человек не может определить. Позже Microsoft решили использовать эти лица, чтобы тренировать другие нейросети.

Результаты исследования показали, что детекторы и мапперы лиц, натренированные на синтетических людях показывают практически те же результаты, что и state of the art модели, которые обучались на реальных данных. И вот таким щелчком пальцев можно избавиться от предвзятости нейронных сетей из-за несбалансированного датасета и проблем с этикой.

Редактирование видео на лету с изменениями стиля

Новый метод позволил ИИ делать сразу много разных вариантов работы с видео. Он позволяет генерировать новые экземпляры, увеличивать длительность, добавлять/убирать элементы с определёнными условиями, при этом всё из одного стартового видео.

Можно создать фарш из воды, добавить футболистов в матч или продлить выступление балерины.

Создание 3D-панорамы из нескольких фото

Создать панораму поможет view synthesis, описывающая недавно разработанный метод под названием NeX.

Чем он лучше других? Качеством (можете посмотреть на примерах), а ещё он работает в тысячу раз быстрее методов, опубликованных всего год назад.

Какие могут быть применения? Представьте что для создания VR-музея вам надо сделать небольшое количество снимков, а остальные точки зрения дорисует нейросеть.

Результаты работы надо обязательно посмотреть в видео, потому что то, как модель ловит и просчитывает различные варианты освещения и отражения просто надо увидеть.

Редактирование видео от Adobe

Исследователи из Adobe представили ИИ, позволяющий редактировать/изменять/добавлять элементы и фон на видеофайлах. Нейросеть отделяет фон от остального, разделяя видео на два атласа, которые затем можно редактировать и запихивать обратно в видеофайл (как пример приведён мальчик катающийся на велосипеде по психоделическому пейзажу).

Создание изображений по описанию от NVIDIA

NVIDIA научилась создавать абсолютно фотореалистичные изображения из описания со скоростью мысли.

На самом деле, просто научились они это делать в 2019 году с помощью нейросети GauGAN, но тут как со Шреком, сиквел получился ещё лучше. Теперь GauGAN 2 оформлена в приложение NVIDIA Canvas, в котором простыми набросками кисти и описанием можно генерировать очень крутые фотореалистичные изображения, с дальнейшей переброской в фотошоп.

Нейросеть GLIDE для локального изменения изображений

Многие слышали про нейросеть DALL-E, которая генерировала постеры фильмов/картинки по описанию. Так вот, вышла новая нейросеть GLIDE, у которой не только с генерацией всё намного лучше, но и есть способность локально изменять части картинок.

Google Collab с реалистичными фильтрами а-ля Snapchat

Обзор самой новой техники редактирования видео в реальном времени с помощью GAN. Можно приделать себе усы, которые будут весьма натурально шевелиться и перемещаться вместе с вашим лицом (зачем это вам, мы не знаем). Причём редактировать можно не только человеческие лица, а любую отмеченную зону. Ссылка на Google Collab, чтобы провести свои эксперименты прилагается.

Редактирование людей на видео (эмоции, возраст, макияж)

Улучшенный метод по редактированию людей/персонажей на видео, который позволяет менять эмоции, возраст и макияж. Отличие от предыдущих методов в том, что для обработки одного кадра используются изменения, которые применяли в предыдущих (есть зависимость от времени). Результаты хоть и не идеальны, но очень близки к идеалу. Вариантов применения подобной техники будет масса (если ещё немного доделать).

Редактирование изображений от NVIDIA (лучше, чем было)

Семантическое редактирование изображений с помощью EditGAN от NVIDIA. Можно добавлять области редактирования на изображение и прописывать то, что в этих областях должно находиться (например можно добавить номер на машину или нарисовать птицу с помощью только этих областей). Качество лучше чем у предыдущих методов, но это и понятно, иначе никто бы публиковать подобное не стал.

DALL-E 2: Electric Boogalo

Примеры работы нейросети DALL-E 2, которая создаёт изображения из контекстного описания. Тогда digital художники артов забили тревогу, а результаты работы, хоть и не безупречны, очень впечатлили публику.

Нейросеть Imagen для генерации изображений от Google

В игру генерации врывается Google со своей сетью Imagen. Архитектура проще и умеет генерировать изображения из более длинных описаний, плюс правильно отображает текст, который её попросили поместить на изображение.

Стилизованное изменение изображений от NVIDIA (StyleGAN-NADA)

Новый StyleGAN-NADA умеет генерировать лица и натягивать на них контекстные изменения, может вы хотите стать ведьмаком, белым ходаком или картиной в стиле кубизма. Отличается от предыдущих нейросетей этой самой функцией и лучшими результатами.

Ещё одна генерация изображений от Google (Parti AI)

Google Parti AI с ноги врывается в команду искусственных интеллектов генерирующих изображения (таких как DALLE-2 и Imagen). Главное отличие — отрисовка изображения не из базового шума, а из некоторых кусочков общей картины.

Дипфейки от Samsung

Новые варианты deepfake-ов в реальном времени с большим разрешением. Конечно, всё ещё не идеально, но намного лучше чем в 2020 году. А если вспомнить, как быстро менялась та же генерация изображений, то вероятно, что до совсем качественных deepfake-ов уже недалеко.

Генерация текстур от OpenAI

То, что DALLE-2 умеет генерировать изображения по тексту мы знаем. А теперь посмотрите, где люди уже навострились применять эту функцию. Генерация текстур, фотореалистичных лиц и виртуальных миров это только часть.

Stable Diffusion 1.4

Код StableDiffusion (альтернатива DALLE-2) для создания изображений и их непрерывного изменения в другие появился в открытом доступе. Можно попробовать запустить у себя или покопаться под капотом и попытаться улучшить (если есть что улучшать).

Модификация фотографий от Google (DreamBooth)

Через ИИ под названием DreamBooth люди могут генерировать изображения, на основе уже существующих с дополнительным описанием. Например, можно загрузить фотографии своей собаки и и попросить нарисовать её плавающей или на приёме у грумера. Можно смешивать изображения, модифицировать детали, бэкграунд или угол зрения.

Генерация изображения «вглубь» от Google (InfiniteNature-Zero)

InfiniteNature-Zero от Google AI, это улучшенная версия предыдущего метода по генерации изображения «вглубь». На этот раз, для обучения ему нужны только фотографии (а не видеоряд), плюс результаты сильно качественнее и контроль за «полётом вглубь» лучше (можно, например, поворачивать).

Генерация 3D-ассетов от Google (DreamFusion)

Google, в дополнение к уже существующим DALLE-2 и StableFusion, добавили ИИ под названием DreamFusion, который умеет по тексту генерировать 3D модели. И не просто 3D модели, их сразу можно использовать в качестве ассетов для игр/видео/куда там ещё можно эту модель запихнуть.

Text-to-video от Google

Google теперь умеет генерировать небольшие видео по входному тексту, при этом сохраняя временную когерентность (то есть кадры переходят друг в друга очень плавно). Правда ИИ с небольшим «костылём», если так вообще можно сказать. Сначала генерируется видео в очень плохом разрешении, а затем с помощью апскейлинга дотягивается до 720p.

Waifu-diffusion (создай свою аниме-девочку)

Может кто-то из вас уже видел результаты работы stable diffusion моделей, которые рисуют красивых девушек. Так вот, таких моделей несколько, можно использовать Stable Diffusion, можно использовать его вариацию Waifu Diffusion (по названию можете понять, на чём конкретно ее обучали), Dreambooth и NovelAI.

Анимирование изображений от Google (StyleGAN)

StyleGAN умеет хорошо анимировать различные картинки по нашему запросу того, что должно происходить, причём с хорошей темпоральной когерентностью (от кадра к кадру детали объекта почти не меняются), лучше чем предыдущие text-to-image модели.

Style-трансфер на видео с людьми

Модель с новым подходом может производить стайл-трансфер на видео с реальными людьми, со скоростью от 5 до 10 изображений в секунду, сохраняя темпоральную когерентность (например, при смене кадра волосы не колбасит и они не идут странными узорами).

Спецэффекты на видео с помощью текста от NVIDIA

Новый ИИ от NVIDIA умеет накладывать спецэффекты на видео с помощью всего нескольких предложений. Хотите чтобы пятна на жирафе были из разноцветного стекла? Так и скажите. И вам всё сделают.

Локальное изменение изображений с помощью текста от Google

Новый ИИ от Google под названием Muse умеет изменять части изображений, но теперь вам даже не надо рисовать слой-маску, под которым надо что-то менять. Дали изначальное изображение, написали конечный результат (который должен хоть частично напоминать стартовую точку) и получаем изначальную композицию с изменёнными деталями.

Создание короткометражек по сценарию от Google AI

ИИ от Google под названием Phenaki теперь умеет создавать долгие видео из последовательности строчек сценария, при этом вполне последовательно и с нужными переходами.

От переноса стиля на фотографии, до короткометражек из текста всего за 1.5 года. Прогресс действительно не стоит на месте."'https://tproger.ru/articles/neural-img-and-video/'https://media.tproger.ru/uploads/2023/03/8168677_clips_video_media_film_icon-cover.png'"['https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg', 'https://media.tproger.ru/uploads/2023/03/8168677_clips_video_media_film_icon-cover.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'https://media.tproger.ru/uploads/2021/02/git-cover.png', 'https://media.tproger.ru/uploads/2018/05/python-ides.jpg', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2021/03/iconfinder_Neural_network_2844558-cover.png', 'https://media.tproger.ru/uploads/2023/03/8168677_clips_video_media_film_icon-cover-icon-original.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2019/07/iconfinder-icon-16-cover-1.jpg', 'https://media.tproger.ru/uploads/2021/11/OTR-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""100%px"" viewBox=""0 0 100% 100%""%3E%3C/svg%3E', 'https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c']"
43'F2LTCCWIM'Пишем систему омниканальной рассылки оповещений в Telegram'"Алексей Медведев Главный разработчик отдела автоматизации процессов ИТ

Все мы знаем о рассылках, где нас приглашают что-то купить или дарят бонусные рубли. Они не пишутся и не отправляются в ручном режиме — это долго, дорого и непрактично (особенно, если вы вдруг решили порадовать скидкой сразу миллионы клиентов). Такими сообщениями занимаются системы, которые на основе правил собирают «уникальные» предложения и отправляют их по SMS, на почту или в пуш-уведомлениях.

В статье постараемся разобраться, как устроена система омниканальной рассылки без сложной персонализации и большой базы данных клиентов. Обсудим вводные и посмотрим, как реализовать что-то похожее с отправкой в Telegram (в нашем случае, в банке, мы отправляем информацию по инцидентам). И даже организуем простенькую систему защиты каналов от незваных гостей.

Немного о системе

Для своего, узкого, пользования мы разработали систему омниканальной отправки сообщений. И научили её собирать сообщения в raw-, markdown- и html-форматах для отправки по разным каналам: hpsm, Ivanti, email, Mattermost и Telegram.

Сервис помогает удобно и быстро встраивать уведомления для разных каналов связи в другие системы. Что позволяет в режиме реального времени менять шаблоны сообщений, а также учетные записи и, например, адреса smtp-серверов. Единственная проблема — ещё одна точка отказа для других систем.

Углубляться в систему не будем — лишь выделим интересующий нас API-метод /interact, и назовём его точкой входа. В этот метод мы будем передавать инструкции по сборке и отправке сообщений. Ключевыми параметрами для выполнения запроса будут: список каналов и получателей, набор параметров и «фич», а также нагрузка. Например, такие:

{ ""networks"": { ""email"": { ""to"": [ ""username_or_email"" ] }, ""telegram"": { ""chats"": [88005553535] } }, ""features"": { ""x-reply-auto"": true }, ""payload"": { ""SUBJECT"": ""2+2"", ""DESCRIPTION"": ""="", ""DONE"": ""5"", ""KEBAB"": ""SIUUUUUUUUUU"" } }

В системе мы объявляем несколько уровней:

Система. В нём мы определяем токены для интеграции API, указываем пути доставки с адресами, пароли, триггеры и все необходимое. Триггеры. В них указываются базовые характеристики: имя, ключ доступа, поля, которые необходимо указать в инструкции, их характеристики и модификаторы; способы доставки, которые описывают, по какому каналу, объявленному на уровне системы, необходимо отправить сообщение, и как будет выглядеть само сообщение. Например, поле name имеет тип string, модификатор toUpperCase и так далее.

Финальный API-метод исполнения инструкции отправки выглядит так: /api/v1/trigger_name_or_uid/interact .

Тут может возникнуть вопрос: куда делся первый уровень? Всё просто. Определение системы вшито в токен интеграции API.

Маршрут до оповещения выглядит так: system→ trigger → transport → template . Где transport — канал, по которым мы будем отправлять сообщения, а template — шаблон сообщения по транспорту. На этом моменте мы оставим дальнейшую работу системы под капотом.

Шаблоны и параметры заполнения сообщения

Триггер может включать в себя большой набор каналов доставки. Но не хватает самого сообщения, для которого, в свою очередь, нужны шаблон и параметры заполнения.

Шаблон вручную заполняет оператор системы — для каждого выбранного транспортного узла в триггере. То есть описывает инструмент и параметры отправки сообщения по каналу: Telegram, email, Mattermost и прочим.

Далее мы совмещаем шаблон с параметрами. Для этого используется движок Razor. Упрощенно, код инициализации экземпляра выглядит так:

_engine = new RazorLightEngineBuilder() .UseEmbeddedResourcesProject(typeof(RazorMessageCompilationFeature)) .UseCachingProvider(new RazorMemoryCachingProvider() { Lifetime = TimeSpan.FromMinutes(30) }) .AddDefaultNamespaces(typeof(DateTime).Namespace) .Build(); _engine.Options.DisableEncoding = true;

А метод компиляции сообщения — так

public async Task Handle(TransportContext context, IMessage message, CancellationToken cancellationToken) { var properties = context.Network.Payload.ToExpando(); await Task.WhenAll(CompileSubjectAsync(context, properties, cancellationToken).ContinueWith(m => message.Subject = HttpUtility.HtmlDecode(m.Result)), CompileMessageAsync(context, properties, cancellationToken).ContinueWith(m => message.Body = HttpUtility.HtmlDecode(m.Result))); }

Telegram

Телеграм предоставляет разработчикам несколько способов создать чат-бот и готовые библиотеки для работы с API. Нам понадобится способ Bot API. Это REST, поэтому много новой информации по взаимодействию искать не придётся.

Разработчики Bot API придумали интересный метод организации методов. Они разделили запрос на два части: токен доступа и название метода. Запрос на получение информации о боте в Telegram выглядит так: https://api.telegram.org/bot/getMe . Во всех адресах обращения к API будут меняться лишь названия методов:

/getMe;

/sendMessage;

/getFile и так далее.

Всю информацию по доступным методам можно найти здесь: https://core.telegram.org/bots/api#available-methods.

Регистрация бота в Telegram

Для начала необходимо создать бота:

заходим в приложение и запускаем чат с @BotFather;

отправляем команду /newbot и следуем инструкциям:пишем имя бота;вводим username, который обязательно должен заканчиваться на bot.

Выполнив все шаги, мы получим сообщение об успешном создании бота и токен для работы с ним.

Храните токен в защищённом месте и не публикуйте его вместе с кодом в репозиторий. Если вдруг всё пошло не так, и секретность токена под угрозой, вы можете перевыпустить токен или отключить бота до момента решения вопросов с безопасностью.

Учимся отправлять сообщения в чаты

Для теста подойдёт любой канал, в котором вы являетесь администратором. Для отправки сообщений нам понадобится метод sendMessage.

Объявляем структуру сообщения:

public readonly struct Message { [Required, JsonInclude, JsonPropertyName(""chat_id"")] public readonly string ChatId; [Required, Range(1, 4096), JsonInclude, JsonPropertyName(""text"")] public readonly string Text; public Message(string chatId, string text) { if (string.IsNullOrEmpty(text) || text.Length < 1 || text.Length > 4096) { throw new ArgumentOutOfRangeException(nameof(text), ""Размер сообщения должен удовлетворять диапазону 1 - 4096""); } ChatId = chatId; Text = text; } }

Передаём идентификатор канала и сообщение:

var client = new HttpClient(); client.BaseAddress = new Uri(“https://api.telegram.org/bot<token>/sendMessage”); var message = new Message(88005553535, “мое первое сообщение”) var request = new HttpRequestMessage(); request.Method = HttpMethod.Post; request.Content = new StringContent(JsonSerializer.Serialize(message), Encoding.UTF8, ""application/json""); _ = await client.SendAsync(request, cancellationToken);

Почти все запросы к Bot API будут с типом POST, так как это самый удачный метод для передачи большого набора данных (но можно и GET). Тело запроса на отправку сообщения в канал будет выглядеть так:

{chat_id = 123, text = my text, parse_mode = html}

Поле parse_mode нужно, чтобы регулировать формат текста, выбрать html или markdown-разметку.

В модели Message поле parse_mode не указано для упрощения, но вы можете его добавить и поиграться с html или markdown-разметкой.

Отправлять сообщения пользователям тоже можно, но вот начать переписку с ботом в Telegram должен человек. Дальше надо научиться слушать события.

Слушаем чаты

Чтобы бот умел реагировать на команды, понадобится «сканирование» на обновления. Есть два метода прослушивания обновлений: регулярно ходить в Telegram или предоставлять ему адрес прослушивания на вашем сервере, то есть webhook.

Для реализации веб-хуков в корпоративном контуре нужно обосновать необходимость доступа и согласовать изменения. Это долго и сложно, поэтому мы используем первый вариант и будем получать обновления по методу getUpdates .

В теле запроса мы будем отправлять следующие данные: offset , limit , allowed_updates .

offset

Поле offset самое интересное. Оно обеспечивает последовательное чтение обновлений с сервера. Его магия в том, что если мы не будем указывать его в каждом последующем запросе, то будем всегда получать одни и те же обновления раз за разом. Назовём это поле «ластиком», который стирает все полученные ранее обновления, и предоставляет свежие.

Важно! Для корректного функционирования системы, в запросах getUpdates всегда необходимо указывать — идентификатор последнего полученного обновления. При первом вызове метода у нас его не будет — мы получим его после первого запроса getUpdates. При каждом последующем запуске приложения, что логично, идентификатора обновления снова не будет, вы получите его после первого запроса, конечно же, если в потоке будет хоть одно обновление.

limit

Это лимит обновлений, которые мы можем получить в одном запросе getUpdates . Получать можно от 1 до 100 обновлений за раз. По умолчанию стоит значение 100, поэтому поле можно не указывать, если вы хотите получать максимальное количество обновлений.

allowed_updates

Это поле — массив строк, то есть список типов обновлений, которые мы хотим получить в ответ. Для полного охвата нам будет достаточно: chat_member , message и my_chat_member . Полный список можно посмотреть тут: https://core.telegram.org/bots/api#update.

Вы получите ровно те объекты обновлений, типы которых были указаны в поле allowed_updates . В нашем случае объект может выглядеть так:

{ result = [ { update_id, chat_member }, { update_id, message } ] }

Каждый объект обновления в массиве результата будет включать в себя набор данных, к которому относится обновление. Исходя из них, мы сможем реагировать на сообщения пользователей, получать информацию о вступивших и вышедших пользователях канала.

Верифицируем пользователей

Нам нужно подтверждать легитимность присутствия пользователей в чате. Для этого используем:

таблицу сопоставления логина телеграмм с логином в AD;

статус верификации;

кодовое слово — случайно сгенерированную строку в 1024 символа.

Процесс выглядит так:

Заводим заявку на подключение пользователя к Telegram. В заявке генерируются необходимые данные: запись сопоставления логинов, ключ верификации и так далее. На корпоративную почту отправляется сообщение с инструкцией, как пройти верификацию. Пользователь отправляет секретный ключ через команду /verify в чат с ботом. Мы обрабатываем все обновления с объектом message в ответе. То есть ищем поля message.chat.type, которым эквивалентно значение private. Определяем команду /verify. Подтверждаем верификацию в системе, сохраняем ID пользователя в таблицу сопоставления и отправляем ему письмо об успешной верификации.

Мы решили обойтись без усложнений и не стали регистрировать команды в боте. Но вы можете зарегистрировать их для удобства ваших клиентов.

Приглашаем пользователей в чаты

Сперва нам нужно запросить разблокировку пользователя, даже если он не был заблокирован ранее. Для этого воспользуемся командой unbanChatMember . Как тело запроса передаём поля: chat_id и user_id — и проверяем в поле в коде OK 200.

Далее генерируем ссылку на приглашение методом createChatInviteLink. В теле передаём поля chat_id , expire_date , member_limit = 1 . Лимит нужен, чтобы ограничить количество вошедших по ней пользователей. (все равно неавторизованного пользователя мы забаним????).

Дата «протухания» приглашения передаётся в формате unix (seconds).

Далее отправляем сообщение пользователю со ссылкой на приглашение. Например, «Вам отправлено приглашение на вступление в группу ‘{chat.FriendlyName}’.

{inviteLink.Link}

Приглашение активно до {invite.ExpireDate.ToUniversalTime():dd.MM.yyyy H:mm:ss zzz».

Блокировка неверифицированных пользователей

Для определения нового вошедшего в канал пользователя получаем значение из поля chat_member.member.status . Оно должно быть эквивалентно значению member. Если пользователь есть в системе, и он помечен как верифицированный, то мы игнорируем сообщение. Иначе смотрим на него с презрением и выписываем перманентный бан.

Для блокировки в чате используем метод banChatMember . В тело запроса передаём 2 поля: chat_id и user_id . И пишем пользователю в личку информацию о блокировке c инструкцией, как выйти и зайти правильно.

Что в итоге

Так, мы научили бота Telegram отправлять сообщения, получать обновления, верифицировать, приглашать в чаты и блокировать пользователей. Благодаря этому, нам не нужен оператор Telegram-чатов, который добавлял бы пользователей и сообщения в канал вручную. За все отвечает автоматизированная система, для которой достаточно указать обязательные поля, чтобы она собрала все необходимые варианты сообщений и отправила их в соответствующие каналы."'https://tproger.ru/articles/pishem-sistemu-omnikanalnoj-rassylki-opoveshhenij-v-telegram/'https://media.tproger.ru/uploads/2023/03/3244562_chat_email_envelope_internet_letter_icon-cover.png'"['https://media.tproger.ru/uploads/2023/03/3244562_chat_email_envelope_internet_letter_icon-cover-icon-original.png', 'https://media.tproger.ru/uploads/2023/03/3244562_chat_email_envelope_internet_letter_icon-cover.png', 'https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""90px"" viewBox=""0 0 90 90""%3E%3C/svg%3E', 'https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo.jpg']"
44'91KN3DZ2N'Приём, который поможет вырваться из рутины и работать эффективно'"В жизни много вещей требуют длительных усилий. Будем называть это просто проектами.

Есть проекты по дому, проекты для фана, рабочие проекты, и всякие другие. Некоторые из них вам хочется сделать, некоторые вам не нравятся, но их надо делать (к примеру, какая-нибудь бумажка на разрешение на перепланировку квартиры, ужос сколько беготни).

Ну и в контраст надо представить проекты, которые делаются быстро, одним штурмом, на драйве. С этими проектами как правило нет никаких проблем. Вас посетила муза, кураж, вы сели, посвятили проекту целый день, или ночь, Бум! Все готово.

А вот с длинными проектами все по-другому. Рано или поздно наступает момент, когда стартового драйва уже нет, и вы начинаете забывать зачем его делать. И так как прошло много времени, то вы уже и не помните что там надо было делать, какой следующий шаг. Вот про такие проекты я хочу с вами поделиться небольшим приемом.

Суть приема в коротких 7 минутных микробустах.

Давайте на примере. Я иногда столярничаю. Вот у меня есть проект по деревянному стульчику. Это затяжной проект, и там много этапов, надо принимать решения, надо ездить по магазинам, надо гуглить, ну короче, это прям проект, несмотря на смешной объект.

Был период когда я забросил проект, пару месяцев не занимался им, все стоит на месте, периодически попадает на глаза и тогда возникает неприятное чувство незавершенной работы. Ну, короче, надо его доделать.

Что я делаю? Я решаю для себя, ок, у меня нет драйва его пушить, хочется поиграть в Starcraft, отдохнуть, надо делать много других вещей, но 7 минут у меня всегда найдется. Дальше по шагам:

Я говорю себе «7 минут выделю. Это не развалит мой день, это не сломает график. 7 минут ничему не может помещать. А после этих 7 минут — вернусь в обычное течение жизни» Дальше я представляю чем по проекту я мог бы заняться так, чтобы не думать, не принимать решений, а просто делать руками, выключив мозг. Выбираю 1-2 таких действия. Хорошо бы выбрать именно такой вид деятельности, который можно тупо «делать», не размышляя ни о чем. Дальше я ставлю таймер на 7 минут И тупо занимаюсь проектом пока не зазвонит таймер. В эти 7 минут я не торможу, не туплю, не переживаю ни о чем другом, не заглядываю вперед, не оглядываюсь, просто работаю. Когда таймер срабатывает — насильно останавливаю любые работы над этим проектом, даже если появилась инерция двигаться дальше. Если есть что-то, что поможет мне вернуться в проект в следующий раз, я это выполняю, но очень скупо. Например — я могу разложить инструменты в порядке, который мне напомнит о чем-то, или проставляю номера на деталях 1-2-3.

Почему прием работает? Я думаю так:

7 минут всегда найдутся. Ради 7 минут я не буду ломать голову над сложными вопросами:

А могу ли я это время куда-то поэффективнее потратить?

Может быть есть что-то более важное и срочное?

А надо ли вообще его делать?

Ничего не выйдет, потом снова работа зависнет.

Хочу ли я вообще это доделывать? (и такой голова набок, прислушиваюсь к своему животу, как будто живот мне скажет «Хочу!»)

Ну или какие-нибудь другие умные мысли.

После этого микро-пуша в 7 минут, проект преодолевает трение покоя. Когда пианино покатилось — вы прикладываете уже меньшие усилия на поддержание этого движения.

Насильно останавливая свои действия после звонка таймера, вы создаете ожидание, как недослушанная история. Это ожидание притягивает вас заняться проектом снова в следующий раз. Так что никогда не доделывайте дело до конца, не допиливайте срез, не дописывайте функцию, пусть приложение в следующий раз не запустится. Запятые — вот что останавливает длинные проекты.

Так я двигаю проекты, мне кажется это работает, может быть и вам пригодится."'https://tproger.ru/articles/malenkij-priem-pomogayushhij-mne-v-rutine/'https://media.tproger.ru/uploads/2023/03/6380212_files_folder_office_work_icon-cover-1.png'"['https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2021/02/iconfinder-icon-9-cover.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'https://media.tproger.ru/uploads/2015/03/android-development.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2018/07/learningPython.jpg', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2023/03/6380212_files_folder_office_work_icon-cover-1.png', 'https://media.tproger.ru/uploads/2021/05/iconfinder-icon-cover-2.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c', 'https://media.tproger.ru/uploads/2023/03/6380212_files_folder_office_work_icon-cover-icon-1-original.png']"
45'D0JZAKSKJ'Как заставить ИИ-существ развиваться. История маленькой ошибки'"Ничего непонятно. Примерно весной прошлого года в проекте был прорыв, но с тех пор, ничего не поменялось, существа по-прежнему вели себя странно.

Даже в последнее время появились сомнения по поводу того что вообще какая-то сходимость у алгоритма достижима. Ну, как бы, сложность задачи понятная, не запредельная, и я ожидал что рано или поздно сетки обязаны обучиться бежать к пище.

Но если наблюдать долго, можно увидеть, что в целом они стремятся двигаться к пище, но часто в простейшей ситуации, существо выбирает отвернуться от пищи и двинуться куда-то в сторону.

Это выглядело как надкушенный пирог, как половина победы.

Что я перепробовал, чтобы добиться более предсказуемого поведения:

Крутил настройки мира: вероятность мутации веса, силу мутации, обилие пищи и т.д. Я увеличил поле для существ, добавил преграды на карте. Пробовал заменять самописную полносвязную сетку — на аналог на базе PyTorch. Расширил и усложнил инспектор популяции, чтобы видеть что внутри происходит. Собрал отдельностоящее приложение, которое загружает дамп и тестирует все существа из дампа в маленьком изолированном эксперименте.

Пока крутил настройки, затраты энергии на перемещение и поворот, получились такие ждуны, которые сидят на месте и ждут еду, было забавно. Это просто настройки мира такие, что двигаться и крутиться — дорого в смысле затрат энергии, вот и сидят на месте.

Ничего не помогало, начал подозревать, что весов в сетке слишком много, для того, чтобы в разумные сроки появилась сходимость. Смущало только то, что существа очень быстро научались избегать столкновений со стенами.

Но при этом, долго не получалось добиться твердой сходимости к целенаправленному движению к пище. Ведь чем стены от пищи отличаются? По сути только знаком. Ладно, какие были возможные причины:

Может быть существа «не видят пищу». Та часть весов, которые отвечают за пищу, не мутируют. Какие-то важные веса задираются вверх до больших значений, откуда уже сползти не могут («паралич сети»). Существа достигают какого-то состояния полу-обученности, которое полностью их устраивает. Другими словами, отбору достаточно, чтобы существа ну с какой-то вероятностью находили что-то покушать, и на этом эволюция останавливалась.

Я перестал думать, и пошел тем путем, который в тот момент видел. Видимый путь заключался в том, чтобы поглубже заглянуть в то, что там внутри происходит.

Изначально у меня было окно инспектора, но там был только перечень существ и при клике на существо — печатались их веса. Начал добавлять функционал в этот инспектор.

График динамики энергии особи

Для начала я добавил массив энергии существа, энергия логировалась каждый цикл. Когда существо питалось — энергия увеличивалась, когда существо бегало и поворачивалось — энергия постепенно падала.







Динамика энергии Динамика энергии

График много инсайтов он не дал, у всех существ он разный, зависит от того, насколько удачливо было существо. Но в целом это было то, что я ожидал.







Динамика энергии, как задумывалась Динамика энергии, как задумывалась

Я был бы рад увидеть, что энергия ведет себя как-то странно, это означало бы что я нашел ошибку, но увы.

Потом добавил массив с событиями в жизни существа: «поел пищу», «столкновение со стеной», «размножение». Этот массив вывел на том-же графике в виде меток по горизонтальной оси — желтые, зеленые, красные.

Вывел на экран массивы весов

Далее добавил вывод весов, всех слоев, включая тот вес, который для сдвига сигмоиды по вертикали.







Вывод весов нейронной сети Вывод весов нейронной сети

Надо было как-то кодировать вес в виде цвета, сделал так: чем ближе к нуля — тем темнее/чернее. Чем больше значение веса — тем зеленее. Чем меньше отрицательное значение — тем краснее. Веса не нормированные, так что пришлось сделать так: все что выше 1.0 — ярко зеленым, меньше «-1» — ярко красным. Тупенько, но пока для наших задач подходит.

За этими картинками, кстати, было интересно наблюдать. В какой-то момент обнаруживалось, что популяция сузилась до 2-3 сильно отличающихся эм.. скажем, «геномов», которые имеют, по всей видимости одинаковую приспособленность. Особи внутри генома отличаются незначительно: плюс-минус 5-10 весов. А сами геномы отличаются между собой кардинально. Ну… практически разные виды =) Правда потом, все-же остался один геном-победитель с незначительной дивергенцией по популяции.

С этим функционалом надо будет еще поиграть — тут хороший потенциал поизучать именно как изменяется набор приспособленых геномов, позамерять скорость схождения, возможность образования новых наборов особей с сильно отличным набором весов, и т.д.

Еще хочу попробовать оценить скорость схождения, если на старте веса всех существ будут одинаковые и равны 0.1

Чистый эксперимент

Картинки дали чуть заглянуть внутрь отбора, но не ответили на вопрос, почему нет сходимости. Энергия менялась как и ожидалось, веса мутировали вроде по всей площади. Надо было копать глубже.

Я собрал другое приложение, на базе основного. Это второе приложение делало следующее: загружала дамп с популяцией и ставило чистый эксперимент над каждым отдельно взятым существом.

Эксперимент был такой: генерировалась пустая карта, размером примерно с область которое существо может видеть. Существо устанавливалось слева, мордой направо: угол=0, скорость устанавливалась в 0.1. Дальше поочередно в каждую клетку карты устанавливалась пища, и запускался один прогон. Прогон считался проваленным «0», если существо достигала любого края карты либо если оно теряло пищу из виду, например — отворачивалось (так как у существ нет памяти, то это имеет смысл), или если изначально пища была установлена вне поля зрения. Пока существо видит пищу — оно имеет право шагнуть еще раз. Если существо в итоге добиралась до установленной пищи, то эта клетка засчитывалась как «1». Итого, прогон завершался либо удачно «1», либо провально «0».

Такой прогон повторялся для всех клеток на карте, итого, получался двумерный массив из «0» и «1».

Предположение было такое, что на первые поколения, еще необученные — будут игнорировать пищу и соответственно почти вся карта будет заполнена нулями. А по мере увеличения приспособленности — существа должны все уверенее настигать пищу в любой точке, которая находится в поле их зрения.







До обучения, после обучения До обучения, после обучения

А что получилось в итоге?







Примерно такая картина была на 180-м поколении, это практически 2 дня симуляции Примерно такая картина была на 180-м поколении, это практически 2 дня симуляции

То есть эксперимент намекал, что существа не обучаются. Плюс-минус похожая картина была у каждого существа в популяции.

Вывел на печать что видит существо в процессе чистого эксперимента

В воскресенье сидел чуть оформлял код, у меня было всего минут 30, решил просто посмотреть что видит существо на каждом шаге эксперимента, добавил одну строчку и увидел вот что:







Вот этих троек в эксперименте не должно было быть Вот этих троек в эксперименте не должно было быть

Тройки тут означают «существо», двойки — «пищу», единицы, если бы они были — «стены». Видно, что откуда-то существо видит тройки, хотя в эксперименте на постановочной карте не было никаких других существ, кроме него самого. Так что получалось, оно видит себя, свое тело. Координаты существа — вещественные числа, шаг для raytrace алгоритма я установил 0.9, и получается, что в какой-то момент существо действительно может видеть только свое тело.







Raytrace с шагом 0.9 иногда может ступать в ту-же самую клетку, где существо и находится Raytrace с шагом 0.9 иногда может ступать в ту-же самую клетку, где существо и находится

Так что я raytrace чуть сдвинул вперед, стартовал не с нуля, а с 0.2, и всё сошлось, причем мгновенно, я даже не обучал сетки заново.

def look(self , mappointer): step = 0.9 # шаг перемещения взгляда (для raycast - дистанция на котороую двигаем вперед указатель) vision = [] for a in range(self.resolution): adelta = self.angleofview/2 - a*self.anglestep d = 0.2 # <----- тут с прошлого года скрывалась ошибка, было 0, надо 0.2 cur_vision = 0 while d < self.viewdistance: d += step x = self.x + d*math.cos(self.angle+adelta) y = self.y + d*math.sin(self.angle+adelta) #pygame.draw.rect(screen, WHITE, pygame.Rect(int(x)*CELLSIZE-1, int(y)*CELLSIZE-1, 2, 2)) try: dot = mappointer[int(y)][int(x)] except IndexError: cur_vision = 0 break if dot > 0: cur_vision = dot break vision.append(cur_vision) # Разложим зрение на цветовые каналы visionRed = [] visionGreen = [] visionBlue = [] dotColor = []

Результаты







Поколение 1 Поколение 1







Поколение 2 Поколение 2







Поколение 7 Поколение 7







Поколение 15 Поколение 15







Поколение 260 Поколение 260

Так это выглядело пошагово:

Вот что записал в дневнике тот момент:

Омг, я проверил. Просто поправил 0.0 на 0.2 в функции look() и

загрузил дамп 150-го поколения. Ни одного существа, которое бы

действовало странно не увидел, долго наблюдал, пытался найти

странности. кое где, крайне редко, пару раз заметил, но я списываю их на

то что возможно это были молодые особи с вредной мутацией. Наблюдал

забавные ситуации, когда несколько существ бегут к одному кусочку еды

наперегонки. Или когда одно существо рядом с другим и постоянно на пару

шагов позади, а так как одно видит тоже что и первое существо почти, то

оно продолжает гоняться за ускользающей едой, а первое существо все

поедает, опреежая второе на несколько шагов.

В общем, да, это прорыв, потому что приложение снова ведет себя понятно. Быстро обучается в пределах 5-7 поколений. Избегает столкновений со стенами, если видит пищу — корректирует курс и скорость, чтобы добраться до пищи. Бинго! Отсюда можно смело ставить новые задачи.

В эксперименте все же есть изредка дыры. И пока не уверен почему, откуда эти дыры. Надо разбираться.

Есть положительный момент в этой ситуации. Она наглядно показывает устойчивость системы к шуму. Шум в виде искажения зрения — не препятствует целенаправленному обучению. Так как этот шум — имеет рандомный безсистемный характер. Щас переформулирую, популяция обученных существ, после 260-го поколения, жило и обучалась с неприятными помехами (регулярно существа видели свое тело, оно какбы загораживало взгляд). И несмотря на это, существа обучились перемещаться в направлении пищи. Это стало очевидно, когда я сместил raycast чуть вперед, и экспериментальные прогоны сразу показали ожидаемые результаты, без какого-то либо отбора, без обучения, на те-же весах. Это дает надежду на то, что обученные сетки и в дальнейшем будут усточивы к всякого рода рандомному шуму.

Для развлечения, вот видео с прошлого года, до того как увеличил размеры мира, не знаю, какое тут поколение, но плюс-минус разумное поведение, по крайней мере стен избегают. Индикаторы над головой — модуль скорости, и красная полоска — уровень энергии."'https://tproger.ru/articles/istoriya-ob-ocherednoj-malenkoj-owibke/'https://media.tproger.ru/uploads/2023/03/90d6c035-efae-4b63-9159-a0e84f7d9687-cover.png'"['https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg', 'https://media.tproger.ru/uploads/2023/03/9b06bfd1-5c71-4b1b-bfed-a5e5f00aa831.png', 'https://media.tproger.ru/uploads/2023/03/8e94a048-11ed-460f-af98-2ad098fe7e43.png', 'https://media.tproger.ru/uploads/2023/03/8ae6687d-2db8-4cdb-92c2-16619e3de657.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2023/03/57f7d05d-bbc1-4a69-80c5-be6ecf25d8f6-autoconverted.jpeg', 'https://media.tproger.ru/uploads/2023/03/9ab40da7-843c-407e-bcd5-9bc64d1edd77.png', 'https://media.tproger.ru/uploads/2023/03/3e6a2183-612b-4163-aff3-f00576717830-autoconverted.jpeg', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big-32x32.png', 'https://media.tproger.ru/uploads/2023/03/25b91b7a-1416-45ff-be5e-d9c8ec958fde.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2022/12/4271720_anime_automaton_cartoons_gundam_gundam-0080_icon-cover.png', 'https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'https://media.tproger.ru/uploads/2023/03/cc119dd2-f928-4d7f-8672-9ef22167a388.png', 'https://media.tproger.ru/uploads/2021/03/nn-icon-cover.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2023/03/0402ea99-6147-4a93-a5c9-042d9d063e1e.png', 'https://media.tproger.ru/uploads/2023/03/90d6c035-efae-4b63-9159-a0e84f7d9687-cover-icon-original.png', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2023/03/90d6c035-efae-4b63-9159-a0e84f7d9687-cover.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2016/01/NW_RD.jpg', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'https://media.tproger.ru/uploads/2021/03/iconfinder_Neural_network_2844558-cover.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2023/03/8ee1d90a-502a-40e6-a184-ca34e50fb536.png', 'https://media.tproger.ru/uploads/2023/03/237ff7b9-74bc-4d12-9803-fd24f85e13a3.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2023/03/874d073e-1991-4f8f-9ca4-9a3646731a92.png', 'https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c']"
46'IBRPQ95I0'Open Assitant &#8212; разговорный ИИ для каждого'"Stable Diffusion дал миру новые возможность создавать невероятные картины и фотографии, мы хотим дать миру возможность общаться с ИИ.

Учитывая успех ChatGPT, было логично предположить, что разработкой аналогичной модели скоро займутся в Open Source пространстве, как это произошло с DALLE и Stable Diffusion. Так на свет и появился новый проект — Open Assistant.

В этой статье мы не будем обсуждать «гонку нейросетей», и уж тем более не затронем «монополию на языковые модели», в которой обвиняют OpenAI (хотя бы потому что первое заявление исключает другое).

Причины создания

Если вы пользовались ChatGPT, то вы наверняка могли заметить, что он мог выдавать не такую актуальную информацию, как хотелось бы.

За прошедшее время информация могла просто обесцениться, а то и вовсе стать ложной.

Для того, чтобы искоренить подобный нежелательный контент, разработчики OpenAI накладывают жесткие ограничения на то, что способна выводить модель (конечно, эти ограничения можно обойти, если очень сильно попросить).

Подобная цензура, отсутствие (на данный момент) fine-tuning’а под необходимые задачи разработчиков, отсутствие прямого доступа в некоторых регионов, а также отсутствие открытого кода для изменения под свои нужды — все эти (и не только) причины побудили LAION-AI и разработчиков-энтузиастов взяться за новый проект по созданию аналога, который будет даже лучше, поскольку будет иметь доступ к любым внешним данным.

Мы не собираемся останавливаться на репликации ChatGPT, но произвести революцию языковых моделей. Мы хотим создать умного ассистента будущего, способного не только писать электронные письма и резюме, но и выполнять осмысленную работу, использовать API, динамически исследовать информацию и многое другое, с возможностью персонализации и расширения для каждого.

Я в деле, куда работать?

Open Assistant на данном моменте находится на раннем этапе разработки со сбором данных.

На данный момент есть несколько типов заданий, не связанных с программированием, которые вы можете найти на сайте Open Assistant (возможны изменения):

Ответить как пользователь или создать изначальный запрос — задайте вопрос или просто пообщайтесь с нейросетью, чтобы она научилась отвечать на подобные запросы. Ответить как ассистент — отвечайте на запросы пользователей, как это делал бы ассистент в вашем представлении (не используйте ответы ChatGPT или других коммерческих моделей, поскольку это нарушает политику соглашения) Оценить сообщение пользователя — является ли сообщение спамом, нарушает ли что-то и т.п. Оценить ответ ассистента — правильно ли ответил ассистент на тот или иной запрос. Ранжирование ответов ассистента по качеству.

А если вы разбираетесь в сфере машинного обучения, big-data или в схожих областях, то более подробную информацию вы можете найти на GitHub LAION-AI."'https://tproger.ru/articles/open-assitant-razgovornyj-ii-dlya-kazhdogo/'https://media.tproger.ru/uploads/2023/03/36eaac97-3e0f-42d5-bee1-d88630f0fdf5-cover.png'"['https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'https://media.tproger.ru/uploads/2023/03/f5d5d74c-6beb-4343-87f9-b6ac379ec7f7.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2022/12/4271720_anime_automaton_cartoons_gundam_gundam-0080_icon-cover.png', 'https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'https://media.tproger.ru/uploads/2021/03/nn-icon-cover.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2023/03/d42759e4-a382-4d77-a8b6-e8104db8462a.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2016/01/NW_RD.jpg', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'https://media.tproger.ru/uploads/2021/03/iconfinder_Neural_network_2844558-cover.png', 'https://media.tproger.ru/uploads/2023/03/36eaac97-3e0f-42d5-bee1-d88630f0fdf5-cover.png', 'https://media.tproger.ru/uploads/2023/03/36eaac97-3e0f-42d5-bee1-d88630f0fdf5-cover-icon-original.png', 'https://media.tproger.ru/uploads/2023/03/3be04910-fb6a-4a9c-9b8e-65dd64f7bfe0.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2023/03/b500b589-2a0d-4a9e-a8e0-44395cb46688.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c']"
47'BVBX956CA'В South Park вышла серия «Deep Learning», посвящённая ChatGPT'"В серии мультфильма есть многие громкие истории, которые обсуждались в последнее время: использование нейросетей в личных переписках, подготовка домашних работ и даже запрет на использование нейросетей в учебных заведениях.

ChatGPT — новая языковая модель на основе GPT 3.5. Она может очень натурально поддерживать разговоры, вести себя как настоящий Linux-терминал, проверять код на ошибки, составлять документацию, дописывать код и даже генерировать рабочие скрипты по запросу с нуля.

Например, мы уже рассказывали, как блогер заставил ChatGPT решать домашние задания. Он даже подключил 3D-принтер, чтобы натурально переписывать решение в тетрадь.

А вот реальная история, как студент из Москвы получил диплом за работу, написанную с помощью нейросети.

А вот так ChatGPT выглядит в мультфильме.

Также кто-то оставил пасхалку в википедии, где ChatGPT указан как соавтор серии.

Но самое интересное, что серия буквально превратилась в практический курс по использованию ChatGPT для людей, далёких от технологий.

С одной стороны, это лишний раз доказывает, что нейросети плотно входят в нашу жизнь. А с другой — ещё больше популяризирует технологию, и в особенности ChatGPT."'https://tproger.ru/articles/v-south-park-vywla-seriya-deep-learning-posvyashhyonnaya-chatgpt/'https://media.tproger.ru/uploads/2023/03/75f4b68b-632f-4d46-b047-febd7feee0ac-cover.png'"['https://media.tproger.ru/uploads/2023/03/75f4b68b-632f-4d46-b047-febd7feee0ac-cover.png', 'https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2023/03/12e79d4b-5002-46dd-845a-8386f82b0cf9.png', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://media.tproger.ru/uploads/2022/12/4271720_anime_automaton_cartoons_gundam_gundam-0080_icon-cover.png', 'https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'https://media.tproger.ru/uploads/2021/03/nn-icon-cover.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://media.tproger.ru/uploads/2023/03/5196ac1e-19f9-4846-a2f7-7e1f05ead02d.png', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2016/01/NW_RD.jpg', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'https://media.tproger.ru/uploads/2021/03/iconfinder_Neural_network_2844558-cover.png', 'https://media.tproger.ru/uploads/2023/03/ae12d2a5-3314-40b0-b317-2886fbc8aedc.png', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2023/03/75f4b68b-632f-4d46-b047-febd7feee0ac-cover-icon-original.png', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c']"
48'LQ27C59YR'Что вы делали на этой неделе? Пост хвастовства за 3-10 марта'"Что вы делали на этой неделе? Пост хвастовства за 3-10 марта

Предлагаем делиться в комментариях под этой записью, над чем вы

работали на этой неделе, ведь нет ничего интереснее, чем задачи коллег!

Вот, чем вы занимались на прошлой неделе.

Не важно, разработчик вы или тестировщик, деврел или эйчар. Расскажите, какие задачи вы героически решили, и делитесь успехами.

Кидайте всё, чем хочется похвастаться: текст, скриншоты кода и даже ссылочки на видео.

Не забывайте про NDA: не указывайте названия компании или деликатные частности.

Итак, чем вы похвастаетесь на этой неделе?"'https://tproger.ru/articles/chto-vy-delali-na-etoj-nedele-post-hvastovstva-za-3-10-marta/'https://media.tproger.ru/uploads/2023/03/e2afbf3d-3788-418d-95ca-7d64e1abe917-cover.png'"['https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://media.tproger.ru/uploads/2020/03/hent-AI-changed.jpg', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'https://media.tproger.ru/uploads/2020/07/iconfinder-icon-48-cover.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'https://media.tproger.ru/uploads/2022/07/logo_avatarki-32x32.png', 'https://media.tproger.ru/uploads/2023/03/e2afbf3d-3788-418d-95ca-7d64e1abe917-cover.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2023/03/e2afbf3d-3788-418d-95ca-7d64e1abe917-cover-icon-original.png', 'https://media.tproger.ru/uploads/2021/05/iconfinder-icon-cover-2.png', 'https://media.tproger.ru/uploads/2021/11/OTR-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2023/03/1508f13f-b88d-43a4-9f0c-df0085c9645b.jpeg', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://media.tproger.ru/uploads/2020/08/iconfinder_17_1280977-cover-3.png', 'https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c']"
49'ORWRR1N93'Хакеры взломали «СберСпасибо»'"В сети оказалась база, в которой содержатся несколько миллионов строк с личными данными пользователей бонусной программы: номера телефонов, адреса электронной почты, даты рождения, хэши карт и прочее.

В слитом архиве два файла:

В первом — 6,3 млн строк, содержащие номера телефонов, адреса электронной почты, даты рождения, номера телефонов, даты регистрации и хэши карт с 1 апреля 2017 по 7 февраля 2022 года.

Второй файл содержит 48,3 млн строк. В нём есть email-адреса и номера телефонов.

Насколько можно доверять данным об утечке

Информацию о «сливе» данных подтвердил Telegram-канал «Утечки информации». В самом Сбере информацию пока проверяют.

Но уже сейчас сообщениям об утечке можно можно доверять больше обычного. Хакеры, которые выложили базу, уже успешно «сливали» данные «СберПрава», «СберЛогистики» и многих других сервисов.

Чем опасна утечка

Не смотря на то, что номера банковских карт хранятся в виде хеша, из-за использования устаревшей функции хеширования SHA1, можно «восстановить» их реальные значения прямым перебором всех цифр.

Данные из утечек также часто используют для социальной инженерии. Мошенники могут рассказать информацию, которой, казалось бы, никто не может знать. Пользователи больше доверяют злоумышленникам, если те называют, например, даты рождения, номера карт и телефонов, адреса почты или последние транзакции."'https://tproger.ru/articles/hakery-vzlomali-sberspasibo/'https://media.tproger.ru/uploads/2023/03/3605587_anonymous_cyber_hacker_spy_spyware_icon-cover.png'"['https://tproger.ru/wp-content/themes/gecko/assets/img/go-new-version-site.svg', 'https://media.tproger.ru/uploads/2019/08/logo-krok-90x90.png', 'https://media.tproger.ru/uploads/2022/04/prog_point-1.png', 'https://media.tproger.ru/uploads/2023/03/3605587_anonymous_cyber_hacker_spy_spyware_icon-cover.png', 'https://lh3.googleusercontent.com/a/AGNmyxZFBdaEhxoXbIuON8mTnvSu-XexiUng9dXCLpWThA=s96-c', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-90x90.png', 'https://media.tproger.ru/uploads/2021/09/2575567_anonymous_hacker_malware_online_private_icon-cover.png', 'https://media.tproger.ru/uploads/2022/04/prog_tools-1.png', 'https://media.tproger.ru/uploads/2017/04/tp_circle_big.png', 'https://media.tproger.ru/uploads/2023/03/Frame-1-1-32x32.png', 'https://lh3.googleusercontent.com/a/AGNmyxbyHOEWKkBPlKvgtB4FFR_i6ZcZF8tAh7c6i82V=s96-c', 'https://media.tproger.ru/uploads/2023/01/4682416_code_data_emm_leak_mdm_icon-cover-1.png', 'https://media.tproger.ru/uploads/2022/01/Avatar_kvadrat_mts-Budu_1000h1000-32x32.png', 'https://media.tproger.ru/uploads/2020/06/nid-71341-90x90.jpg', 'https://media.tproger.ru/uploads/2022/04/tproger_web-1.png', 'https://media.tproger.ru/uploads/2021/03/iconfinder-icon-22-cover.png', 'https://media.tproger.ru/uploads/2022/07/Renessans-logo-32x32.jpg', 'data:image/svg+xml,%3Csvg xmlns=""http://www.w3.org/2000/svg"" width=""24px"" viewBox=""0 0 24 24""%3E%3C/svg%3E', 'https://media.tproger.ru/uploads/2022/04/zen_of_python-1.png', 'https://media.tproger.ru/uploads/2020/12/pentest-roadmap-cover-1.png', 'https://media.tproger.ru/uploads/2019/08/logo-krok-32x32.png', 'https://media.tproger.ru/uploads/2023/03/e32daa4f-7a4b-45da-95db-d8271c249a67.jpg', 'https://media.tproger.ru/uploads/2021/11/OTR-32x32.png', 'https://media.tproger.ru/uploads/2022/04/a_cup_of_java-1.png', 'https://media.tproger.ru/uploads/2020/06/logo_640x640_tilda18137091-90x90.png', 'https://mc.yandex.ru/watch/27485085', 'https://lh3.googleusercontent.com/a/AGNmyxZuHh_i386vk8ihP0rxmM4dcKyxkhSDBtnA5EE4YA=s96-c', 'https://media.tproger.ru/uploads/2023/03/3605587_anonymous_cyber_hacker_spy_spyware_icon-cover-icon-original.png']"
